


Gadgets
=======


0x000000000040ff6d: adc ah, bh; ret; 
0x000000000045db02: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045db57: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000470e40: adc al, 0; add byte ptr [rax], al; leave; ret; 
0x0000000000417035: adc al, 0; add byte ptr [rax], al; syscall; 
0x0000000000412471: adc al, 0x11; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000430959: adc al, 0x16; sub eax, edx; ret; 
0x0000000000431920: adc al, 0x16; test r8d, r8d; je 0x31928; xchg edx, eax; sub eax, edx; ret; 
0x00000000004354a5: adc al, 0x16; test r8d, r8d; je 0x354ad; xchg edx, eax; sub eax, edx; ret; 
0x0000000000411401: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11443; leave; ret; 
0x000000000041191d: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1193d; leave; ret; 
0x0000000000411d35: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11d95; leave; ret; 
0x00000000004123ed: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x123f7; leave; ret; 
0x0000000000429780: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x297fa; leave; ret; 
0x0000000000438675: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x38723; leave; ret; 
0x0000000000438841: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3888b; leave; ret; 
0x00000000004388d6: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3891b; leave; ret; 
0x0000000000454920: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5492a; leave; ret; 
0x0000000000461db8: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61dfb; leave; ret; 
0x0000000000461f7d: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61f87; leave; ret; 
0x0000000000462096: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x620bc; leave; ret; 
0x00000000004622e8: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6230b; leave; ret; 
0x0000000000462387: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6239c; leave; ret; 
0x0000000000462417: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6242c; leave; ret; 
0x00000000004624f3: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x625b7; leave; ret; 
0x000000000046260e: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6263c; leave; ret; 
0x0000000000467c09: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x67c40; leave; ret; 
0x000000000046936c: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69376; leave; ret; 
0x000000000046df0f: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6df19; leave; ret; 
0x000000000046dff1: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6dffb; leave; ret; 
0x000000000046e061: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6e06b; leave; ret; 
0x000000000046e159: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6e163; leave; ret; 
0x000000000046e1bd: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6e1c7; leave; ret; 
0x000000000046e606: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6e619; leave; ret; 
0x00000000004705d1: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x705e5; leave; ret; 
0x00000000004706b6: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x706c0; leave; ret; 
0x00000000004118f3: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 8], rdx; lea rdx, [rbp - 0x1010]; syscall; 
0x0000000000440e58: adc al, 0x35; cld; jmp qword ptr [rdi - 0x18]; 
0x00000000004179c6: adc al, 0x36; lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004787a2: adc al, 0x45; xor edx, edx; mov eax, r13d; syscall; 
0x000000000042d720: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x0000000000473f66: adc al, 0x48; lea edx, [rip + 0x391a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x00000000004584c3: adc al, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000417a10: adc al, 0x8a; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004179d5: adc al, 0x8a; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004179ca: adc al, 0x90; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000456599: adc al, 0x90; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x0000000000456561: adc al, 0x90; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000045eff0: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000045da1e: adc al, 0x91; sub eax, edx; ret; 
0x0000000000430ac3: adc al, 0xa; sub eax, edx; ret; 
0x0000000000412462: adc al, 0xbf; lea rcx, [rip + 0x946f5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000475188: adc al, 0xc7; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x0000000000475055: adc al, 0xc7; mov rdi, qword ptr [rbp - 0x850]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x000000000044ffb1: adc al, 0xc9; ret; 
0x0000000000448cb8: adc al, 0xe7; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48cc5; call rax; 
0x000000000040d8d8: adc al, 0xe; cmp rdi, rdx; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045da11: adc al, 0xe; lea rcx, [rip + 0x27966]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000430ce1: adc al, 0xe; sub eax, edx; ret; 
0x0000000000473fd2: adc al, 0xf7; ret; 
0x000000000044915c: adc al, 0xf7; test rdx, rdx; je 0x49165; call rdx; 
0x000000000042bee1: adc al, 0xf; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000040ff66: adc al, bh; ret; 
0x000000000042cbfd: adc al, byte ptr [rbp - 0x3af88b2e]; stc; jle 0x2cbc7; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x00000000004251dd: adc al, byte ptr [rbx - 0x76a2fe18]; add eax, 0x87a8c; ret; 
0x000000000046f8ab: adc al, byte ptr [rcx]; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; jmp qword ptr [rdi - 0x18]; 
0x0000000000462f9b: adc al, ch; jmp rax; 
0x000000000040f2e7: adc al, dh; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000478acb: adc al, dh; xadd dword ptr [rdi], eax; cmp eax, 3; je 0x78ae0; ret; 
0x000000000040ff65: adc al, r15b; ret; 
0x00000000004602a6: adc ax, 0; cmove rax, rdx; ret; 
0x0000000000413321: adc bh, bh; jmp qword ptr [rsi + 0x66]; 
0x000000000040ff4d: adc bh, bh; ret; 
0x0000000000450022: adc bh, byte ptr [rax + 1]; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000041835d: adc bl, byte ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x00000000004651f6: adc bl, ch; jge 0x65243; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000042d6f6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000042d716: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045fd36: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000045fd26: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000042d777: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d797: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdb7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd97: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d6b7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcf7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042d878: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000045fe98: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000470c46: adc bl, dh; movups xmm0, xmmword ptr [rip + 0xa3b9]; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x000000000042d6f5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000042d715: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045fd35: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000045fd25: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000042d776: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d796: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdb6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd96: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d6b6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcf6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000045001c: adc byte ptr [r10 + 0x10], r14b; movsx edx, byte ptr [rdx]; mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x0000000000423ea1: adc byte ptr [r11 + 0x3b], sil; movzx eax, byte ptr [rax]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000466fbb: adc byte ptr [r11 + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000423e7a: adc byte ptr [r11 + 0xa], r14b; movzx eax, byte ptr [rax]; ret; 
0x000000000042badf: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000468a2f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000040a6a4: adc byte ptr [r15], al; add al, ch; ret; 
0x0000000000426896: adc byte ptr [r15], cl; adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041039d: adc byte ptr [r15], r9b; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e240: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e7f3: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000045851a: adc byte ptr [r15], r9b; adc dword ptr [rdi], eax; ret; 
0x0000000000458506: adc byte ptr [r8 + 0x39], r9b; ret 0x474; 
0x0000000000457cca: adc byte ptr [r8 + 1], r9b; ret; 
0x000000000046dde2: adc byte ptr [r8 - 0x75], cl; pop rbp; clc; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000454af9: adc byte ptr [r8 - 0x77], r9b; ja 0x54b27; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000428043: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x0000000000425c10: adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000043c454: adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000043c4cb: adc byte ptr [r9 + 3], cl; add al, 0x24; add r14, r15; test r11d, r11d; jne 0x3c4db; call rax; 
0x000000000043cb70: adc byte ptr [r9 + 3], cl; add al, 0x24; test edx, edx; jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d410: adc byte ptr [r9 + 3], cl; add al, 0x24; test r10d, r10d; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x0000000000457bfe: adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x0000000000458507: adc byte ptr [rax + 0x39], cl; ret 0x474; 
0x000000000042803b: adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x00000000004082ff: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000046c774: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x000000000042db24: adc byte ptr [rax + 1], cl; clc; xtest; jne 0x2db31; vzeroupper; ret; 
0x0000000000457ccb: adc byte ptr [rax + 1], cl; ret; 
0x0000000000458a98: adc byte ptr [rax - 0x39], cl; add eax, 0x53e44; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046792a: adc byte ptr [rax - 0x73], cl; adc eax, 0x14e; lea rax, [rip + 7]; cmove rax, rdx; ret; 
0x0000000000459b2a: adc byte ptr [rax - 0x73], cl; adc eax, 0x650e; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000476b77: adc byte ptr [rax - 0x73], cl; fsubr st(0); jmp rcx; 
0x000000000046641c: adc byte ptr [rax - 0x73], cl; jg 0x66411; jmp 0x66496; shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046dde3: adc byte ptr [rax - 0x75], cl; pop rbp; clc; mov qword ptr [rax], rdi; leave; ret; 
0x000000000046de67: adc byte ptr [rax - 0x75], cl; pop rbp; clc; mov qword ptr [rdx], rax; leave; ret; 
0x0000000000439413: adc byte ptr [rax - 0x75], cl; push rcx; or dh, dh; ret 0x7401; 
0x0000000000454afa: adc byte ptr [rax - 0x77], cl; ja 0x54b27; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004557ac: adc byte ptr [rax - 0x77], cl; mov qword ptr [rax], rdx; ret; 
0x0000000000405133: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000004230a0: adc byte ptr [rax - 0x77], cl; ret 0xf685; 
0x0000000000428044: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x00000000004639af: adc byte ptr [rax - 0x77], cl; ret; 
0x0000000000425c11: adc byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000464121: adc byte ptr [rax - 0x7b], cl; div byte ptr [rdi + rax - 0x77]; fucompi st(0); or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004080a4: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], cl; test byte ptr [rbp - 0x9fffffc], bh; ret 0xf0f; 
0x000000000046d581: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x00000000004149fd: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000043c455: adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000474de2: adc byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x49; mov dword ptr [rax], edx; ret; 
0x0000000000470ee1: adc byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x49; mov dword ptr [rcx], edx; leave; ret; 
0x00000000004602e4: adc byte ptr [rax], al; add bh, dh; ret 0; 
0x0000000000430ed0: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000045dd7d: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000045df42: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045df97: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000041d450: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004051b3: adc byte ptr [rax], al; add byte ptr [rax], al; cmova eax, edx; mov byte ptr [rip + 0xa7678], al; ret; 
0x000000000043b833: adc byte ptr [rax], al; add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000438855: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x0000000000459859: adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000476128: adc byte ptr [rbp + 0x29], al; ret 0x8944; 
0x000000000041124f: adc byte ptr [rbp + 0x48], dl; mov ebp, esp; call rax; 
0x000000000045655a: adc byte ptr [rbp + 0x495175f6], al; lea edx, [rax + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000040e8e7: adc byte ptr [rbp + 0xf], al; adc dword ptr [rax + 0x20], eax; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000444595: adc byte ptr [rbp - 0x77], cl; ret; 
0x0000000000463af7: adc byte ptr [rbp - 0xa], dh; mov dword ptr [rax + 8], 0; mov qword ptr [rax + 0x10], 0; jmp 0x64c70; nop; ret; 
0x0000000000423ea2: adc byte ptr [rbx + 0x3b], dh; movzx eax, byte ptr [rax]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000475b1a: adc byte ptr [rbx + 0x41], bl; pop rsp; mov eax, edx; pop rbp; ret; 
0x0000000000418388: adc byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000409892: adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000423e7b: adc byte ptr [rbx + 0xa], dh; movzx eax, byte ptr [rax]; ret; 
0x000000000042d7d7: adc byte ptr [rbx + 0xff3174e], cl; jg 0x2d7e6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045fdf7: adc byte ptr [rbx + 0xff3174e], cl; jg 0x5fe06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000042d7f7: adc byte ptr [rbx + 0xff3184e], cl; jg 0x2d806; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045fe17: adc byte ptr [rbx + 0xff3184e], cl; jg 0x5fe26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004275db: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000004182b7: adc byte ptr [rbx - 0x4d], dh; xor eax, eax; ret; 
0x0000000000475a5c: adc byte ptr [rcx + 0x5c415bd0], cl; pop rbp; ret; 
0x000000000040f2f1: adc byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], ebp; ret; 
0x000000000046ca90: adc byte ptr [rcx + 0xf], al; adc dword ptr [rcx - 0x20], eax; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jb 0x6ca20; ret; 
0x000000000043c4cc: adc byte ptr [rcx + 3], cl; add al, 0x24; add r14, r15; test r11d, r11d; jne 0x3c4db; call rax; 
0x000000000043cb71: adc byte ptr [rcx + 3], cl; add al, 0x24; test edx, edx; jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d411: adc byte ptr [rcx + 3], cl; add al, 0x24; test r10d, r10d; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000044f48f: adc byte ptr [rcx - 0x4776b], cl; jmp qword ptr [rdi - 0x18]; 
0x00000000004565d3: adc byte ptr [rcx - 0x73], cl; adc al, 0x90; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000405087: adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000430d63: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042c909: adc byte ptr [rcx], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042c849: adc byte ptr [rcx], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x0000000000475bd6: adc byte ptr [rcx], bh; ret; 
0x000000000042c908: adc byte ptr [rcx], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042c848: adc byte ptr [rcx], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x0000000000474acf: adc byte ptr [rdi + 1], bh; jmp rax; 
0x0000000000474acf: adc byte ptr [rdi + 1], bh; jmp rax; nop word ptr [rax + rax]; ret; 
0x000000000040e346: adc byte ptr [rdi + rcx + 0x11], al; add cl, byte ptr [rdi]; adc dword ptr [rcx], eax; ret; 
0x000000000040ed07: adc byte ptr [rdi + rcx + 0x11], al; push rcx; and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000041981c: adc byte ptr [rdi + rdi*8 - 0x38b7a201], al; add eax, 0x93074; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000042c743: adc byte ptr [rdi + rdx + 0x10], cl; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x2c754; ret; 
0x0000000000477416: adc byte ptr [rdi - 0x18], ah; jae 0x7743e; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000004772a2: adc byte ptr [rdi - 0x18], ah; out 0x24, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000043a123: adc byte ptr [rdi - 0x18], ah; std; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000040a6a5: adc byte ptr [rdi], al; add al, ch; ret; 
0x00000000004565a1: adc byte ptr [rdi], cl; adc dword ptr [rax + 8], ecx; xor eax, eax; ret; 
0x0000000000426897: adc byte ptr [rdi], cl; adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041039e: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e3b1: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000040e241: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e7f4: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000045851b: adc byte ptr [rdi], cl; adc dword ptr [rdi], eax; ret; 
0x0000000000410435: adc byte ptr [rdi], cl; adc dword ptr [rdx + 0x20], eax; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x000000000045001f: adc byte ptr [rdi], cl; mov esi, 0x1b812; add byte ptr [rax], al; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000042e213: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000434af1: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434be1: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434a01: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000435449: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x0000000000434fa1: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000434731: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000435181: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434911: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000435361: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000435271: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434bb3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434ca3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434ac3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434821: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004349d3: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004347f3: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004348e3: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434703: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000045001d: adc byte ptr [rdx + 0x10], dh; movsx edx, byte ptr [rdx]; mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x0000000000459a52: adc byte ptr [rdx + rdx - 0xa], dh; add eax, 0x53099; add dword ptr [rax - 0x73], ecx; adc eax, 0x3dad; cmove rax, rdx; ret; 
0x000000000042a342: adc byte ptr [rdx + rdx - 0xa], dh; add eax, 0x827a9; add dword ptr [rax - 0x73], ecx; adc eax, 0xa1bd; cmove rax, rdx; ret; 
0x0000000000436b06: adc byte ptr [rdx], al; jne 0x36b20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36b00; ret; 
0x0000000000436bb6: adc byte ptr [rdx], al; jne 0x36bd0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36bb0; ret; 
0x0000000000436b05: adc byte ptr [rdx], r8b; jne 0x36b20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36b00; ret; 
0x0000000000436bb5: adc byte ptr [rdx], r8b; jne 0x36bd0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36bb0; ret; 
0x0000000000470c49: adc byte ptr [rip + 0xa3b9], al; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x000000000042c746: adc byte ptr [rsi + 0xf], ah; je 0x2c713; pmovmskb eax, xmm1; sub eax, ecx; jne 0x2c754; ret; 
0x000000000042f6a5: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000042f6eb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000042bae0: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000468a30: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000040e791: adc byte ptr [rsi + rdx - 0x10], bh; cmp rdx, 0x20; ja 0xe800; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e551: adc byte ptr [rsi + rdx - 0x10], bl; movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e16f: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e237: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e7ea: adc byte ptr [rsi + rdx - 0x20], dl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040ca2e: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000045fdd7: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000045df96: adc byte ptr ss:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ae6a: adc cl, byte ptr [rax + 1]; clc; ret; 
0x000000000041128c: adc cl, byte ptr [rax - 0x39]; ret 0xffd8; 
0x0000000000473fbd: adc cl, byte ptr [rax - 0x75]; or al, 0xf7; cmp al, 8; jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x0000000000428055: adc cl, byte ptr [rax - 0x75]; or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000046f98d: adc cl, byte ptr [rax - 0x75]; or byte ptr [rcx + rcx*4 - 0xe], cl; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000474cb2: adc cl, byte ptr [rax - 0x75]; ror byte ptr [r9 + rcx*4 + 0x55], 0xb8; call rax; 
0x00000000004794d0: adc cl, byte ptr [rax - 0x77]; ror byte ptr [rax - 9], 1; rol byte ptr [rbx + 0x394901e0], 1; ret 0x840f; 
0x000000000044b6a7: adc cl, byte ptr [rax - 0x7d]; ret 0x4c08; 
0x000000000042d1b5: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x00000000004583dd: adc cl, byte ptr [rbx + 0x4a394c4a]; cmove rax, rcx; ret; 
0x0000000000470f46: adc cl, byte ptr [rcx - 0x77]; adc dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x000000000040b7d9: adc cl, byte ptr [rdx]; add bh, dh; ret 0; 
0x000000000046ddd6: adc cl, cl; ret; 
0x00000000004682b0: adc dh, bl; bsf eax, eax; cmp edx, eax; jbe 0x682c0; lea rax, [rdi + rax*4]; ret; 
0x0000000000468530: adc dh, bl; bsf eax, eax; cmp edx, eax; jbe 0x68540; lea rax, [rdi + rax*4]; ret; 
0x0000000000467a39: adc dh, byte ptr [rbx - 0xc]; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000459a54: adc dh, dh; add eax, 0x53099; add dword ptr [rax - 0x73], ecx; adc eax, 0x3dad; cmove rax, rdx; ret; 
0x000000000042a344: adc dh, dh; add eax, 0x827a9; add dword ptr [rax - 0x73], ecx; adc eax, 0xa1bd; cmove rax, rdx; ret; 
0x0000000000413320: adc dil, r15b; jmp qword ptr [rsi + 0x66]; 
0x000000000040ff4c: adc dil, r15b; ret; 
0x000000000046ce72: adc dl, byte ptr [rax - 0x76b7fffd]; ret; 
0x000000000040e8e5: adc dword ptr [rax + 0x10], ecx; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000427683: adc dword ptr [rax + 0x10], ecx; xor eax, eax; ret; 
0x000000000040f2ef: adc dword ptr [rax + 0x10], esp; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000405c2c: adc dword ptr [rax + 0x20], eax; mov qword ptr [rdx + 0x28], rax; mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x000000000040e8ea: adc dword ptr [rax + 0x20], eax; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040f2f4: adc dword ptr [rax + 0x20], ebp; ret; 
0x00000000004275c6: adc dword ptr [rax + 0x2b], ecx; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000040e8ef: adc dword ptr [rax + 0x30], edi; ret; 
0x0000000000455f10: adc dword ptr [rax + 0x40], eax; leave; ret; 
0x0000000000456642: adc dword ptr [rax + 0x40], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467d2d: adc dword ptr [rax + 1], ecx; clc; ret; 
0x00000000004565a3: adc dword ptr [rax + 8], ecx; xor eax, eax; ret; 
0x000000000046b7f9: adc dword ptr [rax + rax], eax; leave; ret; 
0x000000000040f2e5: adc dword ptr [rax + rdx - 0x10], edi; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000044975d: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x0000000000404fce: adc dword ptr [rax - 0x3f], ecx; call 0x508d97da; add dword ptr [rax - 0x77], ecx; adc eax, 0xa11aa; ret; 
0x0000000000470f49: adc dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x000000000041b7ed: adc dword ptr [rax - 0x75], ecx; push rax; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004182f1: adc dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x0000000000418a3b: adc dword ptr [rax - 0x77], ecx; stc; jmp 0x189bc; nop dword ptr [rax]; ret; 
0x000000000045ddd5: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045de2a: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000438938: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000438938: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38950; ret; 
0x0000000000463b0b: adc dword ptr [rax], eax; add byte ptr [rsi - 0x70], ah; ret; 
0x000000000040f2eb: adc dword ptr [rax], eax; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000439b04: adc dword ptr [rax], eax; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004182fc: adc dword ptr [rax], ebx; test rdx, rdx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x00000000004707b2: adc dword ptr [rbp - 0x37000000], -0x48; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000044ec75: adc dword ptr [rbp - 0xb8], eax; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000042339c: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466b42: adc dword ptr [rbx + 0x18], ecx; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000427e2a: adc dword ptr [rbx + 0x28], eax; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x00000000004233a0: adc dword ptr [rbx + 0x28], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466b46: adc dword ptr [rbx + 0x28], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000418676: adc dword ptr [rbx + 0x2d8], eax; syscall; 
0x0000000000425d0b: adc dword ptr [rbx + 0x48], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004242cf: adc dword ptr [rbx + 8], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000423398: adc dword ptr [rbx + 8], eax; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043a137: adc dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000426895: adc dword ptr [rcx + 0x10], eax; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000426899: adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000040ed0a: adc dword ptr [rcx + 0x20], edx; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000042689d: adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000040ed0f: adc dword ptr [rcx + 0x30], ecx; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x00000000004268a1: adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000040ed14: adc dword ptr [rcx + 0x40], eax; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000040ed18: adc dword ptr [rcx + 0x50], edi; ret; 
0x000000000040ccfd: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd04: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd0b: adc dword ptr [rcx + 7], edi; ret; 
0x000000000046ca98: adc dword ptr [rcx - 0x10], ecx; cmp r10, r11; jb 0x6ca20; ret; 
0x000000000046ca93: adc dword ptr [rcx - 0x20], eax; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jb 0x6ca20; ret; 
0x000000000040c9a6: adc dword ptr [rcx - 1], ebx; ret; 
0x000000000040c96a: adc dword ptr [rcx - 1], edi; ret; 
0x000000000040c99f: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040cb9d: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c963: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040cb96: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c95c: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040cb8f: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c955: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000418668: adc dword ptr [rcx], eax; add byte ptr [rax], al; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000040e34c: adc dword ptr [rcx], eax; ret; 
0x000000000043e78b: adc dword ptr [rcx], ebp; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000041039c: adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e3af: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000040e23f: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e7f2: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004103a0: adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e3b3: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004103a4: adc dword ptr [rdi + 0x30], eax; ret; 
0x000000000040e3b7: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004189fa: adc dword ptr [rdi + 0x58], eax; ret; 
0x00000000004267e0: adc dword ptr [rdi + 0x58], eax; test rax, rax; je 0x267f7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000042669a: adc dword ptr [rdi + 0xa0], eax; ret; 
0x000000000040c998: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040fba5: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044ff0f: adc dword ptr [rdi + 8], eax; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x00000000004102cd: adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041032c: adc dword ptr [rdi + rdx - 0x10], eax; ret; 
0x000000000040e565: adc dword ptr [rdi + rdx - 0x10], ebx; ret; 
0x000000000040e177: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x000000000040e79f: adc dword ptr [rdi + rdx - 0x10], edi; ret; 
0x000000000040e243: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e29c: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000040e2a1: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000040e248: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x000000000040e560: adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e7f6: adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e55b: adc dword ptr [rdi + rdx - 0x30], ecx; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e2a6: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000040e556: adc dword ptr [rdi + rdx - 0x40], eax; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e2ab: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000410336: adc dword ptr [rdi - 0x10], eax; ret; 
0x0000000000410332: adc dword ptr [rdi - 0x20], eax; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000040ce58: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce5f: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce66: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce6d: adc dword ptr [rdi - 8], edi; ret; 
0x0000000000458ad4: adc dword ptr [rdi], eax; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x53e00], 0; ret; 
0x0000000000410399: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e23c: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e7ef: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e3ac: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000410329: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040e174: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e79c: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004102d2: adc dword ptr [rdi], eax; ret; 
0x0000000000458545: adc dword ptr [rdi], eax; test rdx, rdx; je 0x5854f; mov byte ptr [rsi], 0; ret; 
0x000000000040c992: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040fb9f: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fbc0: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000410433: adc dword ptr [rdx + 0x10], eax; movups xmmword ptr [rdx + 0x20], xmm0; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x000000000040e344: adc dword ptr [rdx + 0x10], edi; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000410437: adc dword ptr [rdx + 0x20], eax; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x000000000040e340: adc dword ptr [rdx + 0x20], esi; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000041043b: adc dword ptr [rdx + 0x30], eax; ret; 
0x000000000040e33c: adc dword ptr [rdx + 0x30], ebp; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000044ffc5: adc dword ptr [rdx + 8], eax; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x000000000040e3bc: adc dword ptr [rdx + rdi - 0x10], eax; ret; 
0x000000000040e349: adc dword ptr [rdx], eax; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000410430: adc dword ptr [rdx], eax; movups xmmword ptr [rdx + 0x10], xmm0; movups xmmword ptr [rdx + 0x20], xmm0; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x0000000000468444: adc dword ptr [rip + 0x31ffffff], -0x40; ret; 
0x00000000004185c3: adc dword ptr [rip + 0x94337], eax; ret; 
0x00000000004185b3: adc dword ptr [rip + 0x94357], eax; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x0000000000405c55: adc dword ptr [rsi + 0x20], eax; pop rbp; ret; 
0x0000000000403ef2: adc dword ptr [rsi + 1], edi; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x000000000040fce5: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fcec: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fcf3: adc dword ptr [rsi + 3], edx; ret; 
0x000000000040fd82: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd89: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd90: adc dword ptr [rsi + 7], edx; ret; 
0x000000000040fb92: adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fb8b: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb84: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb7d: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fcdf: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004669e1: adc dword ptr [rsp + 0x20], ecx; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000046792d: adc eax, 0x14e; lea rax, [rip + 7]; cmove rax, rdx; ret; 
0x00000000004602a5: adc eax, 0x1566; cmove rax, rdx; ret; 
0x0000000000429fdc: adc eax, 0x161f; lea rax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x0000000000429fb7: adc eax, 0x1894; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x000000000040b755: adc eax, 0x1936; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b655: adc eax, 0x1a66; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000042a033: adc eax, 0x1b48; lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000046bd4a: adc eax, 0x1ee80001; xchg cl, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000040b785: adc eax, 0x21c6; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b685: adc eax, 0x22f6; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000045f038: adc eax, 0x26343; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045f01e: adc eax, 0x2635d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000040b7a5: adc eax, 0x266; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000045d7e8: adc eax, 0x27b93; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045d7ce: adc eax, 0x27bad; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000040b735: adc eax, 0x2a06; cmove rax, rdx; ret; 
0x000000000040b635: adc eax, 0x2b16; cmove rax, rdx; ret; 
0x000000000042a1ac: adc eax, 0x2f2f; cmove rax, rdx; ret; 
0x0000000000473f69: adc eax, 0x391a2; cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x000000000040b6a5: adc eax, 0x396; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x0000000000459a5e: adc eax, 0x3dad; cmove rax, rdx; ret; 
0x000000000040b806: adc eax, 0x3f35; lea rax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000042a1f7: adc eax, 0x3f74; cmovne rax, rdx; ret; 
0x000000000040e8b6: adc eax, 0x405; add rdx, r8; jmp rdx; 
0x000000000040b874: adc eax, 0x4107; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000040b860: adc eax, 0x45db; cmovne rax, rdx; ret; 
0x0000000000412447: adc eax, 0x48000947; shl eax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000042a26f: adc eax, 0x4808e283; lea eax, [rip + 0x6696]; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000042a02d: adc eax, 0x4808e580; lea edx, [rip + 0x1b48]; lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000040b89c: adc eax, 0x481f; lea rax, [rip + 0x47b8]; cmovne rax, rdx; ret; 
0x000000000042655a: adc eax, 0x48438b48; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040b824: adc eax, 0x4a77; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000040b8f9: adc eax, 0x5122; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000042a27c: adc eax, 0x523f; cmove rax, rdx; ret; 
0x000000000040b969: adc eax, 0x5732; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x00000000004547fb: adc eax, 0x58770; cmp edx, 1; jg 0x54838; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000419b02: adc eax, 0x589c031; test eax, 0x5d000930; ret; 
0x0000000000459afc: adc eax, 0x5c8f; cmove rax, rdx; ret; 
0x0000000000449739: adc eax, 0x5e2da; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x0000000000421c85: adc eax, 0x60756; add rax, rdx; ret; 
0x0000000000459b2d: adc eax, 0x650e; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000460235: adc eax, 0x676; cmove rax, rdx; ret; 
0x0000000000467cbc: adc eax, 0x83f; lea rax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x0000000000440534: adc eax, 0x89480002; ret; 
0x000000000043b53b: adc eax, 0x8dfffffd; add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x0000000000417f7f: adc eax, 0x8fc04; mov rax, rdx; ret; 
0x0000000000412c99: adc eax, 0x933ca; jmp 0x12c62; ret; 
0x00000000004124f6: adc eax, 0x94665; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x0000000000412446: adc eax, 0x94715; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000040e3ce: adc eax, 0x99745; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000404fd9: adc eax, 0xa11aa; ret; 
0x000000000042a34e: adc eax, 0xa1bd; cmove rax, rdx; ret; 
0x000000000040b6fb: adc eax, 0xa90; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x0000000000401e93: adc eax, 0xaa9a8; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000401f5d: adc eax, 0xaaafe; pop rbx; pop rbp; ret; 
0x0000000000467c97: adc eax, 0xad4; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000042a3e9: adc eax, 0xb932; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000040b5fb: adc eax, 0xbc0; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042adfd: adc eax, 0xbc1e; lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x000000000041dc29: adc eax, 0xc600000d; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x000000000046e5fa: adc eax, 0xe0458b48; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e619; leave; ret; 
0x00000000004285fa: adc eax, 0xe083f8d1; add dword ptr [rcx + 0x48641047], ecx; mov dword ptr [0x2f8], edi; ret; 
0x00000000004540ec: adc eax, 0xf85d8b48; leave; ret; 
0x000000000042a145: adc eax, 0xfffe18f6; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000042a09b: adc eax, 0xfffe2120; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a0f5: adc eax, 0xfffe2fc6; lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000042a125: adc eax, 0xfffe3856; lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000042a0d5: adc eax, 0xfffe4076; cmove rax, rdx; ret; 
0x00000000004602a0: adc eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x1566; cmove rax, rdx; ret; 
0x000000000045dc72: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045dcc7: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045f2dc: adc eax, dword ptr [rbp - 0x3af88b2e]; stc; jle 0x5f2a6; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000046bfc2: adc eax, dword ptr [rcx]; add byte ptr [rax - 0x77], cl; fidiv word ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x000000000046f851: adc eax, dword ptr [rcx]; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; jmp qword ptr [rdi - 0x18]; 
0x000000000046653d: adc eax, eax; ret; 
0x0000000000466676: adc eax, edx; pop rbp; pop rbx; ret; 
0x000000000046e662: adc ebx, dword ptr [rbx + 0x41]; movzx edi, ah; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x0000000000468007: adc ecx, dword ptr [rax + 1]; clc; ret; 
0x0000000000417f7c: adc ecx, dword ptr [rax - 0x75]; adc eax, 0x8fc04; mov rax, rdx; ret; 
0x0000000000425d5c: adc ecx, dword ptr [rax - 0x75]; sbb byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; jmp rax; 
0x000000000044ef6a: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000473c44: adc ecx, dword ptr [rbp - 0x77]; clc; mov rcx, rbx; mov edi, 1; call rax; 
0x0000000000470ee8: adc ecx, ecx; ret; 
0x000000000043875c: adc edi, dword ptr [rax + 1]; syscall; 
0x000000000043875c: adc edi, dword ptr [rax + 1]; syscall; cmp rax, -0x1000; ja 0x387c0; ret; 
0x00000000004183ad: adc edi, edi; dec dword ptr [rax - 0x77]; ret 0x83f0; 
0x000000000046581a: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000046d825: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004112ec: adc esi, dword ptr [rcx]; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x11348; ret; 
0x000000000046e553: adc esi, esp; add eax, dword ptr [rax]; ret; 
0x000000000040ccfc: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd03: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd0a: adc qword ptr [rcx + 7], rdi; ret; 
0x000000000040c9a5: adc qword ptr [rcx - 1], rbx; ret; 
0x000000000040c969: adc qword ptr [rcx - 1], rdi; ret; 
0x000000000040c99e: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040cb9c: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c962: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040cb95: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c95b: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040cb8e: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c954: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040c997: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040fba4: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040ce57: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce5e: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce65: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce6c: adc qword ptr [rdi - 8], rdi; ret; 
0x000000000040c991: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040fb9e: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fbbf: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fce4: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fceb: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fcf2: adc qword ptr [rsi + 3], rdx; ret; 
0x000000000040fd81: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd88: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd8f: adc qword ptr [rsi + 7], rdx; ret; 
0x000000000040fb91: adc qword ptr [rsi - 1], rdx; ret; 
0x000000000040fb8a: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb83: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb7c: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fcde: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000046d824: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000462f9a: adc r8b, bpl; jmp rax; 
0x0000000000466675: adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000465819: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000040ff6c: adc spl, r15b; ret; 
0x0000000000435cbf: add ah, al; loope 0x35cbc; cwde; sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x000000000040d3c0: add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jg 0xd3cb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000040d316: add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jp 0xd31f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000042cee6: add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000040fcee: add ah, byte ptr [rdx - 0xf]; jl 0xfd3b; adc dword ptr [rsi + 3], edx; ret; 
0x00000000004112c7: add ah, dh; mov eax, edx; syscall; 
0x0000000000401704: add ah, dh; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000467928: add al, 0; adc byte ptr [rax - 0x73], cl; adc eax, 0x14e; lea rax, [rip + 7]; cmove rax, rdx; ret; 
0x0000000000460274: add al, 0; add bh, dh; ret 0; 
0x0000000000469287: add al, 0; add bh, dh; ret 0x4000; 
0x00000000004170c7: add al, 0; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000437c9b: add al, 0; add byte ptr [rax - 0x75], cl; mov ebp, 0xffffff10; mov eax, 0x4f; syscall; 
0x0000000000421128: add al, 0; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x000000000046de4b: add al, 0; add byte ptr [rax - 0x77], cl; adc cl, cl; ret; 
0x0000000000416ab2: add al, 0; add byte ptr [rax - 0x77], cl; push rbp; shl byte ptr [rdi - 0x18], 0x31; cmp eax, 0x8948ffff; ret; 
0x000000000043149d: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045eb17: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004314c1: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041df24: add al, 0; add byte ptr [rax - 0x8e743], al; jmp qword ptr [rax]; 
0x0000000000460ad1: add al, 0; add byte ptr [rax], al; ret; 
0x000000000040e8b8: add al, 0; add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x00000000004577d8: add al, 0; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000044aa30: add al, 0; add byte ptr [rcx - 0x77], cl; ret 0x8548; 
0x000000000043b120: add al, 0; add byte ptr [rcx], al; ret 0x8348; 
0x0000000000404faa: add al, 0; add byte ptr [rsi + 1], dh; ret; 
0x0000000000414bdc: add al, 0; add dh, dh; ret 0x7402; 
0x00000000004080ab: add al, 0; add dh, dh; ret 0xf0f; 
0x00000000004587d9: add al, 0; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000046b7fa: add al, 0; leave; ret; 
0x0000000000469318: add al, 0; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000454b6b: add al, 0; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000460299: add al, 0; or byte ptr [rax - 0x73], cl; add eax, 0x133d; lea rdx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x0000000000460229: add al, 0; or byte ptr [rax - 0x73], cl; add eax, 0x8bd; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x0000000000458cf6: add al, 0; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000435b7a: add al, 0x16; cmovae eax, esi; ret; 
0x0000000000460010: add al, 0x16; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x60000; ret; 
0x0000000000435be9: add al, 0x16; ret; 
0x000000000043172b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043131b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000430e27: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000431637: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004310ab: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004313eb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000431707: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004317d7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043158b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000430d7b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000043117b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000043165b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000430e4b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000430eed: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043124b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x00000000004314bb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000430f11: add al, 0x16; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045f01a: add al, 0x17; lea rdx, [rip + 0x2635d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045d7ca: add al, 0x17; lea rdx, [rip + 0x27bad]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000430955: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042b588: add al, 0x17; ret; 
0x00000000004308ea: add al, 0x17; sub eax, ecx; ret; 
0x000000000043c4cf: add al, 0x24; add r14, r15; test r11d, r11d; jne 0x3c4db; call rax; 
0x0000000000427524: add al, 0x24; mov qword ptr [rbx + 0x60], r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000043cb74: add al, 0x24; test edx, edx; jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d414: add al, 0x24; test r10d, r10d; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000043b831: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000459857: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041b75e: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044edd9: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4eeb9; leave; ret; 
0x000000000046634f: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x663c7; leave; ret; 
0x000000000043e39c: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3e3ad; call rax; 
0x000000000042b3ba: add al, 0x37; ret; 
0x00000000004073f2: add al, 0x39; ret 0x850f; 
0x0000000000426a8f: add al, 0x3a; ret; 
0x0000000000418b13: add al, 0x48; add eax, edi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x000000000042dd84: add al, 0x48; add eax, edi; ret; 
0x0000000000475266: add al, 0x48; and eax, 0xfffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x75278; ret; 
0x000000000042d58b: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000042a1ed: add al, 0x48; lea eax, [rip + 0x3d4b]; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x0000000000404fd2: add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x000000000047405e: add al, 0x48; mov eax, dword ptr [rbp - 0x10]; leave; ret; 
0x0000000000418270: add al, 0x48; mov eax, dword ptr [rdx + rax]; cmp rax, -1; je 0x182ba; ret; 
0x00000000004182f8: add al, 0x48; mov edx, dword ptr [rcx + rdx + 0x18]; test rdx, rdx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x0000000000435d28: add al, 0x48; xor eax, eax; ret; 
0x000000000040e8a9: add al, 0x49; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x000000000044ffa9: add al, 0x49; mov dword ptr [rdx + 8], ecx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x00000000004182b2: add al, 0x4c; cmp eax, dword ptr [rcx + rsi + 0x10]; jae 0x1826d; xor eax, eax; ret; 
0x00000000004377f4: add al, 0x4c; mov edx, esp; push 0; call rbx; 
0x000000000040959b: add al, 0x5d; ret; 
0x000000000040ca1b: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044feb4: add al, 0x74; sbb dword ptr [rbp + 0x481975c0], eax; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x00000000004103cc: add al, 0x7d; sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x00000000004101ab: add al, 0x7d; sub eax, dword ptr [rbx + 0x2d7f01fa]; jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x000000000040ff34: add al, 0x7d; xor al, byte ptr [rbx + 0x347f01fa]; jl 0xff40; mov byte ptr [rax], cl; ret; 
0x000000000046001a: add al, 0x81; je 0x60000; ret; 
0x000000000045da1b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000460016: add al, 0x81; sub eax, dword ptr [rcx + r8*4]; je 0x60000; ret; 
0x000000000045eff3: add al, 0x81; sub eax, edx; ret; 
0x000000000045d7d7: add al, 0x82; sub eax, ecx; ret; 
0x00000000004298c0: add al, 0x83; cli; dec dword ptr [rdi]; test byte ptr [rsi - 0x7cfffffe], ch; ret 0x4101; 
0x000000000045b0ae: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c80: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b39a: add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x00000000004172e0: add al, 0x83; ret; 
0x00000000004682bb: add al, 0x87; ret; 
0x000000000041b50e: add al, 0x88; add eax, 0x9169b; ret; 
0x0000000000455ac4: add al, 0x8b; add byte ptr [rax - 0x77], cl; or bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000426095: add al, 0xa8; add dword ptr [rsi + riz - 0x77], esi; ret 0xc883; 
0x00000000004557ed: add al, 0xa8; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x000000000043d76c: add al, 0xa; call rax; 
0x0000000000401bfb: add al, 0xb1; add rax, r9; notrack jmp rax; mov rax, rdi; ret; 
0x000000000046e4fc: add al, 0xba; add rax, rdx; notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x000000000042b470: add al, 0xc0; bsf ecx, ecx; cmp al, cl; jb 0x2b461; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b6f0: add al, 0xc0; bsf ecx, ecx; cmp al, cl; jb 0x2b6e1; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000046d55e: add al, 0xc2; test rax, rax; jne 0x6d57e; ret; 
0x000000000041f177: add al, 0xc3; xor ebx, ebx; mov dword ptr [rbp - 0x4a4], 0; mov dword ptr [rbp - 0x4a8], 0; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x000000000045850c: add al, 0xc6; inc dword ptr [rax]; lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041f503: add al, 0xc7; jmp rax; 
0x000000000041f385: add al, 0xc8; jmp rax; 
0x000000000045061e: add al, 0xd1; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x0000000000448cbc: add al, 0xe0; test rax, rax; je 0x48cc5; call rax; 
0x0000000000448ea6: add al, 0xe0; test rax, rax; je 0x48eaf; call rax; 
0x0000000000468384: add al, 0xf0; bsf ecx, ecx; cmp al, cl; jb 0x68375; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000468604: add al, 0xf0; bsf ecx, ecx; cmp al, cl; jb 0x685f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x00000000004204bf: add al, 0xf0; jmp rax; 
0x0000000000454b6f: add al, 0xf8; ret; 
0x000000000042d035: add al, 0xf; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x000000000045b0a6: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042ef95: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042e4c9: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042f125: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000430cdd: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000445f6e: add al, 0xf; xchg dword ptr [rdx], ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000004473cb: add al, 0xf; xchg dword ptr [rdx], edx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000453f6d: add al, 0xfb; jmp qword ptr [rdi - 0x18]; 
0x0000000000417f80: add al, 0xfc; or byte ptr [rax], al; mov rax, rdx; ret; 
0x000000000042923c: add al, 1; je 0x292e9; xor eax, eax; ret; 
0x000000000042952e: add al, 1; je 0x294de; mov eax, 0x83; ret; 
0x000000000047a162: add al, 1; pop rbp; ret; 
0x00000000004020cf: add al, 2; add byte ptr [rax], al; mov qword ptr [rip + 0xaa8b6], rax; pop rbx; pop rbp; ret; 
0x0000000000418273: add al, 2; cmp rax, -1; je 0x182ba; ret; 
0x0000000000412501: add al, 2; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x0000000000455062: add al, 5; add byte ptr [rax - 0x77], cl; ret 0xc985; 
0x000000000041f4ff: add al, 6; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000042df91: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000410a6c: add al, 7; ret; 
0x000000000042c3b9: add al, 7; sub eax, ecx; ret; 
0x000000000042bc6a: add al, 7; sub eax, ecx; vzeroupper; ret; 
0x000000000042c06a: add al, 7; sub eax, ecx; xtest; jne 0x2c077; vzeroupper; ret; 
0x0000000000430abf: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000040b59e: add al, bpl; pop rbx; test eax, 0xd6ebffff; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000418c3c: add al, byte ptr [rax + rax*8 - 0x7cb6f08b]; ret 0x4901; 
0x000000000042d1b1: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x0000000000414e60: add al, byte ptr [rax - 0x78f04000]; lodsd eax, dword ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x0000000000414187: add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x000000000042433c: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000426b02: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000418618: add al, byte ptr [rax]; add byte ptr [rax + 0xda], bh; syscall; 
0x0000000000429204: add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x000000000042b8d2: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000040b7a7: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x20f; cmovne rax, rdx; ret; 
0x00000000004020d0: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; add eax, 0xaa8b6; pop rbx; pop rbp; ret; 
0x0000000000413bcf: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000414e67: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x000000000043163d: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a836: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000431661: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000449726: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000046675b: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000404da1: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000458d9e: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000404346: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404316: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x0000000000404c28: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, r9d; syscall; 
0x0000000000404d3b: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000043e1ee: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, ebx; syscall; 
0x0000000000459024: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000466835: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x000000000041197f: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; test eax, eax; cmove eax, edx; ret; 
0x0000000000460ac1: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000461b22: add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000479af0: add al, byte ptr [rax]; add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x000000000041717b: add al, byte ptr [rax]; add byte ptr [rbp + rcx*4 + 0x53], al; add dword ptr [rax + 0xaba78fa], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8d48; 
0x0000000000452ff3: add al, byte ptr [rax]; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000004291bf: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0de08], al; lea eax, [rcx]; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000041d949: add al, byte ptr [rax]; add byte ptr [rbx - 0x90f7b], cl; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x00000000004778b7: add al, byte ptr [rax]; add byte ptr [rcx + 0xf], al; mov bh, 0x55; and byte ptr [rsi - 9], ah; ret 0x7f8; 
0x000000000046de8a: add al, byte ptr [rax]; add byte ptr [rcx - 0x74b7e7bd], cl; pop rbp; clc; leave; ret; 
0x0000000000475f75: add al, byte ptr [rax]; add byte ptr [rcx - 0x77], al; ret 0x7e8d; 
0x00000000004765db: add al, byte ptr [rax]; add byte ptr [rcx - 0x77], al; ret 0xe083; 
0x000000000047a14c: add al, byte ptr [rax]; add byte ptr [rcx - 0x77cf7a9], cl; and dword ptr [rcx + rcx + 0x5d], esi; ret; 
0x000000000042969f: add al, byte ptr [rax]; add byte ptr [rcx], bh; or byte ptr [r15 + r8 - 0x37], r14b; mov eax, 1; ret; 
0x00000000004594b1: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x7074; 
0x00000000004590fd: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x840f; 
0x00000000004293a3: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x850f; 
0x000000000042926f: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x9175; 
0x000000000040b7e8: add al, byte ptr [rax]; add dh, dh; ret 0x7420; 
0x0000000000454b62: add al, byte ptr [rax]; jae 0x54b71; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000458d55: add al, byte ptr [rax]; mov eax, 0xe; syscall; 
0x000000000045da18: add al, byte ptr [rax]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000045d7d1: add al, byte ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045efed: add al, byte ptr [rax]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000467e32: add al, byte ptr [rbp - 0x7c968a40]; ret 0xf40; 
0x00000000004283c2: add al, byte ptr [rbx + 0x10740afa]; mov eax, esi; ret; 
0x0000000000478a0f: add al, byte ptr [rbx + 0xb7403f8]; ret; 
0x0000000000460895: add al, byte ptr [rbx - 0x1d3bf81e]; imul esi, edi, -0x40; test eax, eax; je 0x60787; bsf eax, eax; ret; 
0x00000000004561a9: add al, byte ptr [rcx + 0x5c]; pop rbp; ret; 
0x000000000044d3ad: add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000460a86: add al, byte ptr [rdx + rdx*8 - 0x1d7cf98c]; pcmpeqb mm2, qword ptr [rax]; ret; 
0x00000000004667c3: add al, byte ptr [rdx]; sar bh, 0xff; pop rbp; ret; 
0x0000000000440e56: add al, ch; adc al, 0x35; cld; jmp qword ptr [rdi - 0x18]; 
0x000000000041331e: add al, ch; adc dil, r15b; jmp qword ptr [rsi + 0x66]; 
0x0000000000453f6a: add al, ch; add byte ptr [rbx + rdi*8], al; jmp qword ptr [rdi - 0x18]; 
0x000000000043a2f7: add al, ch; add edi, dword ptr [rcx - 3]; inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x0000000000467d26: add al, ch; clc; ja 0x67d64; ret 0x117e; 
0x000000000041368d: add al, ch; fisttp qword ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0x66]; 
0x0000000000407f7e: add al, ch; in al, dx; ret; 
0x000000000046e69d: add al, ch; int 0x5c; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000447644: add al, ch; int 0xfb; jmp qword ptr [rdi - 0x18]; 
0x00000000004438f4: add al, ch; jbe 0x43902; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000468ef4: add al, ch; jbe 0x68eac; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000042917f: add al, ch; jmp 0x29134; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000041d344: add al, ch; jo 0x1d347; jmp qword ptr [rsi + 0xf]; 
0x00000000004461f0: add al, ch; jp 0x461d5; sti; jmp qword ptr [rdi - 0x18]; 
0x00000000004640ba: add al, ch; mov al, 2; cli; jmp qword ptr [rdi - 0x18]; 
0x0000000000441ab4: add al, ch; mov dh, 0x28; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000440eb8: add al, ch; mov dl, 0x34; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000041d799: add al, ch; movabs eax, dword ptr [0xfff71885c6fffe71]; jmp qword ptr [rax]; 
0x0000000000479e28: add al, ch; movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rdi - 0x18]; 
0x0000000000423a78: add al, ch; or dh, bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000450161: add al, ch; or dword ptr [rdx - 5], eax; jmp qword ptr [rsi + 0xf]; 
0x000000000040b59f: add al, ch; pop rbx; test eax, 0xd6ebffff; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000440d10: add al, ch; pop rdx; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000044baa7: add al, ch; push rbp; sti; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000457013: add al, ch; push rdi; sar edx, cl; jmp qword ptr [rdi - 0x18]; 
0x0000000000452a14: add al, ch; push rsi; sbb ebx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004375a4: add al, ch; push rsi; xlatb; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000041be4a: add al, ch; rcl bh, 1; add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x90de4], 0; ret; 
0x000000000046a2a8: add al, ch; ret 0xf9a0; 
0x00000000004456a8: add al, ch; ret 0xfbec; 
0x0000000000403a78: add al, ch; ret 0xffe0; 
0x000000000040a6a7: add al, ch; ret; 
0x000000000046d7a0: add al, ch; retf 0xf96b; jmp qword ptr [rsi + 0x2e]; 
0x00000000004440a0: add al, ch; retf 0xfc02; jmp qword ptr [rdi - 0x18]; 
0x00000000004175a0: add al, ch; retf 0xfecd; jmp qword ptr [rsi + 0x2e]; 
0x000000000046a51b: add al, ch; sahf; stc; jmp qword ptr [rsi + 0x66]; 
0x00000000004421a9: add al, ch; shl dword ptr [rcx], 0xfc; jmp qword ptr [rdi - 0x18]; 
0x000000000043fa71: add al, ch; stc; cld; jmp qword ptr [rdi - 0x18]; 
0x000000000045046f: add al, ch; sti; sti; jmp qword ptr [rsi + 0x66]; 
0x00000000004019b0: add al, ch; sub bh, cl; add byte ptr [rax], al; mov eax, 0; leave; ret; 
0x000000000043e540: add al, ch; sub bl, byte ptr [rsi - 4]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004414e5: add al, ch; test dword ptr [rsi], ebp; cld; jmp qword ptr [rdi - 0x18]; 
0x00000000004043a7: add al, ch; xchg ebx, eax; add eax, 0x89480000; ret 0x8b48; 
0x0000000000444ed4: add al, ch; xchg esi, eax; hlt; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000458846: add al, dh; cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x000000000044fe2f: add al, dh; iretd; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004440a3: add bh, ah; jmp qword ptr [rdi - 0x18]; 
0x00000000004667c1: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; pop rbp; ret; 
0x0000000000427a01: add bh, al; add eax, 0x85264; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004251a4: add bh, al; add eax, 0x87ac1; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000459021: add bh, al; add eax, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x000000000044fb37: add bh, al; mov r12b, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041d7f7: add bh, al; test eax, esi; idiv bh; call qword ptr [rax]; 
0x0000000000401888: add bh, bh; jg 0x18f2; mov dword ptr [rbp - 0x40], 0x45c60015; ret 0xc600; 
0x000000000043c4d8: add bh, bh; ror byte ptr [rax - 0x7d], 1; ret; 
0x0000000000439eea: add bh, byte ptr [rax + 0xf]; test bh, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004667a8: add bh, byte ptr [rax + 1]; pop rbp; ret; 
0x000000000041127b: add bh, byte ptr [rax - 1]; pop rbp; ret; 
0x0000000000411298: add bh, byte ptr [rax - 1]; ret; 
0x0000000000439bf2: add bh, ch; call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004421b2: add bh, ch; jmp qword ptr [rsi + 0x66]; 
0x000000000040b7db: add bh, dh; ret 0; 
0x0000000000469289: add bh, dh; ret 0x4000; 
0x00000000004640bd: add bh, dl; jmp qword ptr [rdi - 0x18]; 
0x000000000046230e: add bl, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000438cbb: add bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x000000000040197e: add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x0000000000456d0e: add bl, ch; movabs dword ptr [0xe800000000801f0f], eax; ret; 
0x0000000000412c9d: add bl, ch; ret 0x66c3; 
0x0000000000416eba: add bl, ch; ret 0x8d48; 
0x0000000000414f88: add bl, ch; ret 0x8d4c; 
0x00000000004481ba: add bl, ch; ret 0xffb8; 
0x0000000000458634: add bl, ch; shl byte ptr [rdi - 0x18], 1; ret; 
0x0000000000467d4f: add bl, dh; bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004357bf: add bl, dh; bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000042afdf: add bl, dh; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000043581a: add bl, dh; bsf eax, eax; jmp 0x35ab9; xor eax, eax; ret; 
0x0000000000460d2f: add bl, dh; bsf eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d0f: add bl, dh; bsf eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000046105a: add bl, dh; bsf eax, eax; shr eax, 2; jmp 0x6136c; xor eax, eax; ret; 
0x000000000046034c: add bl, dh; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000043558f: add bl, dh; bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000043557f: add bl, dh; bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x000000000043555f: add bl, dh; bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000042b06f: add bl, dh; bsf eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000410d6f: add bl, dh; bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000470c4e: add bl, dh; divps xmm0, xmmword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x00000000004189ef: add bl, dh; movq mm0, qword ptr [r8]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000045fcef: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000045fd0f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000045fd8f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000045fd4f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000045fd6f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045fe2f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d69f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000045fcdf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043555e: add bl, sil; bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000045fcee: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000045fd0e: add bl, sil; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000045fd8e: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000045fd6e: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000467e6e: add bpl, al; std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000436f7d: add byte ptr [r13 + 0x31], 0xc0; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x0000000000461d9e: add byte ptr [r14 + riz - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000043864e: add byte ptr [r14 + rsi - 0x80], sil; cmp eax, 0x6e3ff; add byte ptr [rcx + rdx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004113dd: add byte ptr [r15 + rbp - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004500aa: add byte ptr [r8], al; add byte ptr [rax - 1], bh; ret; 
0x000000000040b902: add byte ptr [r8], al; cmovne rax, rdx; ret; 
0x000000000040b876: add byte ptr [r8], al; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000042a2a9: add byte ptr [r8], al; test dh, 8; jne 0x2a25b; ret; 
0x000000000040b862: add byte ptr [r8], r8b; cmovne rax, rdx; ret; 
0x000000000040b85b: add byte ptr [r8], r8b; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000040b914: add byte ptr [r8], r8b; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000042e3be: add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000040b5af: add byte ptr [rax + 0x16], bh; ret; 
0x000000000041683a: add byte ptr [rax + 0x1bb2bfa], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0xb60f; 
0x0000000000471a21: add byte ptr [rax + 0x21], cl; ret 0x290f; 
0x0000000000453677: add byte ptr [rax + 0x21], cl; ret 0x8341; 
0x00000000004666b6: add byte ptr [rax + 0x21], cl; ret 0xc148; 
0x00000000004549a7: add byte ptr [rax + 0x29], cl; imul eax, edx; ret; 
0x0000000000417369: add byte ptr [rax + 0x29], cl; ret 0x394c; 
0x0000000000414458: add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x00000000004141c3: add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x00000000004019d8: add byte ptr [rax + 0x29], cl; ret; 
0x00000000004275d7: add byte ptr [rax + 0x2b], cl; push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000004619a4: add byte ptr [rax + 0x39480000], al; ret; 
0x0000000000411491: add byte ptr [rax + 0x39], cl; clc; jb 0x114a0; xor eax, eax; ret; 
0x000000000046f90f: add byte ptr [rax + 0x39], cl; jg 0x6f93c; je 0x6f920; ret; 
0x000000000041292f: add byte ptr [rax + 0x39], cl; ret 0x4b72; 
0x000000000043bd89: add byte ptr [rax + 0x39], cl; ret 0x5172; 
0x000000000042433e: add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000422a3c: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000041b576: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000040669b: add byte ptr [rax + 0x39], cl; ret; 
0x0000000000474c10: add byte ptr [rax + 0x39], cl; retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000042a309: add byte ptr [rax + 0x41c0315b], dl; pop rsp; pop rbp; ret; 
0x000000000041a94e: add byte ptr [rax + 0x44c88949], dl; movzx ecx, byte ptr [rcx]; test r9b, r9b; jne 0x1a8b0; ret; 
0x0000000000438858: add byte ptr [rax + 0x48], bh; syscall; 
0x0000000000419163: add byte ptr [rax + 0x48], cl; mov dword ptr [rsi], eax; ret; 
0x0000000000419162: add byte ptr [rax + 0x48], r9b; mov dword ptr [rsi], eax; ret; 
0x0000000000416f78: add byte ptr [rax + 0x63], cl; ret; 
0x000000000040b91b: add byte ptr [rax + 0x74], al; leave; ret; 
0x000000000042a1cb: add byte ptr [rax + 0x74], al; scasd eax, dword ptr [rdi]; ret; 
0x000000000042d1af: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000042d52f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x0000000000403efc: add byte ptr [rax + 0x9e], bh; syscall; 
0x0000000000458dff: add byte ptr [rax + 0xba], bh; syscall; 
0x0000000000404d43: add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000458ee6: add byte ptr [rax + 0xca], bh; syscall; cmp rax, -0x1000; ja 0x58f00; ret; 
0x0000000000404df0: add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000404da4: add byte ptr [rax + 0xca], bh; xor sil, 0x80; syscall; 
0x0000000000478cc0: add byte ptr [rax + 0xca], bh; xor sil, 0x81; syscall; 
0x000000000044ec80: add byte ptr [rax + 0xd], bh; syscall; 
0x000000000041861a: add byte ptr [rax + 0xda], bh; syscall; 
0x000000000040432c: add byte ptr [rax + 0xe7], bh; syscall; 
0x0000000000401161: add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000473f6d: add byte ptr [rax + 0xf08323c], al; test dword ptr [rcx + 0x48fff8d5], edx; mov eax, dword ptr [rax]; ret; 
0x0000000000439ee7: add byte ptr [rax + 0xf78027a], al; test bh, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004054cb: add byte ptr [rax + 0xf], cl; clc; lea rsi, [rdx - 8]; jmp 0x12050; nop dword ptr [rax]; ret; 
0x000000000043fd1f: add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x000000000041bf1f: add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x00000000004587da: add byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000043554f: add byte ptr [rax + 0xf], cl; stosd dword ptr [rdi], eax; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000404349: add byte ptr [rax + 1], bh; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404319: add byte ptr [rax + 1], bh; lea rsi, [rip + 0x79242]; syscall; 
0x0000000000412710: add byte ptr [rax + 1], bh; leave; test eax, eax; sete al; ret; 
0x00000000004667bc: add byte ptr [rax + 1], bh; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x000000000046675f: add byte ptr [rax + 1], bh; pop rbp; ret; 
0x0000000000429206: add byte ptr [rax + 1], bh; ret; 
0x000000000042b8d4: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000407cf4: add byte ptr [rax + 1], cl; ret 0x8948; 
0x0000000000466833: add byte ptr [rax + 2], bh; pop rbp; ret; 
0x000000000046441f: add byte ptr [rax + 3], cl; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000462d07: add byte ptr [rax + 8], bh; ret; 
0x0000000000469286: add byte ptr [rax + rax], al; add bh, dh; ret 0x4000; 
0x00000000004587d8: add byte ptr [rax + rax], al; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004114a9: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000040a7e0: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408631: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000462255: add byte ptr [rax + rbp*8 + 0x31], dh; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x00000000004699dc: add byte ptr [rax + rcx*4 + 0x4d], al; ret 0x8b48; 
0x0000000000450ddc: add byte ptr [rax - 0x13f43], al; jmp qword ptr [rsi - 0x75]; 
0x000000000042a217: add byte ptr [rax - 0x1c8af71a], al; lea rax, [rip + 0x367c]; test ch, 8; jne 0x2a1eb; ret; 
0x00000000004602c5: add byte ptr [rax - 0x1c8af71a], al; lea rax, [rip + 0x9ce]; and ch, 8; jne 0x60295; ret; 
0x0000000000460255: add byte ptr [rax - 0x1c8af71a], al; lea rax, [rip + 0xbe]; and ch, 8; jne 0x60225; ret; 
0x000000000042a29f: add byte ptr [rax - 0x1f8af71b], al; lea rax, [rip + 0x41e4]; test dh, 8; jne 0x2a25b; ret; 
0x0000000000459a85: add byte ptr [rax - 0x238af71a], al; lea rax, [rip + 0x14e]; and ch, 8; jne 0x59a45; ret; 
0x000000000042a375: add byte ptr [rax - 0x238af71a], al; lea rax, [rip + 0x75ee]; and ch, 8; jne 0x2a335; ret; 
0x0000000000478aeb: add byte ptr [rax - 0x29767e0e], al; mov edx, 0x7fffffff; syscall; 
0x000000000042c9ae: add byte ptr [rax - 0x2e9b375], dl; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042ce7e: add byte ptr [rax - 0x2e9b375], dl; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000427a5e: add byte ptr [rax - 0x39], cl; add eax, 0x8520e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046d765: add byte ptr [rax - 0x39], cl; ret 0xcab0; 
0x0000000000411347: add byte ptr [rax - 0x39], cl; ret 0xffd8; 
0x0000000000453de5: add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000041c91c: add byte ptr [rax - 0x39], cl; ret; 
0x000000000044eb9f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000422ea0: add byte ptr [rax - 0x39], cl; sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x110f; 
0x00000000004598df: add byte ptr [rax - 0x3f7cb7f8], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040457b: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000004488d1: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x000000000046679f: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x0000000000460261: add byte ptr [rax - 0x418af71b], al; ret; 
0x00000000004667b8: add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x0000000000420371: add byte ptr [rax - 0x4b743], al; jmp qword ptr [rax]; 
0x000000000042a381: add byte ptr [rax - 0x518af71b], al; ret; 
0x0000000000437bbe: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x0000000000437b2e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x0000000000437b5e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x0000000000437b8e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x0000000000411c2e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xb; syscall; 
0x000000000041137e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 3; syscall; 
0x0000000000437bee: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 5; syscall; 
0x000000000042869e: add byte ptr [rax - 0x5e1f00d], dl; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f023], eax; ret; 
0x000000000041f4fa: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000420434: add byte ptr [rax - 0x68], cl; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000040b77f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x21c6; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b67f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x22f6; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000040b79f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x266; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b69f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x396; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000042a13f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xfffe18f6; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000042a11f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xfffe3856; lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x0000000000417a0d: add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004179d2: add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004602a2: add byte ptr [rax - 0x73], cl; adc eax, 0x1566; cmove rax, rdx; ret; 
0x000000000040b732: add byte ptr [rax - 0x73], cl; adc eax, 0x2a06; cmove rax, rdx; ret; 
0x000000000040b632: add byte ptr [rax - 0x73], cl; adc eax, 0x2b16; cmove rax, rdx; ret; 
0x000000000042a1a9: add byte ptr [rax - 0x73], cl; adc eax, 0x2f2f; cmove rax, rdx; ret; 
0x000000000042a1f4: add byte ptr [rax - 0x73], cl; adc eax, 0x3f74; cmovne rax, rdx; ret; 
0x000000000040b85d: add byte ptr [rax - 0x73], cl; adc eax, 0x45db; cmovne rax, rdx; ret; 
0x000000000042a279: add byte ptr [rax - 0x73], cl; adc eax, 0x523f; cmove rax, rdx; ret; 
0x0000000000459af9: add byte ptr [rax - 0x73], cl; adc eax, 0x5c8f; cmove rax, rdx; ret; 
0x0000000000460232: add byte ptr [rax - 0x73], cl; adc eax, 0x676; cmove rax, rdx; ret; 
0x000000000042df8e: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000401acb: add byte ptr [rax - 0x73], cl; add dword ptr [r11 + 0x41], ebx; pop rsp; pop rbp; ret; 
0x00000000004602df: add byte ptr [rax - 0x73], cl; add eax, 0x10d9; test edx, 0x40000000; je 0x602bf; ret; 
0x0000000000429fe0: add byte ptr [rax - 0x73], cl; add eax, 0x1398; cmovne rax, rdx; ret; 
0x0000000000459a9f: add byte ptr [rax - 0x73], cl; add eax, 0x1569; test edx, 0x40000000; je 0x59a7f; ret; 
0x000000000040b759: add byte ptr [rax - 0x73], cl; add eax, 0x18df; cmovne rax, rdx; ret; 
0x000000000040b659: add byte ptr [rax - 0x73], cl; add eax, 0x19ef; cmovne rax, rdx; ret; 
0x000000000040b7a9: add byte ptr [rax - 0x73], cl; add eax, 0x20f; cmovne rax, rdx; ret; 
0x000000000040b789: add byte ptr [rax - 0x73], cl; add eax, 0x216f; cmovne rax, rdx; ret; 
0x000000000040b689: add byte ptr [rax - 0x73], cl; add eax, 0x227f; cmovne rax, rdx; ret; 
0x000000000042a037: add byte ptr [rax - 0x73], cl; add eax, 0x2641; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000042a1bf: add byte ptr [rax - 0x73], cl; add eax, 0x2c39; test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000040b6a9: add byte ptr [rax - 0x73], cl; add eax, 0x31f; cmovne rax, rdx; ret; 
0x000000000042a22f: add byte ptr [rax - 0x73], cl; add eax, 0x3b09; test edx, 0x40000000; je 0x2a211; ret; 
0x0000000000467c9b: add byte ptr [rax - 0x73], cl; add eax, 0x3d; cmovne rax, rdx; ret; 
0x000000000040b80a: add byte ptr [rax - 0x73], cl; add eax, 0x3ede; cmovne rax, rdx; ret; 
0x000000000040b878: add byte ptr [rax - 0x73], cl; add eax, 0x40b0; cmovne rax, rdx; ret; 
0x000000000040b8a0: add byte ptr [rax - 0x73], cl; add eax, 0x47b8; cmovne rax, rdx; ret; 
0x000000000040b828: add byte ptr [rax - 0x73], cl; add eax, 0x4ad0; cmove rax, rdx; ret; 
0x000000000040b8fd: add byte ptr [rax - 0x73], cl; add eax, 0x4b3b; cmovne rax, rdx; ret; 
0x000000000046026f: add byte ptr [rax - 0x73], cl; add eax, 0x4c9; test edx, 0x40000000; je 0x6024f; ret; 
0x000000000042a2b7: add byte ptr [rax - 0x73], cl; add eax, 0x4ca1; test ecx, 0x40000000; je 0x2a299; ret; 
0x000000000040b90f: add byte ptr [rax - 0x73], cl; add eax, 0x4f29; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b96d: add byte ptr [rax - 0x73], cl; add eax, 0x52cb; cmovne rax, rdx; ret; 
0x000000000040b97f: add byte ptr [rax - 0x73], cl; add eax, 0x55b9; test edx, 0x40000000; je 0xb958; ret; 
0x0000000000459b0f: add byte ptr [rax - 0x73], cl; add eax, 0x59b9; test edx, 0x40000000; je 0x59ace; ret; 
0x0000000000467cc0: add byte ptr [rax - 0x73], cl; add eax, 0x5b8; cmovne rax, rdx; ret; 
0x0000000000459b31: add byte ptr [rax - 0x73], cl; add eax, 0x6387; cmove rax, rdx; ret; 
0x000000000042a38f: add byte ptr [rax - 0x73], cl; add eax, 0x82a9; test edx, 0x40000000; je 0x2a36f; ret; 
0x0000000000412509: add byte ptr [rax - 0x73], cl; add eax, 0x9a33f; ret; 
0x000000000040b6ff: add byte ptr [rax - 0x73], cl; add eax, 0xa39; cmovne rax, rdx; ret; 
0x000000000042a3ed: add byte ptr [rax - 0x73], cl; add eax, 0xb10b; cmovne rax, rdx; ret; 
0x000000000040b5ff: add byte ptr [rax - 0x73], cl; add eax, 0xb49; cmovne rax, rdx; ret; 
0x000000000042a3ff: add byte ptr [rax - 0x73], cl; add eax, 0xb6f9; test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a45d: add byte ptr [rax - 0x73], cl; add eax, 0xbadb; cmovne rax, rdx; ret; 
0x000000000042a46f: add byte ptr [rax - 0x73], cl; add eax, 0xc009; test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000429fbb: add byte ptr [rax - 0x73], cl; add eax, 0xe5d; cmovne rax, rdx; ret; 
0x000000000042ae01: add byte ptr [rax - 0x73], cl; add eax, 0xfffffc87; cmovne rax, rdx; ret; 
0x0000000000467931: add byte ptr [rax - 0x73], cl; add eax, 7; cmove rax, rdx; ret; 
0x0000000000413e24: add byte ptr [rax - 0x73], cl; call 0x415d7f88; pop rbp; pop rbp; ret; 
0x000000000040450e: add byte ptr [rax - 0x73], cl; cmp eax, 0x76f92; call 0x4370; xor eax, eax; ret; 
0x000000000041be07: add byte ptr [rax - 0x73], cl; cmp eax, 0x90e39; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x00000000004197fa: add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x19810; ret; 
0x000000000043b836: add byte ptr [rax - 0x73], cl; js 0x3b857; mov eax, 0xca; syscall; 
0x000000000043e054: add byte ptr [rax - 0x73], cl; js 0x3e075; mov eax, 0xca; syscall; 
0x0000000000470475: add byte ptr [rax - 0x73], cl; js 0x70496; mov eax, 0xca; syscall; 
0x0000000000418613: add byte ptr [rax - 0x73], cl; mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x00000000004205f7: add byte ptr [rax - 0x73], cl; mov r14d, 0xfffb4885; jmp qword ptr [rax]; 
0x0000000000430cd5: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000004016c6: add byte ptr [rax - 0x73], cl; push rax; push 0x68408b48; test rax, rax; jne 0x16c0; ret; 
0x0000000000438f2f: add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000458510: add byte ptr [rax - 0x73], cl; xchg dword ptr [rax + 0x48000000], ebp; mov dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000416dac: add byte ptr [rax - 0x73], cl; xor eax, 0x64cfc; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x0000000000404507: add byte ptr [rax - 0x73], cl; xor eax, 0x76f8c; lea rdi, [rip + 0x76f92]; call 0x4370; xor eax, eax; ret; 
0x000000000040434e: add byte ptr [rax - 0x73], cl; xor eax, 0x79212; syscall; 
0x000000000040431e: add byte ptr [rax - 0x73], cl; xor eax, 0x79242; syscall; 
0x000000000043c451: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000043940f: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; push rcx; or dh, dh; ret 0x7401; 
0x0000000000401e90: add byte ptr [rax - 0x75], cl; adc eax, 0xaa9a8; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000044ef67: add byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000041fb99: add byte ptr [rax - 0x75], cl; add al, 0xc8; jmp rax; 
0x00000000004204bc: add byte ptr [rax - 0x75], cl; add al, 0xf0; jmp rax; 
0x0000000000454b6c: add byte ptr [rax - 0x75], cl; add al, 0xf8; ret; 
0x000000000046e5af: add byte ptr [rax - 0x75], cl; add eax, 0x3e5e1; ret; 
0x000000000046e59f: add byte ptr [rax - 0x75], cl; add eax, 0x3e5e9; ret; 
0x000000000046e58f: add byte ptr [rax - 0x75], cl; add eax, 0x3e5f1; ret; 
0x000000000046e57f: add byte ptr [rax - 0x75], cl; add eax, 0x3e5f9; ret; 
0x000000000046e56f: add byte ptr [rax - 0x75], cl; add eax, 0x3e601; ret; 
0x000000000046e55f: add byte ptr [rax - 0x75], cl; add eax, 0x3e609; ret; 
0x000000000046e54f: add byte ptr [rax - 0x75], cl; add eax, 0x3e611; ret; 
0x000000000046e53f: add byte ptr [rax - 0x75], cl; add eax, 0x3e619; ret; 
0x000000000046e52f: add byte ptr [rax - 0x75], cl; add eax, 0x3e621; ret; 
0x000000000046e51f: add byte ptr [rax - 0x75], cl; add eax, 0x3e629; ret; 
0x000000000046e507: add byte ptr [rax - 0x75], cl; add eax, 0x3e691; ret; 
0x00000000004571bf: add byte ptr [rax - 0x75], cl; and cl, cl; jmp rax; 
0x000000000041133d: add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000447b1f: add byte ptr [rax - 0x75], cl; cwde; push 0; call rax; 
0x0000000000412c8f: add byte ptr [rax - 0x75], cl; jbe 0x12cac; sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x0000000000454f9c: add byte ptr [rax - 0x75], cl; mov byte ptr [rax + 0x48000000], ah; mov dword ptr [rcx + 0xe0], edx; ret; 
0x0000000000437c9d: add byte ptr [rax - 0x75], cl; mov ebp, 0xffffff10; mov eax, 0x4f; syscall; 
0x00000000004459cf: add byte ptr [rax - 0x75], cl; mov r8b, 0xbe; add eax, 0xe9000000; ret 0xfffe; 
0x00000000004654ab: add byte ptr [rax - 0x75], cl; movabs al, byte ptr [0x348087e8d49d231]; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x000000000041325f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x00000000004186c8: add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000004571cf: add byte ptr [rax - 0x75], cl; pop rbp; clc; mov eax, 0xffffffff; leave; ret; 
0x000000000046226c: add byte ptr [rax - 0x75], cl; pop rbp; clc; mov eax, 1; leave; ret; 
0x000000000042342b: add byte ptr [rax - 0x75], cl; pop rbp; clc; mov qword ptr [rdx + 0xe0], rcx; leave; ret; 
0x0000000000466bf4: add byte ptr [rax - 0x75], cl; pop rbp; clc; xor eax, eax; leave; ret; 
0x0000000000445969: add byte ptr [rax - 0x75], cl; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x0000000000449835: add byte ptr [rax - 0x75], cl; pop rsp; ret; 
0x0000000000420871: add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x000000000040507f: add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000424117: add byte ptr [rax - 0x75], cl; push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x00000000004503ef: add byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x75], cl; push rax; sub byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ret 0x673; 
0x000000000044a67a: add byte ptr [rax - 0x76b7bcc8], al; ret; 
0x0000000000458517: add byte ptr [rax - 0x77], cl; adc byte ptr [r15], r9b; adc dword ptr [rdi], eax; ret; 
0x000000000046de4d: add byte ptr [rax - 0x77], cl; adc cl, cl; ret; 
0x0000000000449736: add byte ptr [rax - 0x77], cl; adc eax, 0x5e2da; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x000000000044972f: add byte ptr [rax - 0x77], cl; add eax, 0x5e2d9; mov qword ptr [rip + 0x5e2da], rdx; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x0000000000405251: add byte ptr [rax - 0x77], cl; add eax, 0xa0ed7; ret; 
0x0000000000405231: add byte ptr [rax - 0x77], cl; add eax, 0xa0eef; ret; 
0x0000000000405201: add byte ptr [rax - 0x77], cl; add eax, 0xa0f17; ret; 
0x00000000004020d2: add byte ptr [rax - 0x77], cl; add eax, 0xaa8b6; pop rbx; pop rbp; ret; 
0x00000000004639a7: add byte ptr [rax - 0x77], cl; and byte ptr [r11 + r9*4 + 0x70], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000046e323: add byte ptr [rax - 0x77], cl; and byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000452e8c: add byte ptr [rax - 0x77], cl; call 0xfffffffff6cdb7dd; ret 0xf01; 
0x0000000000418b0c: add byte ptr [rax - 0x77], cl; clc; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x00000000004124c0: add byte ptr [rax - 0x77], cl; cmp eax, 0x9a3a8; cmp qword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x000000000046bfc4: add byte ptr [rax - 0x77], cl; fidiv word ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x0000000000419bd0: add byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 9]; syscall; 
0x000000000045804f: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4d89; 
0x0000000000458f86: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000470934: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000439cfa: add byte ptr [rax - 0x77], cl; imul eax; popfq; jae 0x39cfe; dec dword ptr [rax - 0x77]; ret; 
0x00000000004781a7: add byte ptr [rax - 0x77], cl; imul ecx; sar byte ptr [rsi - 0x166f0001], 0xbf; xchg ebx, eax; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000478a4a: add byte ptr [rax - 0x77], cl; in eax, 0xe8; lodsd eax, dword ptr [rsi]; ret 0xfff8; 
0x0000000000458a6d: add byte ptr [rax - 0x77], cl; in eax, 0xe8; mov al, dl; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004549ca: add byte ptr [rax - 0x77], cl; in eax, 0xe8; popfq; stc; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000478a8b: add byte ptr [rax - 0x77], cl; iretd; mov eax, 0xca; syscall; 
0x000000000046c32c: add byte ptr [rax - 0x77], cl; mov byte ptr [r9 - 0x77], r9b; jmp qword ptr [rdi - 0x18]; 
0x0000000000404237: add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000043af65: add byte ptr [rax - 0x77], cl; movabs r8, 0x8949fffcf880e867; ret 0x8548; 
0x000000000046d773: add byte ptr [rax - 0x77], cl; nop; nop; add eax, dword ptr [rax]; add cl, cl; ret; 
0x0000000000455ac6: add byte ptr [rax - 0x77], cl; or bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000418608: add byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; add eax, 0x942fc; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004118f8: add byte ptr [rax - 0x77], cl; push rbp; clc; lea rdx, [rbp - 0x1010]; syscall; 
0x0000000000416ab4: add byte ptr [rax - 0x77], cl; push rbp; shl byte ptr [rdi - 0x18], 0x31; cmp eax, 0x8948ffff; ret; 
0x0000000000422b95: add byte ptr [rax - 0x77], cl; push rdi; or cl, ch; ret; 
0x0000000000404498: add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x41], 1; pop rsp; add qword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x0000000000422ea8: add byte ptr [rax - 0x77], cl; ret 0x110f; 
0x000000000045322c: add byte ptr [rax - 0x77], cl; ret 0x15ff; 
0x0000000000422a83: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000042437a: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000046a04f: add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000047710e: add byte ptr [rax - 0x77], cl; ret 0x69e8; 
0x0000000000409167: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000043e698: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000420a7f: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004043ac: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004083e4: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000408524: add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000475332: add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x000000000045417f: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000423016: add byte ptr [rax - 0x77], cl; ret 0xc985; 
0x000000000046633f: add byte ptr [rax - 0x77], cl; ret 0xf8e8; 
0x00000000004061de: add byte ptr [rax - 0x77], cl; ret; 
0x0000000000430ed2: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000045dd7f: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000046683f: add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0xf], 1; mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x000000000046bc49: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x0000000000478e47: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 9], 1; rol byte ptr [rbx + 0x394901e0], 1; ret 0xad75; 
0x000000000046e1ef: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000004186b8: add byte ptr [rax - 0x77], cl; sbb eax, 0x8c938; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000417e62: add byte ptr [rax - 0x77], cl; xchg dword ptr [rax + 0x5d000004], edx; ret; 
0x0000000000439b25: add byte ptr [rax - 0x77], cl; xlatb; call rsi; 
0x0000000000404cca: add byte ptr [rax - 0x7b], cl; dec dword ptr [rdi]; test ah, ch; ret; 
0x0000000000413b44: add byte ptr [rax - 0x7b], cl; div byte ptr [rsi + rax + 0x44]; mov eax, eax; ret; 
0x0000000000455d57: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000040851b: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; retf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000413bc8: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; wait; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041124a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rdx + 0x55], 0x48; mov ebp, esp; call rax; 
0x000000000046d578: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000040100e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000447ea3: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rbx + 0x48], cl; mov edi, ebx; call rdx; 
0x000000000041c796: add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rdx + 0x48], 1; ret; 
0x000000000040b34a: add byte ptr [rax - 0x7c1076b4], dl; ret; 
0x000000000040919a: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000409595: add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x0000000000410321: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004124c7: add byte ptr [rax - 0x7d], cl; cmp eax, 0x9a388; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x9a377]; ret; 
0x000000000047729e: add byte ptr [rax - 0x7d], cl; in al, dx; adc byte ptr [rdi - 0x18], ah; out 0x24, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000463503: add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000409c24: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000040879f: add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x0000000000436aff: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000004371ff: add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x000000000047573f: add byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x000000000045ffff: add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x000000000043b41f: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000414e69: add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x000000000046a6b2: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x0000000000413f50: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000042a9bf: add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000430d5f: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d93c: add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x0000000000462cbf: add byte ptr [rax - 0x7d], cl; ret 0xc701; 
0x000000000042a838: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000045db59: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430d83: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000404e9f: add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004309ff: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000435e5f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000449728: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000041ddf9: add byte ptr [rax - 0x8e743], al; jmp qword ptr [rax]; 
0x00000000004114ad: add byte ptr [rax - 1], bh; ret; 
0x000000000045609e: add byte ptr [rax - 1], dil; ret; 
0x0000000000406bab: add byte ptr [rax - 9], cl; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x0000000000409eea: add byte ptr [rax - 9], cl; fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x0000000000404d40: add byte ptr [rax], 0; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000458f83: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x000000000047a15b: add byte ptr [rax], 0; add byte ptr [rax], al; add dword ptr [rdi + 4], 1; pop rbp; ret; 
0x000000000042bafb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042bb1b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b7fb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000046870b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x00000000004666db: add byte ptr [rax], 0; add byte ptr [rax], al; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000041b74b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000043e31b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000447efb: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x000000000042793b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x000000000041144b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; xor eax, eax; syscall; 
0x0000000000404ac3: add byte ptr [rax], 0; add byte ptr [rax], al; leave; mov rax, r10; ret; 
0x0000000000458e83: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000042768b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000044eb6b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411b7b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000461b13: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000468b5b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004189eb: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [r8]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000045fcdb: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004054db: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000004275d3: add byte ptr [rax], 0; add byte ptr [rax], al; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000046c783: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000428457: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x000000000040fe56: add byte ptr [rax], 0; add byte ptr [rdi + 0x24], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000432a00: add byte ptr [rax], 0; add byte ptr [rdi], cl; xchg dword ptr [rbp + rdi*8 - 0x3fce0001], esp; ret; 
0x0000000000436556: add byte ptr [rax], ah; ret; 
0x000000000041d797: add byte ptr [rax], al; add al, ch; movabs eax, dword ptr [0xfff71885c6fffe71]; jmp qword ptr [rax]; 
0x000000000044baa5: add byte ptr [rax], al; add al, ch; push rbp; sti; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000403a76: add byte ptr [rax], al; add al, ch; ret 0xffe0; 
0x0000000000456d15: add byte ptr [rax], al; add al, ch; ret; 
0x0000000000458844: add byte ptr [rax], al; add al, dh; cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x00000000004667bf: add byte ptr [rax], al; add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; pop rbp; ret; 
0x00000000004279ff: add byte ptr [rax], al; add bh, al; add eax, 0x85264; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041d7f5: add byte ptr [rax], al; add bh, al; test eax, esi; idiv bh; call qword ptr [rax]; 
0x000000000040197c: add byte ptr [rax], al; add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x0000000000435818: add byte ptr [rax], al; add bl, dh; bsf eax, eax; jmp 0x35ab9; xor eax, eax; ret; 
0x000000000046034a: add byte ptr [rax], al; add bl, dh; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x00000000004189ed: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [r8]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000045fcdd: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000461d9c: add byte ptr [rax], al; add byte ptr [r14 + riz - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000042e3bc: add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000040b5ad: add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; ret; 
0x0000000000471a1f: add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x290f; 
0x0000000000414456: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8b48; 
0x00000000004141c1: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x0000000000415415: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004275d5: add byte ptr [rax], al; add byte ptr [rax + 0x2b], cl; push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000041b573: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000046cee2: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000474c0e: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x0000000000438856: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x000000000040b919: add byte ptr [rax], al; add byte ptr [rax + 0x74], al; leave; ret; 
0x000000000042a1c9: add byte ptr [rax], al; add byte ptr [rax + 0x74], al; scasd eax, dword ptr [rdi]; ret; 
0x000000000042d52d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x0000000000458dfd: add byte ptr [rax], al; add byte ptr [rax + 0xba], bh; syscall; 
0x0000000000404d41: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000458ee4: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; cmp rax, -0x1000; ja 0x58f00; ret; 
0x0000000000404dee: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000404da2: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor sil, 0x80; syscall; 
0x0000000000478cbe: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor sil, 0x81; syscall; 
0x000000000044ec7e: add byte ptr [rax], al; add byte ptr [rax + 0xd], bh; syscall; 
0x000000000040432a: add byte ptr [rax], al; add byte ptr [rax + 0xe7], bh; syscall; 
0x000000000040115f: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000043fd1d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x000000000041bf1d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x0000000000404347: add byte ptr [rax], al; add byte ptr [rax + 1], bh; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404317: add byte ptr [rax], al; add byte ptr [rax + 1], bh; lea rsi, [rip + 0x79242]; syscall; 
0x000000000041270e: add byte ptr [rax], al; add byte ptr [rax + 1], bh; leave; test eax, eax; sete al; ret; 
0x000000000046675d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbp; ret; 
0x00000000004666d0: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000466831: add byte ptr [rax], al; add byte ptr [rax + 2], bh; pop rbp; ret; 
0x000000000046441d: add byte ptr [rax], al; add byte ptr [rax + 3], cl; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000478ae9: add byte ptr [rax], al; add byte ptr [rax - 0x29767e0e], al; mov edx, 0x7fffffff; syscall; 
0x000000000042c9ac: add byte ptr [rax], al; add byte ptr [rax - 0x2e9b375], dl; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042ce7c: add byte ptr [rax], al; add byte ptr [rax - 0x2e9b375], dl; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000427a5c: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x8520e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000411465: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffd8; 
0x0000000000453de3: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000041c91a: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004598dd: add byte ptr [rax], al; add byte ptr [rax - 0x3f7cb7f8], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000404579: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000004488cf: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x000000000046025f: add byte ptr [rax], al; add byte ptr [rax - 0x418af71b], al; ret; 
0x000000000042095d: add byte ptr [rax], al; add byte ptr [rax - 0x4b743], al; jmp qword ptr [rax]; 
0x0000000000437bbc: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x0000000000437b2c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x0000000000437b5c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x0000000000437b8c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x0000000000411c2c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xb; syscall; 
0x000000000041137c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 3; syscall; 
0x0000000000437bec: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 5; syscall; 
0x000000000042869c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f023], eax; ret; 
0x000000000041f982: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000420432: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000040b79d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x266; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b69d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x396; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000042a13d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0xfffe18f6; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000042df8c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004602dd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x10d9; test edx, 0x40000000; je 0x602bf; ret; 
0x0000000000459a9d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x1569; test edx, 0x40000000; je 0x59a7f; ret; 
0x000000000042a1bd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2c39; test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000046026d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x4c9; test edx, 0x40000000; je 0x6024f; ret; 
0x0000000000459b0d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x59b9; test edx, 0x40000000; je 0x59ace; ret; 
0x000000000042a38d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x82a9; test edx, 0x40000000; je 0x2a36f; ret; 
0x000000000043b834: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x3b857; mov eax, 0xca; syscall; 
0x000000000043e052: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x3e075; mov eax, 0xca; syscall; 
0x0000000000470473: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x70496; mov eax, 0xca; syscall; 
0x0000000000438f2d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000040434c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x79212; syscall; 
0x000000000040431c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x79242; syscall; 
0x000000000043940d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x75], cl; push rcx; or dh, dh; ret 0x7401; 
0x000000000044ef65: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000042053c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0xf0; jmp rax; 
0x000000000046e5ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e5e1; ret; 
0x000000000046e59d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e5e9; ret; 
0x000000000046e58d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e5f1; ret; 
0x000000000046e57d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e5f9; ret; 
0x000000000046e56d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e601; ret; 
0x000000000046e55d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e609; ret; 
0x000000000046e54d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e611; ret; 
0x000000000046e53d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e619; ret; 
0x000000000046e52d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e621; ret; 
0x000000000046e51d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e629; ret; 
0x00000000004571bd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and cl, cl; jmp rax; 
0x0000000000454f9a: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov byte ptr [rax + 0x48000000], ah; mov dword ptr [rcx + 0xe0], edx; ret; 
0x00000000004459cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov r8b, 0xbe; add eax, 0xe9000000; ret 0xfffe; 
0x000000000041325d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x00000000004376fe: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000445967: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x000000000040507d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000458515: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [r15], r9b; adc dword ptr [rdi], eax; ret; 
0x000000000040524f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa0ed7; ret; 
0x000000000040522f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa0eef; ret; 
0x00000000004051ff: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa0f17; ret; 
0x0000000000452e8a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffff6cdb7dd; ret 0xf01; 
0x0000000000419bce: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 9]; syscall; 
0x000000000045804d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4d89; 
0x0000000000458f84: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000478a89: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; iretd; mov eax, 0xca; syscall; 
0x000000000046c32a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov byte ptr [r9 - 0x77], r9b; jmp qword ptr [rdi - 0x18]; 
0x0000000000404235: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000043af63: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; movabs r8, 0x8949fffcf880e867; ret 0x8548; 
0x00000000004118f6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rbp; clc; lea rdx, [rbp - 0x1010]; syscall; 
0x0000000000422b93: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rdi; or cl, ch; ret; 
0x0000000000422ea6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x110f; 
0x000000000045322a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x15ff; 
0x0000000000424486: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000047710c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x69e8; 
0x0000000000416c8d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000043e696: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000420a7d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000042756d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000408522: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000475330: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x00000000004061dc: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046bc47: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x0000000000439b23: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; call rsi; 
0x0000000000413b42: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rsi + rax + 0x44]; mov eax, eax; ret; 
0x0000000000455d55: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000040100c: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000447ea1: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rbx + 0x48], cl; mov edi, ebx; call rdx; 
0x0000000000409c22: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000436afd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000004371fd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x000000000047573d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x000000000043b41d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000413f4e: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000042a9bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000435423: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043544d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000404e9d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004309fd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000004114ab: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000409ee8: add byte ptr [rax], al; add byte ptr [rax - 9], cl; fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000042e3ba: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000040b5ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; ret; 
0x000000000041833b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000042d52b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x0000000000458dfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xba], bh; syscall; 
0x0000000000411d7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffd8; 
0x00000000004598db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x3f7cb7f8], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000042095b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x4b743], al; jmp qword ptr [rax]; 
0x0000000000437bba: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x0000000000437b2a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x0000000000437b5a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x0000000000437b8a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x0000000000411c2a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xb; syscall; 
0x000000000041137a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 3; syscall; 
0x0000000000437bea: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 5; syscall; 
0x0000000000438f2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000046e5ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e5e1; ret; 
0x000000000046e59b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e5e9; ret; 
0x000000000046e58b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e5f1; ret; 
0x000000000046e57b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e5f9; ret; 
0x000000000046e56b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e601; ret; 
0x000000000046e55b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e609; ret; 
0x000000000046e54b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e611; ret; 
0x000000000046e53b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e619; ret; 
0x000000000046e52b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e621; ret; 
0x000000000046e51b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3e629; ret; 
0x00000000004459cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov r8b, 0xbe; add eax, 0xe9000000; ret 0xfffe; 
0x000000000041325b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x000000000045804b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x4d89; 
0x0000000000416c8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000420a7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000042756b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004061da: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000439b21: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; call rsi; 
0x0000000000436afb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000004371fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x000000000047573b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x000000000043b41b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000404e9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004309fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000004583eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000473dc4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000427c60: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x0000000000439b20: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; call rsi; 
0x00000000004292d0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x00000000004268a9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045fc1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000453e2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x634d01c1], al; in al, 0x88; or cl, ch; ret; 
0x000000000040b76b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x2fc6; jne 0xb729; ret; 
0x000000000040b66b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3106; jne 0xb629; ret; 
0x000000000042a10b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0xfffe4666; jne 0x2a0c9; ret; 
0x000000000047623b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf41f3f8], cl; outsd dx, dword ptr [rsi]; add eax, dword ptr [rbx - 0x7cb6fe39]; ret; 
0x0000000000436d3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000430d3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042f65b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000047213b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; add cl, byte ptr [rax - 0x7d]; ret 0x4c01; 
0x000000000044ccdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000042bb0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000419b9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x0000000000427c62: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x0000000000437aa9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; 
0x0000000000438969: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 1; syscall; 
0x0000000000412419: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x000000000045fbe9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000468af9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x0000000000401ec9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor edi, edi; mov eax, edx; syscall; 
0x000000000047a15c: add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rdi + 4], 1; pop rbp; ret; 
0x000000000040b76c: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x2fc6]; jne 0xb729; ret; 
0x000000000040b66c: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x3106]; jne 0xb629; ret; 
0x000000000042a10c: add byte ptr [rax], al; add byte ptr [rax], al; and edx, 0x20; lea rax, [rip - 0x1b99a]; jne 0x2a0c9; ret; 
0x000000000042bafc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042bb0c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042bb1c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b7fc: add byte ptr [rax], al; add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000046870c: add byte ptr [rax], al; add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x00000000004666dc: add byte ptr [rax], al; add byte ptr [rax], al; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000047039c: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000042840c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; and edi, 2; je 0x28420; ret; 
0x0000000000422bdc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0x833bc], 0; je 0x22bef; ret; 
0x0000000000411e6c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0x63; syscall; 
0x0000000000411bfc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xa; syscall; 
0x000000000042618c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004384ac: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 8; syscall; 
0x000000000041b78c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000041b76c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000041b74c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004278ac: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000043e30c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x000000000043e31c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000042792c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000473fdc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047406c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000447efc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x000000000042790c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x000000000045984c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000042793c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x000000000047416c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; nop; ret; 
0x000000000040170c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x00000000004257ac: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; test byte ptr [rdi], 0x80; jne 0x257c0; ret; 
0x00000000004268cc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000041144c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; syscall; 
0x000000000045ffcc: add byte ptr [rax], al; add byte ptr [rax], al; jmp 0x60040; nop dword ptr [rax]; mov eax, ecx; ret; 
0x0000000000463b05: add byte ptr [rax], al; add byte ptr [rax], al; jmp 0x64c70; nop; ret; 
0x000000000041f195: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x000000000042e43c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000042e44c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000042e45c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000042e46c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000042e47c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000042e3cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000042e3dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000042e3ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000042e3fc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000042e40c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000042e41c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000042e42c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000042df8b: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004602dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x10d9]; test edx, 0x40000000; je 0x602bf; ret; 
0x0000000000459a9c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x1569]; test edx, 0x40000000; je 0x59a7f; ret; 
0x000000000042a1bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x2c39]; test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000046026c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x4c9]; test edx, 0x40000000; je 0x6024f; ret; 
0x0000000000459b0c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x59b9]; test edx, 0x40000000; je 0x59ace; ret; 
0x000000000042a38c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x82a9]; test edx, 0x40000000; je 0x2a36f; ret; 
0x0000000000404ac4: add byte ptr [rax], al; add byte ptr [rax], al; leave; mov rax, r10; ret; 
0x0000000000401982: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x000000000042d52c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbdc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000045fbfc: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000041f181: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x4a8], 0; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x000000000041f18b: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x000000000044febf: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], 0; ret; 
0x00000000004279fe: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rip + 0x85264], 0; ret; 
0x000000000042d53c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000040b5ac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x0000000000458dfc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xba; syscall; 
0x000000000042768c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000046675c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x00000000004666cf: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000466830: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; pop rbp; ret; 
0x000000000045f0ac: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045f54c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045fc1c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000419b9c: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x00000000004786b2: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x0000000000463afd: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x10], 0; jmp 0x64c70; nop; ret; 
0x00000000004267eb: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x0000000000427a5b: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x8520e], 0; ret; 
0x000000000044eb6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411b7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000461b14: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000046e5bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000046e5ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5e1]; ret; 
0x000000000046e59c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5e9]; ret; 
0x000000000046e58c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5f1]; ret; 
0x000000000046e57c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5f9]; ret; 
0x000000000046e56c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e601]; ret; 
0x000000000046e55c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e609]; ret; 
0x000000000046e54c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e611]; ret; 
0x000000000046e53c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e619]; ret; 
0x000000000046e52c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e621]; ret; 
0x000000000046e51c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e629]; ret; 
0x00000000004376fd: add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045fc5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000439b22: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; call rsi; 
0x00000000004189ec: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [r8]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000045fcdc: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000455f0b: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000045663d: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425d06: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043a132: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004344fc: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000044eb98: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000436ea9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000437aaa: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x27; syscall; 
0x0000000000437bbb: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x90; syscall; 
0x0000000000437b2b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x91; syscall; 
0x0000000000437b5b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x92; syscall; 
0x0000000000437b8b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x93; syscall; 
0x0000000000411c2b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0xb; syscall; 
0x000000000043896a: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 1; syscall; 
0x000000000041137b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 3; syscall; 
0x0000000000437beb: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 5; syscall; 
0x000000000041241a: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; ret; 
0x000000000042e3bb: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000042e3ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000045fbea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000429630: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; leave; ret; 
0x00000000004292d2: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x0000000000401eca: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor edi, edi; mov eax, edx; syscall; 
0x00000000004251ab: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004619f3: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop r12; pop rbp; ret; 
0x00000000004054dc: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004275d4: add byte ptr [rax], al; add byte ptr [rax], al; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000040100b: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x0000000000401730: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401772: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; 
0x00000000004101bc: add byte ptr [rax], al; add byte ptr [rax], al; vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000046c6dc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042e1ec: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004584bf: add byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004540e8: add byte ptr [rax], al; add byte ptr [rbp + 0x15], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000411920: add byte ptr [rax], al; add byte ptr [rbp + 0x18], dh; leave; ret; 
0x0000000000458619: add byte ptr [rax], al; add byte ptr [rbp + 0x19], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004622eb: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; leave; ret; 
0x0000000000461ea2: add byte ptr [rax], al; add byte ptr [rbp + 0x1c], dh; leave; mov eax, edx; ret; 
0x0000000000462099: add byte ptr [rax], al; add byte ptr [rbp + 0x1e], dh; leave; ret; 
0x000000000043712c: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000462611: add byte ptr [rax], al; add byte ptr [rbp + 0x26], dh; leave; ret; 
0x00000000004601da: add byte ptr [rax], al; add byte ptr [rbp + 0x29], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467c0c: add byte ptr [rax], al; add byte ptr [rbp + 0x2f], dh; leave; ret; 
0x000000000042844e: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000458ed7: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000411404: add byte ptr [rax], al; add byte ptr [rbp + 0x3a], dh; leave; ret; 
0x0000000000461dbb: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000044ed22: add byte ptr [rax], al; add byte ptr [rbp + 0x3c], dh; leave; mov eax, edx; ret; 
0x00000000004388d9: add byte ptr [rax], al; add byte ptr [rbp + 0x3d], dh; leave; ret; 
0x0000000000452f34: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000438844: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; leave; ret; 
0x0000000000411d38: add byte ptr [rax], al; add byte ptr [rbp + 0x58], dh; leave; ret; 
0x0000000000466352: add byte ptr [rax], al; add byte ptr [rbp + 0x70], dh; leave; ret; 
0x0000000000429783: add byte ptr [rax], al; add byte ptr [rbp + 0x72], dh; leave; ret; 
0x000000000046e609: add byte ptr [rax], al; add byte ptr [rbp + 0xb], dh; leave; ret; 
0x00000000004705d4: add byte ptr [rax], al; add byte ptr [rbp + 0xc], dh; leave; ret; 
0x000000000046238a: add byte ptr [rax], al; add byte ptr [rbp + 0xd], dh; leave; ret; 
0x00000000004123f0: add byte ptr [rax], al; add byte ptr [rbp + 2], dh; leave; ret; 
0x0000000000461d51: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; leave; movzx eax, al; ret; 
0x00000000004285b5: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000470e01: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; cmp qword ptr [r9 + 0x38], 0; je 0x70e0f; leave; ret; 
0x000000000040b0b9: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000456a92: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2d], cl; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 4; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004594c9: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x63], cl; or al, 0xf6; ret 0x7502; 
0x000000000044e8df: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x70], cl; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x000000000046931c: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004022ea: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; fimul word ptr [rcx - 0x77]; fimul dword ptr [rbp - 0x77]; ret; 
0x0000000000411980: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], bl; ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x0000000000450025: add byte ptr [rax], al; add byte ptr [rbx + 0x178901ea], al; ret; 
0x0000000000459347: add byte ptr [rax], al; add byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x000000000040b546: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x000000000042304e: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x00000000004506f9: add byte ptr [rax], al; add byte ptr [rbx + 0x44], bl; mov eax, esp; pop r12; pop rbp; ret; 
0x000000000042d56d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000045fc1d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000047a15d: add byte ptr [rax], al; add byte ptr [rbx + 0x5d010447], al; ret; 
0x000000000045f54d: add byte ptr [rax], al; add byte ptr [rbx + 0x62fd164c], cl; loope 0x5f5d4; or byte ptr [rsi + 7], bh; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000444578: add byte ptr [rax], al; add byte ptr [rbx + 0x634807e3], al; ror dword ptr [rax + 0x39], cl; ret 0x8d0f; 
0x0000000000453e2d: add byte ptr [rax], al; add byte ptr [rbx + 0x634d01c1], al; in al, 0x88; or cl, ch; ret; 
0x000000000045f0ad: add byte ptr [rax], al; add byte ptr [rbx - 0x3a02e9b4], cl; stc; jle 0x5f0bf; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000040b76d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x2fc6; jne 0xb729; ret; 
0x000000000040b66d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3106; jne 0xb629; ret; 
0x000000000042a10d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7df1e], al; add eax, 0xfffe4666; jne 0x2a0c9; ret; 
0x000000000042a19d: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x3026; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x0000000000459aed: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x5d86; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x000000000043d596: add byte ptr [rax], al; add byte ptr [rbx - 0x7af0fe08], al; ret; 
0x0000000000453e46: add byte ptr [rax], al; add byte ptr [rbx - 0xa34b], cl; dec dword ptr [rbp + 0x63480156]; ror byte ptr [rax + 0x39], cl; ret 0x9c0f; 
0x0000000000454519: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop r13; pop r14; pop rbp; ret; 
0x000000000041677b: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x000000000044805d: add byte ptr [rax], al; add byte ptr [rcx + 0x5d415bd0], cl; pop rbp; ret; 
0x0000000000417187: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8d48; 
0x000000000047623d: add byte ptr [rax], al; add byte ptr [rcx + 0xf41f3f8], cl; outsd dx, dword ptr [rsi]; add eax, dword ptr [rbx - 0x7cb6fe39]; ret; 
0x0000000000401a47: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; xchg esi, eax; ret; 
0x0000000000436d3d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000470e3b: add byte ptr [rax], al; add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; leave; ret; 
0x00000000004788e4: add byte ptr [rax], al; add byte ptr [rcx + rax - 0x19], cl; syscall; 
0x000000000047742a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x60], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000047a2f2: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004593fb: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000042a4c4: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop rbp; ret; 
0x00000000004791cf: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x21], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004788a3: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x31], cl; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478e77: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x31], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047a274: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x32], al; mov eax, 0xca; syscall; 
0x0000000000404c29: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x000000000042931e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000042957a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000404797: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x39], cl; mov esi, r13d; call rax; 
0x0000000000428458: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x0000000000458d4a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x000000000041897f: add byte ptr [rax], al; add byte ptr [rcx + rdi - 0x3a], cl; jae 0x189d8; ret; 
0x000000000042a5d0: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x0000000000443863: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret 0x8d49; 
0x0000000000403af7: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x3ee8; 
0x0000000000403b0b: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000402c08: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; retf 0x8102; ret 0x97; 
0x0000000000430d3d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042f65d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000453cad: add byte ptr [rax], al; add byte ptr [rcx - 0xa37b], cl; dec dword ptr [rbp + 0x63]; in al, 0xe9; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000041009f: add byte ptr [rax], al; add byte ptr [rcx - 1], bh; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000041e3fe: add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x000000000042e8b8: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x840f; 
0x000000000042e978: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xf9c5; 
0x000000000042e918: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xfac5; 
0x000000000044d72e: add byte ptr [rax], al; add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x0000000000468a0a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000042baba: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000040a733: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x000000000041f37e: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], cl; add al, 0xc8; jmp rax; 
0x0000000000458d95: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000466d6d: add byte ptr [rax], al; add byte ptr [rcx], dh; shr bl, 0xcc; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000040fe57: add byte ptr [rax], al; add byte ptr [rdi + 0x24], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000403ef5: add byte ptr [rax], al; add byte ptr [rdi + 0x5001], bh; mov eax, 0x9e; syscall; 
0x000000000041998f: add byte ptr [rax], al; add byte ptr [rdi + 0x5002], bh; mov eax, 0x9e; syscall; 
0x0000000000419aeb: add byte ptr [rax], al; add byte ptr [rdi + 0x5005], bh; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x00000000004047e1: add byte ptr [rax], al; add byte ptr [rdi + 0xa3bde0d], al; add byte ptr [rbx + 0x617f01f9], al; call rax; 
0x0000000000473e2b: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x000000000040115a: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; mov eax, 0xe; syscall; 
0x0000000000473df7: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x0000000000404342: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404312: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x000000000040a1fd: add byte ptr [rax], al; add byte ptr [rdi + rcx + 0x46], cl; ret 0x2a8; 
0x000000000047213d: add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; add cl, byte ptr [rax - 0x7d]; ret 0x4c01; 
0x000000000044d41a: add byte ptr [rax], al; add byte ptr [rdi - 0x18], ah; insd dword ptr [rdi], dx; ret; 
0x000000000046a9ce: add byte ptr [rax], al; add byte ptr [rdi - 0x18], ah; or eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000044b2c5: add byte ptr [rax], al; add byte ptr [rdi - 0x18], ah; ret 0xfbe4; 
0x0000000000413b14: add byte ptr [rax], al; add byte ptr [rdi - 0x18], ah; ret; 
0x000000000040e16b: add byte ptr [rax], al; add byte ptr [rdi], cl; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000455f0c: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; leave; ret; 
0x000000000045663e: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425d07: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043a133: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004102c9: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000411262: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x1d75c085; xor eax, eax; ret; 
0x000000000044ccdd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000044455f: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4d; ret 0xcf89; 
0x00000000004344fd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042bb1d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042bb0d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042bb2d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2bb70; add rax, rdi; ret; 
0x00000000004105cd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000041048d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000042df2d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x000000000042bafd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000004624f6: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax - 0x37000000], edi; ret; 
0x0000000000438678: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx - 0x37000000], esp; ret; 
0x000000000044eddc: add byte ptr [rax], al; add byte ptr [rdi], cl; test esp, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000432a01: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rbp + rdi*8 - 0x3fce0001], esp; ret; 
0x0000000000416840: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0xb60f; 
0x000000000040433d: add byte ptr [rax], al; add byte ptr [rdx + 0x2d], bh; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x00000000004777b5: add byte ptr [rax], al; add byte ptr [rdx + 0x63], cl; jl 0x777bd; or byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x00000000004101bd: add byte ptr [rax], al; add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x101c6; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000404d3c: add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; mov eax, 0xca; syscall; 
0x000000000043e1ef: add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; mov eax, ebx; syscall; 
0x0000000000404de9: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x0000000000404de9: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x0000000000419b9d: add byte ptr [rax], al; add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x000000000044e070: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x8948; 
0x0000000000427c64: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000044e10f: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x000000000042ba22: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x000000000041998a: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000429575: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000040519a: add byte ptr [rax], al; add byte ptr [rsi + 1], dh; ret; 
0x00000000004191bd: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x48], dh; test edx, edx; je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x0000000000437aab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; 
0x0000000000437aab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; ret; 
0x000000000043896b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 1; syscall; 
0x0000000000461cdb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000041241b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x000000000045fbeb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042d68b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000468afb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x0000000000401ecb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor edi, edi; mov eax, edx; syscall; 
0x0000000000455e65: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000044e06c: add byte ptr [rax], al; add byte ptr [rsi], cl; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x8948; 
0x000000000040e84b: add byte ptr [rax], al; add cl, al; loope 0xe857; add rcx, r9; jmp rcx; 
0x0000000000444e76: add byte ptr [rax], al; add cl, ch; ret 0xfffb; 
0x00000000004459d6: add byte ptr [rax], al; add cl, ch; ret 0xfffe; 
0x00000000004707b4: add byte ptr [rax], al; add cl, cl; mov eax, 1; ret; 
0x0000000000404ac5: add byte ptr [rax], al; add cl, cl; mov rax, r10; ret; 
0x0000000000401983: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000412713: add byte ptr [rax], al; add cl, cl; test eax, eax; sete al; ret; 
0x0000000000414be8: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x0000000000451645: add byte ptr [rax], al; add dh, dh; ret 0xf50; 
0x0000000000442e43: add byte ptr [rax], al; add dh, dh; ret; 
0x0000000000471ece: add byte ptr [rax], al; add dword ptr [rcx + rcx*4 + 0x14], ecx; ret; 
0x000000000047a15e: add byte ptr [rax], al; add dword ptr [rdi + 4], 1; pop rbp; ret; 
0x0000000000435568: add byte ptr [rax], al; add eax, ecx; vzeroupper; ret; 
0x0000000000470e3c: add byte ptr [rax], al; add rax, qword ptr [r8 + 0xd0]; leave; ret; 
0x000000000042b8d3: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000000046f9d6: add byte ptr [rax], al; add rbx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x00000000004788e5: add byte ptr [rax], al; add rdi, r12; syscall; 
0x000000000040e8b9: add byte ptr [rax], al; add rdx, r8; jmp rdx; 
0x000000000040988d: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x00000000004580d2: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x0000000000438570: add byte ptr [rax], al; add rsp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x0000000000423048: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b79e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x266]; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b69e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x396]; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000042a13e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip - 0x1e70a]; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000042a380: add byte ptr [rax], al; and ch, 8; jne 0x2a335; ret; 
0x0000000000459a90: add byte ptr [rax], al; and ch, 8; jne 0x59a45; ret; 
0x0000000000460260: add byte ptr [rax], al; and ch, 8; jne 0x60225; ret; 
0x00000000004602d0: add byte ptr [rax], al; and ch, 8; jne 0x60295; ret; 
0x0000000000414053: add byte ptr [rax], al; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000046d557: add byte ptr [rax], al; and eax, 1; mov rax, qword ptr [rdx + rax*8]; test rax, rax; jne 0x6d57e; ret; 
0x000000000040e882: add byte ptr [rax], al; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000042a19e: add byte ptr [rax], al; and ecx, 8; lea rax, [rip + 0x3026]; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x0000000000459aee: add byte ptr [rax], al; and ecx, 8; lea rax, [rip + 0x5d86]; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x000000000040b76e: add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x2fc6]; jne 0xb729; ret; 
0x000000000040b66e: add byte ptr [rax], al; and edx, 0x20; lea rax, [rip + 0x3106]; jne 0xb629; ret; 
0x000000000042a10e: add byte ptr [rax], al; and edx, 0x20; lea rax, [rip - 0x1b99a]; jne 0x2a0c9; ret; 
0x0000000000429327: add byte ptr [rax], al; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000042df2e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x0000000000410a0e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000004105ce: add byte ptr [rax], al; bsf eax, eax; add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000041048e: add byte ptr [rax], al; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042bb0e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042bb1e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042c85e: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c4ee: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042c76e: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000041105e: add byte ptr [rax], al; bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042bb2e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x2bb70; add rax, rdi; ret; 
0x000000000043267e: add byte ptr [rax], al; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042b7fe: add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000046870e: add byte ptr [rax], al; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000435dc0: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000461695: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004308de: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000436515: add byte ptr [rax], al; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000458a4f: add byte ptr [rax], al; bt rcx, rdx; jae 0x58a66; neg eax; ret; 
0x00000000004666de: add byte ptr [rax], al; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x00000000004019af: add byte ptr [rax], al; call 0x112e0; mov eax, 0; leave; ret; 
0x000000000043a2f6: add byte ptr [rax], al; call 0x11c00; test eax, eax; jne 0x3a308; pop rbp; ret; 
0x000000000046f902: add byte ptr [rax], al; call 0x399e0; nop word ptr [rax + rax]; cmp qword ptr [rdi + 0x28], rdi; je 0x6f920; ret; 
0x0000000000455d32: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000046e70e: add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000047039e: add byte ptr [rax], al; call rax; 
0x000000000041f983: add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000420433: add byte ptr [rax], al; cdqe; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x00000000004051b5: add byte ptr [rax], al; cmova eax, edx; mov byte ptr [rip + 0xa7678], al; ret; 
0x000000000040b638: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000040b605: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000042a03d: add byte ptr [rax], al; cmovne rdx, rax; mov rax, rdx; ret; 
0x00000000004296a0: add byte ptr [rax], al; cmp dword ptr [rdi + 8], eax; je 0x296ae; leave; mov eax, 1; ret; 
0x00000000004291c0: add byte ptr [rax], al; cmp eax, 0x21; je 0x29358; mov eax, 0x16; ret; 
0x00000000004054ef: add byte ptr [rax], al; cmp eax, 1; je 0x5500; pop rbp; ret; 
0x0000000000455d09: add byte ptr [rax], al; cmp qword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x000000000046f90e: add byte ptr [rax], al; cmp qword ptr [rdi + 0x28], rdi; je 0x6f920; ret; 
0x0000000000409594: add byte ptr [rax], al; cmp rax, -1; je 0x95a0; pop rbp; ret; 
0x0000000000409770: add byte ptr [rax], al; cmp rax, rsi; jne 0x9740; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x0000000000410320: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x10340; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000474c0f: add byte ptr [rax], al; cmp rdx, rcx; jb 0x74c1b; cmp rcx, rdx; sbb eax, eax; ret; 
0x0000000000418980: add byte ptr [rax], al; cmp rsi, r8; jae 0x189d8; ret; 
0x000000000041b48e: add byte ptr [rax], al; cmp word ptr [rax + 8], 0x6576; jne 0x1b43c; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000041b51e: add byte ptr [rax], al; cmp word ptr [rax + 8], 0x6576; jne 0x1b4cc; or byte ptr [rip + 0x91681], 0xc; ret; 
0x0000000000470c4d: add byte ptr [rax], al; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x000000000042840e: add byte ptr [rax], al; endbr64; and edi, 2; je 0x28420; ret; 
0x000000000043874e: add byte ptr [rax], al; endbr64; cmp byte ptr [rip + 0x6e2fd], 0; je 0x38770; mov eax, 1; syscall; 
0x00000000004095ae: add byte ptr [rax], al; endbr64; cmp byte ptr [rip + 0xa3265], 0; jne 0x95c0; ret; 
0x00000000004260ce: add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x0000000000422bde: add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0x833bc], 0; je 0x22bef; ret; 
0x0000000000411b0e: add byte ptr [rax], al; endbr64; mov eax, 0x1c; syscall; 
0x0000000000411e6e: add byte ptr [rax], al; endbr64; mov eax, 0x63; syscall; 
0x0000000000411bfe: add byte ptr [rax], al; endbr64; mov eax, 0xa; syscall; 
0x000000000042618e: add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004384ae: add byte ptr [rax], al; endbr64; mov eax, 8; syscall; 
0x00000000004774ce: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x774e0; ret; 
0x000000000043892e: add byte ptr [rax], al; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000411d9e: add byte ptr [rax], al; endbr64; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000041b78e: add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000041b76e: add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000041b74e: add byte ptr [rax], al; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004278ae: add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000043e30e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x000000000043e31e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000042792e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000473fde: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047406e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000040520e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x0000000000404ffe: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa1191], rax; ret; 
0x0000000000447efe: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x000000000042790e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x000000000045984e: add byte ptr [rax], al; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000042793e: add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x000000000047416e: add byte ptr [rax], al; endbr64; nop; ret; 
0x000000000040170e: add byte ptr [rax], al; endbr64; ret; 
0x000000000047a4f2: add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x00000000004257ae: add byte ptr [rax], al; endbr64; test byte ptr [rdi], 0x80; jne 0x257c0; ret; 
0x000000000042343e: add byte ptr [rax], al; endbr64; test rdx, rdx; jne 0x23450; xor eax, eax; ret; 
0x0000000000435d1e: add byte ptr [rax], al; endbr64; test rsi, rsi; jne 0x35d2d; xor rax, rax; ret; 
0x00000000004268ce: add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000041144e: add byte ptr [rax], al; endbr64; xor eax, eax; syscall; 
0x00000000004112c6: add byte ptr [rax], al; hlt; mov eax, edx; syscall; 
0x0000000000401703: add byte ptr [rax], al; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000425d59: add byte ptr [rax], al; ja 0x25d70; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426263: add byte ptr [rax], al; ja 0x262d0; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000426345: add byte ptr [rax], al; ja 0x26358; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000431d00: add byte ptr [rax], al; ja 0x31abe; xor eax, eax; vzeroupper; ret; 
0x0000000000432a02: add byte ptr [rax], al; ja 0x327ae; xor eax, eax; ret; 
0x0000000000455bb1: add byte ptr [rax], al; ja 0x55cd0; mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000456aa7: add byte ptr [rax], al; ja 0x56fc8; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000040d0d8: add byte ptr [rax], al; ja 0xd1c0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040fe58: add byte ptr [rax], al; ja 0xfe80; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040fdf8: add byte ptr [rax], al; ja 0xfe89; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000042bede: add byte ptr [rax], al; jb 0x2bef6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042c2de: add byte ptr [rax], al; jb 0x2c2f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000404fab: add byte ptr [rax], al; jbe 0x4fb0; ret; 
0x0000000000404feb: add byte ptr [rax], al; jbe 0x4ff0; ret; 
0x000000000040519b: add byte ptr [rax], al; jbe 0x51a0; ret; 
0x00000000004112e9: add byte ptr [rax], al; je 0x11300; xor eax, eax; syscall; 
0x00000000004124ce: add byte ptr [rax], al; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x00000000004191be: add byte ptr [rax], al; je 0x191d0; test rdx, rdx; je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x0000000000422bea: add byte ptr [rax], al; je 0x22bef; ret; 
0x0000000000429f89: add byte ptr [rax], al; je 0x29f90; ret; 
0x000000000042a1ca: add byte ptr [rax], al; je 0x2a17e; ret; 
0x000000000042a23a: add byte ptr [rax], al; je 0x2a211; ret; 
0x000000000042a2c2: add byte ptr [rax], al; je 0x2a299; ret; 
0x000000000042a39a: add byte ptr [rax], al; je 0x2a36f; ret; 
0x000000000042a3b9: add byte ptr [rax], al; je 0x2a3c0; ret; 
0x000000000042a40a: add byte ptr [rax], al; je 0x2a3d8; ret; 
0x000000000042a429: add byte ptr [rax], al; je 0x2a430; ret; 
0x000000000042a47a: add byte ptr [rax], al; je 0x2a448; ret; 
0x0000000000438657: add byte ptr [rax], al; je 0x386ac; mov eax, 0x101; syscall; 
0x0000000000438759: add byte ptr [rax], al; je 0x38770; mov eax, 1; syscall; 
0x00000000004486da: add byte ptr [rax], al; je 0x486e8; jmp 0x9e90; nop; nop dword ptr [rax]; ret; 
0x0000000000459aaa: add byte ptr [rax], al; je 0x59a7f; ret; 
0x0000000000459b1a: add byte ptr [rax], al; je 0x59ace; ret; 
0x000000000046027a: add byte ptr [rax], al; je 0x6024f; ret; 
0x00000000004602ea: add byte ptr [rax], al; je 0x602bf; ret; 
0x0000000000460a95: add byte ptr [rax], al; je 0x60aa8; add rax, 2; ret; 
0x0000000000467c69: add byte ptr [rax], al; je 0x67c70; ret; 
0x000000000040b8c9: add byte ptr [rax], al; je 0xb8d0; ret; 
0x000000000040b91a: add byte ptr [rax], al; je 0xb8e8; ret; 
0x000000000040b939: add byte ptr [rax], al; je 0xb940; ret; 
0x000000000040b98a: add byte ptr [rax], al; je 0xb958; ret; 
0x00000000004112be: add byte ptr [rax], al; jmp 0x112c9; nop word ptr [rax + rax]; hlt; mov eax, edx; syscall; 
0x000000000040197d: add byte ptr [rax], al; jmp 0x1986; mov eax, 0; leave; ret; 
0x0000000000423e49: add byte ptr [rax], al; jmp 0x23cf5; call 0x4d20; jmp 0x23bc3; or eax, 0xffffffff; ret; 
0x000000000045ffce: add byte ptr [rax], al; jmp 0x60040; nop dword ptr [rax]; mov eax, ecx; ret; 
0x0000000000463b07: add byte ptr [rax], al; jmp 0x64c70; nop; ret; 
0x0000000000470814: add byte ptr [rax], al; jmp 0x7073c; nop dword ptr [rax + rax]; leave; xor eax, eax; ret; 
0x000000000041f197: add byte ptr [rax], al; jmp rax; 
0x0000000000474ad3: add byte ptr [rax], al; jmp rax; nop word ptr [rax + rax]; ret; 
0x0000000000411405: add byte ptr [rax], al; jne 0x11443; leave; ret; 
0x0000000000411921: add byte ptr [rax], al; jne 0x1193d; leave; ret; 
0x0000000000411d39: add byte ptr [rax], al; jne 0x11d95; leave; ret; 
0x00000000004123f1: add byte ptr [rax], al; jne 0x123f7; leave; ret; 
0x0000000000417f79: add byte ptr [rax], al; jne 0x17f90; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x00000000004285b6: add byte ptr [rax], al; jne 0x285c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000428738: add byte ptr [rax], al; jne 0x28742; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000429784: add byte ptr [rax], al; jne 0x297fa; leave; ret; 
0x000000000042bf55: add byte ptr [rax], al; jne 0x2bc60; ret; 
0x000000000042c355: add byte ptr [rax], al; jne 0x2c060; ret; 
0x000000000043712d: add byte ptr [rax], al; jne 0x37154; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000438679: add byte ptr [rax], al; jne 0x38723; leave; ret; 
0x0000000000438845: add byte ptr [rax], al; jne 0x3888b; leave; ret; 
0x00000000004388da: add byte ptr [rax], al; jne 0x3891b; leave; ret; 
0x000000000044ed23: add byte ptr [rax], al; jne 0x4ed63; leave; mov eax, edx; ret; 
0x000000000044eddd: add byte ptr [rax], al; jne 0x4eeb9; leave; ret; 
0x0000000000452f35: add byte ptr [rax], al; jne 0x52f7a; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004540e9: add byte ptr [rax], al; jne 0x54102; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454924: add byte ptr [rax], al; jne 0x5492a; leave; ret; 
0x00000000004584c0: add byte ptr [rax], al; jne 0x584d8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045861a: add byte ptr [rax], al; jne 0x58637; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004586d6: add byte ptr [rax], al; jne 0x586ef; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004601db: add byte ptr [rax], al; jne 0x60208; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000461d52: add byte ptr [rax], al; jne 0x61d5b; leave; movzx eax, al; ret; 
0x0000000000461dbc: add byte ptr [rax], al; jne 0x61dfb; leave; ret; 
0x0000000000461ea3: add byte ptr [rax], al; jne 0x61ec3; leave; mov eax, edx; ret; 
0x0000000000461f81: add byte ptr [rax], al; jne 0x61f87; leave; ret; 
0x000000000046209a: add byte ptr [rax], al; jne 0x620bc; leave; ret; 
0x0000000000462149: add byte ptr [rax], al; jne 0x62153; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004622ec: add byte ptr [rax], al; jne 0x6230b; leave; ret; 
0x000000000046238b: add byte ptr [rax], al; jne 0x6239c; leave; ret; 
0x000000000046241b: add byte ptr [rax], al; jne 0x6242c; leave; ret; 
0x00000000004624f7: add byte ptr [rax], al; jne 0x625b7; leave; ret; 
0x0000000000462612: add byte ptr [rax], al; jne 0x6263c; leave; ret; 
0x0000000000466353: add byte ptr [rax], al; jne 0x663c7; leave; ret; 
0x0000000000467c0d: add byte ptr [rax], al; jne 0x67c40; leave; ret; 
0x0000000000469370: add byte ptr [rax], al; jne 0x69376; leave; ret; 
0x000000000046c902: add byte ptr [rax], al; jne 0x6ca08; leave; mov rax, r10; ret; 
0x000000000046df13: add byte ptr [rax], al; jne 0x6df19; leave; ret; 
0x000000000046dff5: add byte ptr [rax], al; jne 0x6dffb; leave; ret; 
0x000000000046e065: add byte ptr [rax], al; jne 0x6e06b; leave; ret; 
0x000000000046e15d: add byte ptr [rax], al; jne 0x6e163; leave; ret; 
0x000000000046e1c1: add byte ptr [rax], al; jne 0x6e1c7; leave; ret; 
0x000000000046e60a: add byte ptr [rax], al; jne 0x6e619; leave; ret; 
0x00000000004705d5: add byte ptr [rax], al; jne 0x705e5; leave; ret; 
0x00000000004706ba: add byte ptr [rax], al; jne 0x706c0; leave; ret; 
0x0000000000470e02: add byte ptr [rax], al; jne 0x70e0d; cmp qword ptr [r9 + 0x38], 0; je 0x70e0f; leave; ret; 
0x00000000004095b9: add byte ptr [rax], al; jne 0x95c0; ret; 
0x000000000040b0ba: add byte ptr [rax], al; jne 0xb0c7; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040b678: add byte ptr [rax], al; jne 0xb629; ret; 
0x000000000040b778: add byte ptr [rax], al; jne 0xb729; ret; 
0x000000000040e845: add byte ptr [rax], al; lea r9, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000041915e: add byte ptr [rax], al; lea rax, [r8 + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x0000000000401aca: add byte ptr [rax], al; lea rax, [rbx + 1]; pop rbx; pop r12; pop rbp; ret; 
0x000000000042e43e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000042e44e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000042e45e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000042e46e: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000042e47e: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000042e39d: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000042e3ce: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000042e3de: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000042e3ee: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000042e3fe: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000042e40e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000042e34a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x000000000042e41e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000042e42e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000042df8d: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042d067: add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042d087: add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042d0a7: add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000042d023: add byte ptr [rax], al; lea rax, [rdi + rdx + 0x60]; ret; 
0x00000000004602de: add byte ptr [rax], al; lea rax, [rip + 0x10d9]; test edx, 0x40000000; je 0x602bf; ret; 
0x0000000000429fdf: add byte ptr [rax], al; lea rax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x0000000000459a9e: add byte ptr [rax], al; lea rax, [rip + 0x1569]; test edx, 0x40000000; je 0x59a7f; ret; 
0x000000000040b758: add byte ptr [rax], al; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b658: add byte ptr [rax], al; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000040b7a8: add byte ptr [rax], al; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b788: add byte ptr [rax], al; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b688: add byte ptr [rax], al; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000042a036: add byte ptr [rax], al; lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000042a1be: add byte ptr [rax], al; lea rax, [rip + 0x2c39]; test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000040b6a8: add byte ptr [rax], al; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000042a22e: add byte ptr [rax], al; lea rax, [rip + 0x3b09]; test edx, 0x40000000; je 0x2a211; ret; 
0x0000000000467c9a: add byte ptr [rax], al; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000040b809: add byte ptr [rax], al; lea rax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000040b877: add byte ptr [rax], al; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000040b89f: add byte ptr [rax], al; lea rax, [rip + 0x47b8]; cmovne rax, rdx; ret; 
0x000000000040b827: add byte ptr [rax], al; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000040b8fc: add byte ptr [rax], al; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000046026e: add byte ptr [rax], al; lea rax, [rip + 0x4c9]; test edx, 0x40000000; je 0x6024f; ret; 
0x000000000042a2b6: add byte ptr [rax], al; lea rax, [rip + 0x4ca1]; test ecx, 0x40000000; je 0x2a299; ret; 
0x000000000040b90e: add byte ptr [rax], al; lea rax, [rip + 0x4f29]; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b96c: add byte ptr [rax], al; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x000000000040b97e: add byte ptr [rax], al; lea rax, [rip + 0x55b9]; test edx, 0x40000000; je 0xb958; ret; 
0x0000000000459b0e: add byte ptr [rax], al; lea rax, [rip + 0x59b9]; test edx, 0x40000000; je 0x59ace; ret; 
0x0000000000467cbf: add byte ptr [rax], al; lea rax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x0000000000459b30: add byte ptr [rax], al; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x000000000042a38e: add byte ptr [rax], al; lea rax, [rip + 0x82a9]; test edx, 0x40000000; je 0x2a36f; ret; 
0x000000000040b6fe: add byte ptr [rax], al; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000042a3ec: add byte ptr [rax], al; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000040b5fe: add byte ptr [rax], al; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042a3fe: add byte ptr [rax], al; lea rax, [rip + 0xb6f9]; test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a45c: add byte ptr [rax], al; lea rax, [rip + 0xbadb]; cmovne rax, rdx; ret; 
0x000000000042a46e: add byte ptr [rax], al; lea rax, [rip + 0xc009]; test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000429fba: add byte ptr [rax], al; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x0000000000467930: add byte ptr [rax], al; lea rax, [rip + 7]; cmove rax, rdx; ret; 
0x000000000042ae00: add byte ptr [rax], al; lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x0000000000430cd4: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000043b835: add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000041be06: add byte ptr [rax], al; lea rdi, [rip + 0x90e39]; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x00000000004016c5: add byte ptr [rax], al; lea rdx, [rax + 0x68]; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16c0; ret; 
0x0000000000417a0c: add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004179d1: add byte ptr [rax], al; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004602a1: add byte ptr [rax], al; lea rdx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x000000000040b731: add byte ptr [rax], al; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b631: add byte ptr [rax], al; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a1a8: add byte ptr [rax], al; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x000000000042a1f3: add byte ptr [rax], al; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x000000000040b85c: add byte ptr [rax], al; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000042a278: add byte ptr [rax], al; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x0000000000459af8: add byte ptr [rax], al; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x0000000000460231: add byte ptr [rax], al; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x0000000000416dab: add byte ptr [rax], al; lea rsi, [rip + 0x64cfc]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x0000000000404506: add byte ptr [rax], al; lea rsi, [rip + 0x76f8c]; lea rdi, [rip + 0x76f92]; call 0x4370; xor eax, eax; ret; 
0x000000000040434d: add byte ptr [rax], al; lea rsi, [rip + 0x79212]; syscall; 
0x000000000040431d: add byte ptr [rax], al; lea rsi, [rip + 0x79242]; syscall; 
0x0000000000457103: add byte ptr [rax], al; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004707b5: add byte ptr [rax], al; leave; mov eax, 1; ret; 
0x0000000000404ac6: add byte ptr [rax], al; leave; mov rax, r10; ret; 
0x0000000000401984: add byte ptr [rax], al; leave; ret; 
0x0000000000412714: add byte ptr [rax], al; leave; test eax, eax; sete al; ret; 
0x000000000047081e: add byte ptr [rax], al; leave; xor eax, eax; ret; 
0x0000000000458845: add byte ptr [rax], al; lock cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x000000000042d52e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbde: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000040f86e: add byte ptr [rax], al; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042d54e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000045fbfe: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004786ab: add byte ptr [rax], al; mov dword ptr [r8 + rdx*4 + 8], 0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x000000000041f183: add byte ptr [rax], al; mov dword ptr [rbp - 0x4a8], 0; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x000000000041f18d: add byte ptr [rax], al; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x0000000000417635: add byte ptr [rax], al; mov dword ptr [rbp - 0xc4], 0x30; mov qword ptr [rbp - 0xb8], rax; call 0x16ee0; leave; ret; 
0x000000000046de8b: add byte ptr [rax], al; mov dword ptr [rbx + 0x18], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000423174: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000459020: add byte ptr [rax], al; mov dword ptr [rbx], 2; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000041404d: add byte ptr [rax], al; mov dword ptr [rdi + 0x360], edx; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000047a14d: add byte ptr [rax], al; mov dword ptr [rdi + 8], edx; cmp eax, 0x21; je 0x7a160; pop rbp; ret; 
0x000000000044fec1: add byte ptr [rax], al; mov dword ptr [rdi], 0; ret; 
0x00000000004667c0: add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x0000000000429820: add byte ptr [rax], al; mov dword ptr [rip + 0x7deb0], eax; pop rbp; ret; 
0x0000000000429815: add byte ptr [rax], al; mov dword ptr [rip + 0x7deb7], eax; call 0x37b90; mov dword ptr [rip + 0x7deb0], eax; pop rbp; ret; 
0x0000000000427a00: add byte ptr [rax], al; mov dword ptr [rip + 0x85264], 0; ret; 
0x00000000004251a3: add byte ptr [rax], al; mov dword ptr [rip + 0x87ac1], 0; pop rbp; ret; 
0x00000000004051e0: add byte ptr [rax], al; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x0000000000419156: add byte ptr [rax], al; mov dword ptr [rsi], eax; ret; 
0x000000000042d53e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004019b4: add byte ptr [rax], al; mov eax, 0; leave; ret; 
0x000000000040b5ae: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x0000000000438857: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x0000000000403efb: add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x0000000000458dfe: add byte ptr [rax], al; mov eax, 0xba; syscall; 
0x0000000000404d42: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000458ee5: add byte ptr [rax], al; mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x58f00; ret; 
0x0000000000404def: add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x0000000000404da3: add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000478cbf: add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000044ec7f: add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x0000000000418619: add byte ptr [rax], al; mov eax, 0xda; syscall; 
0x000000000040432b: add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x0000000000401160: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000004114ac: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000404348: add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404318: add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x000000000041270f: add byte ptr [rax], al; mov eax, 1; leave; test eax, eax; sete al; ret; 
0x000000000046675e: add byte ptr [rax], al; mov eax, 1; pop rbp; ret; 
0x0000000000429205: add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000466832: add byte ptr [rax], al; mov eax, 2; pop rbp; ret; 
0x0000000000462d06: add byte ptr [rax], al; mov eax, 8; ret; 
0x00000000004284ee: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x844f2]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x000000000040525e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0xa75ce]; test eax, eax; jne 0x5270; ret; 
0x0000000000429cd4: add byte ptr [rax], al; mov eax, ebx; pop rbx; pop r12; pop rbp; ret; 
0x000000000043e1f5: add byte ptr [rax], al; mov eax, ebx; syscall; 
0x0000000000419af1: add byte ptr [rax], al; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x000000000044805e: add byte ptr [rax], al; mov eax, edx; pop rbx; pop r13; pop rbp; ret; 
0x0000000000419b4a: add byte ptr [rax], al; mov eax, edx; syscall; 
0x0000000000428459: add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000404c2a: add byte ptr [rax], al; mov eax, r9d; syscall; 
0x00000000004100a0: add byte ptr [rax], al; mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000045f0ae: add byte ptr [rax], al; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045f54e: add byte ptr [rax], al; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042d56e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000045fc1e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000045fc2e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000429f7f: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x120; je 0x29f90; ret; 
0x0000000000467c5f: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x120; je 0x67c70; ret; 
0x000000000042a3af: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x128; je 0x2a3c0; ret; 
0x000000000042a41f: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x128; je 0x2a430; ret; 
0x000000000040b8bf: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x128; je 0xb8d0; ret; 
0x000000000040b92f: add byte ptr [rax], al; mov ecx, edx; not ecx; and ecx, 0x128; je 0xb940; ret; 
0x0000000000403ef6: add byte ptr [rax], al; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x0000000000419990: add byte ptr [rax], al; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000419aec: add byte ptr [rax], al; mov edi, 0x5005; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000473e2c: add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000040115b: add byte ptr [rax], al; mov edi, 1; mov eax, 0xe; syscall; 
0x0000000000473df8: add byte ptr [rax], al; mov edi, 1; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x0000000000404343: add byte ptr [rax], al; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404313: add byte ptr [rax], al; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x00000000004046e9: add byte ptr [rax], al; mov edi, r13d; call rax; 
0x000000000040433e: add byte ptr [rax], al; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x000000000040430e: add byte ptr [rax], al; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x000000000045fc0e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000404d3d: add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000043e1f0: add byte ptr [rax], al; mov esi, 0x80; mov eax, ebx; syscall; 
0x0000000000404dea: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000404dea: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000419b9e: add byte ptr [rax], al; mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x0000000000455e66: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000456aad: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000041998b: add byte ptr [rax], al; mov esi, 1; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000429576: add byte ptr [rax], al; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004786b4: add byte ptr [rax], al; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x0000000000455bb7: add byte ptr [rax], al; mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x000000000047a275: add byte ptr [rax], al; mov esi, r9d; mov eax, 0xca; syscall; 
0x0000000000463aff: add byte ptr [rax], al; mov qword ptr [rax + 0x10], 0; jmp 0x64c70; nop; ret; 
0x0000000000417a16: add byte ptr [rax], al; mov qword ptr [rax + 0x340], rdx; ret; 
0x000000000046d772: add byte ptr [rax], al; mov qword ptr [rax + 0x390], rdx; leave; ret; 
0x00000000004267ed: add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x000000000046de4c: add byte ptr [rax], al; mov qword ptr [rax], rdx; leave; ret; 
0x0000000000405f23: add byte ptr [rax], al; mov qword ptr [rbp - 0x18], rax; xor eax, eax; mov byte ptr [rip + 0xa68ee], 1; mov eax, 0x13e; syscall; 
0x000000000047073a: add byte ptr [rax], al; mov qword ptr [rbp - 0x20], rax; call 0x70be0; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x0000000000401150: add byte ptr [rax], al; mov qword ptr [rbp - 0xb0], 0x20; mov edi, 1; mov eax, 0xe; syscall; 
0x000000000041763f: add byte ptr [rax], al; mov qword ptr [rbp - 0xb8], rax; call 0x16ee0; leave; ret; 
0x0000000000461e28: add byte ptr [rax], al; mov qword ptr [rbp - 8], r8; mov r8, rsi; lea rdx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x00000000004118f7: add byte ptr [rax], al; mov qword ptr [rbp - 8], rdx; lea rdx, [rbp - 0x1010]; syscall; 
0x000000000046e1ee: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046e322: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454fa2: add byte ptr [rax], al; mov qword ptr [rcx + 0xe0], rdx; ret; 
0x0000000000458516: add byte ptr [rax], al; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000467172: add byte ptr [rax], al; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000413b86: add byte ptr [rax], al; mov qword ptr [rdi], 0xffffffffffffffff; xor r8d, r8d; mov eax, r8d; ret; 
0x00000000004103de: add byte ptr [rax], al; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000418607: add byte ptr [rax], al; mov qword ptr [rdx + 8], rax; mov qword ptr [rip + 0x942fc], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000044972e: add byte ptr [rax], al; mov qword ptr [rip + 0x5e2d9], rax; mov qword ptr [rip + 0x5e2da], rdx; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x0000000000427a5d: add byte ptr [rax], al; mov qword ptr [rip + 0x8520e], 0; ret; 
0x0000000000405250: add byte ptr [rax], al; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405230: add byte ptr [rax], al; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x0000000000405200: add byte ptr [rax], al; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004020d1: add byte ptr [rax], al; mov qword ptr [rip + 0xaa8b6], rax; pop rbx; pop rbp; ret; 
0x00000000004666e8: add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x0000000000404236: add byte ptr [rax], al; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004292c7: add byte ptr [rax], al; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000041b7fd: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000473dfd: add byte ptr [rax], al; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x000000000044eb6e: add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411b7e: add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000466cd6: add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000041149e: add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000461b16: add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000043a306: add byte ptr [rax], al; mov rax, 0xffffffffffffffd8; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000411b8c: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x00000000004571be: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x0000000000426775: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x26770; ret; 
0x0000000000409769: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x870]; cmp rax, rsi; jne 0x9740; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x000000000042053d: add byte ptr [rax], al; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000470744: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x000000000046e5ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5e1]; ret; 
0x000000000046e59e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5e9]; ret; 
0x000000000046e58e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5f1]; ret; 
0x000000000046e57e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5f9]; ret; 
0x000000000046e56e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e601]; ret; 
0x000000000046e55e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e609]; ret; 
0x000000000046e54e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e611]; ret; 
0x000000000046e53e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e619]; ret; 
0x000000000046e52e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e621]; ret; 
0x000000000046e51e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e629]; ret; 
0x000000000042a4c5: add byte ptr [rax], al; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x0000000000470933: add byte ptr [rax], al; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004186c7: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004571ce: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; mov eax, 0xffffffff; leave; ret; 
0x000000000046226b: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x000000000042342a: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; mov qword ptr [rdx + 0xe0], rcx; leave; ret; 
0x0000000000466bf3: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x000000000040fe20: add byte ptr [rax], al; mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000454f9b: add byte ptr [rax], al; mov rcx, qword ptr [rax + 0xa0]; mov qword ptr [rcx + 0xe0], rdx; ret; 
0x000000000040babe: add byte ptr [rax], al; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042d5be: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000045fc5e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000045fc6e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000437c9c: add byte ptr [rax], al; mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x00000000004791d0: add byte ptr [rax], al; mov rdi, r11; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047a2f3: add byte ptr [rax], al; mov rdi, r12; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004593fc: add byte ptr [rax], al; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000042931f: add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000042957b: add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000404798: add byte ptr [rax], al; mov rdi, r8; mov esi, r13d; call rax; 
0x00000000004788a4: add byte ptr [rax], al; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478e78: add byte ptr [rax], al; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000422367: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000458f85: add byte ptr [rax], al; mov rdi, rbx; mov eax, 0xca; syscall; 
0x00000000004186f2: add byte ptr [rax], al; mov rdi, rbx; syscall; 
0x0000000000478a8a: add byte ptr [rax], al; mov rdi, rcx; mov eax, 0xca; syscall; 
0x0000000000439b24: add byte ptr [rax], al; mov rdi, rdx; call rsi; 
0x000000000041b8d6: add byte ptr [rax], al; mov rdx, 0xffffffffffffffd8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000461cfe: add byte ptr [rax], al; mov rdx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000411466: add byte ptr [rax], al; mov rdx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000043866c: add byte ptr [rax], al; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x38723; leave; ret; 
0x000000000044f04e: add byte ptr [rax], al; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; mov rsi, rbx; mov rdi, r12; call rax; 
0x0000000000474dee: add byte ptr [rax], al; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x0000000000401e8f: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xaa9a8]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000045fc4e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000422a95: add byte ptr [rax], al; mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000458d4b: add byte ptr [rax], al; mov rdx, r14; lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x000000000043e697: add byte ptr [rax], al; mov rdx, rax; test rax, rax; je 0x3e6aa; mov rdi, rbx; call rax; 
0x0000000000412c8e: add byte ptr [rax], al; mov rsi, qword ptr [rsi + 0x18]; sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x0000000000470391: add byte ptr [rax], al; mov rsi, rax; jmp 0x70325; nop dword ptr [rax + rax]; call rax; 
0x000000000043ee1c: add byte ptr [rax], al; mov rsi, rax; test rax, rax; je 0x3ee37; mov rdi, rbx; call rax; 
0x0000000000419bcf: add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x00000000004113e6: add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004189ee: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [r8]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000045fe2e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000045fcde: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004502be: add byte ptr [rax], al; movq xmm0, rax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041866a: add byte ptr [rax], al; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000040e16c: add byte ptr [rax], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000455f0d: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000045663f: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000439b01: add byte ptr [rax], al; movups xmmword ptr [rax], xmm0; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425d08: add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043a134: add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004102ca: add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000458542: add byte ptr [rax], al; movups xmmword ptr [rdi], xmm0; test rdx, rdx; je 0x5854f; mov byte ptr [rsi], 0; ret; 
0x0000000000425ebe: add byte ptr [rax], al; movzx eax, byte ptr [rax]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004344fe: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000438929: add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000411d99: add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000043554b: add byte ptr [rax], al; nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000042759a: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000042849b: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f213], eax; ret; 
0x0000000000411447: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; xor eax, eax; syscall; 
0x000000000045ffd3: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, ecx; ret; 
0x000000000044eb9a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044eb67: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000404c1a: add byte ptr [rax], al; nop dword ptr [rax]; mov rsi, qword ptr [rbp - 0x110]; mov edi, 2; mov eax, r9d; syscall; 
0x00000000004308fb: add byte ptr [rax], al; nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004054d7: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000436eab: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000411b08: add byte ptr [rax], al; nop word ptr [rax + rax]; endbr64; mov eax, 0x1c; syscall; 
0x0000000000411e65: add byte ptr [rax], al; nop word ptr [rax + rax]; endbr64; mov eax, 0x63; syscall; 
0x0000000000437aac: add byte ptr [rax], al; nop; endbr64; mov eax, 0x27; syscall; 
0x0000000000437aac: add byte ptr [rax], al; nop; endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000437bbd: add byte ptr [rax], al; nop; endbr64; mov eax, 0x90; syscall; 
0x0000000000437b2d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x91; syscall; 
0x0000000000437b5d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x92; syscall; 
0x0000000000437b8d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x93; syscall; 
0x0000000000411c2d: add byte ptr [rax], al; nop; endbr64; mov eax, 0xb; syscall; 
0x000000000043896c: add byte ptr [rax], al; nop; endbr64; mov eax, 1; syscall; 
0x000000000041137d: add byte ptr [rax], al; nop; endbr64; mov eax, 3; syscall; 
0x0000000000437bed: add byte ptr [rax], al; nop; endbr64; mov eax, 5; syscall; 
0x0000000000461cdc: add byte ptr [rax], al; nop; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x000000000042869d: add byte ptr [rax], al; nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f023], eax; ret; 
0x000000000041241c: add byte ptr [rax], al; nop; endbr64; ret; 
0x000000000042e3bd: add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000042e3ad: add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000045fbec: add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042c9ad: add byte ptr [rax], al; nop; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042ce7d: add byte ptr [rax], al; nop; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042d68c: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000463b0c: add byte ptr [rax], al; nop; ret; 
0x0000000000429632: add byte ptr [rax], al; nop; xor eax, eax; leave; ret; 
0x00000000004292d4: add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x0000000000401ecc: add byte ptr [rax], al; nop; xor edi, edi; mov eax, edx; syscall; 
0x000000000043bdb8: add byte ptr [rax], al; or byte ptr [rbp + 0x13], dh; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x00000000004667b7: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x0000000000411bc0: add byte ptr [rax], al; or r10d, 0x40; syscall; 
0x000000000042ba49: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000045451a: add byte ptr [rax], al; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000041677c: add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x0000000000405503: add byte ptr [rax], al; pop rbp; mov qword ptr [rip + 0xa0c3b], rax; ret; 
0x000000000046d9c5: add byte ptr [rax], al; pop rbp; neg eax; sbb eax, eax; ret; 
0x0000000000417e68: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000411981: add byte ptr [rax], al; pop rbp; test eax, eax; cmove eax, edx; ret; 
0x0000000000457351: add byte ptr [rax], al; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x00000000004506fa: add byte ptr [rax], al; pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x000000000040b547: add byte ptr [rax], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000042304f: add byte ptr [rax], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000416786: add byte ptr [rax], al; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000004276db: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000401786: add byte ptr [rax], al; ret; 
0x0000000000473ff9: add byte ptr [rax], al; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042beee: add byte ptr [rax], al; sbb eax, eax; or eax, 1; ret; 
0x000000000040e84c: add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000450026: add byte ptr [rax], al; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000045003e: add byte ptr [rax], al; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000456456: add byte ptr [rax], al; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000426a96: add byte ptr [rax], al; sub rax, rcx; sub eax, 1; ret; 
0x0000000000431cf9: add byte ptr [rax], al; sub rdx, 0x80; ja 0x31abe; xor eax, eax; vzeroupper; ret; 
0x00000000004329fb: add byte ptr [rax], al; sub rdx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x00000000004275d6: add byte ptr [rax], al; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000401165: add byte ptr [rax], al; syscall; 
0x0000000000461cea: add byte ptr [rax], al; syscall; cmp eax, 0xfffff000; ja 0x61d00; xor eax, eax; ret; 
0x0000000000411387: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11398; ret; 
0x0000000000437a83: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x37a90; ret; 
0x0000000000437bf7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x37c08; ret; 
0x00000000004384b7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x384c8; ret; 
0x0000000000438760: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x387c0; ret; 
0x000000000043893a: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38950; ret; 
0x0000000000438977: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38988; ret; 
0x0000000000458eea: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x58f00; ret; 
0x0000000000411b17: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11b24; ret; 
0x0000000000411c07: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11c14; ret; 
0x0000000000411c37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11c44; ret; 
0x0000000000411daa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11db7; ret; 
0x0000000000411e77: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11e84; ret; 
0x0000000000437b07: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x37b14; ret; 
0x0000000000437b37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x37b44; ret; 
0x0000000000437b67: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x37b74; ret; 
0x0000000000437b97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x37ba4; ret; 
0x0000000000437bc7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x37bd4; ret; 
0x0000000000404df4: add byte ptr [rax], al; syscall; ret; 
0x0000000000411263: add byte ptr [rax], al; syscall; test eax, eax; jne 0x11288; xor eax, eax; ret; 
0x000000000042e394: add byte ptr [rax], al; test ah, 0x40; jne 0x2e480; lea rax, [rdi + 0xf]; ret; 
0x000000000042e342: add byte ptr [rax], al; test al, 0x40; jne 0x2e410; lea rax, [rdi + 7]; ret; 
0x0000000000414005: add byte ptr [rax], al; test al, 3; je 0x13ff3; ret; 
0x0000000000426935: add byte ptr [rax], al; test byte ptr [rbx], 0x80; jne 0x26960; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042a222: add byte ptr [rax], al; test ch, 8; jne 0x2a1eb; ret; 
0x000000000042e2b5: add byte ptr [rax], al; test dh, 0x40; jne 0x2e1f0; lea rax, [rdi + 0xf]; ret; 
0x000000000042e2fb: add byte ptr [rax], al; test dh, 4; jne 0x2e1f0; lea rax, [rdi + 0xb]; ret; 
0x000000000042a2aa: add byte ptr [rax], al; test dh, 8; jne 0x2a25b; ret; 
0x000000000042e232: add byte ptr [rax], al; test dl, 0x40; jne 0x2e1f0; lea rax, [rdi + 7]; ret; 
0x000000000042e260: add byte ptr [rax], al; test dl, 4; jne 0x2e1f0; lea rax, [rdi + 3]; ret; 
0x000000000046931d: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x000000000044fece: add byte ptr [rax], al; test eax, eax; je 0x4fee0; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000041b8cb: add byte ptr [rax], al; test eax, eax; jne 0x1b8d8; pop rbp; ret; 
0x000000000044eb1e: add byte ptr [rax], al; test eax, eax; jne 0x4eb30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040b86e: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x4107]; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000040b81e: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x4a77]; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000042a2bd: add byte ptr [rax], al; test ecx, 0x40000000; je 0x2a299; ret; 
0x000000000042a1c5: add byte ptr [rax], al; test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000042a235: add byte ptr [rax], al; test edx, 0x40000000; je 0x2a211; ret; 
0x000000000042a395: add byte ptr [rax], al; test edx, 0x40000000; je 0x2a36f; ret; 
0x000000000042a405: add byte ptr [rax], al; test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a475: add byte ptr [rax], al; test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000459aa5: add byte ptr [rax], al; test edx, 0x40000000; je 0x59a7f; ret; 
0x0000000000459b15: add byte ptr [rax], al; test edx, 0x40000000; je 0x59ace; ret; 
0x0000000000460275: add byte ptr [rax], al; test edx, 0x40000000; je 0x6024f; ret; 
0x00000000004602e5: add byte ptr [rax], al; test edx, 0x40000000; je 0x602bf; ret; 
0x000000000040b915: add byte ptr [rax], al; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b985: add byte ptr [rax], al; test edx, 0x40000000; je 0xb958; ret; 
0x000000000040100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000040100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000401732: add byte ptr [rax], al; test rax, rax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401732: add byte ptr [rax], al; test rax, rax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; ret; 
0x0000000000401774: add byte ptr [rax], al; test rax, rax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; 
0x000000000043e3a0: add byte ptr [rax], al; test rax, rax; je 0x3e3ad; call rax; 
0x000000000043e4fd: add byte ptr [rax], al; test rax, rax; je 0x3e50c; mov rdi, rbx; call rax; 
0x000000000043f585: add byte ptr [rax], al; test rax, rax; je 0x3f594; mov rdi, rbx; call rax; 
0x0000000000474058: add byte ptr [rax], al; test rax, rax; je 0x74063; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000447ea2: add byte ptr [rax], al; test rdx, rdx; je 0x47ec3; mov rdi, rbx; call rdx; 
0x0000000000413b43: add byte ptr [rax], al; test rsi, rsi; je 0x13b50; mov eax, r8d; ret; 
0x000000000042afde: add byte ptr [rax], al; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000435819: add byte ptr [rax], al; tzcnt eax, eax; jmp 0x35ab9; xor eax, eax; ret; 
0x0000000000461059: add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; jmp 0x6136c; xor eax, eax; ret; 
0x000000000046034b: add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000042b06e: add byte ptr [rax], al; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000040f85e: add byte ptr [rax], al; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000040d13e: add byte ptr [rax], al; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040b9ed: add byte ptr [rax], al; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004101be: add byte ptr [rax], al; vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000040d92f: add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000042d07c: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000045f736: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x000000000042d09c: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x61], ymm16; lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000045f750: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x61], ymm16; ret; 
0x000000000042d05c: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000045f71c: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000041007b: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000040d072: add byte ptr [rax], al; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040fdfe: add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000040f84e: add byte ptr [rax], al; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x00000000004047e2: add byte ptr [rax], al; xchg dword ptr [rip + 0xa3bde], ecx; cmp ecx, 1; jg 0x4850; call rax; 
0x00000000004046da: add byte ptr [rax], al; xchg dword ptr [rip + 0xa3ce6], ecx; cmp ecx, 1; jg 0x4870; mov edi, r13d; call rax; 
0x000000000043bdc1: add byte ptr [rax], al; xor byte ptr [rcx], 0xc0; ret; 
0x0000000000478aea: add byte ptr [rax], al; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x0000000000466d6e: add byte ptr [rax], al; xor eax, eax; jmp 0x66d40; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000040a734: add byte ptr [rax], al; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408634: add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000419ba3: add byte ptr [rax], al; xor edi, edi; mov eax, esi; syscall; 
0x00000000004389ae: add byte ptr [rax], al; xor edi, edi; syscall; 
0x00000000004389ae: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x389c0; ret; 
0x00000000004186eb: add byte ptr [rax], al; xor edx, edx; mov eax, 0x14e; mov rdi, rbx; syscall; 
0x000000000041f37f: add byte ptr [rax], al; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000458d96: add byte ptr [rax], al; xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000458ed8: add byte ptr [rax], al; xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000042844f: add byte ptr [rax], al; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000428af1: add byte ptr [rax], al; xor r10d, r10d; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000042e1ee: add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000404da8: add byte ptr [rax], al; xor sil, 0x80; syscall; 
0x000000000042932d: add byte ptr [rax], al; xor sil, 0x81; syscall; 
0x0000000000478a1e: add byte ptr [rax], al; xor sil, 0x81; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x00000000004019b5: add byte ptr [rax], bh; leave; ret; 
0x000000000043bdb9: add byte ptr [rax], cl; jne 0x3bdd0; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x000000000046029a: add byte ptr [rax], cl; lea rax, [rip + 0x133d]; lea rdx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x000000000046022a: add byte ptr [rax], cl; lea rax, [rip + 0x8bd]; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x000000000042adf9: add byte ptr [rax], cl; lea rdx, [rip + 0xbc1e]; lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x0000000000470cd2: add byte ptr [rax], cl; mov byte ptr [rip + 0x3c445], 8; ret; 
0x0000000000470ccb: add byte ptr [rax], cl; mov byte ptr [rip + 0x3c44b], 8; mov byte ptr [rip + 0x3c445], 8; ret; 
0x0000000000470cc4: add byte ptr [rax], cl; mov byte ptr [rip + 0x3c451], 8; mov byte ptr [rip + 0x3c44b], 8; mov byte ptr [rip + 0x3c445], 8; ret; 
0x0000000000470cbd: add byte ptr [rax], cl; mov byte ptr [rip + 0x3c457], 8; mov byte ptr [rip + 0x3c451], 8; mov byte ptr [rip + 0x3c44b], 8; mov byte ptr [rip + 0x3c445], 8; ret; 
0x0000000000470cd9: add byte ptr [rax], cl; ret; 
0x00000000004619b1: add byte ptr [rax], dl; add byte ptr [rax + 0x39], cl; ret; 
0x000000000042a341: add byte ptr [rax], dl; je 0x2a357; test byte ptr [rip + 0x827a9], 1; lea rdx, [rip + 0xa1bd]; cmove rax, rdx; ret; 
0x0000000000459a51: add byte ptr [rax], dl; je 0x59a67; test byte ptr [rip + 0x53099], 1; lea rdx, [rip + 0x3dad]; cmove rax, rdx; ret; 
0x0000000000467929: add byte ptr [rax], dl; lea rdx, [rip + 0x14e]; lea rax, [rip + 7]; cmove rax, rdx; ret; 
0x0000000000459b29: add byte ptr [rax], dl; lea rdx, [rip + 0x650e]; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000436555: add byte ptr [rax], r12b; ret; 
0x000000000046f9d5: add byte ptr [rax], r8b; add rbx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x0000000000410a0d: add byte ptr [rax], r8b; bsf eax, eax; add rax, rdi; ret; 
0x000000000042c85d: add byte ptr [rax], r8b; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000041105d: add byte ptr [rax], r8b; bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043193d: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046e70d: add byte ptr [rax], r8b; call qword ptr [rbx]; 
0x000000000046f90d: add byte ptr [rax], r8b; cmp qword ptr [rdi + 0x28], rdi; je 0x6f920; ret; 
0x00000000004095ad: add byte ptr [rax], r8b; endbr64; cmp byte ptr [rip + 0xa3265], 0; jne 0x95c0; ret; 
0x00000000004260cd: add byte ptr [rax], r8b; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x0000000000411b0d: add byte ptr [rax], r8b; endbr64; mov eax, 0x1c; syscall; 
0x00000000004774cd: add byte ptr [rax], r8b; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x774e0; ret; 
0x000000000043892d: add byte ptr [rax], r8b; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000411d9d: add byte ptr [rax], r8b; endbr64; mov r10, rcx; mov eax, 0x9d; syscall; 
0x00000000004278cd: add byte ptr [rax], r8b; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000040520d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x00000000004278fd: add byte ptr [rax], r8b; endbr64; ret; 
0x00000000004112c5: add byte ptr [rax], r8b; hlt; mov eax, edx; syscall; 
0x000000000042bedd: add byte ptr [rax], r8b; jb 0x2bef6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042c2dd: add byte ptr [rax], r8b; jb 0x2c2f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000041915d: add byte ptr [rax], r8b; lea rax, [r8 + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x000000000042a22d: add byte ptr [rax], r8b; lea rax, [rip + 0x3b09]; test edx, 0x40000000; je 0x2a211; ret; 
0x000000000042a2b5: add byte ptr [rax], r8b; lea rax, [rip + 0x4ca1]; test ecx, 0x40000000; je 0x2a299; ret; 
0x000000000040b90d: add byte ptr [rax], r8b; lea rax, [rip + 0x4f29]; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b97d: add byte ptr [rax], r8b; lea rax, [rip + 0x55b9]; test edx, 0x40000000; je 0xb958; ret; 
0x000000000042a3fd: add byte ptr [rax], r8b; lea rax, [rip + 0xb6f9]; test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a46d: add byte ptr [rax], r8b; lea rax, [rip + 0xc009]; test edx, 0x40000000; je 0x2a448; ret; 
0x000000000041be05: add byte ptr [rax], r8b; lea rdi, [rip + 0x90e39]; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x000000000047081d: add byte ptr [rax], r8b; leave; xor eax, eax; ret; 
0x000000000040f86d: add byte ptr [rax], r8b; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042d54d: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000419155: add byte ptr [rax], r8b; mov dword ptr [rsi], eax; ret; 
0x0000000000458a5d: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x000000000042807d: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x0000000000460ab5: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x0000000000462d05: add byte ptr [rax], r8b; mov eax, 8; ret; 
0x00000000004284ed: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x844f2]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x000000000040525d: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0xa75ce]; test eax, eax; jne 0x5270; ret; 
0x000000000040430d: add byte ptr [rax], r8b; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x000000000045fc0d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000413b85: add byte ptr [rax], r8b; mov qword ptr [rdi], 0xffffffffffffffff; xor r8d, r8d; mov eax, r8d; ret; 
0x00000000004103dd: add byte ptr [rax], r8b; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000466cd5: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000041149d: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000043a305: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffd8; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x000000000040d9fd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042d5bd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000045fc6d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000041b8d5: add byte ptr [rax], r8b; mov rdx, 0xffffffffffffffd8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000474ded: add byte ptr [rax], r8b; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x000000000045fc4d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000412c8d: add byte ptr [rax], r8b; mov rsi, qword ptr [rsi + 0x18]; sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x000000000043e4a5: add byte ptr [rax], r8b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000416785: add byte ptr [rax], r8b; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000401785: add byte ptr [rax], r8b; ret; 
0x000000000042beed: add byte ptr [rax], r8b; sbb eax, eax; or eax, 1; ret; 
0x000000000045003d: add byte ptr [rax], r8b; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000456455: add byte ptr [rax], r8b; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000426a95: add byte ptr [rax], r8b; sub rax, rcx; sub eax, 1; ret; 
0x000000000044fecd: add byte ptr [rax], r8b; test eax, eax; je 0x4fee0; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000040b86d: add byte ptr [rax], r8b; test eax, eax; lea rdx, [rip + 0x4107]; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000042a2bc: add byte ptr [rax], r8b; test ecx, 0x40000000; je 0x2a299; ret; 
0x000000000042afdd: add byte ptr [rax], r8b; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042b06d: add byte ptr [rax], r8b; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000040f85d: add byte ptr [rax], r8b; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000040d13d: add byte ptr [rax], r8b; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040f84d: add byte ptr [rax], r8b; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x00000000004127bd: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000473fbb: add byte ptr [rbp + 0x12], dh; mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x0000000000417f7a: add byte ptr [rbp + 0x13], dh; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x0000000000473f64: add byte ptr [rbp + 0x14], dh; lea rdx, [rip + 0x391a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x00000000004584c1: add byte ptr [rbp + 0x14], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040b81f: add byte ptr [rbp + 0x158d48c0], al; ja 0xb871; add byte ptr [rax], al; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x00000000004540ea: add byte ptr [rbp + 0x15], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000411922: add byte ptr [rbp + 0x18], dh; leave; ret; 
0x00000000004666c5: add byte ptr [rbp + 0x18], dh; test rdx, rdx; jne 0x666f0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000045861b: add byte ptr [rbp + 0x19], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004622ed: add byte ptr [rbp + 0x1b], dh; leave; ret; 
0x0000000000461ea4: add byte ptr [rbp + 0x1c], dh; leave; mov eax, edx; ret; 
0x000000000046209b: add byte ptr [rbp + 0x1e], dh; leave; ret; 
0x000000000043712e: add byte ptr [rbp + 0x23], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000462613: add byte ptr [rbp + 0x26], dh; leave; ret; 
0x0000000000461ab5: add byte ptr [rbp + 0x29], dh; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x00000000004601dc: add byte ptr [rbp + 0x29], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000467c0e: add byte ptr [rbp + 0x2f], dh; leave; ret; 
0x0000000000436f7e: add byte ptr [rbp + 0x31], 0xc0; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x00000000004245cf: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0xf41; 
0x000000000042890d: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x10]; not esi; and esi, 0x80; syscall; 
0x0000000000428450: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000428d26: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x0000000000428af2: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x0000000000458ed9: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000042956f: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004060ff: add byte ptr [rbp + 0x3a], dh; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411406: add byte ptr [rbp + 0x3a], dh; leave; ret; 
0x0000000000461dbd: add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000044ed24: add byte ptr [rbp + 0x3c], dh; leave; mov eax, edx; ret; 
0x00000000004388db: add byte ptr [rbp + 0x3d], dh; leave; ret; 
0x000000000042798e: add byte ptr [rbp + 0x3f], dh; mov qword ptr [rip + 0x852e0], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000452f36: add byte ptr [rbp + 0x41], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000438846: add byte ptr [rbp + 0x42], dh; leave; ret; 
0x000000000043e01d: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044eb1f: add byte ptr [rbp + 0x480c75c0], al; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000004671a0: add byte ptr [rbp + 0x481374f6], al; mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000041be4f: add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x90de4], 0; ret; 
0x0000000000405504: add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0xa0c3b], eax; ret; 
0x000000000043bdcf: add byte ptr [rbp + 0x48], dl; mov ebp, esp; call 0x18430; xor eax, eax; pop rbp; ret; 
0x0000000000458887: add byte ptr [rbp + 0x48], dl; mov ebp, esp; call 0x4d80; xor eax, eax; pop rbp; ret; 
0x000000000045907f: add byte ptr [rbp + 0x48], dl; mov ebp, esp; call 0x58f20; xor eax, eax; pop rbp; ret; 
0x0000000000466b5f: add byte ptr [rbp + 0x48], dl; mov ebp, esp; call 0x668f0; mov eax, 1; pop rbp; ret; 
0x000000000040688b: add byte ptr [rbp + 0x52], dh; lea rax, [rip + 0x9f92b]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000461912: add byte ptr [rbp + 0x55], dh; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411d3a: add byte ptr [rbp + 0x58], dh; leave; ret; 
0x000000000041b8cc: add byte ptr [rbp + 0x5d0775c0], al; ret; 
0x0000000000466354: add byte ptr [rbp + 0x70], dh; leave; ret; 
0x0000000000429785: add byte ptr [rbp + 0x72], dh; leave; ret; 
0x000000000046e60b: add byte ptr [rbp + 0xb], dh; leave; ret; 
0x0000000000422124: add byte ptr [rbp + 0xc8dd042], cl; mov dword ptr [rcx + 0x29c901fa], ecx; ret 0xd139; 
0x00000000004705d6: add byte ptr [rbp + 0xc], dh; leave; ret; 
0x000000000046238c: add byte ptr [rbp + 0xd], dh; leave; ret; 
0x000000000046647f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000046525f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000041eaa2: add byte ptr [rbp + 1], cl; ret 0x8d4e; 
0x00000000004123f2: add byte ptr [rbp + 2], dh; leave; ret; 
0x00000000004095ba: add byte ptr [rbp + 3], dh; ret; 
0x0000000000461d53: add byte ptr [rbp + 5], dh; leave; movzx eax, al; ret; 
0x00000000004285b7: add byte ptr [rbp + 6], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000470e03: add byte ptr [rbp + 7], dh; cmp qword ptr [r9 + 0x38], 0; je 0x70e0f; leave; ret; 
0x000000000046a851: add byte ptr [rbp + 8], dh; mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b0bb: add byte ptr [rbp + 9], dh; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042c6df: add byte ptr [rbp + 9], dh; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000411a58: add byte ptr [rbp + 9], dh; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x000000000042a1e8: add byte ptr [rbp + rbx - 0x7d], dh; loope 0x2a1f2; lea rax, [rip + 0x3d4b]; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x000000000043a236: add byte ptr [rbp + rcx*4 + 0x25], cl; ret 0x726; 
0x0000000000456a94: add byte ptr [rbp + rcx*4 + 0x2d], cl; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 4; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000041717d: add byte ptr [rbp + rcx*4 + 0x53], al; add dword ptr [rax + 0xaba78fa], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8d48; 
0x00000000004594cb: add byte ptr [rbp + rcx*4 + 0x63], cl; or al, 0xf6; ret 0x7502; 
0x000000000044e8e1: add byte ptr [rbp + rcx*4 + 0x70], cl; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x000000000040e846: add byte ptr [rbp + rcx*4 + 0xd], cl; jb 0xe84c; add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000042e9ca: add byte ptr [rbp - 0x1a], dh; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2e57b; xor eax, eax; ret; 
0x000000000042ef2a: add byte ptr [rbp - 0x1a], dh; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2eadb; xor eax, eax; ret; 
0x000000000045a5b7: add byte ptr [rbp - 0x22], dh; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x59ddb; xor eax, eax; ret; 
0x000000000045afd7: add byte ptr [rbp - 0x22], dh; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x5a7eb; xor eax, eax; ret; 
0x000000000046931e: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000040b679: add byte ptr [rbp - 0x53], dh; ret; 
0x00000000004179c4: add byte ptr [rbp - 0x72b6c9ec], cl; adc al, 0x90; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004022ec: add byte ptr [rbp - 0x77], cl; fimul word ptr [rcx - 0x77]; fimul dword ptr [rbp - 0x77]; ret; 
0x000000000046ca1f: add byte ptr [rbp - 0x77], cl; ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x00000000004591d8: add byte ptr [rbp - 0x7b], al; rol byte ptr [rax + 0xf], 0x95; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000411982: add byte ptr [rbp - 0x7b], bl; ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x000000000044fecf: add byte ptr [rbp - 0x7cf38b40], al; call 0x44c87db; ret; 
0x0000000000427a0f: add byte ptr [rbp - 0x7cf38b40], al; call 0x5708031b; push rdx; or byte ptr [rax], al; ret; 
0x0000000000417021: add byte ptr [rbp - 0x80], dh; movsxd rdx, ebx; mov edi, dword ptr [rbp - 0x958]; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x000000000045da19: add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000450027: add byte ptr [rbx + 0x178901ea], al; ret; 
0x000000000041bde0: add byte ptr [rbx + 0x227f01f8], al; xor eax, eax; pop rbp; ret; 
0x0000000000416787: add byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000458c78: add byte ptr [rbx + 0x327f01f8], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004547ff: add byte ptr [rbx + 0x337f01fa], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042d59f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000045fc3f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000422938: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000040b548: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000406894: add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x00000000004506fb: add byte ptr [rbx + 0x44], bl; mov eax, esp; pop r12; pop rbp; ret; 
0x000000000042d56f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000045fc1f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000459ab9: add byte ptr [rbx + 0x530340d], cl; add dh, dh; ret 0x7420; 
0x000000000047a15f: add byte ptr [rbx + 0x5d010447], al; ret; 
0x0000000000401f61: add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004047e9: add byte ptr [rbx + 0x617f01f9], al; call rax; 
0x000000000045f54f: add byte ptr [rbx + 0x62fd164c], cl; loope 0x5f5d4; or byte ptr [rsi + 7], bh; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000044457a: add byte ptr [rbx + 0x634807e3], al; ror dword ptr [rax + 0x39], cl; ret 0x8d0f; 
0x0000000000453e2f: add byte ptr [rbx + 0x634d01c1], al; in al, 0x88; or cl, ch; ret; 
0x000000000042a169: add byte ptr [rbx + 0x829840d], cl; add dh, dh; ret 0x7420; 
0x00000000004284ef: add byte ptr [rbx + 0x844f205], cl; add cl, al; call 0x1e30807; mov dword ptr [rip + 0x802f2], eax; ret; 
0x0000000000419856: add byte ptr [rbx + 0x933573d], cl; add byte ptr [rcx - 0x77], al; ret; 
0x00000000004054f0: add byte ptr [rbx + 0xa7401f8], al; pop rbp; ret; 
0x0000000000454b63: add byte ptr [rbx + 0xb], dh; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000040e3d2: add byte ptr [rbx + 0xb], dh; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000420539: add byte ptr [rbx + 1], bh; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000466667: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000046d957: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000453f6c: add byte ptr [rbx + rdi*8], al; jmp qword ptr [rdi - 0x18]; 
0x00000000004112ea: add byte ptr [rbx + rdx + 0x31], dh; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x11348; ret; 
0x000000000043875a: add byte ptr [rbx + rdx - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000041b508: add byte ptr [rbx - 0x377c0c20], al; add al, 0x88; add eax, 0x9169b; ret; 
0x000000000042cc0f: add byte ptr [rbx - 0x3a02e9b4], cl; stc; jle 0x2cc1f; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f0af: add byte ptr [rbx - 0x3a02e9b4], cl; stc; jle 0x5f0bf; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045f2ef: add byte ptr [rbx - 0x3a02e9b4], cl; stc; jle 0x5f2ff; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045003f: add byte ptr [rbx - 0x3fcefe16], al; mov dword ptr [rdi], edx; ret; 
0x00000000004204ac: add byte ptr [rbx - 0x67b7df18], al; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205ac: add byte ptr [rbx - 0x67b7df18], al; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000046a6a9: add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x0000000000404790: add byte ptr [rbx - 0x70f0fe07], al; inc byte ptr [rax]; add byte ptr [rax], al; mov rdi, r8; mov esi, r13d; call rax; 
0x00000000004046e1: add byte ptr [rbx - 0x70f0fe07], al; test dword ptr [rcx], eax; add byte ptr [rax], al; mov edi, r13d; call rax; 
0x000000000041fbf0: add byte ptr [rbx - 0x72b7df18], al; cmp eax, 0x82905; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f4f0: add byte ptr [rbx - 0x72b7df18], al; cmp eax, 0x83005; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000040b76f: add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x2fc6; jne 0xb729; ret; 
0x000000000040b66f: add byte ptr [rbx - 0x72b7df1e], al; add eax, 0x3106; jne 0xb629; ret; 
0x000000000042a10f: add byte ptr [rbx - 0x72b7df1e], al; add eax, 0xfffe4666; jne 0x2a0c9; ret; 
0x000000000042a19f: add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x3026; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x0000000000459aef: add byte ptr [rbx - 0x72b7f71f], al; add eax, 0x5d86; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x00000000004557e1: add byte ptr [rbx - 0x74b78bbd], cl; push rdi; xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x000000000046d558: add byte ptr [rbx - 0x74b7fe20], al; add al, 0xc2; test rax, rax; jne 0x6d57e; ret; 
0x0000000000448cb5: add byte ptr [rbx - 0x77], cl; adc al, 0xe7; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48cc5; call rax; 
0x0000000000420d20: add byte ptr [rbx - 0x78f0d008], al; or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x0000000000420868: add byte ptr [rbx - 0x78f0d008], al; or byte ptr [r8], al; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x000000000043d598: add byte ptr [rbx - 0x7af0fe08], al; ret; 
0x00000000004291c1: add byte ptr [rbx - 0x7bf0de08], al; lea eax, [rcx]; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000043fcdf: add byte ptr [rbx - 0x7cb76eec], cl; ret; 
0x0000000000475bcf: add byte ptr [rbx - 0x7cb7fe40], al; ret 0x3910; 
0x000000000041d94b: add byte ptr [rbx - 0x90f7b], cl; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x0000000000450f3d: add byte ptr [rbx - 0x9b43], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000453e48: add byte ptr [rbx - 0xa34b], cl; dec dword ptr [rbp + 0x63480156]; ror byte ptr [rax + 0x39], cl; ret 0x9c0f; 
0x000000000041b49d: add byte ptr [rbx], al; ret; 
0x00000000004500a9: add byte ptr [rbx], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000457cc7: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000479ebe: add byte ptr [rcx + 0x31900847], cl; ror byte ptr [rbx + rcx*4 + 0x65], 0xf8; leave; ret; 
0x0000000000476757: add byte ptr [rcx + 0x39], cl; ret 0x473; 
0x0000000000435e8f: add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000429cd5: add byte ptr [rcx + 0x5c415bd8], cl; pop rbp; ret; 
0x000000000045451b: add byte ptr [rcx + 0x5c], al; pop r13; pop r14; pop rbp; ret; 
0x000000000041677d: add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x000000000044805f: add byte ptr [rcx + 0x5d415bd0], cl; pop rbp; ret; 
0x0000000000401bf8: add byte ptr [rcx + 0x63], cl; add al, 0xb1; add rax, r9; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000417189: add byte ptr [rcx + 0x63], cl; ret 0x8d48; 
0x0000000000401f5b: add byte ptr [rcx + 0xaaafe15], cl; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000401f55: add byte ptr [rcx + 0xaab000d], cl; add byte ptr [rcx + 0xaaafe15], cl; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047623f: add byte ptr [rcx + 0xf41f3f8], cl; outsd dx, dword ptr [rsi]; add eax, dword ptr [rbx - 0x7cb6fe39]; ret; 
0x000000000040f2ec: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x10], esp; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x00000000004778b9: add byte ptr [rcx + 0xf], al; mov bh, 0x55; and byte ptr [rsi - 9], ah; ret 0x7f8; 
0x00000000004534bf: add byte ptr [rcx + 0xf], al; mov dh, 0x56; or al, 0xf6; ret 0xf40; 
0x0000000000401a49: add byte ptr [rcx + 0xf], al; xchg esi, eax; ret; 
0x0000000000436d3f: add byte ptr [rcx + 1], cl; ret; 
0x0000000000470e3d: add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; leave; ret; 
0x0000000000458a4b: add byte ptr [rcx + 9], al; bt rcx, rdx; jae 0x58a66; neg eax; ret; 
0x00000000004788e6: add byte ptr [rcx + rax - 0x19], cl; syscall; 
0x000000000040e8ba: add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x0000000000461e29: add byte ptr [rcx + rcx*4 + 0x45], cl; clc; mov r8, rsi; lea rdx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x000000000047742c: add byte ptr [rcx + rcx*4 + 0x60], cl; sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000042309c: add byte ptr [rcx + rcx*4 + 0x63], cl; adc byte ptr [rax - 0x77], cl; ret 0xf685; 
0x00000000004046ea: add byte ptr [rcx + rcx*4 - 0x11], al; call rax; 
0x0000000000454249: add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x0000000000458787: add byte ptr [rcx + rcx*4 - 0x16], cl; mov ecx, dword ptr [rbx]; jmp 0x58757; nop; xor eax, eax; ret; 
0x0000000000422a96: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000047a2f4: add byte ptr [rcx + rcx*4 - 0x19], cl; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004593fd: add byte ptr [rcx + rcx*4 - 0x19], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000422eec: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000416e85: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000042a4c6: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop rbp; ret; 
0x00000000004791d1: add byte ptr [rcx + rcx*4 - 0x21], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004788a5: add byte ptr [rcx + rcx*4 - 0x31], cl; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478e79: add byte ptr [rcx + rcx*4 - 0x31], cl; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047a276: add byte ptr [rcx + rcx*4 - 0x32], al; mov eax, 0xca; syscall; 
0x0000000000404c2b: add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x0000000000429320: add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000042957c: add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000404799: add byte ptr [rcx + rcx*4 - 0x39], cl; mov esi, r13d; call rax; 
0x000000000042845a: add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x0000000000458d4c: add byte ptr [rcx + rcx*4 - 0xe], cl; lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x0000000000418981: add byte ptr [rcx + rdi - 0x3a], cl; jae 0x189d8; ret; 
0x0000000000438658: add byte ptr [rcx + rdx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000419af2: add byte ptr [rcx - 0x1a76b730], cl; lea rsi, [rbp - 8]; syscall; 
0x000000000042a5d2: add byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x0000000000473dbf: add byte ptr [rcx - 0x39], cl; xchg dword ptr [rax], ebx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045483e: add byte ptr [rcx - 0x661713bb], cl; add eax, 0x458bfffb; in al, dx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041915f: add byte ptr [rcx - 0x73], cl; add byte ptr [rax + 0x48], r9b; mov dword ptr [rsi], eax; ret; 
0x000000000040775a: add byte ptr [rcx - 0x73], cl; dec dword ptr [rcx - 0x7b]; ret; 
0x0000000000417f2f: add byte ptr [rcx - 0x73], cl; push rcx; add dword ptr [rax + 0x39], ecx; ret 0xc75; 
0x000000000046de8c: add byte ptr [rcx - 0x74b7e7bd], cl; pop rbp; clc; leave; ret; 
0x0000000000441db3: add byte ptr [rcx - 0x75], cl; add ecx, dword ptr [rax + 0x63]; rol byte ptr [rcx - 0xa], cl; ret 0x7504; 
0x00000000004640f8: add byte ptr [rcx - 0x75], cl; jl 0x64121; or byte ptr [rdi - 0x18], ah; mov word ptr [rbp - 6], ds; jmp qword ptr [rsi + 0x66]; 
0x00000000004577da: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004283cf: add byte ptr [rcx - 0x760b142a], cl; ret 0xd2eb; 
0x0000000000455bb8: add byte ptr [rcx - 0x76b32a], cl; call qword ptr [rbx + 0x18]; 
0x0000000000475f77: add byte ptr [rcx - 0x77], al; ret 0x7e8d; 
0x0000000000443865: add byte ptr [rcx - 0x77], al; ret 0x8d49; 
0x00000000004765dd: add byte ptr [rcx - 0x77], al; ret 0xe083; 
0x000000000041985c: add byte ptr [rcx - 0x77], al; ret; 
0x00000000004742c4: add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000403af9: add byte ptr [rcx - 0x77], cl; ret 0x3ee8; 
0x000000000046c34b: add byte ptr [rcx - 0x77], cl; ret 0x840f; 
0x000000000044aa32: add byte ptr [rcx - 0x77], cl; ret 0x8548; 
0x00000000004536b6: add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x0000000000403b0d: add byte ptr [rcx - 0x77], cl; ret; 
0x000000000047a14e: add byte ptr [rcx - 0x77cf7a9], cl; and dword ptr [rcx + rcx + 0x5d], esi; ret; 
0x0000000000402c0a: add byte ptr [rcx - 0x7d], al; retf 0x8102; ret 0x97; 
0x000000000046c8b5: add byte ptr [rcx - 0x7d], cl; ret 0x4801; 
0x0000000000430d3f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042f65f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000453caf: add byte ptr [rcx - 0xa37b], cl; dec dword ptr [rbp + 0x63]; in al, 0xe9; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000441efd: add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x00000000004100a1: add byte ptr [rcx - 1], bh; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000402957: add byte ptr [rcx - 9], al; ret 0x800; 
0x000000000040524d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa0ed7; ret; 
0x000000000040522d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa0eef; ret; 
0x00000000004051fd: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa0f17; ret; 
0x000000000047532e: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x00000000004279c0: add byte ptr [rcx], al; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000043864d: add byte ptr [rcx], al; je 0x38688; cmp byte ptr [rip + 0x6e3ff], 0; je 0x386ac; mov eax, 0x101; syscall; 
0x0000000000461d9d: add byte ptr [rcx], al; je 0x61dc8; mov eax, 0x101; syscall; 
0x0000000000459a5a: add byte ptr [rcx], al; lea rdx, [rip + 0x3dad]; cmove rax, rdx; ret; 
0x000000000042a34a: add byte ptr [rcx], al; lea rdx, [rip + 0xa1bd]; cmove rax, rdx; ret; 
0x0000000000405f30: add byte ptr [rcx], al; mov eax, 0x13e; syscall; 
0x00000000004279a5: add byte ptr [rcx], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000401685: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000469446: add byte ptr [rcx], al; pop rbx; mov eax, 1; pop r12; pop rbp; ret; 
0x000000000043b122: add byte ptr [rcx], al; ret 0x8348; 
0x0000000000429234: add byte ptr [rcx], bh; or byte ptr [r13 - 0x33], r14b; sub dword ptr [rdi + 4], 1; je 0x292e9; xor eax, eax; ret; 
0x00000000004296a1: add byte ptr [rcx], bh; or byte ptr [r15 + r8 - 0x37], r14b; mov eax, 1; ret; 
0x0000000000429078: add byte ptr [rcx], bh; ret 0x4e0f; 
0x00000000004594b3: add byte ptr [rcx], bh; ret 0x7074; 
0x00000000004590ff: add byte ptr [rcx], bh; ret 0x840f; 
0x00000000004293a5: add byte ptr [rcx], bh; ret 0x850f; 
0x0000000000429271: add byte ptr [rcx], bh; ret 0x9175; 
0x0000000000406ab8: add byte ptr [rcx], bh; ret 0xa7e; 
0x000000000041e400: add byte ptr [rcx], bh; ret; 
0x000000000042e8ba: add byte ptr [rcx], ch; ret 0x840f; 
0x000000000042e97a: add byte ptr [rcx], ch; ret 0xf9c5; 
0x000000000042e91a: add byte ptr [rcx], ch; ret 0xfac5; 
0x0000000000407a5b: add byte ptr [rcx], dh; dec dword ptr [rax + 1]; ret 0x8948; 
0x000000000043adba: add byte ptr [rcx], dh; jmp qword ptr [rdi - 0x18]; 
0x000000000044d730: add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x0000000000468a0c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000042babc: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x0000000000412eaf: add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6af0fe08], cl; ret 0x8341; 
0x000000000040a735: add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x000000000041f380: add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], cl; add al, 0xc8; jmp rax; 
0x0000000000415b2b: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; fidiv word ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x00000000004099cb: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000470d0a: add byte ptr [rcx], dh; ror byte ptr [rbp + rcx*4 + 0x15], 0xfc; ret; 
0x0000000000458d97: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004704c8: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; div byte ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x000000000043be25: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; jmp qword ptr [rdi - 0x18]; 
0x00000000004186ec: add byte ptr [rcx], dh; sar byte ptr [rax + 0x14e], cl; mov rdi, rbx; syscall; 
0x000000000045883f: add byte ptr [rcx], dh; sar byte ptr [rdx + 1], 0xf0; cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x000000000046b626: add byte ptr [rcx], dh; shl byte ptr [rdi - 0x18], 0x91; ret 0xfffa; 
0x0000000000414a66: add byte ptr [rcx], dh; shr al, 0x42; sub eax, dword ptr [rax]; add cl, ch; ret 0xfff6; 
0x000000000046b330: add byte ptr [rcx], dh; shr al, 0x78; ret 0xfffa; 
0x0000000000466d6f: add byte ptr [rcx], dh; shr bl, 0xcc; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000462397: add byte ptr [rcx], dh; shr bl, cl; frstor dword ptr [rdi - 0x18]; pop rsi; add bl, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000425d5a: add byte ptr [rdi + 0x13], dh; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426558: add byte ptr [rdi + 0x15], dh; mov rax, qword ptr [rbx + 0x48]; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000047818f: add byte ptr [rdi + 0x1f], dh; xor eax, eax; ret; 
0x000000000040fe59: add byte ptr [rdi + 0x24], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000403ef7: add byte ptr [rdi + 0x5001], bh; mov eax, 0x9e; syscall; 
0x0000000000419991: add byte ptr [rdi + 0x5002], bh; mov eax, 0x9e; syscall; 
0x0000000000419aed: add byte ptr [rdi + 0x5005], bh; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000426264: add byte ptr [rdi + 0x69], dh; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004047e3: add byte ptr [rdi + 0xa3bde0d], al; add byte ptr [rbx + 0x617f01f9], al; call rax; 
0x00000000004046db: add byte ptr [rdi + 0xa3ce60d], al; add byte ptr [rbx - 0x70f0fe07], al; test dword ptr [rcx], eax; add byte ptr [rax], al; mov edi, r13d; call rax; 
0x0000000000426346: add byte ptr [rdi + 0xf], dh; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000473e2d: add byte ptr [rdi + 1], bh; call rax; 
0x000000000040115c: add byte ptr [rdi + 1], bh; mov eax, 0xe; syscall; 
0x0000000000473df9: add byte ptr [rdi + 1], bh; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x0000000000404344: add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404314: add byte ptr [rdi + 2], bh; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x00000000004113de: add byte ptr [rdi + rbp - 0x77], dh; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000040824d: add byte ptr [rdi + rcx + 0x42], cl; ret; 
0x000000000040a1ff: add byte ptr [rdi + rcx + 0x46], cl; ret 0x2a8; 
0x0000000000460a96: add byte ptr [rdi + rcx + 0x48], dh; add eax, 2; ret; 
0x0000000000405c06: add byte ptr [rdi + rcx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x000000000046688f: add byte ptr [rdi + rcx - 0x43], cl; ret 0x40b9; 
0x000000000047213f: add byte ptr [rdi + rcx - 0x4a], al; add cl, byte ptr [rax - 0x7d]; ret 0x4c01; 
0x000000000041b5f9: add byte ptr [rdi - 0x18], ah; add byte ptr [rsi - 1], ch; call qword ptr [rbp + 0x31]; 
0x000000000046a396: add byte ptr [rdi - 0x18], ah; idiv r12b; jmp qword ptr [rsi + 0x2e]; 
0x000000000044d41c: add byte ptr [rdi - 0x18], ah; insd dword ptr [rdi], dx; ret; 
0x00000000004016fe: add byte ptr [rdi - 0x18], ah; mov ebx, 0xf4000026; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000046a9d0: add byte ptr [rdi - 0x18], ah; or eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000044b2c7: add byte ptr [rdi - 0x18], ah; ret 0xfbe4; 
0x0000000000413b16: add byte ptr [rdi - 0x18], ah; ret; 
0x0000000000428400: add byte ptr [rdi - 0x18], ah; stc; jnp 0x283c3; jmp qword ptr [rsi + 0xf]; 
0x000000000046a9b0: add byte ptr [rdi - 0x18], ah; sub eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004016fd: add byte ptr [rdi - 0x18], spl; mov ebx, 0xf4000026; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000416da2: add byte ptr [rdi - 0x64], bh; mov eax, 0x10b; lea rsi, [rip + 0x64cfc]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000040e16d: add byte ptr [rdi], cl; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000455f0e: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; leave; ret; 
0x0000000000456640: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000439b02: add byte ptr [rdi], cl; adc dword ptr [rax], eax; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425d09: add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043a135: add byte ptr [rdi], cl; adc dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004102cb: add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000458543: add byte ptr [rdi], cl; adc dword ptr [rdi], eax; test rdx, rdx; je 0x5854f; mov byte ptr [rsi], 0; ret; 
0x0000000000460a93: add byte ptr [rdi], cl; add byte ptr [rax], al; je 0x60aa8; add rax, 2; ret; 
0x00000000004329f9: add byte ptr [rdi], cl; add byte ptr [rax], al; sub rdx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x0000000000411264: add byte ptr [rdi], cl; add eax, 0x1d75c085; xor eax, eax; ret; 
0x0000000000461ceb: add byte ptr [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x0000000000425ebf: add byte ptr [rdi], cl; mov dh, 0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000418d97: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x0000000000413dc8: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000044d95f: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000444561: add byte ptr [rdi], cl; mov dh, 0x4d; ret 0xcf89; 
0x0000000000453197: add byte ptr [rdi], cl; mov dh, 0x52; or al, 0xf6; ret 0xf01; 
0x000000000044cb7f: add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000041df4d: add byte ptr [rdi], cl; mov dh, 0x85; idiv rdi; jmp qword ptr [rsi + 0x66]; 
0x0000000000413f6b: add byte ptr [rdi], cl; mov dh, 0x97; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x00000000004308ff: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000464ab2: add byte ptr [rdi], cl; mov dh, 4; xor byte ptr [rax - 0x77], cl; ret; 
0x000000000042baef: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042bb1f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042bb0f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042bb2f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2bb70; add rax, rdi; ret; 
0x000000000042bb3f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2bb70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000041049f: add byte ptr [rdi], cl; mov esp, 0xc78348c0; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x00000000004105cf: add byte ptr [rdi], cl; mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000042b12f: add byte ptr [rdi], cl; mov esp, 0xc7ff48c0; add rax, rdi; jmp 0x2b0fc; xor eax, eax; ret; 
0x000000000046800f: add byte ptr [rdi], cl; mov esp, 0xc7ff48c0; add rax, rdi; jmp 0x67fdc; xor eax, eax; ret; 
0x000000000041048f: add byte ptr [rdi], cl; mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000041104f: add byte ptr [rdi], cl; mov esp, 0xcf2948c0; add rax, rdi; ret; 
0x000000000041105f: add byte ptr [rdi], cl; mov esp, 0xcf2948c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042df2f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x0000000000410a0f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000041dd94: add byte ptr [rdi], cl; test byte ptr [rbp - 0x7c000002], bh; mov ebp, 0xfffff6f0; or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x00000000004624f8: add byte ptr [rdi], cl; test dword ptr [rax - 0x37000000], edi; ret; 
0x000000000043867a: add byte ptr [rdi], cl; test dword ptr [rdx - 0x37000000], esp; ret; 
0x000000000046c903: add byte ptr [rdi], cl; test esi, edi; add byte ptr [rax], al; add cl, cl; mov rax, r10; ret; 
0x000000000044edde: add byte ptr [rdi], cl; test esp, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000432a03: add byte ptr [rdi], cl; xchg dword ptr [rbp + rdi*8 - 0x3fce0001], esp; ret; 
0x0000000000455bb2: add byte ptr [rdi], cl; xchg dword ptr [rdi], edx; add dword ptr [rax], eax; add byte ptr [rcx - 0x76b32a], cl; call qword ptr [rbx + 0x18]; 
0x000000000041a3c2: add byte ptr [rdi], cl; xchg ebp, eax; ret 0x8d48; 
0x000000000041a3e6: add byte ptr [rdi], cl; xchg esp, eax; ret 0x8b48; 
0x000000000041a3a1: add byte ptr [rdi], cl; xchg esp, eax; ret 0x8d48; 
0x0000000000416842: add byte ptr [rdi], cl; xchg esp, eax; ret 0xb60f; 
0x000000000042bedf: add byte ptr [rdx + 0x14], dh; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000040433f: add byte ptr [rdx + 0x2d], bh; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x000000000040430f: add byte ptr [rdx + 0x2d], bh; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x00000000004777b7: add byte ptr [rdx + 0x63], cl; jl 0x777bd; or byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000469319: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000470e0a: add byte ptr [rdx + rax - 0x37], dh; ret; 
0x0000000000428053: add byte ptr [rdx + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x28080; movzx eax, byte ptr [rax]; ret; 
0x000000000043853f: add byte ptr [rdx + riz*2 - 0x77], dh; fimul dword ptr [rcx + rcx*4 - 0x1a]; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004101bf: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x101c6; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x00000000004101c5: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x10210; adc bh, bh; ret; 
0x000000000040ff55: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0xffa0; adc bh, bh; ret; 
0x0000000000448ea3: add byte ptr [rdx - 0x75], cl; add al, 0xe0; test rax, rax; je 0x48eaf; call rax; 
0x000000000043202f: add byte ptr [rdx - 9], dh; ja 0x2e9f0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043269f: add byte ptr [rdx - 9], dh; ja 0x2ef60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043269e: add byte ptr [rdx - 9], sil; ja 0x2ef60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000044e10d: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x000000000041b7fb: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000447c4c: add byte ptr [rdx], ch; call rax; 
0x0000000000467a38: add byte ptr [rdx], dl; jae 0x67a30; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000004329f7: add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x0000000000423356: add byte ptr [rip - 0x1d14238c], bl; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004291ac: add byte ptr [rip - 0x5cf0b800], cl; ret 0x820f; 
0x000000000041fa13: add byte ptr [rip - 0x74917], ah; jmp qword ptr [rsi + 0xf]; 
0x00000000004502bf: add byte ptr [rsi + 0x48], ah; movd mm0, eax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004185b8: add byte ptr [rsi + 0x48], ah; movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x000000000041866b: add byte ptr [rsi + 0x48], ah; movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000404d3e: add byte ptr [rsi + 0x80], bh; mov eax, 0xca; syscall; 
0x000000000043e1f1: add byte ptr [rsi + 0x80], bh; mov eax, ebx; syscall; 
0x0000000000404deb: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x0000000000404deb: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x0000000000419b9f: add byte ptr [rsi + 0xc], bh; xor edi, edi; mov eax, esi; syscall; 
0x000000000045ff15: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x000000000044e072: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x8948; 
0x0000000000427c66: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000044e111: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x0000000000468a2b: add byte ptr [rsi + 0xf], ah; jbe 0x68a7f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000042badb: add byte ptr [rsi + 0xf], ah; je 0x2bb2f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000004276dc: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042ba24: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x000000000041998c: add byte ptr [rsi + 1], bh; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000429577: add byte ptr [rsi + 1], bh; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000404fac: add byte ptr [rsi + 1], dh; ret; 
0x00000000004124cf: add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x9a377]; ret; 
0x00000000004191bf: add byte ptr [rsi + rcx + 0x48], dh; test edx, edx; je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x0000000000401486: add byte ptr [rsi + rdx + 0x48], dh; mov edi, dword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000461d9f: add byte ptr [rsi + riz - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000043864f: add byte ptr [rsi + rsi - 0x80], dh; cmp eax, 0x6e3ff; add byte ptr [rcx + rdx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000437aad: add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; 
0x0000000000437aad: add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; ret; 
0x000000000043896d: add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 1; syscall; 
0x0000000000461cdd: add byte ptr [rsi - 0x70], ah; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000404f7d: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa11b1], rax; ret; 
0x000000000041241d: add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x000000000045fbed: add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000045fe8d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000045fe4d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000045fe6d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042d68d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044eb8d: add byte ptr [rsi - 0x70], ah; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000463b0d: add byte ptr [rsi - 0x70], ah; ret; 
0x0000000000468afd: add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x0000000000401ecd: add byte ptr [rsi - 0x70], ah; xor edi, edi; mov eax, edx; syscall; 
0x000000000041b48f: add byte ptr [rsi - 0x7f], ah; js 0x1b49c; jbe 0x1b4fb; jne 0x1b43c; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000041b51f: add byte ptr [rsi - 0x7f], ah; js 0x1b52c; jbe 0x1b58b; jne 0x1b4cc; or byte ptr [rip + 0x91681], 0xc; ret; 
0x0000000000455e67: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000456aae: add byte ptr [rsi - 1], bh; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000041b5fc: add byte ptr [rsi - 1], ch; call qword ptr [rbp + 0x31]; 
0x000000000044e06e: add byte ptr [rsi], cl; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x8948; 
0x000000000044eb79: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000040b80f: add byte ptr ds:[rax], al; cmovne rax, rdx; ret; 
0x000000000042a03c: add byte ptr es:[rax], al; cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000401702: add byte ptr es:[rax], al; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000423173: add byte ptr es:[rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046931b: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000459b2f: add byte ptr gs:[rax], al; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x000000000042a221: add byte ptr ss:[rax], al; test ch, 8; jne 0x2a1eb; ret; 
0x000000000040f85f: add ch, al; stc; jle 0xf86b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000040fa9f: add ch, al; stc; jle 0xfaab; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000467e6f: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x00000000004284f5: add cl, al; call 0x1e30807; mov dword ptr [rip + 0x802f2], eax; ret; 
0x000000000044d3aa: add cl, al; cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x000000000040e84d: add cl, al; loope 0xe857; add rcx, r9; jmp rcx; 
0x00000000004687f0: add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; add rax, rdi; add rax, rcx; ret; 
0x0000000000468a87: add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa7: add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac7: add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae7: add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000460fdf: add cl, byte ptr [rax + 0x39]; int1; jb 0x60d64; mov rax, r8; vzeroupper; ret; 
0x0000000000460cf2: add cl, byte ptr [rax + 0xf]; stosd dword ptr [rdi], eax; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000046085a: add cl, byte ptr [rax + 1]; clc; ret; 
0x000000000040b752: add cl, byte ptr [rax - 0x73]; adc eax, 0x1936; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b652: add cl, byte ptr [rax - 0x73]; adc eax, 0x1a66; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000040b782: add cl, byte ptr [rax - 0x73]; adc eax, 0x21c6; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b682: add cl, byte ptr [rax - 0x73]; adc eax, 0x22f6; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000040b7a2: add cl, byte ptr [rax - 0x73]; adc eax, 0x266; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b6a2: add cl, byte ptr [rax - 0x73]; adc eax, 0x396; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000040b6f8: add cl, byte ptr [rax - 0x73]; adc eax, 0xa90; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000040b5f8: add cl, byte ptr [rax - 0x73]; adc eax, 0xbc0; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042a142: add cl, byte ptr [rax - 0x73]; adc eax, 0xfffe18f6; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000042a098: add cl, byte ptr [rax - 0x73]; adc eax, 0xfffe2120; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a0f2: add cl, byte ptr [rax - 0x73]; adc eax, 0xfffe2fc6; lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000042a122: add cl, byte ptr [rax - 0x73]; adc eax, 0xfffe3856; lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000040b72b: add cl, byte ptr [rax - 0x73]; add eax, 0x2a4d; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b62b: add cl, byte ptr [rax - 0x73]; add eax, 0x2b8d; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000040b856: add cl, byte ptr [rax - 0x73]; add eax, 0x4582; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000042a0cb: add cl, byte ptr [rax - 0x73]; add eax, 0xfffe40ed; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000042cb4e: add cl, byte ptr [rax - 0x73]; cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x0000000000412502: add cl, byte ptr [rax - 0x77]; add eax, 0x9a34e; lea rax, [rip + 0x9a33f]; ret; 
0x00000000004554c1: add cl, byte ptr [rax - 0x77]; ret 0x2949; 
0x000000000042d140: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000471ea3: add cl, byte ptr [rax - 0x7d]; ret 0x4c01; 
0x0000000000420fe0: add cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x000000000042d1a3: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x000000000044a9c5: add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x000000000044ddd3: add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000044505e: add cl, byte ptr [rcx + 0x39]; ret 0x5c72; 
0x00000000004464ea: add cl, byte ptr [rcx + 0x39]; ret 0x820f; 
0x0000000000478c35: add cl, byte ptr [rcx - 0x1776bb3e]; syscall; 
0x000000000047899c: add cl, byte ptr [rcx - 0x1f76bb3e]; syscall; 
0x000000000041cd7f: add cl, byte ptr [rcx - 0x437a763a]; idiv bh; call rcx; 
0x000000000040e34a: add cl, byte ptr [rdi]; adc dword ptr [rcx], eax; ret; 
0x0000000000410431: add cl, byte ptr [rdi]; adc dword ptr [rdx + 0x10], eax; movups xmmword ptr [rdx + 0x20], xmm0; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x0000000000460700: add cl, byte ptr [rdi]; add esi, edx; jne 0x6070a; vzeroupper; ret; 
0x0000000000458578: add cl, ch; bnd jp 0x5857c; jmp qword ptr [rsi - 0x70]; 
0x0000000000458560: add cl, ch; or bh, byte ptr [rbx - 1]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000421196: add cl, ch; ret 0xffe4; 
0x0000000000414a6d: add cl, ch; ret 0xfff6; 
0x0000000000444e78: add cl, ch; ret 0xfffb; 
0x00000000004459d8: add cl, ch; ret 0xfffe; 
0x0000000000402d69: add cl, ch; ret; 
0x0000000000427a3c: add cl, ch; sahf; sar ebp, cl; jmp qword ptr [rsi + 0x66]; 
0x0000000000448710: add cl, ch; sbb dl, byte ptr [rbp + 0x2e66fffc]; nop dword ptr [rax + rax]; ret; 
0x000000000044ca30: add cl, ch; xor al, byte ptr [rsi - 5]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004707b6: add cl, cl; mov eax, 1; ret; 
0x0000000000404ac7: add cl, cl; mov rax, r10; ret; 
0x0000000000401985: add cl, cl; ret; 
0x0000000000412715: add cl, cl; test eax, eax; sete al; ret; 
0x000000000047081f: add cl, cl; xor eax, eax; ret; 
0x00000000004189f4: add dh, al; push 0x47110f01; pop rax; ret; 
0x000000000041d6e5: add dh, al; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x0000000000412452: add dh, byte ptr [rax + 0x48]; cmp dword ptr [rax + 8], 0; je 0x12460; ret; 
0x00000000004285f8: add dh, byte ptr [rbp + 0x15]; sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000436b07: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36b00; ret; 
0x0000000000436bb7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36bb0; ret; 
0x000000000043e1e7: add dh, byte ptr [rbp + 0x36]; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, ebx; syscall; 
0x000000000040b726: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip + 0x2a4d]; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b626: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip + 0x2b8d]; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a0c6: add dh, byte ptr [rbp + 0x47]; and ch, 2; lea rax, [rip - 0x1bf13]; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x0000000000455d2a: add dh, byte ptr [rbp + 0x6b]; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000047526f: add dh, byte ptr [rbp + 6]; ret; 
0x000000000047a47b: add dh, byte ptr [rbp + riz - 0x77]; ret 0xe283; 
0x000000000042dad2: add dh, byte ptr [rbp - 0x3c]; add rax, rdx; vzeroupper; ret; 
0x0000000000478c07: add dh, byte ptr [rbx + riz - 0x77]; ret 0xe283; 
0x0000000000403ef0: add dh, byte ptr [rcx + rdx - 0x42]; add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x0000000000419144: add dh, byte ptr [rdi + 0x19]; mov rax, qword ptr [rdx + 0x48]; test ecx, ecx; je 0x19158; mov qword ptr [rsi], rax; ret; 
0x000000000040ca2c: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000040fc03: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000047896a: add dh, byte ptr [rsp - 0x77]; ret 0xe283; 
0x0000000000426936: add dh, dh; add eax, dword ptr [rax - 0x74b7db8b]; pop rbp; clc; leave; ret; 
0x0000000000414bde: add dh, dh; ret 0x7402; 
0x0000000000414bea: add dh, dh; ret 0x7404; 
0x000000000040b7ea: add dh, dh; ret 0x7420; 
0x000000000042e247: add dh, dh; ret 0x7501; 
0x000000000042e254: add dh, dh; ret 0x7502; 
0x000000000042e261: add dh, dh; ret 0x7504; 
0x000000000043dae2: add dh, dh; ret 0x7508; 
0x000000000042e219: add dh, dh; ret 0x7510; 
0x000000000042e226: add dh, dh; ret 0x7520; 
0x000000000042e233: add dh, dh; ret 0x7540; 
0x0000000000413f72: add dh, dh; ret 0xf03; 
0x00000000004080ad: add dh, dh; ret 0xf0f; 
0x0000000000451688: add dh, dh; ret 0xf10; 
0x000000000045095d: add dh, dh; ret 0xf40; 
0x000000000045093f: add dh, dh; ret 0xf50; 
0x0000000000442e45: add dh, dh; ret; 
0x00000000004421b1: add dil, r13b; jmp qword ptr [rsi + 0x66]; 
0x0000000000419993: add dl, byte ptr [rax]; add byte ptr [rax + 0x9e], bh; syscall; 
0x000000000043a83a: add dl, byte ptr [rcx - 0x77]; ret 0x5441; 
0x00000000004188da: add dl, byte ptr [rsi + 2]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000401ace: add dword ptr [r11 + 0x41], ebx; pop rsp; pop rbp; ret; 
0x0000000000417e5a: add dword ptr [r8 - 0x77], ecx; add eax, 0x8fd25; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x0000000000405f31: add dword ptr [rax + 0x13e], edi; syscall; 
0x000000000040d3f8: add dword ptr [rax + 0x29], ecx; int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000416e63: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x0000000000417f33: add dword ptr [rax + 0x39], ecx; ret 0xc75; 
0x0000000000444503: add dword ptr [rax + 0x39], ecx; ret 0xd73; 
0x0000000000445c3c: add dword ptr [rax + 0x39], ecx; ret 0xed75; 
0x0000000000440dc8: add dword ptr [rax + 0x39], ecx; ret 0xee75; 
0x0000000000412c0c: add dword ptr [rax + 0x39], ecx; ret 0xf48; 
0x0000000000416e54: add dword ptr [rax + 0x39], ecx; ret 0xf72; 
0x000000000042630b: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000042da76: add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x0000000000416e93: add dword ptr [rax + 0x63], ecx; jmp qword ptr [rdi - 0x18]; 
0x0000000000453e51: add dword ptr [rax + 0x63], ecx; ror byte ptr [rax + 0x39], cl; ret 0x9c0f; 
0x0000000000417181: add dword ptr [rax + 0xaba78fa], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8d48; 
0x0000000000426a83: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x00000000004133d3: add dword ptr [rax + 1], ecx; ret; 
0x0000000000462587: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000044ea07: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x000000000041eab0: add dword ptr [rax + 1], ecx; ror dword ptr [rax + 1], cl; fmul dword ptr [rcx + 0x39]; ret 0x830f; 
0x0000000000438cb5: add dword ptr [rax + 9], ecx; ror byte ptr [rcx - 0x77], 1; add bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000461e36: add dword ptr [rax + rax], edx; syscall; 
0x0000000000420171: add dword ptr [rax - 0x4b743], eax; jmp qword ptr [rax]; 
0x0000000000459a5b: add dword ptr [rax - 0x73], ecx; adc eax, 0x3dad; cmove rax, rdx; ret; 
0x000000000042a34b: add dword ptr [rax - 0x73], ecx; adc eax, 0xa1bd; cmove rax, rdx; ret; 
0x0000000000409256: add dword ptr [rax - 0x73], ecx; push rsp; ret 0xfff0; 
0x0000000000428eec: add dword ptr [rax - 0x74b73fcf], edx; pop rbp; clc; leave; ret; 
0x000000000046d55b: add dword ptr [rax - 0x75], ecx; add al, 0xc2; test rax, rax; jne 0x6d57e; ret; 
0x00000000004279a6: add dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x0000000000448786: add dword ptr [rax - 0x75], ecx; pop rbp; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x0000000000404fd6: add dword ptr [rax - 0x77], ecx; adc eax, 0xa11aa; ret; 
0x0000000000417e5b: add dword ptr [rax - 0x77], ecx; add eax, 0x8fd25; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000042a4ac: add dword ptr [rax - 0x77], ecx; add ecx, dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000401bbe: add dword ptr [rax - 0x77], ecx; clc; pop rbx; pop rbp; ret; 
0x0000000000414403: add dword ptr [rax - 0x77], ecx; cmp cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x000000000043f8d1: add dword ptr [rax - 0x77], ecx; ret 0x2b48; 
0x0000000000424ce6: add dword ptr [rax - 0x77], ecx; ret 0x7275; 
0x00000000004125cb: add dword ptr [rax - 0x77], ecx; ret 0x894c; 
0x000000000043b541: add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x00000000004678dc: add dword ptr [rax - 0x77], ecx; ret; 
0x0000000000412747: add dword ptr [rax - 0x77], ecx; xlatb; jmp 0x126af; leave; xor eax, eax; ret; 
0x000000000044d7c7: add dword ptr [rax - 0x7cb700b2], ecx; ret 0x4901; 
0x0000000000409252: add dword ptr [rax - 0x7d], ecx; lock add dword ptr [rax - 0x73], ecx; push rsp; ret 0xfff0; 
0x0000000000475bd2: add dword ptr [rax - 0x7d], ecx; ret 0x3910; 
0x0000000000418d9b: add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x0000000000418c60: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000004776c6: add dword ptr [rax - 0x7d], ecx; ret 0x4810; 
0x0000000000440ba3: add dword ptr [rax - 0x7d], ecx; ret 0x4901; 
0x000000000041cf23: add dword ptr [rax - 0x7d], ecx; ret 0x4c10; 
0x0000000000413dcc: add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000043728a: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x000000000044d963: add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x000000000041bf24: add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000041d85f: add dword ptr [rax - 0x8e743], eax; jmp qword ptr [rax]; 
0x0000000000435566: add dword ptr [rax], 0xc8010000; vzeroupper; ret; 
0x00000000004291c8: add dword ptr [rax], eax; add byte ptr [rax + 0x16], bh; ret; 
0x0000000000416838: add dword ptr [rax], eax; add byte ptr [rax + 0x1bb2bfa], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0xb60f; 
0x0000000000422a3a: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000441c3f: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000439ee5: add dword ptr [rax], eax; add byte ptr [rax + 0xf78027a], al; test bh, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004699da: add dword ptr [rax], eax; add byte ptr [rax + rcx*4 + 0x4d], al; ret 0x8b48; 
0x0000000000459a8f: add dword ptr [rax], eax; add byte ptr [rax - 0x518af71b], al; ret; 
0x000000000046792f: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 7; cmove rax, rdx; ret; 
0x0000000000416daa: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; xor eax, 0x64cfc; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x00000000004215e6: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x0000000000409165: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004083e2: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000004396d2: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041c794: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rdx + 0x48], 1; ret; 
0x000000000040b348: add dword ptr [rax], eax; add byte ptr [rax - 0x7c1076b4], dl; ret; 
0x0000000000409198: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004317dd: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d93a: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x000000000042a84e: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000045edf7: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000431731: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000439eef: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041e292: add dword ptr [rax], eax; add byte ptr [rax - 0x8e743], al; jmp qword ptr [rax]; 
0x0000000000473c4c: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000041f981: add dword ptr [rax], eax; add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000040197b: add dword ptr [rax], eax; add byte ptr [rax], al; jmp 0x1986; mov eax, 0; leave; ret; 
0x0000000000474ad1: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x0000000000474ad1: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; nop word ptr [rax + rax]; ret; 
0x000000000042d065: add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000040434b: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rip + 0x79212]; syscall; 
0x000000000040431b: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rip + 0x79242]; syscall; 
0x00000000004279c1: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000412712: add dword ptr [rax], eax; add byte ptr [rax], al; leave; test eax, eax; sete al; ret; 
0x0000000000458843: add dword ptr [rax], eax; add byte ptr [rax], al; lock cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x00000000004667be: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x00000000004051de: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x0000000000404e0c: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000404e0c: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x0000000000478cbd: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000040115e: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000403ef4: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x000000000041998e: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x00000000004742cc: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000404de8: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000404de8: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000429574: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000047a273: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, r9d; mov eax, 0xca; syscall; 
0x000000000040114e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rbp - 0xb0], 0x20; mov edi, 1; mov eax, 0xe; syscall; 
0x000000000040524e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x000000000040522e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051fe: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004666e6: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x0000000000473dfb: add dword ptr [rax], eax; add byte ptr [rax], al; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x000000000042053b: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000466d3c: add dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004791ce: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r11; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047a2f1: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r12; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004593fa: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000429579: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004788a2: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478e76: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000422365: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000478a88: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rcx; mov eax, 0xca; syscall; 
0x000000000041677a: add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x0000000000466761: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x00000000004192ea: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000450024: add dword ptr [rax], eax; add byte ptr [rax], al; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000043875e: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000043875e: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x387c0; ret; 
0x0000000000438975: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x38988; ret; 
0x0000000000413b41: add dword ptr [rax], eax; add byte ptr [rax], al; test rsi, rsi; je 0x13b50; mov eax, r8d; ret; 
0x000000000042d05a: add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000045f71a: add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000041f37d: add dword ptr [rax], eax; add byte ptr [rax], al; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000428af0: add dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x000000000047415f: add dword ptr [rax], eax; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000043fcdd: add dword ptr [rax], eax; add byte ptr [rbx - 0x7cb76eec], cl; ret; 
0x00000000004046e8: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x11], al; call rax; 
0x0000000000422a94: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000455bb6: add dword ptr [rax], eax; add byte ptr [rcx - 0x76b32a], cl; call qword ptr [rbx + 0x18]; 
0x0000000000441efb: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000470d08: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rbp + rcx*4 + 0x15], 0xfc; ret; 
0x0000000000461ce9: add dword ptr [rax], eax; add byte ptr [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x0000000000418669: add dword ptr [rax], eax; add byte ptr [rsi + 0x48], ah; movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000042e245: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x000000000042e252: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x000000000042e25f: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000042e217: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000042e224: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000042e231: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000453140: add dword ptr [rax], eax; add dh, dh; ret 0xf50; 
0x0000000000447365: add dword ptr [rax], eax; add dh, dh; ret; 
0x000000000040147c: add dword ptr [rax], eax; call 0x10d2; cmp dword ptr [rbp - 0x50], 0; je 0x149f; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x000000000041133c: add dword ptr [rax], eax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000419538: add dword ptr [rax], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454248: add dword ptr [rax], eax; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004541a9: add dword ptr [rax], eax; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x000000000041b747: add dword ptr [rax], eax; nop dword ptr [rax]; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000454b37: add dword ptr [rax], eax; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x000000000041be4e: add dword ptr [rax], eax; pop rbp; mov qword ptr [rip + 0x90de4], 0; ret; 
0x0000000000403ef9: add dword ptr [rax], edx; add byte ptr [rax + 0x9e], bh; syscall; 
0x0000000000458a49: add dword ptr [rax], esp; add byte ptr [rcx + 9], al; bt rcx, rdx; jae 0x58a66; neg eax; ret; 
0x0000000000441c3e: add dword ptr [rax], r8d; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004275c4: add dword ptr [rbp + 0x11], esi; sub rdx, qword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004564fb: add dword ptr [rbp + 0x12], esi; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000436e77: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36e70; sub rax, 1; ret; 
0x0000000000436d27: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x36d20; lea rax, [rcx - 1]; ret; 
0x0000000000404e07: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000404e07: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x000000000047a2ec: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov rdi, r12; mov esi, r9d; mov eax, 0xca; syscall; 
0x000000000047889d: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478a83: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov rdi, rcx; mov eax, 0xca; syscall; 
0x0000000000476939: add dword ptr [rbp + 0x34], esi; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000475f73: add dword ptr [rbp + 0x41000002], -0x77; ret 0x7e8d; 
0x0000000000453e32: add dword ptr [rbp + 0x63], ecx; in al, 0x88; or cl, ch; ret; 
0x00000000004251e0: add dword ptr [rbp - 0x77], ebx; add eax, 0x87a8c; ret; 
0x0000000000401acf: add dword ptr [rbx + 0x41], ebx; pop rsp; pop rbp; ret; 
0x0000000000406ab2: add dword ptr [rbx + 0x9f6ab05], ecx; add byte ptr [rcx], bh; ret 0xa7e; 
0x0000000000469447: add dword ptr [rbx - 0x48], ebx; add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x0000000000401af0: add dword ptr [rbx - 0x50f0fe40], eax; ret 0x538d; 
0x00000000004026d5: add dword ptr [rbx - 0x50f0fe40], eax; ret 0xda89; 
0x000000000046a6af: add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x0000000000444097: add dword ptr [rbx], 0x3d8d4800; mov esp, 0xcae80003; add bh, ah; jmp qword ptr [rdi - 0x18]; 
0x00000000004028fb: add dword ptr [rcx + 0x3509000a], esp; ret; 
0x00000000004794d9: add dword ptr [rcx + 0x39], ecx; ret 0x840f; 
0x0000000000478e50: add dword ptr [rcx + 0x39], ecx; ret 0xad75; 
0x0000000000417ebd: add dword ptr [rcx + 0x39], ecx; ret; 
0x00000000004285ff: add dword ptr [rcx + 0x48641047], ecx; mov dword ptr [0x2f8], edi; ret; 
0x00000000004173e9: add dword ptr [rcx + 0x63], ecx; ret 0x8d48; 
0x0000000000458f7c: add dword ptr [rcx + rcx*2 + 0x45], esi; xor edx, edx; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000471ed0: add dword ptr [rcx + rcx*4 + 0x14], ecx; ret; 
0x000000000042626e: add dword ptr [rcx + rcx*4 - 0x11], ecx; call qword ptr [rax + 0x18]; 
0x000000000041fa0d: add dword ptr [rcx - 0x77], ecx; push rdi; or dh, al; add byte ptr [rip - 0x74917], ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000465cc8: add dword ptr [rcx - 0x77], ecx; push rsp; ret 0x4808; 
0x0000000000466248: add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000044876e: add dword ptr [rcx - 0x77cf7bd], ecx; std; je 0x48790; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000471bc9: add dword ptr [rcx - 0x7d], ecx; call qword ptr [rdx]; 
0x000000000047618a: add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000044db4f: add dword ptr [rcx - 0x7f], ecx; call qword ptr [rax]; 
0x0000000000417f1d: add dword ptr [rcx - 1], -1; jmp qword ptr [rsi + 0x66]; 
0x00000000004113e4: add dword ptr [rcx], eax; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000043854d: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004275c3: add dword ptr [rcx], eax; jne 0x275d8; sub rdx, qword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000436f83: add dword ptr [rcx], esi; leave; xor edx, edx; call rax; 
0x0000000000461cab: add dword ptr [rdi + 0x1a], edi; pop rbx; pop r12; pop rbp; ret; 
0x00000000004103d1: add dword ptr [rdi + 0x1c], edi; jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x000000000041bde3: add dword ptr [rdi + 0x22], edi; xor eax, eax; pop rbp; ret; 
0x00000000004101b0: add dword ptr [rdi + 0x2d], edi; jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x0000000000458c7b: add dword ptr [rdi + 0x32], edi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454802: add dword ptr [rdi + 0x33], edi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040ff39: add dword ptr [rdi + 0x34], edi; jl 0xff40; mov byte ptr [rax], cl; ret; 
0x000000000040f836: add dword ptr [rdi + 0x37], edi; jl 0xf83e; mov byte ptr [rdi], sil; ret; 
0x000000000040fa76: add dword ptr [rdi + 0x37], edi; jl 0xfa7e; mov byte ptr [rdi], sil; ret; 
0x00000000004047ec: add dword ptr [rdi + 0x61], edi; call rax; 
0x0000000000429c96: add dword ptr [rdi + 0x7f], edi; mov eax, ebx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000428ee9: add dword ptr [rdi + 0xc], 1; nop; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000047a160: add dword ptr [rdi + 4], 1; pop rbp; ret; 
0x00000000004566b6: add dword ptr [rdi + rbp - 0x77], esi; ret 0xc085; 
0x0000000000462dae: add dword ptr [rdi + rdi*4 - 0x15], esi; ret; 
0x00000000004135ff: add dword ptr [rdi - 0x18], esp; mov ah, byte ptr [rcx - 1]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000004189f8: add dword ptr [rdi], ecx; adc dword ptr [rdi + 0x58], eax; ret; 
0x000000000042cd94: add dword ptr [rdi], ecx; add esi, edx; jne 0x2cd9e; vzeroupper; ret; 
0x00000000004046e4: add dword ptr [rdi], ecx; pop qword ptr [rbp + 0x44000001]; mov edi, ebp; call rax; 
0x0000000000401af3: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x538d; 
0x00000000004026d8: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x00000000004026e6: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0xb4e9; 
0x0000000000401af9: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0xceeb; 
0x00000000004591a7: add dword ptr [rdi], ecx; test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x0000000000412eb4: add dword ptr [rdi], ecx; xchg ebp, eax; ret 0x8341; 
0x000000000046b7f2: add dword ptr [rdi], ecx; xchg ebp, eax; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x00000000004654b8: add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x0000000000460017: add dword ptr [rdx + 0x2b], 0xe2748104; ret; 
0x000000000040fc10: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000040ca41: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004020ce: add dword ptr [rdx + rax], 0; add byte ptr [rax - 0x77], cl; add eax, 0xaa8b6; pop rbx; pop rbp; ret; 
0x00000000004054f3: add dword ptr [rdx + rcx + 0x5d], esi; ret; 
0x000000000040c99a: add dword ptr [rdx - 0x2f], esp; jl 0xc9e7; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000042cec6: add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000040fba7: add dword ptr [rdx - 0xf], esp; jl 0xfbf4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fce7: add dword ptr [rdx - 0xf], esp; jl 0xfd34; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000046e4f7: add dword ptr [rdx], 0x4634800; mov edx, 0x3ed00148; jmp rax; 
0x000000000043700e: add dword ptr [rdx], ebp; call rax; 
0x000000000046485d: add dword ptr [rip + 0x3484b74], 0x89480853; push rsp; ret; 
0x0000000000423a76: add dword ptr [rip + 0x8f2e800], -2; jmp qword ptr [rsi - 0x70]; 
0x00000000004044a0: add dword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x0000000000458e79: add dword ptr [rsi + 0xc], esi; jmp 0x58d10; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000046ce27: add dword ptr [rsi + 6], esi; jmp 0x6ca10; nop; ret; 
0x0000000000426097: add dword ptr [rsi + riz - 0x77], esi; ret 0xc883; 
0x000000000046e4f6: add dword ptr ds:[rdx], 0x4634800; mov edx, 0x3ed00148; jmp rax; 
0x000000000045ff33: add eax, 0x10; sub esi, edx; cmp ecx, esi; jae 0x5ff88; movsxd rax, ecx; ret; 
0x00000000004602e2: add eax, 0x10d9; test edx, 0x40000000; je 0x602bf; ret; 
0x000000000041246e: add eax, 0x11148b48; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000459a50: add eax, 0x12741000; test byte ptr [rip + 0x53099], 1; lea rdx, [rip + 0x3dad]; cmove rax, rdx; ret; 
0x000000000046029e: add eax, 0x133d; lea rdx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x0000000000429fe3: add eax, 0x1398; cmovne rax, rdx; ret; 
0x0000000000448cb4: add eax, 0x14894b00; out 0x4a, eax; mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x48cc5; call rax; 
0x0000000000459a8d: add eax, 0x14e; and ch, 8; jne 0x59a45; ret; 
0x000000000046f31a: add eax, 0x1543948; and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x0000000000459aa2: add eax, 0x1569; test edx, 0x40000000; je 0x59a7f; ret; 
0x000000000044c97a: add eax, 0x163d0e8; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000429f7c: add eax, 0x18cf; mov ecx, edx; not ecx; and ecx, 0x120; je 0x29f90; ret; 
0x000000000040b75c: add eax, 0x18df; cmovne rax, rdx; ret; 
0x000000000040b65c: add eax, 0x19ef; cmovne rax, rdx; ret; 
0x0000000000411266: add eax, 0x1d75c085; xor eax, eax; ret; 
0x0000000000458c77: add eax, 0x1f88300; jg 0x58cb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004547fe: add eax, 0x1fa8300; jg 0x54838; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041b7fa: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004124fe: add eax, 0x2048b48; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x000000000040b7ac: add eax, 0x20f; cmovne rax, rdx; ret; 
0x000000000040b78c: add eax, 0x216f; cmovne rax, rdx; ret; 
0x0000000000460e90: add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004356a5: add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000040b68c: add eax, 0x227f; cmovne rax, rdx; ret; 
0x000000000041244e: add eax, 0x2448d48; jo 0x1249d; cmp dword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000042a03a: add eax, 0x2641; cmovne rdx, rax; mov rax, rdx; ret; 
0x00000000004019d6: add eax, 0x2948000a; ret; 
0x000000000040b72e: add eax, 0x2a4d; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b62e: add eax, 0x2b8d; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a1c2: add eax, 0x2c39; test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000040b775: add eax, 0x2fc6; jne 0xb729; ret; 
0x000000000042a1a5: add eax, 0x3026; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x000000000040b675: add eax, 0x3106; jne 0xb629; ret; 
0x000000000040b6ac: add eax, 0x31f; cmovne rax, rdx; ret; 
0x000000000046485e: add eax, 0x3484b74; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x000000000042a21f: add eax, 0x367c; test ch, 8; jne 0x2a1eb; ret; 
0x000000000046ced4: add eax, 0x38fb7; pop rbx; pop r12; pop rbp; ret; 
0x000000000041e3fd: add eax, 0x39000000; ret; 
0x000000000042a232: add eax, 0x3b09; test edx, 0x40000000; je 0x2a211; ret; 
0x000000000042a1f0: add eax, 0x3d4b; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x0000000000423a70: add eax, 0x3d8d4800; in al, dx; add dword ptr [rip + 0x8f2e800], -2; jmp qword ptr [rsi - 0x70]; 
0x0000000000429bd3: add eax, 0x3d8d4800; lodsb al, byte ptr [rsi]; push rdi; add eax, 0xa78fe800; std; jmp qword ptr [rdi - 0x18]; 
0x0000000000428e5c: add eax, 0x3d8d4800; xor byte ptr [rip - 0x4af91800], r8b; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000467c9e: add eax, 0x3d; cmovne rax, rdx; ret; 
0x000000000046e5b2: add eax, 0x3e5e1; ret; 
0x000000000046e5a2: add eax, 0x3e5e9; ret; 
0x000000000046e592: add eax, 0x3e5f1; ret; 
0x000000000046e582: add eax, 0x3e5f9; ret; 
0x000000000046e572: add eax, 0x3e601; ret; 
0x000000000046e562: add eax, 0x3e609; ret; 
0x000000000046e552: add eax, 0x3e611; ret; 
0x000000000046e542: add eax, 0x3e619; ret; 
0x000000000046e532: add eax, 0x3e621; ret; 
0x000000000046e522: add eax, 0x3e629; ret; 
0x000000000046e512: add eax, 0x3e631; ret; 
0x000000000046e50a: add eax, 0x3e691; ret; 
0x000000000040b80d: add eax, 0x3ede; cmovne rax, rdx; ret; 
0x0000000000411392: add eax, 0x401f0fc3; add byte ptr [rax - 0x39], cl; ret 0xffd8; 
0x000000000040b87b: add eax, 0x40b0; cmovne rax, rdx; ret; 
0x000000000046b7f7: add eax, 0x41134; leave; ret; 
0x0000000000460f9e: add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043577e: add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000043aef8: add eax, 0x41c60149; call qword ptr [rsi + 0x68]; 
0x000000000042a2a7: add eax, 0x41e4; test dh, 8; jne 0x2a25b; ret; 
0x0000000000469315: add eax, 0x435a6; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000040b859: add eax, 0x4582; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x0000000000454844: add eax, 0x458bfffb; in al, dx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044ca2f: add eax, 0x4632e900; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000040b8a3: add eax, 0x47b8; cmovne rax, rdx; ret; 
0x000000000041fbf7: add eax, 0x48000829; cwde; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f4f7: add eax, 0x48000830; cwde; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000042d636: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fca6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000040ccff: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040fd84: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000419baa: add eax, 0x48c28948; lea edi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000040e8a6: add eax, 0x49048d44; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x000000000040b82b: add eax, 0x4ad0; cmove rax, rdx; ret; 
0x000000000040b900: add eax, 0x4b3b; cmovne rax, rdx; ret; 
0x000000000040e8b7: add eax, 0x4c000004; add edx, eax; jmp rdx; 
0x0000000000460226: add eax, 0x4c7a2; or byte ptr [rax - 0x73], cl; add eax, 0x8bd; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x0000000000460272: add eax, 0x4c9; test edx, 0x40000000; je 0x6024f; ret; 
0x000000000042a2ba: add eax, 0x4ca1; test ecx, 0x40000000; je 0x2a299; ret; 
0x0000000000454b68: add eax, 0x4daf3; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000458cf3: add eax, 0x4de20; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000040b912: add eax, 0x4f29; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b970: add eax, 0x52cb; cmovne rax, rdx; ret; 
0x0000000000459b25: add eax, 0x52ea3; adc byte ptr [rax - 0x73], cl; adc eax, 0x650e; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000459a56: add eax, 0x53099; add dword ptr [rax - 0x73], ecx; adc eax, 0x3dad; cmove rax, rdx; ret; 
0x0000000000458c74: add eax, 0x53c67; cmp eax, 1; jg 0x58cb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458adf: add eax, 0x53e00; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000458a9b: add eax, 0x53e44; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000449721: add eax, 0x54800; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000040b982: add eax, 0x55b9; test edx, 0x40000000; je 0xb958; ret; 
0x0000000000459b12: add eax, 0x59b9; test edx, 0x40000000; je 0x59ace; ret; 
0x0000000000467cc3: add eax, 0x5b8; cmovne rax, rdx; ret; 
0x0000000000405155: add eax, 0x5d5c415b; ret; 
0x0000000000459af5: add eax, 0x5d86; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x0000000000449732: add eax, 0x5e2d9; mov qword ptr [rip + 0x5e2da], rdx; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x0000000000460f3a: add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043572a: add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000004310a6: add eax, 0x633a0f66; add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000459b34: add eax, 0x6387; cmove rax, rdx; ret; 
0x0000000000448a2e: add eax, 0x64349; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000447f06: add eax, 0x64e6d; ret; 
0x000000000042a275: add eax, 0x6696; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000043966f: add eax, 0x6e074; pop rbx; pop r12; pop rbp; ret; 
0x00000000004389e6: add eax, 0x6e12d; test rax, rax; je 0x389f1; ret; 
0x000000000043e4c6: add eax, 0x6e86d; ret; 
0x000000000043e4b6: add eax, 0x6e875; ret; 
0x0000000000419afd: add eax, 0x74c08548; adc eax, 0x589c031; test eax, 0x5d000930; ret; 
0x000000000042a37d: add eax, 0x75ee; and ch, 8; jne 0x2a335; ret; 
0x0000000000429823: add eax, 0x7deb0; pop rbp; ret; 
0x0000000000429818: add eax, 0x7deb7; call 0x37b90; mov dword ptr [rip + 0x7deb0], eax; pop rbp; ret; 
0x00000000004286a8: add eax, 0x7f023; ret; 
0x00000000004284d8: add eax, 0x7f1ef; ret; 
0x00000000004284c8: add eax, 0x7f1fb; ret; 
0x00000000004284b8: add eax, 0x7f207; ret; 
0x00000000004284a8: add eax, 0x7f213; ret; 
0x00000000004286c8: add eax, 0x7f3cb; ret; 
0x00000000004286b9: add eax, 0x7f3e2; ret; 
0x0000000000427916: add eax, 0x7f7e5; ret; 
0x0000000000404327: add eax, 0x7fbf; add byte ptr [rax + 0xe7], bh; syscall; 
0x00000000004284fd: add eax, 0x802f2; ret; 
0x00000000004204b8: add eax, 0x81b43; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000420535: add eax, 0x81bc6; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205b8: add eax, 0x81c43; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000042043d: add eax, 0x81cbe; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042a346: add eax, 0x827a9; add dword ptr [rax - 0x73], ecx; adc eax, 0xa1bd; cmove rax, rdx; ret; 
0x000000000041fb95: add eax, 0x82866; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042a392: add eax, 0x82a9; test edx, 0x40000000; je 0x2a36f; ret; 
0x000000000041f373: add eax, 0x82d88; mov r14, rdx; mov r11d, 1; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x00000000004313cd: add eax, 0x83480000; ret 0x4910; 
0x0000000000431321: add eax, 0x83480000; ret 0xeb10; 
0x00000000004284f1: add eax, 0x844f2; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x0000000000427a61: add eax, 0x8520e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000427a18: add eax, 0x85257; ret; 
0x0000000000427a03: add eax, 0x85264; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004251e3: add eax, 0x87a8c; ret; 
0x00000000004251a6: add eax, 0x87ac1; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000419aef: add eax, 0x89000050; ror byte ptr [rax - 0x77], 1; in eax, 0x48; lea esi, [rbp - 8]; syscall; 
0x00000000004121ef: add eax, 0x89000696; ret; 
0x00000000004043aa: add eax, 0x89480000; ret 0x8b48; 
0x0000000000445a6f: add eax, 0x8b480000; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x0000000000418305: add eax, 0x8b686; ret; 
0x000000000046022e: add eax, 0x8bd; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x0000000000459a59: add eax, 0x8d480100; adc eax, 0x3dad; cmove rax, rdx; ret; 
0x0000000000459b28: add eax, 0x8d481000; adc eax, 0x650e; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000418000: add eax, 0x8fb53; mov qword ptr [rsi], rax; ret; 
0x0000000000417f76: add eax, 0x8fc; jne 0x17f90; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x0000000000417e5e: add eax, 0x8fd25; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000041be53: add eax, 0x90de4; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041bddc: add eax, 0x90e67; cmp eax, 1; jg 0x1be08; xor eax, eax; pop rbp; ret; 
0x000000000041b510: add eax, 0x9169b; ret; 
0x000000000041b504: add eax, 0x916a7; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x9169b], al; ret; 
0x000000000041b4ee: add eax, 0x916bd; ret; 
0x000000000041b4e2: add eax, 0x916c9; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x916bd], al; ret; 
0x000000000041b480: add eax, 0x9172b; ret; 
0x000000000041b474: add eax, 0x91737; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x9172b], al; ret; 
0x000000000041b45e: add eax, 0x9174d; ret; 
0x000000000041b452: add eax, 0x91759; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x9174d], al; ret; 
0x0000000000419d6b: add eax, 0x92be8; leave; ret; 
0x0000000000419d5d: add eax, 0x92bfe; movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x0000000000419823: add eax, 0x93074; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000419b06: add eax, 0x930a9; pop rbp; ret; 
0x0000000000411246: add eax, 0x93ded; test rax, rax; je 0x11260; push rbp; mov rbp, rsp; call rax; 
0x000000000041860f: add eax, 0x942fc; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004185c4: add eax, 0x94337; ret; 
0x00000000004185b4: add eax, 0x94357; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x000000000041250c: add eax, 0x9a33f; ret; 
0x0000000000412505: add eax, 0x9a34e; lea rax, [rip + 0x9a33f]; ret; 
0x00000000004124d4: add eax, 0x9a377; ret; 
0x000000000041148d: add eax, 0x9b3b6; cmp rax, rdi; jb 0x114a0; xor eax, eax; ret; 
0x00000000004602cd: add eax, 0x9ce; and ch, 8; jne 0x60295; ret; 
0x0000000000406890: add eax, 0x9f92b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000405508: add eax, 0xa0c3b; ret; 
0x0000000000405254: add eax, 0xa0ed7; ret; 
0x0000000000405234: add eax, 0xa0eef; ret; 
0x0000000000405249: add eax, 0xa0f16; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405204: add eax, 0xa0f17; ret; 
0x0000000000405229: add eax, 0xa0f36; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051f9: add eax, 0xa0f66; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004051e3: add eax, 0xa0f78; ret; 
0x00000000004051d9: add eax, 0xa0f86; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x000000000040500a: add eax, 0xa1191; ret; 
0x0000000000404f9a: add eax, 0xa1199; ret; 
0x0000000000404ff3: add eax, 0xa11a0; ret; 
0x0000000000404f8a: add eax, 0xa11b1; ret; 
0x0000000000409778: add eax, 0xa30a3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040b702: add eax, 0xa39; cmovne rax, rdx; ret; 
0x0000000000470c52: add eax, 0xa3b5; pop rbp; ret; 
0x0000000000470c4a: add eax, 0xa3b9; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x0000000000405f2c: add eax, 0xa68ee; add dword ptr [rax + 0x13e], edi; syscall; 
0x0000000000405261: add eax, 0xa75ce; test eax, eax; jne 0x5270; ret; 
0x0000000000405219: add eax, 0xa7616; ret; 
0x00000000004051bb: add eax, 0xa7678; ret; 
0x0000000000429bda: add eax, 0xa78fe800; std; jmp qword ptr [rdi - 0x18]; 
0x00000000004020d5: add eax, 0xaa8b6; pop rbx; pop rbp; ret; 
0x000000000042a3f0: add eax, 0xb10b; cmovne rax, rdx; ret; 
0x000000000042917e: add eax, 0xb1ebe800; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000040b602: add eax, 0xb49; cmovne rax, rdx; ret; 
0x0000000000428e63: add eax, 0xb506e800; std; jmp qword ptr [rsi + 0xf]; 
0x000000000042a402: add eax, 0xb6f9; test edx, 0x40000000; je 0x2a3d8; ret; 
0x0000000000401980: add eax, 0xb8; add cl, cl; ret; 
0x000000000042a3ac: add eax, 0xb96f; mov ecx, edx; not ecx; and ecx, 0x128; je 0x2a3c0; ret; 
0x000000000042a460: add eax, 0xbadb; cmovne rax, rdx; ret; 
0x000000000046025d: add eax, 0xbe; and ch, 8; jne 0x60225; ret; 
0x0000000000403a07: add eax, 0xbfffffe0; ret; 
0x000000000042a472: add eax, 0xc009; test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000461d55: add eax, 0xc0b60fc9; ret; 
0x000000000046fb1e: add eax, 0xc3834890; or byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov edi, r12d; call qword ptr [rcx]; 
0x000000000042d63d: add eax, 0xc478d48; ret; 
0x0000000000429fbe: add eax, 0xe5d; cmovne rax, rdx; ret; 
0x0000000000444e75: add eax, 0xe9000000; ret 0xfffb; 
0x00000000004459d5: add eax, 0xe9000000; ret 0xfffe; 
0x000000000042b118: add eax, 0xeb77fcc5; add eax, ebp; clc; ja 0x2b15b; ret 0x167e; 
0x0000000000467ffb: add eax, 0xeb77fcc5; add eax, ebp; clc; ja 0x6803e; ret 0x137e; 
0x0000000000439887: add eax, 0xebfffd06; frstor dword ptr [rdi - 0x18]; insd dword ptr [rdi], dx; mov edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x000000000045483d: add eax, 0xec458900; call 0x4de0; mov eax, dword ptr [rbp - 0x14]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044455e: add eax, 0xf000000; mov dh, 0x4d; ret 0xcf89; 
0x00000000004329f8: add eax, 0xf00; sub rdx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x0000000000461ced: add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x000000000042a14c: add eax, 0xfffe187f; cmovne rax, rdx; ret; 
0x000000000042a0a2: add eax, 0xfffe20a9; cmovne rax, rdx; ret; 
0x000000000042a0fc: add eax, 0xfffe2f4f; cmovne rax, rdx; ret; 
0x000000000042a12c: add eax, 0xfffe37df; cmovne rax, rdx; ret; 
0x000000000042a0ce: add eax, 0xfffe40ed; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000042a115: add eax, 0xfffe4666; jne 0x2a0c9; ret; 
0x0000000000419d56: add eax, 0xfffe62c5; mov qword ptr [rip + 0x92bfe], rax; movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x0000000000419d64: add eax, 0xfffe62cf; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x000000000042ae04: add eax, 0xfffffc87; cmovne rax, rdx; ret; 
0x0000000000412745: add eax, 1; mov rdi, rdx; jmp 0x126af; leave; xor eax, eax; ret; 
0x0000000000460aa1: add eax, 1; ret; 
0x0000000000460a9a: add eax, 2; ret; 
0x0000000000460aa9: add eax, 3; ret; 
0x0000000000475264: add eax, 4; and rax, 0xfffffffffffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x75278; ret; 
0x0000000000467934: add eax, 7; cmove rax, rdx; ret; 
0x0000000000474f2d: add eax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x0000000000474de4: add eax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000470ee3: add eax, 8; mov qword ptr [r9], rdx; leave; ret; 
0x000000000041b75d: add eax, dword ptr [0]; ret; 
0x0000000000470e3f: add eax, dword ptr [rax + 0xd0]; leave; ret; 
0x0000000000426938: add eax, dword ptr [rax - 0x74b7db8b]; pop rbp; clc; leave; ret; 
0x00000000004687f7: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000046d763: add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xcab0; 
0x0000000000417a0b: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004179d0: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000040b6a7: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x31f; cmovne rax, rdx; ret; 
0x0000000000420d66: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x000000000046eb55: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000442e87: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000043156d: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045ec87: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000431591: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000460ac9: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000411385: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000411385: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11398; ret; 
0x000000000043bdb7: add eax, dword ptr [rax]; add byte ptr [rax], cl; jne 0x3bdd0; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x0000000000422122: add eax, dword ptr [rax]; add byte ptr [rbp + 0xc8dd042], cl; mov dword ptr [rcx + 0x29c901fa], ecx; ret 0xd139; 
0x000000000046a6a7: add eax, dword ptr [rax]; add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x000000000046d556: add eax, dword ptr [rax]; add byte ptr [rbx - 0x74b7fe20], al; add al, 0xc2; test rax, rax; jne 0x6d57e; ret; 
0x00000000004534bd: add eax, dword ptr [rax]; add byte ptr [rcx + 0xf], al; mov dh, 0x56; or al, 0xf6; ret 0xf40; 
0x0000000000441db1: add eax, dword ptr [rax]; add byte ptr [rcx - 0x75], cl; add ecx, dword ptr [rax + 0x63]; rol byte ptr [rcx - 0xa], cl; ret 0x7504; 
0x000000000046c349: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0x840f; 
0x00000000004283fe: add eax, dword ptr [rax]; add byte ptr [rdi - 0x18], ah; stc; jnp 0x283c3; jmp qword ptr [rsi + 0xf]; 
0x000000000046d778: add eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000043dae0: add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x0000000000413f70: add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x0000000000451686: add eax, dword ptr [rax]; add dh, dh; ret 0xf10; 
0x0000000000473f6c: add eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x000000000046ced7: add eax, dword ptr [rax]; pop rbx; pop r12; pop rbp; ret; 
0x000000000046e50d: add eax, dword ptr [rax]; ret; 
0x00000000004563ec: add eax, dword ptr [rbx + 0x415bef23]; pop rsp; pop rbp; ret; 
0x0000000000478a76: add eax, dword ptr [rbx + 0x47402fa]; ret; 
0x000000000041f3ae: add eax, dword ptr [rbx - 0x78f0d008]; mov eax, 0x89000000; ret 0xc083; 
0x0000000000476246: add eax, dword ptr [rbx - 0x7cb6fe39]; ret; 
0x000000000046f996: add eax, dword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x000000000043d2d7: add eax, dword ptr [rdi]; test edx, edx; jne 0x3d2df; call rax; 
0x000000000043ca49: add eax, dword ptr [rdi]; test esi, esi; jne 0x3ca51; call rax; 
0x0000000000459023: add eax, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000419d55: add eax, dword ptr [rip - 0x19d3b]; mov qword ptr [rip + 0x92bfe], rax; movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x000000000043c4ce: add eax, dword ptr [rsp]; add r14, r15; test r11d, r11d; jne 0x3c4db; call rax; 
0x000000000043cb73: add eax, dword ptr [rsp]; test edx, edx; jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d413: add eax, dword ptr [rsp]; test r10d, r10d; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x00000000004367f0: add eax, eax; ret; 
0x0000000000435fb1: add eax, eax; vzeroupper; ret; 
0x000000000042b11d: add eax, ebp; clc; ja 0x2b15b; ret 0x167e; 
0x0000000000468000: add eax, ebp; clc; ja 0x6803e; ret 0x137e; 
0x000000000044d4a6: add eax, ebp; hlt; cmp edi, ebx; dec dword ptr [rax + 0x29]; ret; 
0x000000000044d3f6: add eax, ebp; movsb byte ptr [rdi], byte ptr [rsi]; cmp al, 0xfb; dec dword ptr [rax + 0x29]; ret; 
0x000000000045499c: add eax, ecx; cmp rdx, rsi; jne 0x54980; ret; 
0x0000000000401bfe: add eax, ecx; notrack jmp rax; mov rax, rdi; ret; 
0x000000000042b8d9: add eax, ecx; ret; 
0x000000000045ffa9: add eax, ecx; sub rax, rdi; ret; 
0x000000000043556a: add eax, ecx; vzeroupper; ret; 
0x000000000042b8d6: add eax, edi; add rax, rcx; ret; 
0x000000000042df34: add eax, edi; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x000000000042b137: add eax, edi; jmp 0x2b0fc; xor eax, eax; ret; 
0x0000000000468017: add eax, edi; jmp 0x67fdc; xor eax, eax; ret; 
0x0000000000418b15: add eax, edi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x000000000041087c: add eax, edi; ret; 
0x0000000000460368: add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000046048f: add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000410480: add eax, edi; vzeroupper; ret; 
0x0000000000410680: add eax, edi; xtest; jne 0x1068b; vzeroupper; ret; 
0x000000000042b0fa: add eax, edi; xtest; jne 0x2b105; vzeroupper; ret; 
0x000000000042db26: add eax, edi; xtest; jne 0x2db31; vzeroupper; ret; 
0x000000000043622a: add eax, edi; xtest; jne 0x36235; vzeroupper; ret; 
0x0000000000467fda: add eax, edi; xtest; jne 0x67fe5; vzeroupper; ret; 
0x000000000043609e: add eax, edx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000042c758: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c611: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042be09: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c66f: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042be44: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c65d: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042be24: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c833: add eax, edx; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000046e4ff: add eax, edx; notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x0000000000421c8b: add eax, edx; ret; 
0x0000000000411236: add eax, edx; sub rax, rdi; ret; 
0x0000000000460c86: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x000000000041061e: add eax, edx; vzeroupper; ret; 
0x000000000043dc39: add eax, esi; call rax; 
0x00000000004364f5: add eax, esi; ret; 
0x000000000042af59: add ebp, eax; std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x00000000004588bb: add ebp, edx; xor eax, eax; ret; 
0x00000000004186e7: add ebx, 0x920; xor edx, edx; mov eax, 0x14e; mov rdi, rbx; syscall; 
0x000000000046f9d9: add ebx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb21: add ebx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rcx]; 
0x00000000004260b1: add ebx, dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000047543a: add ebx, dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x00000000004506bf: add ebx, dword ptr [rbx + 0x44]; mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000472830: add ecx, 7; or r8, rax; test sil, sil; js 0x72820; jmp 0x727bb; ret; 
0x0000000000473330: add ecx, 7; or r8, rax; test sil, sil; js 0x73320; jmp 0x732bb; ret; 
0x000000000043afec: add ecx, dword ptr [rax + 0x29]; ret 0x8d48; 
0x00000000004071e6: add ecx, dword ptr [rax + 0x29]; ret; 
0x0000000000441db6: add ecx, dword ptr [rax + 0x63]; rol byte ptr [rcx - 0xa], cl; ret 0x7504; 
0x0000000000414228: add ecx, dword ptr [rax + 1]; ret 0x3948; 
0x0000000000420532: add ecx, dword ptr [rax - 0x73]; add eax, 0x81bc6; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000046e6fe: add ecx, dword ptr [rax - 0x73]; push rax; push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000043a138: add ecx, dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000043966c: add ecx, dword ptr [rax - 0x77]; add eax, 0x6e074; pop rbx; pop r12; pop rbp; ret; 
0x000000000043e021: add ecx, dword ptr [rax - 0x77]; add ecx, dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000426090: add ecx, dword ptr [rax - 0x7b]; push qword ptr [rsp + rax - 0x58]; add dword ptr [rsi + riz - 0x77], esi; ret 0xc883; 
0x0000000000466e62: add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000046eb29: add ecx, dword ptr [rax - 6]; dec dword ptr [rax - 0x77]; ret; 
0x000000000042d5a4: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x000000000045fc44: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000046f997: add ecx, dword ptr [rcx + rcx*4 - 0x12]; mov edi, r12d; call rax; 
0x000000000042a4af: add ecx, dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004080a0: add ecx, dword ptr [rcx - 0x75]; push rcx; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], cl; test byte ptr [rbp - 0x9fffffc], bh; ret 0xf0f; 
0x0000000000478b41: add ecx, dword ptr [rdi]; test dword ptr [rax - 0x77000000], esp; ret 0xca83; 
0x00000000004644bd: add ecx, dword ptr [rdi]; test dword ptr [rsi + rdi*8 - 1], ebp; dec dword ptr [rax - 0x75]; or byte ptr [r11 + 0x54891114], cl; ret; 
0x0000000000412adb: add ecx, dword ptr [rdi]; xchg byte ptr [rax - 0x16000003], bh; sar ebp, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004593d6: add ecx, dword ptr [rdi]; xchg ebp, eax; ret 0xc231; 
0x00000000004294f4: add ecx, ebp; ret 0xfffd; 
0x0000000000444ef9: add ecx, ebp; sal bl, 0xff; jmp qword ptr [rdi - 0x18]; 
0x00000000004122ef: add ecx, ebp; sar esi, 0xff; jmp qword ptr [rdi - 0x18]; 
0x0000000000432ad9: add ecx, ecx; cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x000000000040e852: add ecx, ecx; jmp rcx; 
0x0000000000432ad8: add ecx, r9d; cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x00000000004105d4: add edi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000042da74: add edi, -0x7f; cmp sil, byte ptr [rdi + rax]; jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x000000000042e9d3: add edi, -0x80; jmp 0x2e57b; xor eax, eax; ret; 
0x000000000042ef33: add edi, -0x80; jmp 0x2eadb; xor eax, eax; ret; 
0x000000000042f4a1: add edi, -0x80; jmp 0x2f041; xor eax, eax; ret; 
0x000000000045a5c0: add edi, -0x80; jmp 0x59ddb; xor eax, eax; ret; 
0x000000000045afe0: add edi, -0x80; jmp 0x5a7eb; xor eax, eax; ret; 
0x000000000045b9f9: add edi, -0x80; jmp 0x5b211; xor eax, eax; ret; 
0x0000000000431fa8: add edi, -0x80; sub rdx, -0x80; jmp 0x31a93; xor eax, eax; ret; 
0x0000000000432628: add edi, -0x80; sub rdx, -0x80; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432c96: add edi, -0x80; sub rdx, -0x80; jmp 0x32781; xor eax, eax; ret; 
0x000000000046844d: add edi, 0x20; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000460386: add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410c96: add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000004104a4: add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042d917: add edi, 0x21; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x00000000004603a6: add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410ca6: add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000004104b4: add edi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042d92b: add edi, 0x41; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x00000000004603c6: add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410cb6: add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000004104c4: add edi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042d944: add edi, 0x61; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000043a2f2: add edi, dword ptr [rax + 0x690]; call 0x11c00; test eax, eax; jne 0x3a308; pop rbp; ret; 
0x000000000043a2f9: add edi, dword ptr [rcx - 3]; inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x00000000004620bf: add edi, ebx; jmp qword ptr [rsi + 0x66]; 
0x0000000000437aec: add edi, ecx; add rsi, 8; cmp rsi, r8; jne 0x37ad0; mov eax, edi; ret; 
0x0000000000412c97: add edi, edi; adc eax, 0x933ca; jmp 0x12c62; ret; 
0x00000000004788e8: add edi, esp; syscall; 
0x000000000046c815: add edx, dword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046e669: add edx, dword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x000000000046e669: add edx, dword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; nop dword ptr [rax]; ret; 
0x000000000040e8bc: add edx, eax; jmp rdx; 
0x0000000000465822: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x0000000000404ab7: add edx, ebp; leave; mov rax, r10; sub rax, rdx; ret; 
0x000000000042b562: add edx, ecx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004686fd: add edx, ecx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x0000000000474dc9: add edx, ecx; test dil, dil; js 0x74df0; mov qword ptr [r8], rdx; ret; 
0x0000000000478209: add edx, ecx; test dil, dil; js 0x78230; mov qword ptr [r8], rdx; ret; 
0x0000000000435cd1: add esi, 0x20; bsf edx, edx; lea rax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435bf0: add esi, 0x20; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x40]; ret; 
0x0000000000435be0: add esi, 0x20; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x0000000000419235: add esi, 1; test al, al; jne 0x1920b; movsx eax, byte ptr [rsi]; neg eax; ret; 
0x0000000000461591: add esi, 8; bsf edx, edx; lea rax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x00000000004614b5: add esi, 8; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x10]; ret; 
0x00000000004614a9: add esi, 8; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x0000000000437aef: add esi, 8; cmp rsi, r8; jne 0x37ad0; mov eax, edi; ret; 
0x0000000000413ff0: add esi, dword ptr [rbp + 0x18]; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000040d8de: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040905d: add esi, ebx; stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040dcc4: add esi, edi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d44d: add esi, edi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000043c4d2: add esi, edi; test r11d, r11d; jne 0x3c4db; call rax; 
0x0000000000410683: add esi, edx; jne 0x1068b; vzeroupper; ret; 
0x0000000000410f1f: add esi, edx; jne 0x10f27; vzeroupper; ret; 
0x000000000042b0fd: add esi, edx; jne 0x2b105; vzeroupper; ret; 
0x000000000042c06f: add esi, edx; jne 0x2c077; vzeroupper; ret; 
0x000000000042cd96: add esi, edx; jne 0x2cd9e; vzeroupper; ret; 
0x000000000042db29: add esi, edx; jne 0x2db31; vzeroupper; ret; 
0x000000000042ea32: add esi, edx; jne 0x2ea3a; vzeroupper; ret; 
0x0000000000432012: add esi, edx; jne 0x3201a; vzeroupper; ret; 
0x0000000000435aba: add esi, edx; jne 0x35ac2; vzeroupper; ret; 
0x000000000043622d: add esi, edx; jne 0x36235; vzeroupper; ret; 
0x000000000045a699: add esi, edx; jne 0x5a6a1; vzeroupper; ret; 
0x000000000045f470: add esi, edx; jne 0x5f478; vzeroupper; ret; 
0x0000000000460702: add esi, edx; jne 0x6070a; vzeroupper; ret; 
0x000000000046136d: add esi, edx; jne 0x61375; vzeroupper; ret; 
0x0000000000467fdd: add esi, edx; jne 0x67fe5; vzeroupper; ret; 
0x000000000040c1ec: add esi, edx; jne 0xc1f4; vzeroupper; ret; 
0x000000000040fa34: add esi, edx; jne 0xfa3c; vzeroupper; ret; 
0x0000000000427678: add esi, edx; mov qword ptr [rax + 0x48], rcx; mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x0000000000427640: add esi, edx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000046e573: add esi, esp; add eax, dword ptr [rax]; ret; 
0x0000000000475a5a: add esp, 0x10; mov eax, edx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000475b18: add esp, 0x10; pop rbx; pop r12; mov eax, edx; pop rbp; ret; 
0x0000000000409890: add esp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000405ea2: add esp, 0x18; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000404594: add esp, 0x18; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047415c: add esp, 0x1f0; pop rbx; pop r12; pop rbp; ret; 
0x00000000004589c1: add esp, 0x20; mov eax, 0x16; pop rbx; pop r12; pop rbp; ret; 
0x0000000000406103: add esp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000452ff0: add esp, 0x248; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004073fc: add esp, 0x28; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000046e26c: add esp, 0x30; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x00000000004580d5: add esp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x000000000042567b: add esp, 0x38; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000458f5a: add esp, 0x48; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000438573: add esp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x000000000042304b: add esp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x000000000046e734: add esp, 8; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000406bbd: add esp, 8; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000401017: add esp, 8; ret; 
0x000000000040d3c7: add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x000000000040c999: add qword ptr [r10 - 0x2f], r12; jl 0xc9e7; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000042cec5: add qword ptr [r10 - 0x4e], r12; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000043fd23: add qword ptr [r8 - 0x7d], rcx; ret; 
0x0000000000470d07: add qword ptr [r8], r8; add byte ptr [rcx], dh; ror byte ptr [rbp + rcx*4 + 0x15], 0xfc; ret; 
0x0000000000459a8e: add qword ptr [rax], r8; add byte ptr [rax - 0x518af71b], al; ret; 
0x000000000046792e: add qword ptr [rax], r8; add byte ptr [rax - 0x73], cl; add eax, 7; cmove rax, rdx; ret; 
0x000000000041c793: add qword ptr [rax], rax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rdx + 0x48], 1; ret; 
0x000000000040449f: add qword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x0000000000404ab6: add r10, rbp; leave; mov rax, r10; sub rax, rdx; ret; 
0x00000000004481b9: add r11b, r13b; ret 0xffb8; 
0x000000000042af58: add r13, r8; std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000043c4d1: add r14, r15; test r11d, r11d; jne 0x3c4db; call rax; 
0x0000000000412451: add r14b, byte ptr [rax + 0x48]; cmp dword ptr [rax + 8], 0; je 0x12460; ret; 
0x0000000000435184: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045ec86: add r8d, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000435586: add r8d, ecx; vzeroupper; ret; 
0x00000000004603a8: add r8d, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410ca8: add r8d, edi; vzeroupper; ret; 
0x000000000045ff32: add rax, 0x10; sub esi, edx; cmp ecx, esi; jae 0x5ff88; movsxd rax, ecx; ret; 
0x000000000041b7f9: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000412744: add rax, 1; mov rdi, rdx; jmp 0x126af; leave; xor eax, eax; ret; 
0x0000000000460aa0: add rax, 1; ret; 
0x0000000000460a99: add rax, 2; ret; 
0x0000000000460aa8: add rax, 3; ret; 
0x0000000000475263: add rax, 4; and rax, 0xfffffffffffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x75278; ret; 
0x0000000000474f2c: add rax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x0000000000474de3: add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000470ee2: add rax, 8; mov qword ptr [r9], rdx; leave; ret; 
0x000000000041b75c: add rax, qword ptr [0]; ret; 
0x000000000043c4cd: add rax, qword ptr [r12]; add r14, r15; test r11d, r11d; jne 0x3c4db; call rax; 
0x000000000043cb72: add rax, qword ptr [r12]; test edx, edx; jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d412: add rax, qword ptr [r12]; test r10d, r10d; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000043d2d6: add rax, qword ptr [r15]; test edx, edx; jne 0x3d2df; call rax; 
0x000000000043ca48: add rax, qword ptr [r15]; test esi, esi; jne 0x3ca51; call rax; 
0x0000000000470e3e: add rax, qword ptr [r8 + 0xd0]; leave; ret; 
0x0000000000417a0a: add rax, qword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x000000000046f995: add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000419d54: add rax, qword ptr [rip - 0x19d3b]; mov qword ptr [rip + 0x92bfe], rax; movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x000000000041b75b: add rax, qword ptr fs:[0]; ret; 
0x00000000004367ef: add rax, r8; ret; 
0x0000000000435fb0: add rax, r8; vzeroupper; ret; 
0x0000000000401bfd: add rax, r9; notrack jmp rax; mov rax, rdi; ret; 
0x000000000042b8d8: add rax, rcx; ret; 
0x000000000045ffa8: add rax, rcx; sub rax, rdi; ret; 
0x000000000042b8d5: add rax, rdi; add rax, rcx; ret; 
0x000000000042df33: add rax, rdi; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x000000000042b136: add rax, rdi; jmp 0x2b0fc; xor eax, eax; ret; 
0x0000000000468016: add rax, rdi; jmp 0x67fdc; xor eax, eax; ret; 
0x0000000000418b14: add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x000000000041087b: add rax, rdi; ret; 
0x000000000046048e: add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000041047f: add rax, rdi; vzeroupper; ret; 
0x000000000041067f: add rax, rdi; xtest; jne 0x1068b; vzeroupper; ret; 
0x000000000042b0f9: add rax, rdi; xtest; jne 0x2b105; vzeroupper; ret; 
0x000000000042db25: add rax, rdi; xtest; jne 0x2db31; vzeroupper; ret; 
0x0000000000436229: add rax, rdi; xtest; jne 0x36235; vzeroupper; ret; 
0x0000000000467fd9: add rax, rdi; xtest; jne 0x67fe5; vzeroupper; ret; 
0x000000000043609d: add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000042c757: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c610: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042be08: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000046e4fe: add rax, rdx; notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x0000000000421c8a: add rax, rdx; ret; 
0x0000000000411235: add rax, rdx; sub rax, rdi; ret; 
0x0000000000460c85: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000041061d: add rax, rdx; vzeroupper; ret; 
0x000000000043dc38: add rax, rsi; call rax; 
0x00000000004364f4: add rax, rsi; ret; 
0x00000000004186e6: add rbx, 0x920; xor edx, edx; mov eax, 0x14e; mov rdi, rbx; syscall; 
0x000000000046f9d8: add rbx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb20: add rbx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rcx]; 
0x000000000040e851: add rcx, r9; jmp rcx; 
0x00000000004105d3: add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000042da73: add rdi, -0x7f; cmp sil, byte ptr [rdi + rax]; jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x000000000042e9d2: add rdi, -0x80; jmp 0x2e57b; xor eax, eax; ret; 
0x000000000042ef32: add rdi, -0x80; jmp 0x2eadb; xor eax, eax; ret; 
0x000000000042f4a0: add rdi, -0x80; jmp 0x2f041; xor eax, eax; ret; 
0x000000000045a5bf: add rdi, -0x80; jmp 0x59ddb; xor eax, eax; ret; 
0x000000000045afdf: add rdi, -0x80; jmp 0x5a7eb; xor eax, eax; ret; 
0x000000000045b9f8: add rdi, -0x80; jmp 0x5b211; xor eax, eax; ret; 
0x0000000000431fa7: add rdi, -0x80; sub rdx, -0x80; jmp 0x31a93; xor eax, eax; ret; 
0x0000000000432627: add rdi, -0x80; sub rdx, -0x80; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432c95: add rdi, -0x80; sub rdx, -0x80; jmp 0x32781; xor eax, eax; ret; 
0x000000000046844c: add rdi, 0x20; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x00000000004104a3: add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042d916: add rdi, 0x21; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x00000000004104b3: add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042d92a: add rdi, 0x41; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x00000000004104c3: add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042d943: add rdi, 0x61; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000043a2f1: add rdi, qword ptr [rax + 0x690]; call 0x11c00; test eax, eax; jne 0x3a308; pop rbp; ret; 
0x00000000004788e7: add rdi, r12; syscall; 
0x000000000046c814: add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046e668: add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x000000000046e668: add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; nop dword ptr [rax]; ret; 
0x000000000040e8bb: add rdx, r8; jmp rdx; 
0x0000000000465821: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000474dc8: add rdx, r9; test dil, dil; js 0x74df0; mov qword ptr [r8], rdx; ret; 
0x0000000000478208: add rdx, r9; test dil, dil; js 0x78230; mov qword ptr [r8], rdx; ret; 
0x000000000042b561: add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004686fc: add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x0000000000435cd0: add rsi, 0x20; bsf edx, edx; lea rax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000419234: add rsi, 1; test al, al; jne 0x1920b; movsx eax, byte ptr [rsi]; neg eax; ret; 
0x0000000000461590: add rsi, 8; bsf edx, edx; lea rax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000437aee: add rsi, 8; cmp rsi, r8; jne 0x37ad0; mov eax, edi; ret; 
0x000000000040dcc3: add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d44c: add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000427677: add rsi, rdx; mov qword ptr [rax + 0x48], rcx; mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000042763f: add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000475a59: add rsp, 0x10; mov eax, edx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000475b17: add rsp, 0x10; pop rbx; pop r12; mov eax, edx; pop rbp; ret; 
0x000000000040988f: add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000405ea1: add rsp, 0x18; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000404593: add rsp, 0x18; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000047415b: add rsp, 0x1f0; pop rbx; pop r12; pop rbp; ret; 
0x00000000004589c0: add rsp, 0x20; mov eax, 0x16; pop rbx; pop r12; pop rbp; ret; 
0x0000000000406102: add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000452fef: add rsp, 0x248; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004073fb: add rsp, 0x28; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000046e26b: add rsp, 0x30; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x00000000004580d4: add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x000000000042567a: add rsp, 0x38; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000458f59: add rsp, 0x48; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000438572: add rsp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x000000000042304a: add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x000000000046e733: add rsp, 8; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000406bbc: add rsp, 8; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000401016: add rsp, 8; ret; 
0x0000000000459e48: and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x0000000000459cf9: and ah, al; jge 0x59cfa; ret 0x41c4; 
0x000000000045a0a9: and ah, al; jge 0x5a0aa; ret 0x41c4; 
0x000000000045a709: and ah, al; jge 0x5a70a; ret 0x41c4; 
0x000000000045aac9: and ah, al; jge 0x5aaca; ret 0x41c4; 
0x0000000000455d2f: and al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000455e63: and al, 0; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004571bb: and al, 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000044735f: and al, 0x10; or byte ptr [rdi], cl; test dword ptr [rbx], ecx; add dword ptr [rax], eax; add dh, dh; ret; 
0x0000000000445ef8: and al, 0x10; or byte ptr [rdi], cl; test dword ptr [rdi], ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000423ecf: and al, 0x20; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x00000000004669e3: and al, 0x20; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x0000000000425fba: and al, 0x28; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x000000000043d415: and al, 0x45; test edx, edx; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x0000000000475437: and al, 0x48; mov dword ptr [rbx], eax; pop rbx; pop r12; pop rbp; ret; 
0x000000000042693b: and al, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000044f173: and al, 0x48; mov edx, dword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x0000000000427525: and al, 0x4c; mov dword ptr [rbx + 0x60], esp; pop rbx; pop r12; pop rbp; ret; 
0x000000000043c4d0: and al, 0x4d; add esi, edi; test r11d, r11d; jne 0x3c4db; call rax; 
0x000000000040fe5b: and al, 0x62; loope 0xfe5d; jg 0xfe69; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000461c88: and al, 0x68; std; jmp qword ptr [rsi + 0xf]; 
0x000000000046bc42: and al, 0x74; xor eax, 0x1ba; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x0000000000448783: and al, 0x83; call 0x5d8fcf8b; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x000000000043cb75: and al, 0x85; sal byte ptr [rbp + 0x10], cl; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x0000000000459587: and al, 0x89; ret 0xe283; 
0x00000000004772a6: and al, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x000000000043fffb: and al, 0xfd; jmp qword ptr [rsi - 0x70]; 
0x0000000000422e9e: and al, 8; add byte ptr [rax - 0x39], cl; sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x110f; 
0x0000000000449a07: and al, 8; sub eax, dword ptr [rbx + 8]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b687: and al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x227f; cmovne rax, rdx; ret; 
0x0000000000419bcd: and al, byte ptr [rax]; add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x000000000042d1ba: and al, byte ptr [rsp + riz*8 - 0xb7f68c]; ret 0xc148; 
0x00000000004109d3: and bh, bh; ror dword ptr [rax + 9], 0xca; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004639aa: and byte ptr [r11 + r9*4 + 0x70], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000042689a: and byte ptr [r15], cl; adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004103a1: and byte ptr [r15], r9b; adc dword ptr [rdi + 0x30], eax; ret; 
0x0000000000432aa8: and byte ptr [r8 + 0x39], cl; ret 0x2376; 
0x0000000000432437: and byte ptr [r8 + 0x39], cl; ret 0x2776; 
0x0000000000431dac: and byte ptr [r8 + 0x39], cl; ret 0x2d76; 
0x0000000000457c62: and byte ptr [r8 + 1], r9b; ret; 
0x000000000046e326: and byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000476937: and byte ptr [r9], al; jne 0x76970; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425c92: and byte ptr [r9], sil; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x00000000004589c3: and byte ptr [rax + 0x16], bh; pop rbx; pop r12; pop rbp; ret; 
0x0000000000455e5a: and byte ptr [rax + 0x39], cl; push rax; sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000432aa9: and byte ptr [rax + 0x39], cl; ret 0x2376; 
0x0000000000432438: and byte ptr [rax + 0x39], cl; ret 0x2776; 
0x0000000000431dad: and byte ptr [rax + 0x39], cl; ret 0x2d76; 
0x0000000000469f8c: and byte ptr [rax + 0x39], cl; ret 0xc374; 
0x000000000040595e: and byte ptr [rax + 0x39], cl; ret; 
0x00000000004388bf: and byte ptr [rax + 0x48], bh; syscall; 
0x0000000000457c63: and byte ptr [rax + 1], cl; ret; 
0x0000000000435ca8: and byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000041122d: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000460c7d: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000041103a: and byte ptr [rax + 9], cl; shl byte ptr [rsi - 0x70], 1; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000414bdb: and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000470c44: and byte ptr [rax + rdx - 0xd], dh; movups xmm0, xmmword ptr [rip + 0xa3b9]; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x000000000045b71d: and byte ptr [rax + rsi*4 + 0x29], bh; ret 0xe162; 
0x000000000046a6ac: and byte ptr [rax - 0x2f7cfe07], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000041f9e6: and byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041fb8c: and byte ptr [rax - 0x68], cl; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042052c: and byte ptr [rax - 0x68], cl; movzx esi, byte ptr [rbx + rax]; lea rax, [rip + 0x81bc6]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004204af: and byte ptr [rax - 0x68], cl; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205af: and byte ptr [rax - 0x68], cl; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000040b772: and byte ptr [rax - 0x73], cl; add eax, 0x2fc6; jne 0xb729; ret; 
0x000000000040b672: and byte ptr [rax - 0x73], cl; add eax, 0x3106; jne 0xb629; ret; 
0x000000000042a112: and byte ptr [rax - 0x73], cl; add eax, 0xfffe4666; jne 0x2a0c9; ret; 
0x000000000041fc73: and byte ptr [rax - 0x73], cl; cmp eax, 0x82885; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041fbf3: and byte ptr [rax - 0x73], cl; cmp eax, 0x82905; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f573: and byte ptr [rax - 0x73], cl; cmp eax, 0x82f85; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f4f3: and byte ptr [rax - 0x73], cl; cmp eax, 0x83005; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000046e327: and byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000423ed0: and byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x41]; pop rsp; pop rbp; jmp rax; 
0x0000000000407b3c: and byte ptr [rax - 0x77], cl; mov r8d, 0xfffc34e9; jmp qword ptr [rsi + 0x2e]; 
0x00000000004079a3: and byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000044e5c8: and byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000041cc0a: and byte ptr [rax - 0x7d], cl; ret; 
0x0000000000479e26: and byte ptr [rax], al; add al, ch; movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rdi - 0x18]; 
0x0000000000401159: and byte ptr [rax], al; add byte ptr [rax], al; mov edi, 1; mov eax, 0xe; syscall; 
0x0000000000405c05: and byte ptr [rax], al; je 0x5c18; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000458a4a: and byte ptr [rax], al; or dword ptr [rcx], 0x48000000; bt ecx, edx; jae 0x58a66; neg eax; ret; 
0x0000000000466914: and byte ptr [rbp + 0x4a], dh; cmp rcx, qword ptr [rdi + 0x30]; jne 0x66942; mov qword ptr [rax + 8], rdx; pop rbp; ret; 
0x000000000042dd97: and byte ptr [rbp - 0x11], dh; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000046a5af: and byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000406105: and byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000436663: and byte ptr [rbx + rbx*8 - 0x3b], dh; sti; xchg ebx, eax; ret; 
0x00000000004639ab: and byte ptr [rbx + rcx*4 + 0x70], cl; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000044eae6: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000040884e: and byte ptr [rcx + 0x39], cl; ret 0x820f; 
0x000000000040e8ec: and byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x30], edi; ret; 
0x000000000045b0cc: and byte ptr [rcx - 0x75], al; add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c9d: and byte ptr [rcx - 0x75], al; add al, 0x83; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000043ecf3: and byte ptr [rcx - 0x77], cl; fimul word ptr [rax - 0x7d]; ret; 
0x0000000000429f87: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x29f90; ret; 
0x0000000000467c67: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x67c70; ret; 
0x000000000047038f: and byte ptr [rcx], al; add byte ptr [rax], al; mov rsi, rax; jmp 0x70325; nop dword ptr [rax + rax]; call rax; 
0x0000000000476938: and byte ptr [rcx], al; jne 0x76970; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004186e9: and byte ptr [rcx], cl; add byte ptr [rax], al; xor edx, edx; mov eax, 0x14e; mov rdi, rbx; syscall; 
0x0000000000425c93: and byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000410325: and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040e798: and byte ptr [rdi + 0x65], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e1d3: and byte ptr [rdi + 0x7a], dh; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000435b35: and byte ptr [rdi + 8], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000435bcf: and byte ptr [rdi + rax*2 + 4], dh; kmovd edx, k0; test edx, edx; jne 0x35b74; mov eax, esi; ret; 
0x000000000040ed0c: and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x00000000004607ff: and byte ptr [rdi], ah; ret 0xb262; 
0x000000000046082c: and byte ptr [rdi], ah; ret; 
0x000000000042689b: and byte ptr [rdi], cl; adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004103a2: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], eax; ret; 
0x000000000040e3b5: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000040e342: and byte ptr [rdi], cl; adc dword ptr [rdx + 0x10], edi; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000410439: and byte ptr [rdi], cl; adc dword ptr [rdx + 0x30], eax; ret; 
0x0000000000435be2: and byte ptr [rdi], cl; mov esp, 0x8dc629d2; add al, 0x16; ret; 
0x000000000042c60c: and byte ptr [rdi], cl; mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042e33d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x2e410; lea rax, [rdi + 7]; ret; 
0x000000000042e220: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004102c5: and byte ptr [rdi], cl; xchg dword ptr [rbp], edi; add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000046f31f: and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x000000000040c9da: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000410070: and byte ptr [rdx + 0x1d], dh; cmp rdx, 0x40; ja 0x10109; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000040fbcc: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000045a2db: and byte ptr [rdx + rsi*4 + 0x29], bh; ret 0xfec5; 
0x00000000004100d0: and byte ptr [rdx - 0x43], dh; cmp rdx, 0x40; ja 0x10100; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x000000000045b333: and byte ptr [rip - 0x4d9d010d], ah; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000042f0b3: and byte ptr [rip - 0x4d9d010d], ah; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000045b648: and byte ptr [rip - 0x4d9d2109], ah; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x0000000000435530: and byte ptr [rsi + 0x1d], dh; test eax, eax; je 0x355a0; tzcnt eax, eax; vzeroupper; ret; 
0x000000000046075f: and byte ptr [rsi + 7], dh; kmovd eax, k0; test eax, eax; je 0x60780; bsf eax, eax; ret; 
0x000000000042e82f: and byte ptr [rsi + rbx*8 + 0x29], bh; ret 0xfec5; 
0x00000000004778be: and byte ptr [rsi - 9], ah; ret 0x7f8; 
0x0000000000410fff: and byte ptr [rsi], ah; ret 0xb262; 
0x000000000041086d: and byte ptr [rsi], ah; ret 0xfbc5; 
0x00000000004109c9: and byte ptr [rsi], ah; ret; 
0x000000000042f0dc: and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000042f2f8: and byte ptr [rsp + rbx*8 + 0x29], bh; ret 0xe162; 
0x000000000041cc09: and byte ptr gs:[rax - 0x7d], cl; ret; 
0x00000000004109c8: and byte ptr gs:[rsi], ah; ret; 
0x000000000040b729: and ch, 2; lea rax, [rip + 0x2a4d]; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b629: and ch, 2; lea rax, [rip + 0x2b8d]; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a0c9: and ch, 2; lea rax, [rip - 0x1bf13]; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000040b750: and ch, 2; lea rdx, [rip + 0x1936]; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b650: and ch, 2; lea rdx, [rip + 0x1a66]; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000040b780: and ch, 2; lea rdx, [rip + 0x21c6]; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b680: and ch, 2; lea rdx, [rip + 0x22f6]; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000040b7a0: and ch, 2; lea rdx, [rip + 0x266]; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b6a0: and ch, 2; lea rdx, [rip + 0x396]; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000040b6f6: and ch, 2; lea rdx, [rip + 0xa90]; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000040b5f6: and ch, 2; lea rdx, [rip + 0xbc0]; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042a120: and ch, 2; lea rdx, [rip - 0x1c7aa]; lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000042a0f0: and ch, 2; lea rdx, [rip - 0x1d03a]; lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000042a096: and ch, 2; lea rdx, [rip - 0x1dee0]; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a140: and ch, 2; lea rdx, [rip - 0x1e70a]; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000042a2a0: and ch, 8; jne 0x2a285; lea rax, [rip + 0x41e4]; test dh, 8; jne 0x2a25b; ret; 
0x000000000042a382: and ch, 8; jne 0x2a335; ret; 
0x0000000000459a92: and ch, 8; jne 0x59a45; ret; 
0x0000000000460262: and ch, 8; jne 0x60225; ret; 
0x00000000004602d2: and ch, 8; jne 0x60295; ret; 
0x0000000000429fb2: and ch, 8; lea rdx, [rip + 0x1894]; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x000000000042a02e: and ch, 8; lea rdx, [rip + 0x1b48]; lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000040b8f4: and ch, 8; lea rdx, [rip + 0x5122]; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000040b964: and ch, 8; lea rdx, [rip + 0x5732]; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x0000000000467c92: and ch, 8; lea rdx, [rip + 0xad4]; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000042a3e4: and ch, 8; lea rdx, [rip + 0xb932]; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000042bbb5: and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000043664b: and ch, al; sti; xchg ebx, eax; ret 0xe2c4; 
0x0000000000450091: and cl, byte ptr [rax + 0x63]; ror byte ptr [rax + 0x39], 1; sal byte ptr [rbp + 0x21], 1; test ecx, ecx; jne 0x500a0; ret; 
0x00000000004071e3: and cl, byte ptr [rax - 0x75]; add ecx, dword ptr [rax + 0x29]; ret; 
0x0000000000474d2d: and cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x0000000000404c01: and cl, byte ptr [rax - 0x7d]; ret; 
0x00000000004571c3: and cl, cl; jmp rax; 
0x000000000040b854: and dh, 2; lea rax, [rip + 0x4582]; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000042a218: and dh, 8; jne 0x2a200; lea rax, [rip + 0x367c]; test ch, 8; jne 0x2a1eb; ret; 
0x000000000042a376: and dh, 8; jne 0x2a357; lea rax, [rip + 0x75ee]; and ch, 8; jne 0x2a335; ret; 
0x0000000000459a86: and dh, 8; jne 0x59a67; lea rax, [rip + 0x14e]; and ch, 8; jne 0x59a45; ret; 
0x0000000000460256: and dh, 8; jne 0x6023e; lea rax, [rip + 0xbe]; and ch, 8; jne 0x60225; ret; 
0x00000000004602c6: and dh, 8; jne 0x602ae; lea rax, [rip + 0x9ce]; and ch, 8; jne 0x60295; ret; 
0x0000000000458cf4: and dh, bl; add al, 0; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000410867: and dl, bl; shl byte ptr [rdx - 0x4e], cl; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000040b8fa: and dl, byte ptr [rcx]; add byte ptr [rax - 0x73], cl; add eax, 0x4b3b; cmovne rax, rdx; ret; 
0x0000000000411d1e: and dword ptr [rax + 0x19], edi; syscall; 
0x000000000042d919: and dword ptr [rax + 0x3a], eax; xor al, 7; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x0000000000460e92: and dword ptr [rax + 1], ecx; clc; shr rax, 2; vzeroupper; ret; 
0x00000000004104a6: and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000047038e: and dword ptr [rax], 1; add byte ptr [rax], al; mov rsi, rax; jmp 0x70325; nop dword ptr [rax + rax]; call rax; 
0x000000000040b787: and dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x216f; cmovne rax, rdx; ret; 
0x000000000042d085: and dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000045f73f: and dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000042d07a: and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000045f734: and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x00000000004269cb: and dword ptr [rbx], 0xffffffef; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000426a24: and dword ptr [rbx], 0xffffffef; pop rbx; pop r12; pop rbp; ret; 
0x000000000041df4b: and dword ptr [rbx], eax; add byte ptr [rdi], cl; mov dh, 0x85; idiv rdi; jmp qword ptr [rsi + 0x66]; 
0x000000000047a154: and dword ptr [rcx + rcx + 0x5d], esi; ret; 
0x0000000000460388: and dword ptr [rcx], eax; clc; shr eax, 2; vzeroupper; ret; 
0x0000000000410c98: and dword ptr [rcx], eax; clc; vzeroupper; ret; 
0x000000000042805e: and dword ptr [rdi], ecx; mov dh, 0; ret; 
0x000000000044ad5c: and dword ptr [rsi], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045b33a: and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000042f25c: and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042f0ba: and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000042f0e2: and dword ptr [rsi], esp; ret; 
0x000000000041b75f: and eax, 0; ret; 
0x000000000043b832: and eax, 0x10; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000459858: and eax, 0x10; ret; 
0x0000000000411402: and eax, 0x28; jne 0x11443; leave; ret; 
0x000000000041191e: and eax, 0x28; jne 0x1193d; leave; ret; 
0x0000000000411d36: and eax, 0x28; jne 0x11d95; leave; ret; 
0x00000000004123ee: and eax, 0x28; jne 0x123f7; leave; ret; 
0x00000000004285b3: and eax, 0x28; jne 0x285c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000428735: and eax, 0x28; jne 0x28742; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000429781: and eax, 0x28; jne 0x297fa; leave; ret; 
0x000000000043712a: and eax, 0x28; jne 0x37154; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000438676: and eax, 0x28; jne 0x38723; leave; ret; 
0x0000000000438842: and eax, 0x28; jne 0x3888b; leave; ret; 
0x00000000004388d7: and eax, 0x28; jne 0x3891b; leave; ret; 
0x000000000044ed20: and eax, 0x28; jne 0x4ed63; leave; mov eax, edx; ret; 
0x000000000044edda: and eax, 0x28; jne 0x4eeb9; leave; ret; 
0x0000000000452f32: and eax, 0x28; jne 0x52f7a; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004540e6: and eax, 0x28; jne 0x54102; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454921: and eax, 0x28; jne 0x5492a; leave; ret; 
0x00000000004584bd: and eax, 0x28; jne 0x584d8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458617: and eax, 0x28; jne 0x58637; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004586d3: and eax, 0x28; jne 0x586ef; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004601d8: and eax, 0x28; jne 0x60208; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000461d4f: and eax, 0x28; jne 0x61d5b; leave; movzx eax, al; ret; 
0x0000000000461db9: and eax, 0x28; jne 0x61dfb; leave; ret; 
0x0000000000461ea0: and eax, 0x28; jne 0x61ec3; leave; mov eax, edx; ret; 
0x0000000000461f7e: and eax, 0x28; jne 0x61f87; leave; ret; 
0x0000000000462097: and eax, 0x28; jne 0x620bc; leave; ret; 
0x0000000000462146: and eax, 0x28; jne 0x62153; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004622e9: and eax, 0x28; jne 0x6230b; leave; ret; 
0x0000000000462388: and eax, 0x28; jne 0x6239c; leave; ret; 
0x0000000000462418: and eax, 0x28; jne 0x6242c; leave; ret; 
0x00000000004624f4: and eax, 0x28; jne 0x625b7; leave; ret; 
0x000000000046260f: and eax, 0x28; jne 0x6263c; leave; ret; 
0x0000000000466350: and eax, 0x28; jne 0x663c7; leave; ret; 
0x0000000000467c0a: and eax, 0x28; jne 0x67c40; leave; ret; 
0x000000000046936d: and eax, 0x28; jne 0x69376; leave; ret; 
0x000000000046df10: and eax, 0x28; jne 0x6df19; leave; ret; 
0x000000000046dff2: and eax, 0x28; jne 0x6dffb; leave; ret; 
0x000000000046e062: and eax, 0x28; jne 0x6e06b; leave; ret; 
0x000000000046e15a: and eax, 0x28; jne 0x6e163; leave; ret; 
0x000000000046e1be: and eax, 0x28; jne 0x6e1c7; leave; ret; 
0x000000000046e607: and eax, 0x28; jne 0x6e619; leave; ret; 
0x00000000004705d2: and eax, 0x28; jne 0x705e5; leave; ret; 
0x00000000004706b7: and eax, 0x28; jne 0x706c0; leave; ret; 
0x00000000004118f4: and eax, 0x28; mov qword ptr [rbp - 8], rdx; lea rdx, [rbp - 0x1010]; syscall; 
0x00000000004292cd: and eax, 0x2f0; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000046716f: and eax, 0x2f8; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000428607: and eax, 0x2f8; ret; 
0x000000000043e39d: and eax, 0x30; test rax, rax; je 0x3e3ad; call rax; 
0x000000000043e4fa: and eax, 0x30; test rax, rax; je 0x3e50c; mov rdi, rbx; call rax; 
0x000000000043f582: and eax, 0x30; test rax, rax; je 0x3f594; mov rdi, rbx; call rax; 
0x0000000000447e9f: and eax, 0x30; test rdx, rdx; je 0x47ec3; mov rdi, rbx; call rdx; 
0x00000000004047df: and eax, 0x30; xchg dword ptr [rip + 0xa3bde], ecx; cmp ecx, 1; jg 0x4850; call rax; 
0x000000000042865d: and eax, 0x39; cmp eax, 8; je 0x28666; ret; 
0x0000000000417e5f: and eax, 0x480008fd; mov dword ptr [rdi + 0x490], eax; pop rbp; ret; 
0x0000000000466ccd: and eax, 0x675c985; ret; 
0x00000000004186c4: and eax, 0x698; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046691c: and eax, 0x8508948; pop rbp; ret; 
0x0000000000422a81: and eax, 0x89480008; ret 0x2948; 
0x0000000000404b93: and eax, 0x89484274; ret 0x8949; 
0x00000000004096a2: and eax, 0x8c48348; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000045b649: and eax, 0xb262def7; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000045b334: and eax, 0xb262fef3; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000042f0b4: and eax, 0xb262fef3; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000042846c: and eax, 0xc; cmp eax, 4; je 0x28451; ret; 
0x000000000041fa14: and eax, 0xfff8b6e9; jmp qword ptr [rsi + 0xf]; 
0x000000000046b1c8: and eax, 0xfffe92e9; jmp qword ptr [rsi - 0x70]; 
0x000000000040823c: and eax, 0xffffffc0; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000411174: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x11190; bsf rax, rdx; ret; 
0x0000000000411117: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x111a0; bsf rax, rdx; ret; 
0x0000000000404fc8: and eax, 0xfffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x000000000041b509: and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x9169b], al; ret; 
0x000000000041b4e7: and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x916bd], al; ret; 
0x0000000000474ddd: and eax, 0xfffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000470edc: and eax, 0xfffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; leave; ret; 
0x0000000000413ff3: and eax, 0xfffffffc; or eax, 1; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000041b479: and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x9172b], al; ret; 
0x0000000000414055: and eax, 0xfffffffc; or eax, 2; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000041b457: and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x9174d], al; ret; 
0x0000000000475268: and eax, 0xfffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x75278; ret; 
0x0000000000478c2d: and eax, 0xfffffffc; xor r10d, r10d; or eax, 2; mov edx, eax; mov eax, r13d; syscall; 
0x000000000040af16: and eax, 1; cmovne rax, rdx; ret; 
0x00000000004285fd: and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004284f9: and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x0000000000473fff: and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000046d559: and eax, 1; mov rax, qword ptr [rdx + rax*8]; test rax, rax; jne 0x6d57e; ret; 
0x0000000000464d58: and eax, 2; sub eax, 1; ret; 
0x0000000000447641: and eax, dword ptr [rdi + 0x26e80003]; int 0xfb; jmp qword ptr [rdi - 0x18]; 
0x0000000000429bd2: and eax, dword ptr [rip + 0x3d8d4800]; lodsb al, byte ptr [rsi]; push rdi; add eax, 0xa78fe800; std; jmp qword ptr [rdi - 0x18]; 
0x0000000000435f82: and eax, ecx; je 0x35f8c; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000435fed: and eax, ecx; je 0x35fc0; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x00000000004360d5: and eax, ecx; je 0x36080; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000436185: and eax, ecx; je 0x36140; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004361c8: and eax, ecx; je 0x361d2; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043652f: and eax, ecx; je 0x36540; bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x000000000043650f: and eax, ecx; je 0x36660; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004367cc: and eax, ecx; je 0x367d6; bsr eax, eax; add rax, rdi; ret; 
0x000000000043680d: and eax, ecx; je 0x367e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043684d: and eax, ecx; je 0x36820; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000436935: and eax, ecx; je 0x368e5; bsr eax, eax; add rax, rdi; ret; 
0x00000000004369d5: and eax, ecx; je 0x36995; bsr eax, eax; add rax, rdi; ret; 
0x0000000000436a12: and eax, ecx; je 0x36a1c; bsr eax, eax; add rax, rdi; ret; 
0x00000000004364c3: and eax, esi; je 0x364cd; bsr eax, eax; add rax, rdi; ret; 
0x0000000000436771: and eax, esi; je 0x3677b; bsr eax, eax; add rax, rdi; ret; 
0x00000000004269cc: and ebp, edi; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000426a25: and ebp, edi; pop rbx; pop r12; pop rbp; ret; 
0x000000000046020b: and ebx, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000429f85: and ecx, 0x120; je 0x29f90; ret; 
0x0000000000467c65: and ecx, 0x120; je 0x67c70; ret; 
0x000000000042a3b5: and ecx, 0x128; je 0x2a3c0; ret; 
0x000000000042a425: and ecx, 0x128; je 0x2a430; ret; 
0x000000000040b8c5: and ecx, 0x128; je 0xb8d0; ret; 
0x000000000040b935: and ecx, 0x128; je 0xb940; ret; 
0x000000000040e884: and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000042a1eb: and ecx, 4; lea rax, [rip + 0x3d4b]; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x000000000042a1a0: and ecx, 8; lea rax, [rip + 0x3026]; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x0000000000459af0: and ecx, 8; lea rax, [rip + 0x5d86]; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x0000000000437130: and ecx, dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000448704: and ecx, dword ptr [rax - 0x7b]; push qword ptr [rsi + rdx + 0x48]; mov esi, dword ptr [rip + 0x6465f]; jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000423014: and ecx, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc985; 
0x000000000042309a: and ecx, dword ptr [rax]; add byte ptr [rcx + rcx*4 + 0x63], cl; adc byte ptr [rax - 0x77], cl; ret 0xf685; 
0x0000000000447ffc: and ecx, dword ptr [rdi]; mov bh, 0x57; or cl, byte ptr [rax + 0x39]; ret 0x1a73; 
0x0000000000470c42: and edi, 0x20; je 0x70c57; movss xmm0, dword ptr [rip + 0xa3b9]; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x000000000040d449: and edi, 0xffffffc0; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000040e8b1: and edi, 0xfffffff0; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x0000000000428414: and edi, 2; je 0x28420; ret; 
0x0000000000457b70: and edi, ebx; jmp qword ptr [rsi + 0x66]; 
0x000000000047741a: and edi, ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000040b770: and edx, 0x20; lea rax, [rip + 0x2fc6]; jne 0xb729; ret; 
0x000000000040b670: and edx, 0x20; lea rax, [rip + 0x3106]; jne 0xb629; ret; 
0x000000000042a110: and edx, 0x20; lea rax, [rip - 0x1b99a]; jne 0x2a0c9; ret; 
0x00000000004283bd: and edx, 0x3b; or edx, 2; cmp edx, 0xa; je 0x283d8; mov eax, esi; ret; 
0x0000000000460a91: and edx, 0xf00; je 0x60aa8; add rax, 2; ret; 
0x0000000000460a8b: and edx, 0xf; je 0x60aa0; ret; 
0x00000000004051ab: and edx, 0xfffffff0; cmp rax, 7; mov eax, 0x10; cmova eax, edx; mov byte ptr [rip + 0xa7678], al; ret; 
0x0000000000478a74: and edx, 3; cmp edx, 2; je 0x78a80; ret; 
0x0000000000460896: and edx, 7; shrx eax, eax, edx; test eax, eax; je 0x60787; bsf eax, eax; ret; 
0x000000000042a270: and edx, 8; lea rax, [rip + 0x6696]; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x0000000000428919: and esi, 0x80; syscall; 
0x0000000000429329: and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000043be62: and esi, eax; cmp rdi, rsi; jne 0x3be70; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042a09d: and esi, edi; dec dword ptr [rax - 0x73]; add eax, 0xfffe20a9; cmovne rax, rdx; ret; 
0x000000000046e533: and esi, esp; add eax, dword ptr [rax]; ret; 
0x00000000004421ac: and esp, edi; jmp qword ptr [rdi - 0x18]; 
0x000000000045b339: and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000042f25b: and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042f0b9: and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000040b728: and r13b, 2; lea rax, [rip + 0x2a4d]; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b628: and r13b, 2; lea rax, [rip + 0x2b8d]; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a0c8: and r13b, 2; lea rax, [rip - 0x1bf13]; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x0000000000411173: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x11190; bsf rax, rdx; ret; 
0x0000000000411116: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x111a0; bsf rax, rdx; ret; 
0x0000000000404fc7: and rax, 0xfffffffffffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x0000000000474ddc: and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000470edb: and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; leave; ret; 
0x0000000000475267: and rax, 0xfffffffffffffffc; xchg qword ptr [rdi], rax; test al, 2; jne 0x75278; ret; 
0x00000000004360d4: and rax, rcx; je 0x36080; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000436184: and rax, rcx; je 0x36140; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000040d448: and rdi, 0xffffffffffffffc0; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000040e8b0: and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x000000000043be61: and rsi, rax; cmp rdi, rsi; jne 0x3be70; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000459cf8: and spl, r8b; jge 0x59cfa; ret 0x41c4; 
0x000000000045a0a8: and spl, r8b; jge 0x5a0aa; ret 0x41c4; 
0x000000000045a708: and spl, r8b; jge 0x5a70a; ret 0x41c4; 
0x000000000045aac8: and spl, r8b; jge 0x5aaca; ret 0x41c4; 
0x000000000042f0e1: and word ptr [rsi], sp; ret; 
0x0000000000436650: andn eax, eax, ecx; je 0x36608; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043672c: andn eax, eax, ecx; je 0x366d9; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043652a: blsmsk ecx, ecx; and eax, ecx; je 0x36540; bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x000000000043650a: blsmsk ecx, ecx; and eax, ecx; je 0x36660; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004364be: blsmsk esi, esi; and eax, esi; je 0x364cd; bsr eax, eax; add rax, rdi; ret; 
0x000000000043676c: blsmsk esi, esi; and eax, esi; je 0x3677b; bsr eax, eax; add rax, rdi; ret; 
0x00000000004561a0: bnd jae 0x56106; pop rbx; mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x000000000045608d: bnd jb 0x56000; mov qword ptr [rax], rdx; jmp 0x55f96; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x000000000042b3b1: bnd jbe 0x2b3bd; test eax, eax; je 0x2b3c0; lea rax, [rdi + rsi]; ret; 
0x000000000042b631: bnd jbe 0x2b63d; test eax, eax; je 0x2b640; lea rax, [rdi + rsi]; ret; 
0x00000000004687f3: bnd jbe 0x68b00; add rax, rdi; add rax, rcx; ret; 
0x0000000000468a8a: bnd jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aaa: bnd jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468aca: bnd jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468aea: bnd jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000424c9d: bnd jmp 0x24ba6; nop dword ptr [rax + rax]; ret; 
0x00000000004549a0: bnd jne 0x54980; ret; 
0x000000000045857a: bnd jp 0x5857c; jmp qword ptr [rsi - 0x70]; 
0x000000000042c66c: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042c65a: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042c830: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042df30: bsf eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x0000000000410878: bsf eax, eax; add rax, rdi; ret; 
0x000000000041047c: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000041067c: bsf eax, eax; add rax, rdi; xtest; jne 0x1068b; vzeroupper; ret; 
0x000000000042b0f6: bsf eax, eax; add rax, rdi; xtest; jne 0x2b105; vzeroupper; ret; 
0x0000000000467fd6: bsf eax, eax; add rax, rdi; xtest; jne 0x67fe5; vzeroupper; ret; 
0x000000000042c754: bsf eax, eax; add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c60d: bsf eax, eax; add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000041061a: bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000004105d0: bsf eax, eax; add rdi, -0x7f; add rax, rdi; vzeroupper; ret; 
0x00000000004104a0: bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004104b0: bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004104c0: bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042b5c4: bsf eax, eax; cmp edx, eax; jbe 0x2b5c0; add rax, rdi; ret; 
0x000000000042b844: bsf eax, eax; cmp edx, eax; jbe 0x2b840; add rax, rdi; ret; 
0x00000000004682b2: bsf eax, eax; cmp edx, eax; jbe 0x682c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004684de: bsf eax, eax; cmp edx, eax; jbe 0x684d6; lea rax, [rdi + rax*4]; ret; 
0x0000000000468532: bsf eax, eax; cmp edx, eax; jbe 0x68540; lea rax, [rdi + rax*4]; ret; 
0x000000000046875f: bsf eax, eax; cmp edx, eax; jbe 0x68757; lea rax, [rdi + rax*4]; ret; 
0x00000000004357c1: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000042d8e0: bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000042dd7c: bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2dd89; add rax, rdi; ret; 
0x000000000042b130: bsf eax, eax; inc rdi; add rax, rdi; jmp 0x2b0fc; xor eax, eax; ret; 
0x0000000000468010: bsf eax, eax; inc rdi; add rax, rdi; jmp 0x67fdc; xor eax, eax; ret; 
0x0000000000410490: bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000043581c: bsf eax, eax; jmp 0x35ab9; xor eax, eax; ret; 
0x0000000000460d51: bsf eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d41: bsf eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d31: bsf eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d11: bsf eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000042bb10: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042bb20: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042baf0: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000042ba4f: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000041089a: bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000468493: bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000410a67: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042df87: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042c860: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c4f0: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042bc81: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c500: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000042bca1: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c3b0: bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042bc61: bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000410f6a: bsf eax, eax; ret; 
0x0000000000460ff1: bsf eax, eax; shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000046105c: bsf eax, eax; shr eax, 2; jmp 0x6136c; xor eax, eax; ret; 
0x000000000046034e: bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x00000000004606fb: bsf eax, eax; shr eax, 2; xtest; jne 0x6070a; vzeroupper; ret; 
0x0000000000435591: bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000435581: bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000435571: bsf eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000435561: bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000411070: bsf eax, eax; sub edi, ecx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000410f70: bsf eax, eax; sub edi, ecx; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000460870: bsf eax, eax; sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000460770: bsf eax, eax; sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000410c91: bsf eax, eax; sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000410ca1: bsf eax, eax; sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000410cb1: bsf eax, eax; sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000410c81: bsf eax, eax; sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000042aff1: bsf eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042afad: bsf eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000460487: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105b9: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x00000000004604c1: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105e1: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000004604a1: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000410d71: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000411050: bsf eax, eax; sub rdi, rcx; add rax, rdi; ret; 
0x0000000000411060: bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000411041: bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000460851: bsf eax, eax; sub rdi, rcx; sar rdi, 2; add rax, rdi; ret; 
0x0000000000460841: bsf eax, eax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460860: bsf eax, eax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000435751: bsf eax, eax; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000435741: bsf eax, eax; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000042b8c9: bsf eax, eax; sub rdx, rax; jbe 0x2bb70; add rax, rdi; add rax, rcx; ret; 
0x000000000042bb30: bsf eax, eax; sub rdx, rax; jbe 0x2bb70; add rax, rdi; ret; 
0x000000000042bb40: bsf eax, eax; sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042bb50: bsf eax, eax; sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042bb60: bsf eax, eax; sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042ae61: bsf eax, eax; vzeroupper; cmp edx, eax; jle 0x2ae7d; add rax, rdi; ret; 
0x0000000000410c6a: bsf eax, eax; vzeroupper; ret; 
0x0000000000410f1b: bsf eax, eax; xtest; jne 0x10f27; vzeroupper; ret; 
0x0000000000435b2f: bsf eax, ecx; cmp rax, 0x20; ja 0x35b40; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004613ef: bsf eax, ecx; cmp rax, 8; ja 0x61403; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004110da: bsf eax, edx; ret; 
0x0000000000460b2a: bsf eax, edx; shr rax, 2; ret; 
0x0000000000432ad5: bsf ecx, ecx; add ecx, r9d; cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x000000000042b45a: bsf ecx, ecx; cmp al, cl; jae 0x2b467; xor eax, eax; ret; 
0x000000000042b6da: bsf ecx, ecx; cmp al, cl; jae 0x2b6e7; xor eax, eax; ret; 
0x000000000046836e: bsf ecx, ecx; cmp al, cl; jae 0x6837b; xor eax, eax; ret; 
0x00000000004685ee: bsf ecx, ecx; cmp al, cl; jae 0x685fb; xor eax, eax; ret; 
0x000000000042b472: bsf ecx, ecx; cmp al, cl; jb 0x2b461; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b6f2: bsf ecx, ecx; cmp al, cl; jb 0x2b6e1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000468386: bsf ecx, ecx; cmp al, cl; jb 0x68375; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000468606: bsf ecx, ecx; cmp al, cl; jb 0x685f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x000000000042b3f1: bsf ecx, ecx; cmp al, cl; jbe 0x2b3bd; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b671: bsf ecx, ecx; cmp al, cl; jbe 0x2b63d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468303: bsf ecx, ecx; cmp al, cl; jbe 0x682c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468583: bsf ecx, ecx; cmp al, cl; jbe 0x68540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x000000000042dd90: bsf ecx, ecx; cmp sil, byte ptr [rdi + rcx + 0x20]; jne 0x2dd89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000045f6f6: bsf ecx, ecx; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x0000000000432934: bsf ecx, ecx; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x32917; xor eax, eax; ret; 
0x0000000000410884: bsf ecx, ecx; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042b410: bsf ecx, ecx; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b480: bsf ecx, ecx; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b464: bsf ecx, ecx; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000468320: bsf ecx, ecx; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468393: bsf ecx, ecx; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000468378: bsf ecx, ecx; lea rax, [rdi + rcx*4 + 0x80]; ret; 
0x000000000042d030: bsf ecx, ecx; lea rax, [rdi + rcx]; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x000000000045f275: bsf ecx, ecx; mov rax, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000430aba: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042efa0: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042e4d6: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042efb0: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042e4f1: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c4d8: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042bcdc: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ef90: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042e4c4: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042d0d6: bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x000000000042cb94: bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x000000000045f787: bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000042cb60: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000045f246: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; vzeroupper; ret; 
0x000000000042cb40: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x000000000045f233: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; vzeroupper; ret; 
0x000000000042cb23: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x000000000045f220: bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x000000000045f72a: bsf ecx, ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 0x21]; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x000000000045f710: bsf ecx, ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 1]; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x0000000000430b80: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000430950: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000411232: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000460c82: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000042b400: bsf edx, edx; cmp al, dl; jb 0x2b40d; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000042b680: bsf edx, edx; cmp al, dl; jb 0x2b68d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000468310: bsf edx, edx; cmp al, dl; jb 0x6831d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000468590: bsf edx, edx; cmp al, dl; jb 0x6859d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000042deea: bsf edx, edx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042b419: bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x00000000004109da: bsf edx, edx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000468329: bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000468700: bsf edx, edx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x000000000042b583: bsf edx, edx; lea rax, [rdi + rdx]; ret; 
0x000000000046156b: bsf edx, edx; lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000461594: bsf edx, edx; lea rax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435cad: bsf edx, edx; lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435cd4: bsf edx, edx; lea rax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x00000000004308e1: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000435b74: bsf edx, edx; sub edx, eax; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x00000000004614b8: bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x10]; ret; 
0x0000000000435bf3: bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x40]; ret; 
0x0000000000435be3: bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x000000000042cb0b: bsf edx, edx; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x000000000045f20b: bsf edx, edx; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000042cb0a: bsf edx, r10d; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x000000000045f20a: bsf edx, r10d; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000042dd7b: bsf r8d, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2dd89; add rax, rdi; ret; 
0x0000000000410b80: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042e0b0: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042c93f: bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042afac: bsf rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000460486: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105b8: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x0000000000411040: bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000460840: bsf rax, rax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000435b2e: bsf rax, rcx; cmp rax, 0x20; ja 0x35b40; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004613ee: bsf rax, rcx; cmp rax, 8; ja 0x61403; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000411122: bsf rax, rdx; ret; 
0x0000000000460b76: bsf rax, rdx; shr rax, 2; ret; 
0x0000000000430ab9: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000430b7f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043094f: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000411231: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000460c81: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000042dee9: bsf rdx, rdx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004109d9: bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004686ff: bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x000000000046156a: bsf rdx, rdx; lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435cac: bsf rdx, rdx; lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x00000000004308e0: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004367ec: bsr eax, eax; add rax, r8; ret; 
0x0000000000435fad: bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x00000000004364c7: bsr eax, eax; add rax, rdi; ret; 
0x0000000000435f86: bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000436226: bsr eax, eax; add rax, rdi; xtest; jne 0x36235; vzeroupper; ret; 
0x00000000004364f1: bsr eax, eax; add rax, rsi; ret; 
0x0000000000436550: bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x0000000000436533: bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x0000000000436616: bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x0000000000436811: bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000436851: bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000435ff1: bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x0000000000436657: bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000436517: bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000435fd0: bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x00000000004360da: bsr eax, eax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004360a1: bsr eax, eax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000436150: bsr eax, eax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x00000000004366f2: bsr ecx, ecx; sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000436615: bsr rax, rax; lea rax, [r8 + rax + 0x60]; ret; 
0x00000000004360d9: bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004360a0: bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x000000000043614f: bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x000000000042c6f4: bswap eax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000042c6f1: bswap ecx; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000042c6f3: bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000042c6f0: bswap rcx; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x0000000000458a52: bt ecx, edx; jae 0x58a66; neg eax; ret; 
0x0000000000458a51: bt rcx, rdx; jae 0x58a66; neg eax; ret; 
0x0000000000466844: bts eax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x0000000000460cf4: bts eax, esi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000435551: bts eax, esi; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004666e1: bts edx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000435ed3: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004617a3: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000435e34: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000466843: bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x0000000000460cf3: bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000435550: bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004666e0: bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000435ed2: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004617a2: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000435e33: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x00000000004319c4: bzhi eax, ecx, edx; jne 0x319b0; xor eax, eax; vzeroupper; ret; 
0x0000000000432692: bzhi eax, ecx, edx; jne 0x32680; xor eax, eax; ret; 
0x000000000042ddb0: bzhi ecx, ecx, eax; jne 0x2dd89; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004100a7: bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000042be83: bzhi edx, eax, edx; jne 0x2bc60; xor eax, eax; vzeroupper; ret; 
0x000000000040fe29: bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000046d608: call 0x10921e2d; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000040147e: call 0x10d2; cmp dword ptr [rbp - 0x50], 0; je 0x149f; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x00000000004019b1: call 0x112e0; mov eax, 0; leave; ret; 
0x000000000041195f: call 0x11680; test eax, eax; je 0x11970; pop rbp; ret; 
0x000000000041199f: call 0x11680; test eax, eax; je 0x119b0; pop rbp; ret; 
0x0000000000411979: call 0x118d0; mov edx, 2; pop rbp; test eax, eax; cmove eax, edx; ret; 
0x000000000043a2f8: call 0x11c00; test eax, eax; jne 0x3a308; pop rbp; ret; 
0x000000000041981b: call 0x11c30; pop rbp; mov qword ptr [rip + 0x93074], 0; ret; 
0x0000000000409591: call 0x11c60; cmp rax, -1; je 0x95a0; pop rbp; ret; 
0x0000000000405500: call 0x11ea0; pop rbp; mov qword ptr [rip + 0xa0c3b], rax; ret; 
0x00000000004054ec: call 0x11f70; cmp eax, 1; je 0x5500; pop rbp; ret; 
0x0000000000466c6e: call 0x12300; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000041240f: call 0x12320; nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x0000000000401479: call 0x12400; call 0x10d2; cmp dword ptr [rbp - 0x50], 0; je 0x149f; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x00000000004384a3: call 0x12400; nop dword ptr [rax + rax]; endbr64; mov eax, 8; syscall; 
0x0000000000411d96: call 0x12400; nop dword ptr [rax + rax]; endbr64; mov r10, rcx; mov eax, 0x9d; syscall; 
0x0000000000447ef4: call 0x12400; nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x0000000000411444: call 0x12400; nop dword ptr [rax]; endbr64; xor eax, eax; syscall; 
0x0000000000411b05: call 0x12400; nop word ptr [rax + rax]; endbr64; mov eax, 0x1c; syscall; 
0x0000000000411e62: call 0x12400; nop word ptr [rax + rax]; endbr64; mov eax, 0x63; syscall; 
0x000000000040166f: call 0x1610; lea rdi, [rip + 0xabaf5]; call 0x1610; mov byte ptr [rip + 0xabae1], 1; pop rbp; ret; 
0x000000000040167b: call 0x1610; mov byte ptr [rip + 0xabae1], 1; pop rbp; ret; 
0x0000000000409abe: call 0x16ac; jmp qword ptr [rsi + 0x66]; 
0x0000000000417648: call 0x16ee0; leave; ret; 
0x000000000043db47: call 0x17820; mov r10, qword ptr [rbp - 0xa0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x000000000043d757: call 0x17820; mov r10, qword ptr [rbp - 0xb0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x0000000000418129: call 0x17a60; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000418185: call 0x17a60; mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x000000000043bdd4: call 0x18430; xor eax, eax; pop rbp; ret; 
0x000000000042426c: call 0x1bf5a; jmp qword ptr [rsi + 0x66]; 
0x0000000000428f94: call 0x1c982; jmp qword ptr [rsi + 0xf]; 
0x00000000004284f7: call 0x1e30807; mov dword ptr [rip + 0x802f2], eax; ret; 
0x0000000000455cd3: call 0x22be0; mov edx, dword ptr [rbp - 0x38]; mov rdi, r15; mov esi, edx; call qword ptr [rbx + 0x18]; 
0x0000000000423171: call 0x257d0; mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000411339: call 0x28410; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000041b8c8: call 0x29720; test eax, eax; jne 0x1b8d8; pop rbp; ret; 
0x0000000000419535: call 0x2a2d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000461060: call 0x30bf967; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004787a0: call 0x314c9c19; rol byte ptr [rcx + rcx*4 - 0x18], cl; syscall; 
0x0000000000416777: call 0x31fd7; add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x000000000042981d: call 0x37b90; mov dword ptr [rip + 0x7deb0], eax; pop rbp; ret; 
0x0000000000448a26: call 0x39610; pop rbp; mov qword ptr [rip + 0x64349], 0; ret; 
0x000000000041be4b: call 0x39610; pop rbp; mov qword ptr [rip + 0x90de4], 0; ret; 
0x000000000046f905: call 0x399e0; nop word ptr [rax + rax]; cmp qword ptr [rdi + 0x28], rdi; je 0x6f920; ret; 
0x000000000043be0c: call 0x3bd00; test eax, eax; jne 0x3be1b; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000407444: call 0x3c8dbc55; ret; 
0x000000000041f4f2: call 0x3d8f3d17; add eax, 0x48000830; cwde; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041fbf2: call 0x3d8f4417; add eax, 0x48000829; cwde; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000401700: call 0x3dc0; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000478a0e: call 0x4000d15; je 0x78a20; ret; 
0x0000000000413ccc: call 0x415d7e2c; pop rbp; pop rbp; ret; 
0x0000000000413e28: call 0x415d7f88; pop rbp; pop rbp; ret; 
0x00000000004497e9: call 0x4160d949; pop rbp; pop rbp; ret; 
0x000000000045674f: call 0x4161a8af; pop rbp; pop rbp; ret; 
0x00000000004582d2: call 0x4161c432; pop rbp; pop rbp; ret; 
0x00000000004583a1: call 0x4161c501; pop rbp; pop rbp; ret; 
0x000000000043849d: call 0x4370; call 0x12400; nop dword ptr [rax + rax]; endbr64; mov eax, 8; syscall; 
0x0000000000404516: call 0x4370; xor eax, eax; ret; 
0x000000000044fed5: call 0x44c87db; ret; 
0x0000000000466846: call 0x468fb07b; or byte ptr [rax + 2], bh; pop rbp; ret; 
0x0000000000411e3b: call 0x48e3a78d; mov edx, ebx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x000000000042d1c4: call 0x48ebbcd9; mov eax, edx; ret; 
0x000000000045f874: call 0x48eee389; mov eax, edi; ret; 
0x0000000000439ad3: call 0x49039ad6; mov ebx, dword ptr [rbp - 0x110]; call rbx; 
0x0000000000404d68: call 0x4d00; nop dword ptr [rax]; ret; 
0x0000000000404dcd: call 0x4d00; nop word ptr [rax + rax]; ret; 
0x0000000000423e50: call 0x4d20; jmp 0x23bc3; or eax, 0xffffffff; ret; 
0x000000000045888c: call 0x4d80; xor eax, eax; pop rbp; ret; 
0x000000000044daad: call 0x4da60; jmp 0x4da86; nop dword ptr [rax]; ret; 
0x000000000044daa4: call 0x4da60; mov rdi, qword ptr [rbx + 0x10]; call 0x4da60; jmp 0x4da86; nop dword ptr [rax]; ret; 
0x00000000004096b3: call 0x4de0; jmp 0x968a; nop word ptr [rax + rax]; ret; 
0x0000000000454842: call 0x4de0; mov eax, dword ptr [rbp - 0x14]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041be0f: call 0x4de0; xor eax, eax; pop rbp; ret; 
0x00000000004588cd: call 0x4e00; xor eax, eax; pop rbp; ret; 
0x000000000040861f: call 0x5010; nop dword ptr [rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000405c47: call 0x5010; nop dword ptr [rax]; punpcklqdq xmm0, xmm0; movups xmmword ptr [rsi + 0x20], xmm0; pop rbp; ret; 
0x0000000000404fd1: call 0x508d97da; add dword ptr [rax - 0x77], ecx; adc eax, 0xa11aa; ret; 
0x000000000046e6fd: call 0x50942f05; push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000040b58f: call 0x5510; mov rbx, qword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x00000000004561f6: call 0x55ed0; jmp 0x56121; mov eax, 0xffffffff; ret; 
0x0000000000427a15: call 0x5708031b; push rdx; or byte ptr [rax], al; ret; 
0x000000000044eb1b: call 0x58e70; test eax, eax; jne 0x4eb30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000459084: call 0x58f20; xor eax, eax; pop rbp; ret; 
0x00000000004281b6: call 0x5d43ddfc; pop r14; pop r15; pop rbp; ret; 
0x000000000044989a: call 0x5d45f4e0; pop rbp; ret; 
0x000000000044ae97: call 0x5d60eff7; ret; 
0x0000000000448785: call 0x5d8fcf8b; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x000000000040b5a0: call 0x5f00; jmp 0xb57d; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000041b777: call 0x6501b77b; add rax, qword ptr [0]; ret; 
0x0000000000449756: call 0x6504975a; mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000466343: call 0x65840; mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x663c7; leave; ret; 
0x0000000000466b64: call 0x668f0; mov eax, 1; pop rbp; ret; 
0x0000000000454245: call 0x66ae0; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004541a6: call 0x66ae0; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x000000000046d9c2: call 0x6db90; pop rbp; neg eax; sbb eax, eax; ret; 
0x0000000000470741: call 0x70be0; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x00000000004017b6: call 0x774b0; mov byte ptr [rip + 0xa62fe], 1; pop rbp; ret; 
0x0000000000474055: call 0x77500; test rax, rax; je 0x74063; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000460352: call 0x77fec859; ret; 
0x000000000046036b: call 0x77fec872; ret; 
0x000000000046038c: call 0x77fec893; ret; 
0x00000000004603ac: call 0x77fec8b3; ret; 
0x00000000004603cc: call 0x77fec8d3; ret; 
0x0000000000460493: call 0x77fec99a; ret; 
0x00000000004604ad: call 0x77fec9b4; ret; 
0x00000000004604cd: call 0x77fec9d4; ret; 
0x00000000004604ff: call 0x77feca06; ret; 
0x0000000000460ce0: call 0x77fed1e7; ret; 
0x0000000000460cfc: call 0x77fed203; ret; 
0x0000000000460d1c: call 0x77fed223; ret; 
0x0000000000460d39: call 0x77fed240; ret; 
0x0000000000460d49: call 0x77fed250; ret; 
0x0000000000460d59: call 0x77fed260; ret; 
0x0000000000460e41: call 0x77fed348; ret; 
0x0000000000460e98: call 0x77fed39f; ret; 
0x0000000000460ead: call 0x77fed3b4; ret; 
0x0000000000460ecd: call 0x77fed3d4; ret; 
0x0000000000460ef2: call 0x77fed3f9; ret; 
0x0000000000460f42: call 0x77fed449; ret; 
0x0000000000460f5e: call 0x77fed465; ret; 
0x0000000000460f7f: call 0x77fed486; ret; 
0x0000000000460fa6: call 0x77fed4ad; ret; 
0x000000000044876d: call 0x8481073; cmp eax, -3; je 0x48790; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043e456: call 0x9e90; test rbx, rbx; jne 0x3e445; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000410397: call 0xf0814ab; adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000404a99: call 0xffffffff89487711; ret 0x8948; 
0x0000000000462257: call 0xffffffff8b4ee28d; pop rbp; clc; leave; ret; 
0x000000000046eba8: call 0xffffffffaf1633b1; ret; 
0x000000000046ced1: call 0xffffffffb70c581e; pop qword ptr [rbx]; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000460ff5: call 0xffffffffc63f57fc; cmovb eax, esi; vzeroupper; ret; 
0x0000000000419d6c: call 0xffffffffc901a69c; ret; 
0x00000000004606ff: call 0xffffffffd6071606; jne 0x6070a; vzeroupper; ret; 
0x000000000040fe2b: call 0xffffffffe1c5c825; sti; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000404fcd: call 0xffffffffe8c197e3; add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x000000000041f105: call 0xffffffffe901f104; ret 0xffd9; 
0x000000000041131b: call 0xfffffffff0769e68; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x000000000043878b: call 0xfffffffff07912d8; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x000000000047435e: call 0xfffffffff07cceaf; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474512: call 0xfffffffff07cd063; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000474670: call 0xfffffffff07cd1c1; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047472a: call 0xfffffffff07cd27b; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047493c: call 0xfffffffff07cd48d; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000474994: call 0xfffffffff07cd4e5; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474aa5: call 0xfffffffff07cd5f6; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000452e90: call 0xfffffffff6cdb7dd; ret 0xf01; 
0x000000000046df07: call 0xfffffffff85c6a54; sub rdx, qword ptr fs:[0x28]; jne 0x6df19; leave; ret; 
0x000000000046dfe9: call 0xfffffffff85c6b36; sub rdx, qword ptr fs:[0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e059: call 0xfffffffff85c6ba6; sub rdx, qword ptr fs:[0x28]; jne 0x6e06b; leave; ret; 
0x0000000000425d86: call 0xfffffffff85fe8d3; leave; jmp rax; 
0x0000000000426378: call 0xfffffffff85feec5; leave; jmp rax; 
0x0000000000426590: call 0xfffffffff85ff0dd; leave; jmp rax; 
0x0000000000409ab5: call 0xffffffffffb3c0a2; dec dword ptr [rax - 0x75]; call 0x16ac; jmp qword ptr [rsi + 0x66]; 
0x000000000041962c: call 0xffffffffffffd21a; jmp qword ptr [rsi + 0xf]; 
0x0000000000448a2a: call ptr [rbp + 0x48]; mov dword ptr [rip + 0x64349], 0; ret; 
0x000000000041981f: call ptr [rbp + 0x48]; mov dword ptr [rip + 0x93074], 0; ret; 
0x000000000043a30e: call ptr [rbp + 0x64]; mov eax, dword ptr [rax]; ret; 
0x0000000000416933: call ptr [rbx + 0x41]; pop rsp; mov rax, rcx; pop r13; pop rbp; ret; 
0x00000000004574cc: call ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000041bc76: call ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; ret; 
0x0000000000411cbf: call ptr [rbx + 0x4c]; mov eax, esp; pop r12; pop rbp; ret; 
0x00000000004561a6: call ptr [rbx - 0x75]; add al, byte ptr [rcx + 0x5c]; pop rbp; ret; 
0x0000000000437802: call ptr [rsi - 0x77]; ret 0x485f; 
0x0000000000426272: call qword ptr [rax + 0x18]; 
0x000000000041c17e: call qword ptr [rax + 0x1b445c7]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000439bf4: call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000422aa0: call qword ptr [rax + 0x38]; 
0x00000000004486e2: call qword ptr [rax + 0x401f0f]; ret; 
0x0000000000416163: call qword ptr [rax + 0x41]; 
0x00000000004407e0: call qword ptr [rax + 0x441f0f66]; add byte ptr [rax], al; ret; 
0x000000000041f0f9: call qword ptr [rax + 0x48]; 
0x0000000000405a72: call qword ptr [rax + 0x4c]; 
0x0000000000455d34: call qword ptr [rax + 0x68]; 
0x0000000000440ac0: call qword ptr [rax + 0x6a]; 
0x0000000000474d8b: call qword ptr [rax + 0x74]; 
0x000000000044c71a: call qword ptr [rax + 0xf]; 
0x00000000004159db: call qword ptr [rax - 0x18]; 
0x0000000000415ecd: call qword ptr [rax - 0x75]; 
0x00000000004781af: call qword ptr [rax - 0x76c4017]; jmp qword ptr [rsi + 0x2e]; 
0x000000000041f101: call qword ptr [rax - 1]; 
0x000000000040919d: call qword ptr [rax]; 
0x0000000000454d3a: call qword ptr [rbp + 0x10]; 
0x0000000000402ebf: call qword ptr [rbp + 0x31]; 
0x0000000000401508: call qword ptr [rbp + 0x48]; 
0x000000000040148d: call qword ptr [rbp - 0x60]; 
0x0000000000455bbe: call qword ptr [rbx + 0x18]; 
0x0000000000418b74: call qword ptr [rbx + 0x48]; 
0x0000000000473d8e: call qword ptr [rbx - 0x45]; 
0x000000000042934b: call qword ptr [rbx]; 
0x0000000000457e2c: call qword ptr [rcx + 0x48]; 
0x000000000046fb2d: call qword ptr [rcx]; 
0x0000000000403e41: call qword ptr [rdi + 0x10]; 
0x0000000000423d3a: call qword ptr [rdi + 0x18]; 
0x00000000004503cd: call qword ptr [rdi + 0x38]; 
0x000000000043b1e0: call qword ptr [rdi + 0x4c]; 
0x000000000042730a: call qword ptr [rdi + 0x58]; 
0x0000000000405941: call qword ptr [rdx + 0x48]; 
0x00000000004741b6: call qword ptr [rdx + 0x50]; 
0x00000000004162d9: call qword ptr [rdx - 0x75]; 
0x0000000000471bcc: call qword ptr [rdx]; 
0x0000000000412c98: call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x0000000000424c35: call qword ptr [rsi + 0x18]; 
0x00000000004228d7: call qword ptr [rsi + 0x38]; 
0x000000000042648c: call qword ptr [rsi + 0x60]; 
0x000000000043aefd: call qword ptr [rsi + 0x68]; 
0x0000000000456bf4: call qword ptr [rsi + 0x70]; 
0x000000000041b95d: call qword ptr [rsi - 2]; 
0x0000000000401014: call rax; 
0x0000000000401014: call rax; add rsp, 8; ret; 
0x0000000000411254: call rax; test eax, eax; jne 0x11270; xor eax, eax; pop rbp; ret; 
0x00000000004377fa: call rbx; 
0x0000000000404ece: call rcx; 
0x0000000000439029: call rdi; 
0x000000000043ce28: call rdx; 
0x0000000000439b29: call rsi; 
0x0000000000438a63: call rsp; 
0x0000000000454843: cdq; add eax, 0x458bfffb; in al, dx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000435bda: cdq; mov eax, esi; ret; 
0x000000000043e06e: cdq; nop; xor eax, eax; jmp 0x3e008; nop dword ptr [rax]; call rax; 
0x0000000000459a57: cdq; xor byte ptr [rip - 0x72b7ff00], al; adc eax, 0x3dad; cmove rax, rdx; ret; 
0x0000000000445908: cdqe; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000441ca4: cdqe; mov rsi, qword ptr [rbp - 0xa8]; mov qword ptr [rbp - 0x88], rcx; mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x00000000004428e0: cdqe; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x000000000041f4fb: cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000420435: cdqe; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041fb8d: cdqe; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042052d: cdqe; movzx esi, byte ptr [rbx + rax]; lea rax, [rip + 0x81bc6]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004204b0: cdqe; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205b0: cdqe; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000045ddd4: clc; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000414e5f: clc; add al, byte ptr [rax - 0x78f04000]; lodsd eax, dword ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x000000000043a839: clc; add dl, byte ptr [rcx - 0x77]; ret 0x5441; 
0x0000000000461caa: clc; add dword ptr [rdi + 0x1a], edi; pop rbx; pop r12; pop rbp; ret; 
0x000000000041bde2: clc; add dword ptr [rdi + 0x22], edi; xor eax, eax; pop rbp; ret; 
0x0000000000458c7a: clc; add dword ptr [rdi + 0x32], edi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000412eb3: clc; add dword ptr [rdi], ecx; xchg ebp, eax; ret 0x8341; 
0x00000000004054f2: clc; add dword ptr [rdx + rcx + 0x5d], esi; ret; 
0x0000000000458e78: clc; add dword ptr [rsi + 0xc], esi; jmp 0x58d10; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000043afeb: clc; add ecx, dword ptr [rax + 0x29]; ret 0x8d48; 
0x000000000042b8d7: clc; add rax, rcx; ret; 
0x0000000000435b34: clc; and byte ptr [rdi + 8], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000047a153: clc; and dword ptr [rcx + rcx + 0x5d], esi; ret; 
0x00000000004285fc: clc; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000045f786: clc; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000411338: clc; call 0x28410; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000043af6d: clc; cld; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000462b3a: clc; cli; dec dword ptr [rax - 0x39]; ret; 
0x000000000042c6b1: clc; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000042df35: clc; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x000000000042ae65: clc; ja 0x2aea1; ret 0x127e; 
0x000000000042b11f: clc; ja 0x2b15b; ret 0x167e; 
0x00000000004319d2: clc; ja 0x2e490; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000467d28: clc; ja 0x67d64; ret 0x117e; 
0x0000000000468002: clc; ja 0x6803e; ret 0x137e; 
0x000000000040e8e0: clc; ja 0xe8c0; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000411494: clc; jb 0x114a0; xor eax, eax; ret; 
0x00000000004054d3: clc; jmp 0x12050; nop dword ptr [rax]; ret; 
0x000000000042b138: clc; jmp 0x2b0fc; xor eax, eax; ret; 
0x0000000000468018: clc; jmp 0x67fdc; xor eax, eax; ret; 
0x000000000047814c: clc; jmp qword ptr [rdi - 0x18]; 
0x0000000000476574: clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000471db3: clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000471945: clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000477cbc: clc; jmp qword ptr [rsi - 0x70]; 
0x000000000042757d: clc; jne 0x27570; mov rax, qword ptr [rax]; mov qword ptr [rdx], rax; ret; 
0x0000000000404ec3: clc; jne 0x4ea0; mov rcx, qword ptr [r15]; test rcx, rcx; je 0x4ea0; call rcx; 
0x00000000004651f2: clc; lea rdi, [rdi + 0x10]; jmp 0x65276; shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004118fc: clc; lea rdx, [rbp - 0x1010]; syscall; 
0x00000000004054cf: clc; lea rsi, [rdx - 8]; jmp 0x12050; nop dword ptr [rax]; ret; 
0x0000000000419be6: clc; leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x00000000004504e2: clc; leave; jmp 0x50070; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000454b32: clc; leave; jmp 0x66ca0; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000425d64: clc; leave; jmp rax; 
0x0000000000409064: clc; leave; ret; 
0x0000000000423467: clc; leave; setne al; movzx eax, al; neg eax; ret; 
0x000000000044878a: clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x00000000004571d3: clc; mov eax, 0xffffffff; leave; ret; 
0x0000000000462270: clc; mov eax, 1; leave; ret; 
0x0000000000438795: clc; mov eax, 1; syscall; 
0x0000000000455f06: clc; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000046dde7: clc; mov qword ptr [rax], rdi; leave; ret; 
0x000000000046ddd3: clc; mov qword ptr [rax], rdx; leave; ret; 
0x000000000040e7b5: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040ca10: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000042342f: clc; mov qword ptr [rdx + 0xe0], rcx; leave; ret; 
0x000000000046de6b: clc; mov qword ptr [rdx], rax; leave; ret; 
0x0000000000461e2d: clc; mov r8, rsi; lea rdx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x00000000004571b8: clc; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000042c6cf: clc; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x0000000000419b90: clc; mov rax, rdx; leave; ret; 
0x000000000047451a: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000473e25: clc; mov rcx, r14; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000473c47: clc; mov rcx, rbx; mov edi, 1; call rax; 
0x0000000000404a64: clc; mov rdi, rdx; cmp rax, 9; ja 0x4a40; mov rax, rsi; ret; 
0x0000000000474ddf: clc; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000470ede: clc; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; leave; ret; 
0x00000000004063de: clc; mov rsi, qword ptr [rbp - 0x10]; test rax, rax; je 0x63b4; leave; ret; 
0x000000000040bac4: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042bf15: clc; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c315: clc; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2c2f0; ret; 
0x000000000041042e: clc; movups xmmword ptr [rdx], xmm0; movups xmmword ptr [rdx + 0x10], xmm0; movups xmmword ptr [rdx + 0x20], xmm0; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x0000000000418b16: clc; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x00000000004613f4: clc; or byte ptr [rdi + 0xb], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000404a6a: clc; or dword ptr [rdi - 0x2e], esi; mov rax, rsi; ret; 
0x00000000004192d4: clc; or dword ptr [rsi - 0x18], esi; cmp eax, ecx; je 0x19204; sub eax, ecx; ret; 
0x000000000042bf79: clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000042bed1: clc; or rcx, rsi; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c2d1: clc; or rcx, rsi; sub rax, rcx; jne 0x2c2f0; ret; 
0x0000000000462041: clc; pop rax; pop rdx; leave; ret; 
0x0000000000401bc1: clc; pop rbx; pop rbp; ret; 
0x0000000000409598: clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x000000000045f27a: clc; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000401c05: clc; ret; 
0x00000000004652aa: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000418b0f: clc; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000460369: clc; shr eax, 2; vzeroupper; ret; 
0x0000000000460c8a: clc; shr rax, 2; ret; 
0x0000000000460490: clc; shr rax, 2; vzeroupper; ret; 
0x0000000000419801: clc; std; jbe 0x19810; ret; 
0x0000000000448773: clc; std; je 0x48790; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042c71a: clc; sub eax, ecx; ret; 
0x000000000044edd5: clc; sub rax, qword ptr fs:[0x28]; jne 0x4eeb9; leave; ret; 
0x000000000046634b: clc; sub rax, qword ptr fs:[0x28]; jne 0x663c7; leave; ret; 
0x000000000042bf1c: clc; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c31c: clc; sub rax, rcx; jne 0x2c2f0; ret; 
0x0000000000411919: clc; sub rdx, qword ptr fs:[0x28]; jne 0x1193d; leave; ret; 
0x000000000042977c: clc; sub rdx, qword ptr fs:[0x28]; jne 0x297fa; leave; ret; 
0x00000000004388d2: clc; sub rdx, qword ptr fs:[0x28]; jne 0x3891b; leave; ret; 
0x0000000000462092: clc; sub rdx, qword ptr fs:[0x28]; jne 0x620bc; leave; ret; 
0x00000000004622e4: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6230b; leave; ret; 
0x0000000000462383: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6239c; leave; ret; 
0x0000000000462413: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6242c; leave; ret; 
0x00000000004624ef: clc; sub rdx, qword ptr fs:[0x28]; jne 0x625b7; leave; ret; 
0x000000000046260a: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6263c; leave; ret; 
0x0000000000467c05: clc; sub rdx, qword ptr fs:[0x28]; jne 0x67c40; leave; ret; 
0x0000000000469368: clc; sub rdx, qword ptr fs:[0x28]; jne 0x69376; leave; ret; 
0x000000000046df0b: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6df19; leave; ret; 
0x000000000046dfed: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e05d: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6e06b; leave; ret; 
0x000000000046e155: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1b9: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e602: clc; sub rdx, qword ptr fs:[0x28]; jne 0x6e619; leave; ret; 
0x00000000004705cd: clc; sub rdx, qword ptr fs:[0x28]; jne 0x705e5; leave; ret; 
0x0000000000419afb: clc; syscall; 
0x0000000000410226: clc; vmovdqu64 ymmword ptr [rdx], ymm16; vmovdqu64 ymmword ptr [rdx + 0x20], ymm16; vmovdqu64 ymmword ptr [rdx + 0x40], ymm16; vmovdqu64 ymmword ptr [rdx + 0x60], ymm16; ret; 
0x000000000040ffbe: clc; vmovdqu64 zmmword ptr [rdx], zmm16; vmovdqu64 zmmword ptr [rdx + 0x40], zmm16; vmovdqu64 zmmword ptr [rdx + 0x80], zmm16; vmovdqu64 zmmword ptr [rdx + 0xc0], zmm16; ret; 
0x0000000000410481: clc; vzeroupper; ret; 
0x00000000004388b8: clc; xor eax, eax; cmp esi, 9; je 0x388e0; mov eax, 0x48; syscall; 
0x000000000040b597: clc; xor eax, eax; leave; ret; 
0x0000000000411325: clc; xor eax, eax; syscall; 
0x0000000000410681: clc; xtest; jne 0x1068b; vzeroupper; ret; 
0x000000000042b0fb: clc; xtest; jne 0x2b105; vzeroupper; ret; 
0x000000000042db27: clc; xtest; jne 0x2db31; vzeroupper; ret; 
0x000000000043622b: clc; xtest; jne 0x36235; vzeroupper; ret; 
0x0000000000467fdb: clc; xtest; jne 0x67fe5; vzeroupper; ret; 
0x000000000046b7f1: cld; add dword ptr [rdi], ecx; xchg ebp, eax; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x000000000046e667: cld; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x0000000000404b92: cld; and eax, 0x89484274; ret 0x8949; 
0x00000000004486e1: cld; call qword ptr [rax + 0x401f0f]; ret; 
0x00000000004407df: cld; call qword ptr [rax + 0x441f0f66]; add byte ptr [rax], al; ret; 
0x0000000000447cbe: cld; call qword ptr [rbp + 0x48]; 
0x0000000000468c67: cld; dec dword ptr [rax - 0x39]; ret 0xffd8; 
0x0000000000439f81: cld; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000439c64: cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000440028: cld; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rsi*2 + 0x48], 0x89; ret; 
0x0000000000449381: cld; dec dword ptr [rax - 0x7d]; ret; 
0x000000000043af6e: cld; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000427eb4: cld; dec dword ptr [rdi]; xchg esp, eax; ret 0x2b48; 
0x000000000042b11a: cld; ja 0x2b108; add eax, ebp; clc; ja 0x2b15b; ret 0x167e; 
0x0000000000467ffd: cld; ja 0x67feb; add eax, ebp; clc; ja 0x6803e; ret 0x137e; 
0x000000000044b100: cld; jb 0x4b0ff; jmp qword ptr [rsi + 0x66]; 
0x00000000004384a0: cld; jmp qword ptr [rdi - 0x18]; 
0x000000000045b315: cld; jmp qword ptr [rdx - 0x5f]; 
0x0000000000438a12: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000448714: cld; jmp qword ptr [rsi + 0x2e]; nop dword ptr [rax + rax]; ret; 
0x0000000000448696: cld; jmp qword ptr [rsi + 0x41]; 
0x0000000000439dd0: cld; jmp qword ptr [rsi + 0x48]; 
0x00000000004426b3: cld; jmp qword ptr [rsi + 0x66]; 
0x00000000004375a8: cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000440ebc: cld; jmp qword ptr [rsi - 0x70]; 
0x000000000040e7c5: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000040ca22: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000040ba9e: cld; mov dword ptr [rdi], esi; ret; 
0x000000000040ba98: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000417f77: cld; or byte ptr [rax], al; add byte ptr [rbp + 0x13], dh; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x0000000000417f81: cld; or byte ptr [rax], al; mov rax, rdx; ret; 
0x0000000000418610: cld; or dword ptr [rax], eax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000413ff5: cld; or eax, 1; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000041b47b: cld; or eax, 1; mov byte ptr [rip + 0x9172b], al; ret; 
0x0000000000414057: cld; or eax, 2; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000041b459: cld; or eax, 2; mov byte ptr [rip + 0x9174d], al; ret; 
0x000000000042bece: cld; or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c2ce: cld; or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x2c2f0; ret; 
0x0000000000459c35: cld; ret 0x41c4; 
0x000000000045d86a: cld; ret 0xf66; 
0x000000000040ca28: cld; ret; 
0x000000000040ded1: cld; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000040d656: cld; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000040cb91: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c957: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040ce53: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040fb7f: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000047526a: cld; xchg qword ptr [rdi], rax; test al, 2; jne 0x75278; ret; 
0x0000000000478c2f: cld; xor r10d, r10d; or eax, 2; mov edx, eax; mov eax, r13d; syscall; 
0x00000000004103cb: cli; add al, 0x7d; sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x00000000004101aa: cli; add al, 0x7d; sub eax, dword ptr [rbx + 0x2d7f01fa]; jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x000000000040ff33: cli; add al, 0x7d; xor al, byte ptr [rbx + 0x347f01fa]; jl 0xff40; mov byte ptr [rax], cl; ret; 
0x000000000044d3ac: cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x000000000040fe55: cli; add byte ptr [rax], 0; add byte ptr [rdi + 0x24], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000047a47a: cli; add dh, byte ptr [rbp + riz - 0x77]; ret 0xe283; 
0x0000000000478c06: cli; add dh, byte ptr [rbx + riz - 0x77]; ret 0xe283; 
0x000000000040fc02: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000478969: cli; add dh, byte ptr [rsp - 0x77]; ret 0xe283; 
0x00000000004103d0: cli; add dword ptr [rdi + 0x1c], edi; jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x00000000004101af: cli; add dword ptr [rdi + 0x2d], edi; jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x0000000000454801: cli; add dword ptr [rdi + 0x33], edi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040ff38: cli; add dword ptr [rdi + 0x34], edi; jl 0xff40; mov byte ptr [rax], cl; ret; 
0x000000000040f835: cli; add dword ptr [rdi + 0x37], edi; jl 0xf83e; mov byte ptr [rdi], sil; ret; 
0x000000000040fa75: cli; add dword ptr [rdi + 0x37], edi; jl 0xfa7e; mov byte ptr [rdi], sil; ret; 
0x00000000004591a6: cli; add dword ptr [rdi], ecx; test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x000000000040fc0f: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000040ca40: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000404ab5: cli; add r10, rbp; leave; mov rax, r10; sub rax, rdx; ret; 
0x0000000000410324: cli; and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040e797: cli; and byte ptr [rdi + 0x65], dh; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e1d2: cli; and byte ptr [rdi + 0x7a], dh; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040fbcb: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000428413: cli; and edi, 2; je 0x28420; ret; 
0x0000000000468c66: cli; cld; dec dword ptr [rax - 0x39]; ret 0xffd8; 
0x0000000000438753: cli; cmp byte ptr [rip + 0x6e2fd], 0; je 0x38770; mov eax, 1; syscall; 
0x0000000000417f73: cli; cmp byte ptr [rip + 0x8fc05], 0; jne 0x17f90; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x00000000004112e3: cli; cmp byte ptr [rip + 0x9576d], 0; je 0x11300; xor eax, eax; syscall; 
0x00000000004095b3: cli; cmp byte ptr [rip + 0xa3265], 0; jne 0x95c0; ret; 
0x00000000004284e3: cli; cmp dword ptr [rdi], 1; je 0x284f0; ret; 
0x00000000004260d3: cli; cmp qword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x0000000000401e23: cli; cmp qword ptr [rdi], 0; je 0x1e34; or dword ptr [rip + 0xaacc0], 0x400; ret; 
0x0000000000422be3: cli; cmp qword ptr [rip + 0x833bc], 0; je 0x22bef; ret; 
0x000000000046ce23: cli; cmp rsi, 1; jbe 0x6ce30; jmp 0x6ca10; nop; ret; 
0x0000000000462b3b: cli; dec dword ptr [rax - 0x39]; ret; 
0x000000000046eb2b: cli; dec dword ptr [rax - 0x77]; ret; 
0x0000000000462da4: cli; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x00000000004298c2: cli; dec dword ptr [rdi]; test byte ptr [rsi - 0x7cfffffe], ch; ret 0x4101; 
0x00000000004100d5: cli; ja 0x10100; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000410075: cli; ja 0x10109; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000040d995: cli; ja 0xda40; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d929: cli; ja 0xda4d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040f75c: cli; ja 0xf780; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000040f70c: cli; ja 0xf789; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000004707b0: cli; jae 0x7084c; leave; mov eax, 1; ret; 
0x000000000040fbb8: cli; jb 0xfbca; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042c9c7: cli; jg 0x2c9d1; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000042c9cb: cli; jg 0x2ca16; int1; ret; 
0x000000000042cc27: cli; jg 0x2cc31; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000042cc2b: cli; jg 0x2cc76; int1; ret; 
0x000000000042ce5f: cli; jg 0x2ceaa; int1; ret; 
0x000000000045f0c7: cli; jg 0x5f0d1; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000045f307: cli; jg 0x5f311; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000040baad: cli; jg 0xbab7; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040c23d: cli; jg 0xc247; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040c9fb: cli; jg 0xca05; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000040d14b: cli; jg 0xd155; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040d9f1: cli; jg 0xd9fb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040f841: cli; jg 0xf84b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040fa81: cli; jg 0xfa8b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040fbda: cli; jg 0xfbe4; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000457017: cli; jmp qword ptr [rdi - 0x18]; 
0x00000000004549d1: cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000045905f: cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000458fc0: cli; jmp qword ptr [rsi + 0xf]; 
0x000000000046ca0c: cli; jmp qword ptr [rsi - 0x70]; 
0x0000000000411b13: cli; mov eax, 0x1c; syscall; 
0x0000000000411b13: cli; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x11b24; ret; 
0x0000000000437ab3: cli; mov eax, 0x27; syscall; 
0x0000000000437ab3: cli; mov eax, 0x27; syscall; ret; 
0x0000000000411e73: cli; mov eax, 0x63; syscall; 
0x0000000000411e73: cli; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11e84; ret; 
0x0000000000437a73: cli; mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000437b03: cli; mov eax, 0x8f; syscall; 
0x0000000000437b03: cli; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x37b14; ret; 
0x0000000000437bc3: cli; mov eax, 0x90; syscall; 
0x0000000000437bc3: cli; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x37bd4; ret; 
0x0000000000437b33: cli; mov eax, 0x91; syscall; 
0x0000000000437b33: cli; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x37b44; ret; 
0x0000000000437b63: cli; mov eax, 0x92; syscall; 
0x0000000000437b63: cli; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x37b74; ret; 
0x0000000000437b93: cli; mov eax, 0x93; syscall; 
0x0000000000437b93: cli; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x37ba4; ret; 
0x0000000000411c03: cli; mov eax, 0xa; syscall; 
0x0000000000411c03: cli; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x11c14; ret; 
0x0000000000411c33: cli; mov eax, 0xb; syscall; 
0x0000000000411c33: cli; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x11c44; ret; 
0x0000000000411483: cli; mov eax, 0xc; syscall; 
0x0000000000426193: cli; mov eax, 0xffffffff; ret; 
0x0000000000438973: cli; mov eax, 1; syscall; 
0x0000000000438973: cli; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x38988; ret; 
0x0000000000411383: cli; mov eax, 3; syscall; 
0x0000000000411383: cli; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x11398; ret; 
0x0000000000437bf3: cli; mov eax, 5; syscall; 
0x0000000000437bf3: cli; mov eax, 5; syscall; cmp rax, -0x1000; ja 0x37c08; ret; 
0x00000000004384b3: cli; mov eax, 8; syscall; 
0x00000000004384b3: cli; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x384c8; ret; 
0x00000000004275a3: cli; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000459073: cli; mov eax, dword ptr [rdi]; test al, 2; je 0x59080; xor eax, eax; ret; 
0x0000000000477283: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77290; ret; 
0x00000000004774d3: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x774e0; ret; 
0x0000000000469313: cli; mov eax, dword ptr [rip + 0x435a6]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000474013: cli; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000438933: cli; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000411da3: cli; mov r10, rcx; mov eax, 0x9d; syscall; 
0x0000000000461ce3: cli; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000464d03: cli; mov rax, 0xffffffffffffffb8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000041b793: cli; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000041b773: cli; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000041b753: cli; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000426973: cli; mov rax, 0xffffffffffffffff; ret; 
0x000000000043e313: cli; mov rax, qword ptr [rax + 8]; ret; 
0x000000000043e323: cli; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000427933: cli; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000473f83: cli; mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000473fe3: cli; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000455d03: cli; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x0000000000474023: cli; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000474083: cli; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x0000000000474073: cli; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000474033: cli; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000423e73: cli; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x23e88; movzx eax, byte ptr [rax]; ret; 
0x0000000000404fa3: cli; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x4fb0; ret; 
0x0000000000405193: cli; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x51a0; ret; 
0x0000000000404fe3: cli; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x4ff0; ret; 
0x00000000004286a3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f023], eax; ret; 
0x00000000004284d3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f1ef], eax; ret; 
0x00000000004284c3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f1fb], eax; ret; 
0x00000000004284b3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f207], eax; ret; 
0x00000000004284a3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f213], eax; ret; 
0x00000000004286c3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f3cb], eax; ret; 
0x00000000004286b3: cli; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x7f3e2], rax; ret; 
0x0000000000405243: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f16], 1; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405223: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f36], 1; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051f3: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f66], 1; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004051d3: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f86], 1; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x0000000000405213: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x0000000000405003: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa1191], rax; ret; 
0x0000000000404f93: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa1199], rax; ret; 
0x0000000000404f83: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa11b1], rax; ret; 
0x0000000000447f03: cli; mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x00000000004389e3: cli; mov rax, qword ptr [rip + 0x6e12d]; test rax, rax; je 0x389f1; ret; 
0x000000000043e4c3: cli; mov rax, qword ptr [rip + 0x6e86d]; ret; 
0x000000000043e4b3: cli; mov rax, qword ptr [rip + 0x6e875]; ret; 
0x0000000000427913: cli; mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x0000000000459853: cli; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000427943: cli; mov rax, rdi; ret; 
0x0000000000404995: cli; mov rdi, rax; cmp rdx, rcx; jae 0x4980; mov rax, rsi; ret; 
0x0000000000440903: cli; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000474173: cli; nop; ret; 
0x00000000004349d6: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040fbe4: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000046b7eb: cli; push qword ptr [rcx]; rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x0000000000410002: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040f812: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040ff17: cli; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x0000000000401713: cli; ret; 
0x00000000004587e3: cli; setae al; ret; 
0x0000000000462e24: cli; sub al, 0xf; xchg esp, eax; ret 0xd108; 
0x000000000047a4f7: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000466b53: cli; test byte ptr [rdi], 0x20; je 0x66b60; xor eax, eax; ret; 
0x00000000004257b3: cli; test byte ptr [rdi], 0x80; jne 0x257c0; ret; 
0x0000000000459b23: cli; test byte ptr [rip + 0x52ea3], 0x10; lea rdx, [rip + 0x650e]; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000439acb: cli; test eax, eax; jne 0x39b40; mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000448743: cli; test esi, esi; je 0x48750; cmp esi, 3; je 0x48750; ret; 
0x00000000004395d3: cli; test rdi, rdi; je 0x395de; test rsi, rsi; jne 0x395e0; ret; 
0x00000000004395f3: cli; test rdi, rdi; je 0x395fe; test rsi, rsi; jne 0x39600; ret; 
0x0000000000439613: cli; test rdi, rdi; je 0x39620; jmp 0x38b80; nop; ret; 
0x0000000000411179: cli; test rdx, rdx; je 0x11190; bsf rax, rdx; ret; 
0x000000000041111c: cli; test rdx, rdx; je 0x111a0; bsf rax, rdx; ret; 
0x0000000000435e28: cli; test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000435db8: cli; test rdx, rdx; je 0x35e60; bsf rax, rdx; ret; 
0x0000000000460bc9: cli; test rdx, rdx; je 0x60be0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000460b70: cli; test rdx, rdx; je 0x60bf0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004616f8: cli; test rdx, rdx; je 0x61720; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046168d: cli; test rdx, rdx; je 0x61730; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000423443: cli; test rdx, rdx; jne 0x23450; xor eax, eax; ret; 
0x0000000000435d23: cli; test rsi, rsi; jne 0x35d2d; xor rax, rax; ret; 
0x00000000004615e3: cli; test rsi, rsi; jne 0x615ed; xor rax, rax; ret; 
0x000000000040ce61: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004268d3: cli; xor eax, eax; ret; 
0x0000000000411453: cli; xor eax, eax; syscall; 
0x0000000000411453: cli; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x11468; ret; 
0x0000000000404de3: cli; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000404e03: cli; xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000042b5ca: cmc; add rax, rdi; ret; 
0x000000000042865c: cmc; and eax, 0x39; cmp eax, 8; je 0x28666; ret; 
0x000000000042ddb3: cmc; leave; jne 0x2dd89; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004100aa: cmc; leave; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000040fe2c: cmc; leave; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000412467: cmc; or dword ptr [rax], r8d; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004051b7: cmova eax, edx; mov byte ptr [rip + 0xa7678], al; ret; 
0x0000000000429776: cmova eax, edx; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x297fa; leave; ret; 
0x0000000000437a7d: cmova edx, eax; mov eax, 0xd9; syscall; 
0x0000000000437a7d: cmova edx, eax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x37a90; ret; 
0x0000000000437a7c: cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000437a7c: cmova rdx, rax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x37a90; ret; 
0x0000000000435b7c: cmovae eax, esi; ret; 
0x0000000000435cb9: cmovb eax, ecx; ret; 
0x00000000004280a0: cmovb eax, edx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000435b3b: cmovb eax, esi; ret; 
0x00000000004357c7: cmovb eax, esi; vzeroupper; ret; 
0x00000000004186e3: cmovb esi, eax; add rbx, 0x920; xor edx, edx; mov eax, 0x14e; mov rdi, rbx; syscall; 
0x0000000000435cb8: cmovb rax, rcx; ret; 
0x000000000042809f: cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000419be9: cmovbe edx, eax; mov rax, rdx; ret; 
0x00000000004587dc: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000419be8: cmovbe rdx, rax; mov rax, rdx; ret; 
0x00000000004587db: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004583e4: cmove eax, ecx; ret; 
0x000000000040b63b: cmove eax, edx; ret; 
0x00000000004168ad: cmove ecx, eax; pop r13; pop rbp; mov rax, rcx; ret; 
0x0000000000474dc5: cmove ecx, esi; add rdx, r9; test dil, dil; js 0x74df0; mov qword ptr [r8], rdx; ret; 
0x0000000000478205: cmove ecx, esi; add rdx, r9; test dil, dil; js 0x78230; mov qword ptr [r8], rdx; ret; 
0x00000000004054cd: cmove edi, eax; lea rsi, [rdx - 8]; jmp 0x12050; nop dword ptr [rax]; ret; 
0x0000000000474dc4: cmove r9, rsi; add rdx, r9; test dil, dil; js 0x74df0; mov qword ptr [r8], rdx; ret; 
0x0000000000478204: cmove r9, rsi; add rdx, r9; test dil, dil; js 0x78230; mov qword ptr [r8], rdx; ret; 
0x00000000004583e3: cmove rax, rcx; ret; 
0x000000000040b63a: cmove rax, rdx; ret; 
0x00000000004168ac: cmove rcx, rax; pop r13; pop rbp; mov rax, rcx; ret; 
0x00000000004054cc: cmove rdi, rax; lea rsi, [rdx - 8]; jmp 0x12050; nop dword ptr [rax]; ret; 
0x0000000000425bab: cmovg eax, ecx; test rdx, rdx; jne 0x25ba0; ret; 
0x000000000045572b: cmovg eax, ecx; test rdx, rdx; jne 0x55720; ret; 
0x0000000000425baa: cmovg rax, rcx; test rdx, rdx; jne 0x25ba0; ret; 
0x000000000045572a: cmovg rax, rcx; test rdx, rdx; jne 0x55720; ret; 
0x0000000000461842: cmovne eax, edx; pop rbp; ret; 
0x000000000040af1a: cmovne eax, edx; ret; 
0x000000000042a040: cmovne edx, eax; mov rax, rdx; ret; 
0x0000000000458a29: cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000461841: cmovne rax, rdx; pop rbp; ret; 
0x000000000040af19: cmovne rax, rdx; ret; 
0x000000000042a03f: cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000473396: cmovs eax, dword ptr [rbx + 0x20e9f0e0]; idiv edi; call qword ptr [rbp + 0x48]; 
0x0000000000436647: cmovs eax, dword ptr [rbx - 0x43adf11]; xchg ebx, eax; ret 0xe2c4; 
0x0000000000440910: cmovs eax, edx; ret; 
0x0000000000411915: cmovs ecx, dword ptr [rbx + 0x4864f855]; sub edx, dword ptr [0x28]; jne 0x1193d; leave; ret; 
0x000000000040ca09: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004073eb: cmovs ecx, dword ptr [rbx - 0x173ef7bf]; add al, 0x39; ret 0x850f; 
0x0000000000426348: cmovs ecx, dword ptr [rbx - 0x74b7bfbd]; pop rbp; clc; leave; jmp rax; 
0x0000000000401d12: cmovs esp, dword ptr [rbx + 4]; mov ecx, 0x3ec80148; jmp rax; 
0x000000000040bcaa: cmp ah, al; vzeroupper; ret; 
0x00000000004640c2: cmp ah, bl; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000045ffba: cmp ah, byte ptr [rbx - 0x25]; cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000045ddce: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045dafb: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e4fb: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e38b: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045ed9b: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045eabb: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x000000000045dcc0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045e6c0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045df90: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045e3e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045edf0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000467a36: cmp ah, byte ptr [rbx]; adc dh, byte ptr [rbx - 0xc]; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000439c5f: cmp ah, byte ptr [rdi - 0x18]; sub bh, bl; cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000042c717: cmp al, 0x17; or eax, edi; sub eax, ecx; ret; 
0x0000000000419bb0: cmp al, 0x18; mov eax, esi; syscall; 
0x000000000044f172: cmp al, 0x24; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x0000000000473f6f: cmp al, 0x32; or byte ptr [rdi], cl; test dword ptr [rcx + 0x48fff8d5], edx; mov eax, dword ptr [rax]; ret; 
0x000000000046485c: cmp al, 0x81; add eax, 0x3484b74; push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x000000000040e880: cmp al, 0xa; add byte ptr [rax], al; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x00000000004046df: cmp al, 0xa; add byte ptr [rbx - 0x70f0fe07], al; test dword ptr [rcx], eax; add byte ptr [rax], al; mov edi, r13d; call rax; 
0x000000000044ed26: cmp al, 0xc9; mov eax, edx; ret; 
0x000000000044d3f9: cmp al, 0xfb; dec dword ptr [rax + 0x29]; ret; 
0x000000000043af6c: cmp al, 0xfc; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000458c76: cmp al, 5; add byte ptr [rbx + 0x327f01f8], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000473fc2: cmp al, 8; jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x00000000004192d3: cmp al, 9; jbe 0x192c0; cmp eax, ecx; je 0x19204; sub eax, ecx; ret; 
0x000000000042b45d: cmp al, cl; jae 0x2b467; xor eax, eax; ret; 
0x000000000042b6dd: cmp al, cl; jae 0x2b6e7; xor eax, eax; ret; 
0x0000000000468371: cmp al, cl; jae 0x6837b; xor eax, eax; ret; 
0x00000000004685f1: cmp al, cl; jae 0x685fb; xor eax, eax; ret; 
0x000000000042b475: cmp al, cl; jb 0x2b461; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b6f5: cmp al, cl; jb 0x2b6e1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000468389: cmp al, cl; jb 0x68375; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000468609: cmp al, cl; jb 0x685f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x000000000042b3f4: cmp al, cl; jbe 0x2b3bd; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b674: cmp al, cl; jbe 0x2b63d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468306: cmp al, cl; jbe 0x682c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468586: cmp al, cl; jbe 0x68540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x000000000042baf6: cmp al, dh; ret; 
0x000000000042b403: cmp al, dl; jb 0x2b40d; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000042b683: cmp al, dl; jb 0x2b68d; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000468313: cmp al, dl; jb 0x6831d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000468593: cmp al, dl; jb 0x6859d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000042baf5: cmp al, r14b; ret; 
0x000000000044e991: cmp bh, ah; jmp qword ptr [rsi + 0x2e]; 
0x000000000040d3ce: cmp bh, bh; ret; 
0x000000000042bb37: cmp byte ptr [rax + 1], cl; clc; ret; 
0x00000000004189df: cmp byte ptr [rax - 0x77], cl; jo 0x18a24; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000042bb26: cmp byte ptr [rax], ah; ret; 
0x00000000004260d7: cmp byte ptr [rax], al; je 0x260e0; ret; 
0x0000000000470e09: cmp byte ptr [rax], al; je 0x70e0f; leave; ret; 
0x000000000045ff18: cmp byte ptr [rax], al; ret 0xf66; 
0x000000000042df94: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x000000000042bb16: cmp byte ptr [rax], dl; ret; 
0x000000000042bb15: cmp byte ptr [rax], r10b; ret; 
0x000000000042bb25: cmp byte ptr [rax], r12b; ret; 
0x000000000042df93: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042567d: cmp byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x000000000042411b: cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x0000000000402954: cmp byte ptr [rcx - 0x8befff6], ah; ret 0x800; 
0x0000000000426a84: cmp byte ptr [rcx], 0xa; je 0x26a98; cmp rsi, rcx; jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x000000000042afc6: cmp byte ptr [rcx], 0xc2; jbe 0x2afd5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000467ea6: cmp byte ptr [rcx], 0xc2; jbe 0x67eb5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000410877: cmp byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000473f6e: cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x0000000000438754: cmp byte ptr [rip + 0x6e2fd], 0; je 0x38770; mov eax, 1; syscall; 
0x0000000000438652: cmp byte ptr [rip + 0x6e3ff], 0; je 0x386ac; mov eax, 0x101; syscall; 
0x0000000000417f74: cmp byte ptr [rip + 0x8fc05], 0; jne 0x17f90; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x00000000004112e4: cmp byte ptr [rip + 0x9576d], 0; je 0x11300; xor eax, eax; syscall; 
0x00000000004095b4: cmp byte ptr [rip + 0xa3265], 0; jne 0x95c0; ret; 
0x0000000000438651: cmp byte ptr ss:[rip + 0x6e3ff], 0; je 0x386ac; mov eax, 0x101; syscall; 
0x000000000045ffbd: cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000436b04: cmp cl, byte ptr [rax + rdx + 2]; jne 0x36b20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36b00; ret; 
0x0000000000436bb4: cmp cl, byte ptr [rax + rdx + 2]; jne 0x36bd0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36bb0; ret; 
0x00000000004642f5: cmp cl, byte ptr [rax - 0x75]; or byte ptr [r11 + 0x54891114], cl; ret; 
0x0000000000414406: cmp cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x00000000004089a1: cmp cl, byte ptr [rax - 0x7d]; ret 0x8504; 
0x0000000000418695: cmp cl, byte ptr [rax - 0x7f]; ret; 
0x00000000004186bc: cmp cl, cl; or byte ptr [rax], al; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000411408: cmp cl, cl; ret; 
0x0000000000466775: cmp cx, 0x7fff; jne 0x6675a; mov eax, 1; pop rbp; ret; 
0x0000000000474279: cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000040e3be: cmp dh, al; ret; 
0x000000000042a127: cmp dh, bh; dec dword ptr [rax - 0x73]; add eax, 0xfffe37df; cmovne rax, rdx; ret; 
0x000000000042df37: cmp dh, byte ptr [rax]; jne 0x2df3c; ret; 
0x000000000042d8e4: cmp dh, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000042da61: cmp dh, byte ptr [rdi + rax]; jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x000000000042dd80: cmp dh, byte ptr [rdi + rax]; jne 0x2dd89; add rax, rdi; ret; 
0x000000000042dd94: cmp dh, byte ptr [rdi + rcx + 0x20]; jne 0x2dd89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042deee: cmp dh, byte ptr [rdi + rdx + 0x40]; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042dad0: cmp dh, byte ptr [rdx + rax]; jne 0x2da99; add rax, rdx; vzeroupper; ret; 
0x000000000040fbca: cmp dl, 0x20; jb 0xfbd9; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000040fbb7: cmp dl, 0x40; jb 0xfbca; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040ca3f: cmp dl, 1; jb 0xca48; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000040fc0e: cmp dl, 1; jb 0xfc15; mov byte ptr [rdi], cl; ret; 
0x000000000040fc01: cmp dl, 2; jb 0xfc0e; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000040fbf6: cmp dl, 4; jb 0xfc01; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000040fbe3: cmp dl, 8; jb 0xfbf2; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000404d35: cmp dl, byte ptr [rax - 0x452dcebb]; add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000423353: cmp dword ptr [r13], 0x1d; je 0x23336; jmp 0x2333e; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000455e5c: cmp dword ptr [rax + 0x18], edx; jae 0x55e80; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000405c03: cmp dword ptr [rax + 0x20], 0; je 0x5c18; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000455d0c: cmp dword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x0000000000408512: cmp dword ptr [rax + 0x39], ecx; ret 0x840f; 
0x0000000000412455: cmp dword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000041b521: cmp dword ptr [rax + 8], 0xa4756576; or byte ptr [rip + 0x91681], 0xc; ret; 
0x000000000041b491: cmp dword ptr [rax + 8], 0xa4756576; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000042a1c3: cmp dword ptr [rax + rax], ebp; add bh, dh; ret 0; 
0x0000000000444547: cmp dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x000000000041b438: cmp dword ptr [rax], edx; je 0x1b490; ret; 
0x000000000041b4c8: cmp dword ptr [rax], edx; je 0x1b520; ret; 
0x0000000000409196: cmp dword ptr [rbp + 1], 0; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000401483: cmp dword ptr [rbp - 0x50], 0; je 0x149f; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000478a71: cmp dword ptr [rbp - 0xd], esi; and edx, 3; cmp edx, 2; je 0x78a80; ret; 
0x000000000046b7ef: cmp dword ptr [rbp - 4], 1; setne al; mov dword ptr [rip + 0x41134], eax; leave; ret; 
0x0000000000423354: cmp dword ptr [rbp], 0x1d; je 0x23336; jmp 0x2333e; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000042865f: cmp dword ptr [rbx + 0x17408f8], eax; ret; 
0x0000000000466d36: cmp dword ptr [rbx + 8], eax; je 0x66d7b; mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000404ec1: cmp dword ptr [rbx - 8], eax; jne 0x4ea0; mov rcx, qword ptr [r15]; test rcx, rcx; je 0x4ea0; call rcx; 
0x0000000000470e07: cmp dword ptr [rcx + 0x38], 0; je 0x70e0f; leave; ret; 
0x0000000000456444: cmp dword ptr [rcx], 0xa; je 0x56458; cmp rsi, rcx; jb 0x56440; lea eax, [rdx + rdi]; ret; 
0x000000000042cb35: cmp dword ptr [rcx], eax; vzeroupper; ret; 
0x000000000042cd93: cmp dword ptr [rcx], eax; xtest; jne 0x2cd9e; vzeroupper; ret; 
0x000000000042cb52: cmp dword ptr [rcx], esp; vzeroupper; ret; 
0x000000000042cb51: cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x000000000042cb34: cmp dword ptr [rcx], r8d; vzeroupper; ret; 
0x000000000042cd92: cmp dword ptr [rcx], r8d; xtest; jne 0x2cd9e; vzeroupper; ret; 
0x000000000046f911: cmp dword ptr [rdi + 0x28], edi; je 0x6f920; ret; 
0x00000000004260d5: cmp dword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x00000000004296a2: cmp dword ptr [rdi + 8], eax; je 0x296ae; leave; mov eax, 1; ret; 
0x0000000000429235: cmp dword ptr [rdi + 8], eax; jne 0x29207; sub dword ptr [rdi + 4], 1; je 0x292e9; xor eax, eax; ret; 
0x0000000000401e25: cmp dword ptr [rdi], 0; je 0x1e34; or dword ptr [rip + 0xaacc0], 0x400; ret; 
0x00000000004284e4: cmp dword ptr [rdi], 1; je 0x284f0; ret; 
0x0000000000453ddf: cmp dword ptr [rdi], ecx; test cl, ch; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000449740: cmp dword ptr [rdi], esi; je 0x49748; ret; 
0x00000000004583e1: cmp dword ptr [rdx + 0x48], ecx; cmove eax, ecx; ret; 
0x0000000000435c96: cmp dword ptr [rdx - 0x4e], esp; and byte ptr [rsi], ah; ret; 
0x000000000040b703: cmp dword ptr [rdx], ecx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000426a85: cmp dword ptr [rdx], ecx; je 0x26a98; cmp rsi, rcx; jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x0000000000456445: cmp dword ptr [rdx], ecx; je 0x56458; cmp rsi, rcx; jb 0x56440; lea eax, [rdx + rdi]; ret; 
0x00000000004486d5: cmp dword ptr [rip + 0x6469c], 0; je 0x486e8; jmp 0x9e90; nop; nop dword ptr [rax]; ret; 
0x0000000000422be5: cmp dword ptr [rip + 0x833bc], 0; je 0x22bef; ret; 
0x00000000004124c9: cmp dword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x00000000004061d7: cmp dword ptr [rsi + 0xa], esp; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041be0b: cmp dword ptr [rsi], ecx; or dword ptr [rax], eax; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x0000000000423352: cmp dword ptr fs:[r13], 0x1d; je 0x23336; jmp 0x2333e; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000418276: cmp eax, -1; je 0x182ba; ret; 
0x0000000000409597: cmp eax, -1; je 0x95a0; pop rbp; ret; 
0x0000000000419800: cmp eax, -3; jbe 0x19810; ret; 
0x0000000000448772: cmp eax, -3; je 0x48790; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000435b33: cmp eax, 0x20; ja 0x35b40; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004291c2: cmp eax, 0x21; je 0x29358; mov eax, 0x16; ret; 
0x000000000047a152: cmp eax, 0x21; je 0x7a160; pop rbp; ret; 
0x000000000044d2cc: cmp eax, 0x2948fffb; ret; 
0x0000000000454b5f: cmp eax, 0x2cc1c; jae 0x54b71; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x00000000004291b9: cmp eax, 0x31; je 0x29480; cmp eax, 0x21; je 0x29358; mov eax, 0x16; ret; 
0x0000000000404fa8: cmp eax, 0x408; jbe 0x4fb0; ret; 
0x0000000000467c9f: cmp eax, 0x48000000; cmovne eax, edx; ret; 
0x000000000046029f: cmp eax, 0x48000013; lea edx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x00000000004692ff: cmp eax, 0x69e80001; mov al, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x0000000000438755: cmp eax, 0x6e2fd; add byte ptr [rbx + rdx - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000438653: cmp eax, 0x6e3ff; add byte ptr [rcx + rdx*2 - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000404511: cmp eax, 0x76f92; call 0x4370; xor eax, eax; ret; 
0x0000000000404dc5: cmp eax, 0x78816; mov rbp, rsp; call 0x4d00; nop word ptr [rax + rax]; ret; 
0x0000000000404d60: cmp eax, 0x7887b; mov rbp, rsp; call 0x4d00; nop dword ptr [rax]; ret; 
0x000000000041fc76: cmp eax, 0x82885; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041fbf6: cmp eax, 0x82905; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f576: cmp eax, 0x82f85; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f4f6: cmp eax, 0x83005; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000411248: cmp eax, 0x85480009; sal byte ptr [rax + rdx + 0x55], 0x48; mov ebp, esp; call rax; 
0x0000000000416abc: cmp eax, 0x8948ffff; ret; 
0x000000000042a1f2: cmp eax, 0x8d480000; adc eax, 0x3f74; cmovne rax, rdx; ret; 
0x0000000000417f75: cmp eax, 0x8fc05; add byte ptr [rbp + 0x13], dh; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x000000000041be0a: cmp eax, 0x90e39; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x0000000000425d56: cmp eax, 0x92f; ja 0x25d70; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426342: cmp eax, 0x92f; ja 0x26358; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000455bae: cmp eax, 0x92f; ja 0x55cd0; mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x00000000004124ca: cmp eax, 0x9a388; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x9a377]; ret; 
0x00000000004124c3: cmp eax, 0x9a3a8; cmp qword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x0000000000405198: cmp eax, 0xa0; jbe 0x51a0; ret; 
0x00000000004095b5: cmp eax, 0xa3265; add byte ptr [rbp + 3], dh; ret; 
0x0000000000401676: cmp eax, 0xabaf5; call 0x1610; mov byte ptr [rip + 0xabae1], 1; pop rbp; ret; 
0x0000000000404fe8: cmp eax, 0xffff; jbe 0x4ff0; ret; 
0x00000000004112f2: cmp eax, 0xfffff000; ja 0x11348; ret; 
0x000000000041138c: cmp eax, 0xfffff000; ja 0x11398; ret; 
0x0000000000411459: cmp eax, 0xfffff000; ja 0x11468; ret; 
0x0000000000411b6d: cmp eax, 0xfffff000; ja 0x11be0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000437a88: cmp eax, 0xfffff000; ja 0x37a90; ret; 
0x0000000000437bfc: cmp eax, 0xfffff000; ja 0x37c08; ret; 
0x00000000004384bc: cmp eax, 0xfffff000; ja 0x384c8; ret; 
0x0000000000438765: cmp eax, 0xfffff000; ja 0x387c0; ret; 
0x000000000043893f: cmp eax, 0xfffff000; ja 0x38950; ret; 
0x000000000043897c: cmp eax, 0xfffff000; ja 0x38988; ret; 
0x00000000004389b5: cmp eax, 0xfffff000; ja 0x389c0; ret; 
0x0000000000458eef: cmp eax, 0xfffff000; ja 0x58f00; ret; 
0x0000000000461cee: cmp eax, 0xfffff000; ja 0x61d00; xor eax, eax; ret; 
0x0000000000411b1c: cmp eax, 0xfffff001; jae 0x11b24; ret; 
0x0000000000411c0c: cmp eax, 0xfffff001; jae 0x11c14; ret; 
0x0000000000411c3c: cmp eax, 0xfffff001; jae 0x11c44; ret; 
0x0000000000411daf: cmp eax, 0xfffff001; jae 0x11db7; ret; 
0x0000000000411e7c: cmp eax, 0xfffff001; jae 0x11e84; ret; 
0x0000000000437b0c: cmp eax, 0xfffff001; jae 0x37b14; ret; 
0x0000000000437b3c: cmp eax, 0xfffff001; jae 0x37b44; ret; 
0x0000000000437b6c: cmp eax, 0xfffff001; jae 0x37b74; ret; 
0x0000000000437b9c: cmp eax, 0xfffff001; jae 0x37ba4; ret; 
0x0000000000437bcc: cmp eax, 0xfffff001; jae 0x37bd4; ret; 
0x0000000000458e77: cmp eax, 1; jbe 0x58e88; jmp 0x58d10; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004054f1: cmp eax, 1; je 0x5500; pop rbp; ret; 
0x000000000041bde1: cmp eax, 1; jg 0x1be08; xor eax, eax; pop rbp; ret; 
0x0000000000458c79: cmp eax, 1; jg 0x58cb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000461ca9: cmp eax, 1; jg 0x61cc8; pop rbx; pop r12; pop rbp; ret; 
0x0000000000478a10: cmp eax, 3; je 0x78a20; ret; 
0x0000000000478ad0: cmp eax, 3; je 0x78ae0; ret; 
0x000000000042846f: cmp eax, 4; je 0x28451; ret; 
0x00000000004051af: cmp eax, 7; mov eax, 0x10; cmova eax, edx; mov byte ptr [rip + 0xa7678], al; ret; 
0x00000000004613f3: cmp eax, 8; ja 0x61403; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000428660: cmp eax, 8; je 0x28666; ret; 
0x0000000000404a69: cmp eax, 9; ja 0x4a40; mov rax, rsi; ret; 
0x000000000042a234: cmp eax, dword ptr [rax]; add bh, dh; ret 0; 
0x00000000004182b4: cmp eax, dword ptr [rcx + rsi + 0x10]; jae 0x1826d; xor eax, eax; ret; 
0x0000000000423e79: cmp eax, dword ptr [rdi + 0x10]; jae 0x23e88; movzx eax, byte ptr [rax]; ret; 
0x0000000000425ba8: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x25ba0; ret; 
0x0000000000455728: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x55720; ret; 
0x00000000004192d8: cmp eax, ecx; je 0x19204; sub eax, ecx; ret; 
0x000000000042c6b3: cmp eax, ecx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000040e8df: cmp eax, edi; ja 0xe8c0; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000411493: cmp eax, edi; jb 0x114a0; xor eax, eax; ret; 
0x000000000042757c: cmp eax, edi; jne 0x27570; mov rax, qword ptr [rax]; mov qword ptr [rdx], rax; ret; 
0x000000000042809d: cmp eax, edx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000418a0d: cmp eax, edx; jae 0x18982; ret; 
0x000000000042805b: cmp eax, edx; jae 0x28080; movzx eax, byte ptr [rax]; ret; 
0x000000000041897a: cmp eax, edx; jb 0x18a15; cmp rsi, r8; jae 0x189d8; ret; 
0x0000000000450096: cmp eax, edx; jne 0x500bb; test ecx, ecx; jne 0x500a0; ret; 
0x0000000000466cca: cmp eax, edx; jne 0x66cf3; test ecx, ecx; jne 0x66cd8; ret; 
0x0000000000409773: cmp eax, esi; jne 0x9740; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x000000000041e31b: cmp ebp, 0x8948ffff; ret 0x8948; 
0x0000000000424c9a: cmp ebp, eax; jb 0x24c90; jmp 0x24ba6; nop dword ptr [rax + rax]; ret; 
0x0000000000466776: cmp ecx, 0xde757fff; mov eax, 1; pop rbp; ret; 
0x00000000004047ea: cmp ecx, 1; jg 0x4850; call rax; 
0x00000000004046e2: cmp ecx, 1; jg 0x4870; mov edi, r13d; call rax; 
0x0000000000404791: cmp ecx, 1; jg 0x4898; mov rdi, r8; mov esi, r13d; call rax; 
0x000000000046c776: cmp ecx, dword ptr [rax + 0x28]; jae 0x6c760; mov eax, 1; ret; 
0x000000000045e391: cmp ecx, dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000466918: cmp ecx, dword ptr [rdi + 0x30]; jne 0x66942; mov qword ptr [rax + 8], rdx; pop rbp; ret; 
0x0000000000423ea4: cmp ecx, dword ptr [rdi]; mov dh, 0; pop rbx; pop r12; pop rbp; ret; 
0x00000000004047e7: cmp ecx, dword ptr [rdx]; add byte ptr [rbx + 0x617f01f9], al; call rax; 
0x0000000000435cb6: cmp ecx, eax; cmovb rax, rcx; ret; 
0x0000000000405152: cmp ecx, eax; je 0x515b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000464d54: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000461dbf: cmp ecx, ecx; ret; 
0x000000000046d61f: cmp ecx, edx; jae 0x6d587; test rax, rax; jne 0x6d60a; ret; 
0x00000000004167e6: cmp ecx, edx; jne 0x167c0; mov eax, dword ptr [rcx]; ret; 
0x00000000004291fb: cmp ecx, edx; jne 0x29207; test eax, eax; jne 0x294d0; mov eax, 1; ret; 
0x0000000000474c17: cmp ecx, edx; sbb eax, eax; ret; 
0x000000000045ff38: cmp ecx, esi; jae 0x5ff88; movsxd rax, ecx; ret; 
0x00000000004357ae: cmp ecx, esi; jb 0x355a4; mov rax, r8; vzeroupper; ret; 
0x0000000000460fe1: cmp ecx, esi; jb 0x60d64; mov rax, r8; vzeroupper; ret; 
0x0000000000454b5e: cmp edi, dword ptr [rip + 0x2cc1c]; jae 0x54b71; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000474f31: cmp edi, eax; jne 0x74f20; ret; 
0x000000000044d4a9: cmp edi, ebx; dec dword ptr [rax + 0x29]; ret; 
0x000000000040d8db: cmp edi, edx; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043be65: cmp edi, esi; jne 0x3be70; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044e863: cmp edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000410323: cmp edx, 0x20; ja 0x10340; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040e1d1: cmp edx, 0x20; ja 0xe250; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e796: cmp edx, 0x20; ja 0xe800; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004100d4: cmp edx, 0x40; ja 0x10100; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000410074: cmp edx, 0x40; ja 0x10109; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000040d994: cmp edx, 0x40; ja 0xda40; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d928: cmp edx, 0x40; ja 0xda4d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040f75b: cmp edx, 0x40; ja 0xf780; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000040f70b: cmp edx, 0x40; ja 0xf789; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000429520: cmp edx, 0x7fffffff; jne 0x2926a; sub dword ptr [rdi + 4], 1; je 0x294de; mov eax, 0x83; ret; 
0x000000000040d0d4: cmp edx, 0x80; ja 0xd1c0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040fe54: cmp edx, 0x80; ja 0xfe80; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040fdf4: cmp edx, 0x80; ja 0xfe89; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000042625f: cmp edx, 0x92f; ja 0x262d0; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000456aa3: cmp edx, 0x92f; ja 0x56fc8; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000004283c3: cmp edx, 0xa; je 0x283d8; mov eax, esi; ret; 
0x00000000004101ae: cmp edx, 1; jg 0x101e0; jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x00000000004103cf: cmp edx, 1; jg 0x103f0; jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x0000000000454800: cmp edx, 1; jg 0x54838; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040f834: cmp edx, 1; jg 0xf870; jl 0xf83e; mov byte ptr [rdi], sil; ret; 
0x000000000040fa74: cmp edx, 1; jg 0xfab0; jl 0xfa7e; mov byte ptr [rdi], sil; ret; 
0x000000000040ff37: cmp edx, 1; jg 0xff70; jl 0xff40; mov byte ptr [rax], cl; ret; 
0x0000000000478a77: cmp edx, 2; je 0x78a80; ret; 
0x000000000040e3cd: cmp edx, dword ptr [rip + 0x99745]; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000437a7a: cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000435d06: cmp edx, eax; ja 0x35b40; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004615cc: cmp edx, eax; ja 0x61403; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x000000000042af7f: cmp edx, eax; jbe 0x2afd5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042afc7: cmp edx, eax; jbe 0x2afd5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042b5c7: cmp edx, eax; jbe 0x2b5c0; add rax, rdi; ret; 
0x000000000042b847: cmp edx, eax; jbe 0x2b840; add rax, rdi; ret; 
0x0000000000467e52: cmp edx, eax; jbe 0x67eb5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000467ea7: cmp edx, eax; jbe 0x67eb5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004682b5: cmp edx, eax; jbe 0x682c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004684e1: cmp edx, eax; jbe 0x684d6; lea rax, [rdi + rax*4]; ret; 
0x0000000000468535: cmp edx, eax; jbe 0x68540; lea rax, [rdi + rax*4]; ret; 
0x0000000000468762: cmp edx, eax; jbe 0x68757; lea rax, [rdi + rax*4]; ret; 
0x000000000042ae67: cmp edx, eax; jle 0x2ae7d; add rax, rdi; ret; 
0x000000000042b121: cmp edx, eax; jle 0x2b13b; add rax, rdi; ret; 
0x0000000000467d2a: cmp edx, eax; jle 0x67d3f; add rax, rdi; ret; 
0x0000000000468004: cmp edx, eax; jle 0x6801b; add rax, rdi; ret; 
0x000000000046ca9c: cmp edx, ebx; jb 0x6ca20; ret; 
0x0000000000431c4b: cmp edx, ecx; ja 0x31c22; xor eax, eax; vzeroupper; ret; 
0x0000000000431dea: cmp edx, ecx; ja 0x31dc7; nop; xor eax, eax; vzeroupper; ret; 
0x000000000043293b: cmp edx, ecx; ja 0x32917; xor eax, eax; ret; 
0x0000000000432adc: cmp edx, ecx; ja 0x32ac1; xor eax, eax; ret; 
0x000000000040499a: cmp edx, ecx; jae 0x4980; mov rax, rsi; ret; 
0x0000000000474c12: cmp edx, ecx; jb 0x74c1b; cmp rcx, rdx; sbb eax, eax; ret; 
0x00000000004326b9: cmp edx, ecx; jbe 0x32699; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004326d9: cmp edx, ecx; jbe 0x32699; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x00000000004707af: cmp edx, edi; jae 0x7084c; leave; mov eax, 1; ret; 
0x00000000004587e2: cmp edx, edi; setae al; ret; 
0x000000000042b3b0: cmp edx, esi; jbe 0x2b3bd; test eax, eax; je 0x2b3c0; lea rax, [rdi + rsi]; ret; 
0x000000000042b630: cmp edx, esi; jbe 0x2b63d; test eax, eax; je 0x2b640; lea rax, [rdi + rsi]; ret; 
0x000000000045499f: cmp edx, esi; jne 0x54980; ret; 
0x0000000000416676: cmp esi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000428339: cmp esi, -1; jne 0x28348; jmp 0x27710; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000046ce25: cmp esi, 1; jbe 0x6ce30; jmp 0x6ca10; nop; ret; 
0x0000000000448748: cmp esi, 3; je 0x48750; ret; 
0x0000000000438826: cmp esi, 9; je 0x38850; mov eax, 0x48; syscall; 
0x00000000004388bb: cmp esi, 9; je 0x388e0; mov eax, 0x48; syscall; 
0x0000000000461c82: cmp esi, dword ptr [rcx]; sal byte ptr [rcx], cl; imul al; and al, 0x68; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000435b39: cmp esi, eax; cmovb eax, esi; ret; 
0x00000000004357c5: cmp esi, eax; cmovb eax, esi; vzeroupper; ret; 
0x0000000000418983: cmp esi, eax; jae 0x189d8; ret; 
0x0000000000437af3: cmp esi, eax; jne 0x37ad0; mov eax, edi; ret; 
0x0000000000426a8a: cmp esi, ecx; jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x000000000045644a: cmp esi, ecx; jb 0x56440; lea eax, [rdx + rdi]; ret; 
0x0000000000435d11: cmp esi, edx; cmovb eax, esi; ret; 
0x0000000000461554: cmp esp, dword ptr [rdx - 0x4e]; and byte ptr [rdi], ah; ret; 
0x0000000000470e06: cmp qword ptr [r9 + 0x38], 0; je 0x70e0f; leave; ret; 
0x0000000000455e5b: cmp qword ptr [rax + 0x18], rdx; jae 0x55e80; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000405c02: cmp qword ptr [rax + 0x20], 0; je 0x5c18; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000455d0b: cmp qword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x0000000000412454: cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000041b437: cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4c7: cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x0000000000466d35: cmp qword ptr [rbx + 8], rax; je 0x66d7b; mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000404ec0: cmp qword ptr [rbx - 8], rax; jne 0x4ea0; mov rcx, qword ptr [r15]; test rcx, rcx; je 0x4ea0; call rcx; 
0x000000000046f910: cmp qword ptr [rdi + 0x28], rdi; je 0x6f920; ret; 
0x00000000004260d4: cmp qword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x0000000000401e24: cmp qword ptr [rdi], 0; je 0x1e34; or dword ptr [rip + 0xaacc0], 0x400; ret; 
0x000000000044973f: cmp qword ptr [rdi], rsi; je 0x49748; ret; 
0x00000000004583e0: cmp qword ptr [rdx + 0x48], r9; cmove eax, ecx; ret; 
0x00000000004486d4: cmp qword ptr [rip + 0x6469c], 0; je 0x486e8; jmp 0x9e90; nop; nop dword ptr [rax]; ret; 
0x0000000000422be4: cmp qword ptr [rip + 0x833bc], 0; je 0x22bef; ret; 
0x00000000004124c8: cmp qword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x0000000000405c01: cmp qword ptr fs:[rax + 0x20], 0; je 0x5c18; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x000000000044973e: cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x000000000046ca9b: cmp r10, r11; jb 0x6ca20; ret; 
0x000000000040bca9: cmp r12b, al; vzeroupper; ret; 
0x0000000000424c99: cmp r13, rax; jb 0x24c90; jmp 0x24ba6; nop dword ptr [rax + rax]; ret; 
0x000000000040e3bd: cmp r14b, al; ret; 
0x000000000040d3cd: cmp r15b, dil; ret; 
0x00000000004182b3: cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x1826d; xor eax, eax; ret; 
0x0000000000418a0c: cmp r8, r10; jae 0x18982; ret; 
0x0000000000418979: cmp r8, r10; jb 0x18a15; cmp rsi, r8; jae 0x189d8; ret; 
0x000000000040e8de: cmp r8, rdi; ja 0xe8c0; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x00000000004192d2: cmp r8b, 9; jbe 0x192c0; cmp eax, ecx; je 0x19204; sub eax, ecx; ret; 
0x0000000000405151: cmp r9, rax; je 0x515b; pop rbx; pop r12; pop rbp; ret; 
0x00000000004112f1: cmp rax, -0x1000; ja 0x11348; ret; 
0x000000000041138b: cmp rax, -0x1000; ja 0x11398; ret; 
0x0000000000411458: cmp rax, -0x1000; ja 0x11468; ret; 
0x0000000000411b6c: cmp rax, -0x1000; ja 0x11be0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000437a87: cmp rax, -0x1000; ja 0x37a90; ret; 
0x0000000000437bfb: cmp rax, -0x1000; ja 0x37c08; ret; 
0x00000000004384bb: cmp rax, -0x1000; ja 0x384c8; ret; 
0x0000000000438764: cmp rax, -0x1000; ja 0x387c0; ret; 
0x000000000043893e: cmp rax, -0x1000; ja 0x38950; ret; 
0x000000000043897b: cmp rax, -0x1000; ja 0x38988; ret; 
0x00000000004389b4: cmp rax, -0x1000; ja 0x389c0; ret; 
0x0000000000458eee: cmp rax, -0x1000; ja 0x58f00; ret; 
0x000000000042a1f1: cmp rax, -0x72b80000; adc eax, 0x3f74; cmovne rax, rdx; ret; 
0x0000000000411b1b: cmp rax, -0xfff; jae 0x11b24; ret; 
0x0000000000411c0b: cmp rax, -0xfff; jae 0x11c14; ret; 
0x0000000000411c3b: cmp rax, -0xfff; jae 0x11c44; ret; 
0x0000000000411dae: cmp rax, -0xfff; jae 0x11db7; ret; 
0x0000000000411e7b: cmp rax, -0xfff; jae 0x11e84; ret; 
0x0000000000437b0b: cmp rax, -0xfff; jae 0x37b14; ret; 
0x0000000000437b3b: cmp rax, -0xfff; jae 0x37b44; ret; 
0x0000000000437b6b: cmp rax, -0xfff; jae 0x37b74; ret; 
0x0000000000437b9b: cmp rax, -0xfff; jae 0x37ba4; ret; 
0x0000000000437bcb: cmp rax, -0xfff; jae 0x37bd4; ret; 
0x0000000000418275: cmp rax, -1; je 0x182ba; ret; 
0x0000000000409596: cmp rax, -1; je 0x95a0; pop rbp; ret; 
0x00000000004197ff: cmp rax, -3; jbe 0x19810; ret; 
0x0000000000435b32: cmp rax, 0x20; ja 0x35b40; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000404fa7: cmp rax, 0x408; jbe 0x4fb0; ret; 
0x0000000000425d55: cmp rax, 0x92f; ja 0x25d70; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426341: cmp rax, 0x92f; ja 0x26358; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000455bad: cmp rax, 0x92f; ja 0x55cd0; mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000405197: cmp rax, 0xa0; jbe 0x51a0; ret; 
0x0000000000404fe7: cmp rax, 0xffff; jbe 0x4ff0; ret; 
0x00000000004051ae: cmp rax, 7; mov eax, 0x10; cmova eax, edx; mov byte ptr [rip + 0xa7678], al; ret; 
0x00000000004613f2: cmp rax, 8; ja 0x61403; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000404a68: cmp rax, 9; ja 0x4a40; mov rax, rsi; ret; 
0x0000000000423e78: cmp rax, qword ptr [rdi + 0x10]; jae 0x23e88; movzx eax, byte ptr [rax]; ret; 
0x0000000000425ba7: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x25ba0; ret; 
0x0000000000455727: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x55720; ret; 
0x000000000042c6b2: cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x0000000000411492: cmp rax, rdi; jb 0x114a0; xor eax, eax; ret; 
0x000000000042757b: cmp rax, rdi; jne 0x27570; mov rax, qword ptr [rax]; mov qword ptr [rdx], rax; ret; 
0x000000000042809c: cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000042805a: cmp rax, rdx; jae 0x28080; movzx eax, byte ptr [rax]; ret; 
0x0000000000450095: cmp rax, rdx; jne 0x500bb; test ecx, ecx; jne 0x500a0; ret; 
0x0000000000466cc9: cmp rax, rdx; jne 0x66cf3; test ecx, ecx; jne 0x66cd8; ret; 
0x0000000000409772: cmp rax, rsi; jne 0x9740; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x000000000046c775: cmp rcx, qword ptr [rax + 0x28]; jae 0x6c760; mov eax, 1; ret; 
0x0000000000466917: cmp rcx, qword ptr [rdi + 0x30]; jne 0x66942; mov qword ptr [rax + 8], rdx; pop rbp; ret; 
0x0000000000435cb5: cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000464d53: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000046d61e: cmp rcx, rdx; jae 0x6d587; test rax, rax; jne 0x6d60a; ret; 
0x00000000004167e5: cmp rcx, rdx; jne 0x167c0; mov eax, dword ptr [rcx]; ret; 
0x0000000000474c16: cmp rcx, rdx; sbb eax, eax; ret; 
0x00000000004357ad: cmp rcx, rsi; jb 0x355a4; mov rax, r8; vzeroupper; ret; 
0x0000000000460fe0: cmp rcx, rsi; jb 0x60d64; mov rax, r8; vzeroupper; ret; 
0x0000000000454b5d: cmp rdi, qword ptr [rip + 0x2cc1c]; jae 0x54b71; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000474f30: cmp rdi, rax; jne 0x74f20; ret; 
0x000000000040d8da: cmp rdi, rdx; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043be64: cmp rdi, rsi; jne 0x3be70; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000410322: cmp rdx, 0x20; ja 0x10340; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040e1d0: cmp rdx, 0x20; ja 0xe250; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e795: cmp rdx, 0x20; ja 0xe800; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004100d3: cmp rdx, 0x40; ja 0x10100; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000410073: cmp rdx, 0x40; ja 0x10109; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000040d993: cmp rdx, 0x40; ja 0xda40; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d927: cmp rdx, 0x40; ja 0xda4d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040f75a: cmp rdx, 0x40; ja 0xf780; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000040f70a: cmp rdx, 0x40; ja 0xf789; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000040d0d3: cmp rdx, 0x80; ja 0xd1c0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040fe53: cmp rdx, 0x80; ja 0xfe80; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040fdf3: cmp rdx, 0x80; ja 0xfe89; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000042625e: cmp rdx, 0x92f; ja 0x262d0; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000456aa2: cmp rdx, 0x92f; ja 0x56fc8; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000040e3cc: cmp rdx, qword ptr [rip + 0x99745]; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000437a79: cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000435d05: cmp rdx, rax; ja 0x35b40; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004615cb: cmp rdx, rax; ja 0x61403; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x0000000000431de9: cmp rdx, rcx; ja 0x31dc7; nop; xor eax, eax; vzeroupper; ret; 
0x0000000000432adb: cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x0000000000404999: cmp rdx, rcx; jae 0x4980; mov rax, rsi; ret; 
0x0000000000474c11: cmp rdx, rcx; jb 0x74c1b; cmp rcx, rdx; sbb eax, eax; ret; 
0x00000000004326b8: cmp rdx, rcx; jbe 0x32699; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004326d8: cmp rdx, rcx; jbe 0x32699; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x00000000004707ae: cmp rdx, rdi; jae 0x7084c; leave; mov eax, 1; ret; 
0x00000000004587e1: cmp rdx, rdi; setae al; ret; 
0x000000000042b3af: cmp rdx, rsi; jbe 0x2b3bd; test eax, eax; je 0x2b3c0; lea rax, [rdi + rsi]; ret; 
0x000000000042b62f: cmp rdx, rsi; jbe 0x2b63d; test eax, eax; je 0x2b640; lea rax, [rdi + rsi]; ret; 
0x000000000045499e: cmp rdx, rsi; jne 0x54980; ret; 
0x000000000046ce24: cmp rsi, 1; jbe 0x6ce30; jmp 0x6ca10; nop; ret; 
0x0000000000418982: cmp rsi, r8; jae 0x189d8; ret; 
0x0000000000437af2: cmp rsi, r8; jne 0x37ad0; mov eax, edi; ret; 
0x0000000000435b38: cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004357c4: cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x0000000000426a89: cmp rsi, rcx; jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x0000000000456449: cmp rsi, rcx; jb 0x56440; lea eax, [rdx + rdi]; ret; 
0x0000000000435d10: cmp rsi, rdx; cmovb eax, esi; ret; 
0x000000000042df36: cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x000000000042d8e3: cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000042da60: cmp sil, byte ptr [rdi + rax]; jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x000000000042dd7f: cmp sil, byte ptr [rdi + rax]; jne 0x2dd89; add rax, rdi; ret; 
0x000000000042dd93: cmp sil, byte ptr [rdi + rcx + 0x20]; jne 0x2dd89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042deed: cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042dacf: cmp sil, byte ptr [rdx + rax]; jne 0x2da99; add rax, rdx; vzeroupper; ret; 
0x000000000041b490: cmp word ptr [rax + 8], 0x6576; jne 0x1b43c; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000041b520: cmp word ptr [rax + 8], 0x6576; jne 0x1b4cc; or byte ptr [rip + 0x91681], 0xc; ret; 
0x0000000000436732: cmpsb byte ptr [rsi], byte ptr [rdi]; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004398ce: cmpsb byte ptr [rsi], byte ptr [rdi]; ja 0x398cd; jmp qword ptr [rsi + 0x2e]; 
0x0000000000437156: cmpsb byte ptr [rsi], byte ptr [rdi]; mov dl, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000469316: cmpsb byte ptr [rsi], byte ptr [rdi]; xor eax, 0x64ba0004; add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004360d8: cmpsd dword ptr [rsi], dword ptr [rdi]; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000447cbd: cmpsd dword ptr [rsi], dword ptr [rdi]; cld; call qword ptr [rbp + 0x48]; 
0x0000000000467c43: cmpsd dword ptr [rsi], dword ptr [rdi]; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000411bb7: cmpsd dword ptr [rsi], dword ptr [rdi]; mov r10d, r12d; xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x0000000000429bde: cmpsd dword ptr [rsi], dword ptr [rdi]; std; jmp qword ptr [rdi - 0x18]; 
0x0000000000478a6f: cmpxchg dword ptr [rcx], edi; jne 0x78a67; and edx, 3; cmp edx, 2; je 0x78a80; ret; 
0x0000000000428658: cmpxchg dword ptr [rcx], esi; jne 0x28652; and eax, 0x39; cmp eax, 8; je 0x28666; ret; 
0x0000000000458848: cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x00000000004020cb: cpuid; lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xaa8b6], rax; pop rbx; pop rbp; ret; 
0x0000000000418218: cvtdq2ps xmm0, xmmword ptr [rcx + 0x5c]; pop r13; pop r14; pop rbp; ret; 
0x0000000000473dc3: cwde; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000442e86: cwde; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000477cbb: cwde; clc; jmp qword ptr [rsi - 0x70]; 
0x0000000000445909: cwde; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000441ca5: cwde; mov rsi, qword ptr [rbp - 0xa8]; mov qword ptr [rbp - 0x88], rcx; mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x00000000004428e1: cwde; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x000000000041f4fc: cwde; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000420436: cwde; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041fb8e: cwde; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042052e: cwde; movzx esi, byte ptr [rbx + rax]; lea rax, [rip + 0x81bc6]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004204b1: cwde; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205b1: cwde; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000447b23: cwde; push 0; call rax; 
0x000000000046157e: cwde; sal byte ptr [rbp - 0x49], 1; mov rax, rsi; ret; 
0x0000000000435cc3: cwde; sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x000000000040dcc5: dec byte ptr [rax + 0x29]; stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d44e: dec byte ptr [rax + 0x29]; stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000040cfb6: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000040d3ca: dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x000000000040d3bc: dec byte ptr [rax + 0x7f]; ja 0xd3c3; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000040d241: dec byte ptr [rax + 0x7f]; je 0xd25d; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000040d3c3: dec byte ptr [rax + 0x7f]; jg 0xd3cb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000040d249: dec byte ptr [rax + 0x7f]; jl 0xd265; cld; ret; 
0x000000000040d319: dec byte ptr [rax + 0x7f]; jp 0xd31f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000043951a: dec byte ptr [rax + 9]; ret 0x8948; 
0x0000000000439441: dec byte ptr [rax + 9]; ret 0x894c; 
0x00000000004101c2: dec byte ptr [rax]; jg 0x101c6; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x00000000004101c8: dec byte ptr [rax]; jg 0x10210; adc bh, bh; ret; 
0x000000000042ce5a: dec byte ptr [rax]; jg 0x2ce65; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000045f52a: dec byte ptr [rax]; jg 0x5f535; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000040ff52: dec byte ptr [rax]; jg 0xff56; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000040ff58: dec byte ptr [rax]; jg 0xffa0; adc bh, bh; ret; 
0x0000000000402246: dec byte ptr [rcx + 1]; ret; 
0x0000000000438827: dec byte ptr [rcx]; je 0x38850; mov eax, 0x48; syscall; 
0x00000000004388bc: dec byte ptr [rcx]; je 0x388e0; mov eax, 0x48; syscall; 
0x00000000004061ea: dec dword ptr [r8 - 0x7b]; ret; 
0x00000000004197fd: dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x19810; ret; 
0x0000000000404c59: dec dword ptr [rax + 0x21]; ret; 
0x000000000041c98f: dec dword ptr [rax + 0x29]; ret 0x8548; 
0x000000000042028a: dec dword ptr [rax + 0x29]; ret; 
0x0000000000404a96: dec dword ptr [rax + 0x39]; call 0xffffffff89487711; ret 0x8948; 
0x0000000000437eae: dec dword ptr [rax + 0x39]; or byte ptr [rdi], cl; xchg esp, eax; ret 0x950a; 
0x0000000000411768: dec dword ptr [rax + 0x39]; ret 0x1272; 
0x0000000000465c3a: dec dword ptr [rax + 0x39]; ret 0xe075; 
0x00000000004245d2: dec dword ptr [rax + 0x39]; ret 0xf41; 
0x00000000004281ee: dec dword ptr [rax + 0x39]; ret 0xf48; 
0x0000000000423460: dec dword ptr [rax + 0x39]; ret; 
0x0000000000454b5c: dec dword ptr [rax + 0x3b]; cmp eax, 0x2cc1c; jae 0x54b71; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000453d97: dec dword ptr [rax + 0x63]; ret 0x8d49; 
0x00000000004172f0: dec dword ptr [rax + 0x63]; ret; 
0x000000000041d031: dec dword ptr [rax + 1]; ret 0x8844; 
0x0000000000407a5d: dec dword ptr [rax + 1]; ret 0x8948; 
0x000000000042a74f: dec dword ptr [rax + 1]; ret; 
0x000000000041b7f8: dec dword ptr [rax + 5]; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047532b: dec dword ptr [rax - 0x39]; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x0000000000449632: dec dword ptr [rax - 0x39]; ret 0x2aa0; 
0x00000000004494ed: dec dword ptr [rax - 0x39]; ret 0x2b40; 
0x0000000000449516: dec dword ptr [rax - 0x39]; ret 0x2c20; 
0x00000000004496ad: dec dword ptr [rax - 0x39]; ret 0x2f40; 
0x0000000000449684: dec dword ptr [rax - 0x39]; ret 0x3000; 
0x00000000004495b7: dec dword ptr [rax - 0x39]; ret 0x3060; 
0x000000000044953c: dec dword ptr [rax - 0x39]; ret 0x30c0; 
0x0000000000449609: dec dword ptr [rax - 0x39]; ret 0x3280; 
0x0000000000449565: dec dword ptr [rax - 0x39]; ret 0x3300; 
0x00000000004495e0: dec dword ptr [rax - 0x39]; ret 0x3380; 
0x000000000044965b: dec dword ptr [rax - 0x39]; ret 0x33e0; 
0x000000000044958e: dec dword ptr [rax - 0x39]; ret 0x3440; 
0x00000000004385df: dec dword ptr [rax - 0x39]; ret 0xffd8; 
0x0000000000450da6: dec dword ptr [rax - 0x39]; ret 0xffe0; 
0x0000000000462aca: dec dword ptr [rax - 0x39]; ret; 
0x00000000004268ba: dec dword ptr [rax - 0x39]; sub byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000473877: dec dword ptr [rax - 0x46]; mov eax, 0xf; syscall; 
0x000000000042a0d2: dec dword ptr [rax - 0x73]; adc eax, 0xfffe4076; cmove rax, rdx; ret; 
0x000000000042a149: dec dword ptr [rax - 0x73]; add eax, 0xfffe187f; cmovne rax, rdx; ret; 
0x000000000042a09f: dec dword ptr [rax - 0x73]; add eax, 0xfffe20a9; cmovne rax, rdx; ret; 
0x000000000042a0f9: dec dword ptr [rax - 0x73]; add eax, 0xfffe2f4f; cmovne rax, rdx; ret; 
0x000000000042a129: dec dword ptr [rax - 0x73]; add eax, 0xfffe37df; cmovne rax, rdx; ret; 
0x0000000000413cc8: dec dword ptr [rax - 0x73]; call 0x415d7e2c; pop rbp; pop rbp; ret; 
0x0000000000401673: dec dword ptr [rax - 0x73]; cmp eax, 0xabaf5; call 0x1610; mov byte ptr [rip + 0xabae1], 1; pop rbp; ret; 
0x000000000042f46f: dec dword ptr [rax - 0x73]; jl 0x2f48b; test byte ptr [rax - 0x73], cl; je 0x2f48f; test cl, ch; ret 0xfffb; 
0x000000000042235b: dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000419c71: dec dword ptr [rax - 0x75]; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000409aba: dec dword ptr [rax - 0x75]; call 0x16ac; jmp qword ptr [rsi + 0x66]; 
0x00000000004387b0: dec dword ptr [rax - 0x75]; clc; leave; ret; 
0x0000000000466347: dec dword ptr [rax - 0x75]; clc; sub rax, qword ptr fs:[0x28]; jne 0x663c7; leave; ret; 
0x000000000044daa8: dec dword ptr [rax - 0x75]; jnp 0x4dabd; call 0x4da60; jmp 0x4da86; nop dword ptr [rax]; ret; 
0x00000000004675f8: dec dword ptr [rax - 0x75]; lea edi, [rax - 0x16000009]; ret; 
0x00000000004458f7: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff48; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000446d5f: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff48; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x00000000004410bb: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff58; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004434e1: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff60; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000441cb3: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff60; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000444243: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff68; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000440aca: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff70; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x00000000004416b9: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff78; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004643d8: dec dword ptr [rax - 0x75]; or byte ptr [r11 + 0x54891114], cl; ret; 
0x0000000000440ad1: dec dword ptr [rax - 0x75]; or byte ptr [r9 + rcx*4 + 0x4d], 0xa8; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000046cc61: dec dword ptr [rax - 0x75]; or byte ptr [rax + 0x39], r9b; ret; 
0x00000000004090da: dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000040b593: dec dword ptr [rax - 0x75]; pop rbp; clc; xor eax, eax; leave; ret; 
0x0000000000425d7b: dec dword ptr [rax - 0x75]; sbb byte ptr [r11 - 0x74b71b8b], cl; jge 0x25d6f; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000047505d: dec dword ptr [rax - 0x75]; test dword ptr [rax + 0x44fffff7], ebp; mov dword ptr [rbp - 0x848], ebx; mov ecx, r11d; call rax; 
0x000000000044f16c: dec dword ptr [rax - 0x75]; xor ecx, dword ptr [rcx - 0x75]; cmp al, 0x24; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x000000000044e025: dec dword ptr [rax - 0x75f6b]; jmp qword ptr [rdi - 0x18]; 
0x0000000000463e1e: dec dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000419d68: dec dword ptr [rax - 0x77]; add eax, 0x92be8; leave; ret; 
0x0000000000419d5a: dec dword ptr [rax - 0x77]; add eax, 0x92bfe; movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x000000000046e7bc: dec dword ptr [rax - 0x77]; and byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000045f783: dec dword ptr [rax - 0x77]; clc; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004383c4: dec dword ptr [rax - 0x77]; fbld tbyte ptr [rdi - 0x18]; xor bl, byte ptr [rip - 0x7ab70003]; ror byte ptr [rax + 0xf], 0x44; ret; 
0x0000000000418189: dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x000000000041812d: dec dword ptr [rax - 0x77]; fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000451aa7: dec dword ptr [rax - 0x77]; ret 0x141; 
0x0000000000439eba: dec dword ptr [rax - 0x77]; ret 0x15ff; 
0x0000000000417456: dec dword ptr [rax - 0x77]; ret 0x1b9; 
0x0000000000478052: dec dword ptr [rax - 0x77]; ret 0x31e9; 
0x00000000004171d8: dec dword ptr [rax - 0x77]; ret 0x8341; 
0x0000000000419b7e: dec dword ptr [rax - 0x77]; ret 0x8348; 
0x00000000004183af: dec dword ptr [rax - 0x77]; ret 0x83f0; 
0x0000000000411580: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000041e31e: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000041f2ed: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000041c87f: dec dword ptr [rax - 0x77]; ret 0x894c; 
0x00000000004526b9: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000043e5e4: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000404c0d: dec dword ptr [rax - 0x77]; ret 0x8feb; 
0x000000000041754d: dec dword ptr [rax - 0x77]; ret 0x90e9; 
0x00000000004744b7: dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000454c66: dec dword ptr [rax - 0x77]; ret 0xc148; 
0x000000000040b51b: dec dword ptr [rax - 0x77]; ret 0xcb8; 
0x0000000000409074: dec dword ptr [rax - 0x77]; ret; 
0x000000000041744b: dec dword ptr [rax - 0x77]; test dword ptr [rdi + rcx - 0x4a], 0xfff6b485; dec dword ptr [rax - 0x77]; ret 0x1b9; 
0x00000000004061eb: dec dword ptr [rax - 0x7b]; ret; 
0x00000000004383cd: dec dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x44; ret; 
0x0000000000470a08: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret; 
0x0000000000440029: dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rsi*2 + 0x48], 0x89; ret; 
0x0000000000441015: dec dword ptr [rax - 0x7b]; test byte ptr [rdi], -0x7c; ret 2; 
0x00000000004197fe: dec dword ptr [rax - 0x7d]; clc; std; jbe 0x19810; ret; 
0x000000000041c9ad: dec dword ptr [rax - 0x7d]; mov ebp, 0xfffffea8; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000443bb1: dec dword ptr [rax - 0x7d]; ret 0x4201; 
0x0000000000442e9a: dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x0000000000444dfb: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000442b26: dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x0000000000443ba0: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000446fc6: dec dword ptr [rax - 0x7d]; ret 0xc704; 
0x000000000041e792: dec dword ptr [rax - 0x7d]; ret; 
0x0000000000453e4e: dec dword ptr [rbp + 0x63480156]; ror byte ptr [rax + 0x39], cl; ret 0x9c0f; 
0x0000000000453cb5: dec dword ptr [rbp + 0x63]; in al, 0xe9; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004121eb: dec dword ptr [rbp + rcx*4 + 0x3d]; add eax, 0x89000696; ret; 
0x000000000040884a: dec dword ptr [rbp + rcx*4 + 0x53]; and byte ptr [rcx + 0x39], cl; ret 0x820f; 
0x00000000004678d8: dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000043b53e: dec dword ptr [rbp - 0x76b7febe]; ret 0x8b49; 
0x0000000000419628: dec dword ptr [rbx + rcx*4 + 0x4d]; call 0xffffffffffffd21a; jmp qword ptr [rsi + 0xf]; 
0x0000000000445905: dec dword ptr [rbx + rcx*4 + 0x4d]; cwde; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x00000000004428dd: dec dword ptr [rbx + rcx*4 + 0x4d]; cwde; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x000000000041cd79: dec dword ptr [rbx - 0x1f7cc7bb]; add cl, byte ptr [rcx - 0x437a763a]; idiv bh; call rcx; 
0x0000000000415a7e: dec dword ptr [rbx - 0x3a36b]; call qword ptr [rax + 0x4c]; 
0x0000000000450dc9: dec dword ptr [rbx - 0x427675c4]; sar dh, 0xff; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x000000000041f0d9: dec dword ptr [rbx - 0x51b6b]; call qword ptr [rax - 0x75]; 
0x000000000043d769: dec dword ptr [rbx - 0x73]; add al, 0xa; call rax; 
0x0000000000454846: dec dword ptr [rbx - 0x74b713bb]; pop rbp; clc; leave; ret; 
0x000000000044e0fb: dec dword ptr [rbx - 0x78f43]; jmp qword ptr [rsi + 0x49]; 
0x0000000000462da5: dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x000000000041e194: dec dword ptr [rbx - 0x90f7b]; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x00000000004526b3: dec dword ptr [rbx - 0x9773]; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000453b5b: dec dword ptr [rcx + 0x39]; ret; 
0x000000000045897f: dec dword ptr [rcx + 0xcab8da]; add byte ptr [rax], al; syscall; 
0x00000000004162f7: dec dword ptr [rcx + 0xf5a58c6]; test dword ptr [rax + rax - 0x17d0000], eax; dec dword ptr [rdi]; test dword ptr [rsi - 0x16000009], esp; ret 0xfffa; 
0x000000000040577c: dec dword ptr [rcx + 1]; ret 0x42e9; 
0x0000000000442350: dec dword ptr [rcx + rcx*4 + 0x4d]; mov byte ptr [rax - 0x75], cl; mov ebp, 0xffffff68; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000044511d: dec dword ptr [rcx + rcx*4 + 0x4d]; nop; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004465c9: dec dword ptr [rcx + rcx*4 + 0x4d]; nop; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000456ab3: dec dword ptr [rcx + rcx*4 - 0x19]; call qword ptr [rax + 0x18]; 
0x00000000004541b1: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rdi, r13; call rbx; 
0x00000000004357b5: dec dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x0000000000435ab5: dec dword ptr [rcx + rcx*4 - 0x40]; xtest; jne 0x35ac2; vzeroupper; ret; 
0x0000000000461368: dec dword ptr [rcx + rcx*4 - 0x40]; xtest; jne 0x61375; vzeroupper; ret; 
0x0000000000457817: dec dword ptr [rcx + rcx*4 - 1]; call rax; 
0x0000000000435d0d: dec dword ptr [rcx - 0x29c6b730]; cmovb eax, esi; ret; 
0x0000000000474ecf: dec dword ptr [rcx - 0x39]; ret 0xffff; 
0x000000000040635c: dec dword ptr [rcx - 0x73]; dec dword ptr [r8 - 0x7b]; ret; 
0x0000000000453395: dec dword ptr [rcx - 0x77]; ret 0x4866; 
0x000000000043ce37: dec dword ptr [rcx - 0x77]; ret 0x8349; 
0x0000000000419e09: dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000043d67f: dec dword ptr [rcx - 0x77]; ret 0x98e9; 
0x000000000040775e: dec dword ptr [rcx - 0x7b]; ret; 
0x0000000000447ca8: dec dword ptr [rcx - 0x7d]; ret; 
0x00000000004409d3: dec dword ptr [rcx - 0x834b]; jmp qword ptr [rsi + 0xf]; 
0x0000000000407ac4: dec dword ptr [rcx - 9]; fimul word ptr [rax + 0x29]; ret 0x2149; 
0x0000000000406ba9: dec dword ptr [rcx]; add byte ptr [rax - 9], cl; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x000000000042bf77: dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000044ec73: dec dword ptr [rdi]; adc dword ptr [rbp - 0xb8], eax; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000426698: dec dword ptr [rdi]; adc dword ptr [rdi + 0xa0], eax; ret; 
0x00000000004666b4: dec dword ptr [rdi]; add byte ptr [rax + 0x21], cl; ret 0xc148; 
0x00000000004508fe: dec dword ptr [rdi]; mov dh, 0x50; or al, 0xf6; ret 0xf01; 
0x000000000044fe2b: dec dword ptr [rdi]; mov dh, 0x53; add al, dh; iretd; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000475add: dec dword ptr [rdi]; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000414084: dec dword ptr [rdi]; mov dh, 0x97; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x00000000004319d8: dec dword ptr [rdi]; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042d0d5: dec dword ptr [rdi]; mov esp, 0x48a4f3c9; lea eax, [rdi - 1]; ret; 
0x000000000042cb93: dec dword ptr [rdi]; mov esp, 0x48a4f3c9; lea eax, [rdi - 1]; vzeroupper; ret; 
0x000000000042b0ac: dec dword ptr [rdi]; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000045f274: dec dword ptr [rdi]; mov esp, 0xf88948c9; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000450810: dec dword ptr [rdi]; push rax; ret; 
0x0000000000404ccd: dec dword ptr [rdi]; test ah, ch; ret; 
0x0000000000437c97: dec dword ptr [rdi]; test byte ptr [rax + 4], al; add byte ptr [rax], al; mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x00000000004298c3: dec dword ptr [rdi]; test byte ptr [rsi - 0x7cfffffe], ch; ret 0x4101; 
0x000000000041e28e: dec dword ptr [rdi]; test dword ptr [rdx], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x8e743], al; jmp qword ptr [rax]; 
0x000000000045313c: dec dword ptr [rdi]; test dword ptr [rip - 0x9ffffff], ebp; ret 0xf50; 
0x0000000000416304: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000009], esp; ret 0xfffa; 
0x000000000042036b: dec dword ptr [rdi]; test esi, edi; or al, byte ptr [rax]; add byte ptr [rax - 0x4b743], al; jmp qword ptr [rax]; 
0x000000000041dfef: dec dword ptr [rdi]; xchg ebp, eax; ret 0x2141; 
0x0000000000459343: dec dword ptr [rdi]; xchg esi, ecx; add byte ptr [rax], al; add byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000427eb5: dec dword ptr [rdi]; xchg esp, eax; ret 0x2b48; 
0x000000000041da8c: dec dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041764c: dec ecx; ret; 
0x000000000041274f: dec ecx; xor eax, eax; ret; 
0x0000000000443bb0: dec qword ptr [rax - 0x7d]; ret 0x4201; 
0x0000000000442e99: dec qword ptr [rax - 0x7d]; ret 0x4301; 
0x000000000044d7c9: dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000448745: div byte ptr [rax + rcx - 0x7d]; inc byte ptr [rbx]; je 0x48750; ret; 
0x0000000000466757: div byte ptr [rbp + 0x2e]; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x000000000045655c: div byte ptr [rbp + 0x51]; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000041b891: div byte ptr [rbp + 0xc]; mov dword ptr [rbx + 0x40], esi; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043ca4c: div byte ptr [rbp + 2]; call rax; 
0x00000000004395db: div byte ptr [rbp + 2]; ret; 
0x0000000000435d26: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000466772: div byte ptr [rbp - 0x15]; cmp cx, 0x7fff; jne 0x6675a; mov eax, 1; pop rbp; ret; 
0x0000000000429faf: div byte ptr [rbp - 0x25]; and ch, 8; lea rdx, [rip + 0x1894]; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x0000000000467c8f: div byte ptr [rbp - 0x25]; and ch, 8; lea rdx, [rip + 0xad4]; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x00000000004671a2: div byte ptr [rbx + rdx + 0x48]; mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000004704cc: div byte ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x0000000000464124: div byte ptr [rdi + rax - 0x77]; fucompi st(0); or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000413b47: div byte ptr [rsi + rax + 0x44]; mov eax, eax; ret; 
0x000000000043be66: div dword ptr [rbp + 7]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458cef: div esi; mov rax, qword ptr [rip + 0x4de20]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000458cee: div rsi; mov rax, qword ptr [rip + 0x4de20]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000470c50: divps xmm0, xmmword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x0000000000470c4f: divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x0000000000428410: endbr64; and edi, 2; je 0x28420; ret; 
0x0000000000438750: endbr64; cmp byte ptr [rip + 0x6e2fd], 0; je 0x38770; mov eax, 1; syscall; 
0x0000000000417f70: endbr64; cmp byte ptr [rip + 0x8fc05], 0; jne 0x17f90; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x00000000004112e0: endbr64; cmp byte ptr [rip + 0x9576d], 0; je 0x11300; xor eax, eax; syscall; 
0x00000000004095b0: endbr64; cmp byte ptr [rip + 0xa3265], 0; jne 0x95c0; ret; 
0x00000000004284e0: endbr64; cmp dword ptr [rdi], 1; je 0x284f0; ret; 
0x00000000004260d0: endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x0000000000401e20: endbr64; cmp qword ptr [rdi], 0; je 0x1e34; or dword ptr [rip + 0xaacc0], 0x400; ret; 
0x0000000000422be0: endbr64; cmp qword ptr [rip + 0x833bc], 0; je 0x22bef; ret; 
0x000000000046ce20: endbr64; cmp rsi, 1; jbe 0x6ce30; jmp 0x6ca10; nop; ret; 
0x0000000000411b10: endbr64; mov eax, 0x1c; syscall; 
0x0000000000411b10: endbr64; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x11b24; ret; 
0x0000000000437ab0: endbr64; mov eax, 0x27; syscall; 
0x0000000000437ab0: endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000411e70: endbr64; mov eax, 0x63; syscall; 
0x0000000000411e70: endbr64; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11e84; ret; 
0x0000000000437a70: endbr64; mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000437b00: endbr64; mov eax, 0x8f; syscall; 
0x0000000000437b00: endbr64; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x37b14; ret; 
0x0000000000437bc0: endbr64; mov eax, 0x90; syscall; 
0x0000000000437bc0: endbr64; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x37bd4; ret; 
0x0000000000437b30: endbr64; mov eax, 0x91; syscall; 
0x0000000000437b30: endbr64; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x37b44; ret; 
0x0000000000437b60: endbr64; mov eax, 0x92; syscall; 
0x0000000000437b60: endbr64; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x37b74; ret; 
0x0000000000437b90: endbr64; mov eax, 0x93; syscall; 
0x0000000000437b90: endbr64; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x37ba4; ret; 
0x0000000000411c00: endbr64; mov eax, 0xa; syscall; 
0x0000000000411c00: endbr64; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x11c14; ret; 
0x0000000000411c30: endbr64; mov eax, 0xb; syscall; 
0x0000000000411c30: endbr64; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x11c44; ret; 
0x0000000000411480: endbr64; mov eax, 0xc; syscall; 
0x0000000000426190: endbr64; mov eax, 0xffffffff; ret; 
0x0000000000438970: endbr64; mov eax, 1; syscall; 
0x0000000000438970: endbr64; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x38988; ret; 
0x0000000000411380: endbr64; mov eax, 3; syscall; 
0x0000000000411380: endbr64; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x11398; ret; 
0x0000000000437bf0: endbr64; mov eax, 5; syscall; 
0x0000000000437bf0: endbr64; mov eax, 5; syscall; cmp rax, -0x1000; ja 0x37c08; ret; 
0x00000000004384b0: endbr64; mov eax, 8; syscall; 
0x00000000004384b0: endbr64; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x384c8; ret; 
0x00000000004275a0: endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000459070: endbr64; mov eax, dword ptr [rdi]; test al, 2; je 0x59080; xor eax, eax; ret; 
0x0000000000477280: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77290; ret; 
0x00000000004774d0: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x774e0; ret; 
0x0000000000469310: endbr64; mov eax, dword ptr [rip + 0x435a6]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000474010: endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000438930: endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000411da0: endbr64; mov r10, rcx; mov eax, 0x9d; syscall; 
0x0000000000461ce0: endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000464d00: endbr64; mov rax, 0xffffffffffffffb8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000041b790: endbr64; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000041b770: endbr64; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000041b750: endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000426970: endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000043e310: endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x000000000043e320: endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000427930: endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000473f80: endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000473fe0: endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000455d00: endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x0000000000474020: endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000474080: endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x0000000000474070: endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000474030: endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000423e70: endbr64; mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x23e88; movzx eax, byte ptr [rax]; ret; 
0x0000000000404fa0: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x4fb0; ret; 
0x0000000000405190: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x51a0; ret; 
0x0000000000404fe0: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x4ff0; ret; 
0x00000000004286a0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f023], eax; ret; 
0x00000000004284d0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f1ef], eax; ret; 
0x00000000004284c0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f1fb], eax; ret; 
0x00000000004284b0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f207], eax; ret; 
0x00000000004284a0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f213], eax; ret; 
0x00000000004286c0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f3cb], eax; ret; 
0x00000000004286b0: endbr64; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x7f3e2], rax; ret; 
0x0000000000405240: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f16], 1; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405220: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f36], 1; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051f0: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f66], 1; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004051d0: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f86], 1; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x0000000000405210: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x0000000000405000: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa1191], rax; ret; 
0x0000000000404f90: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa1199], rax; ret; 
0x0000000000404f80: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa11b1], rax; ret; 
0x0000000000447f00: endbr64; mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x00000000004389e0: endbr64; mov rax, qword ptr [rip + 0x6e12d]; test rax, rax; je 0x389f1; ret; 
0x000000000043e4c0: endbr64; mov rax, qword ptr [rip + 0x6e86d]; ret; 
0x000000000043e4b0: endbr64; mov rax, qword ptr [rip + 0x6e875]; ret; 
0x0000000000427910: endbr64; mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x0000000000459850: endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000427940: endbr64; mov rax, rdi; ret; 
0x0000000000440900: endbr64; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000474170: endbr64; nop; ret; 
0x0000000000401710: endbr64; ret; 
0x000000000047a4f4: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000466b50: endbr64; test byte ptr [rdi], 0x20; je 0x66b60; xor eax, eax; ret; 
0x00000000004257b0: endbr64; test byte ptr [rdi], 0x80; jne 0x257c0; ret; 
0x0000000000459b20: endbr64; test byte ptr [rip + 0x52ea3], 0x10; lea rdx, [rip + 0x650e]; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000439ac8: endbr64; test eax, eax; jne 0x39b40; mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000448740: endbr64; test esi, esi; je 0x48750; cmp esi, 3; je 0x48750; ret; 
0x00000000004395d0: endbr64; test rdi, rdi; je 0x395de; test rsi, rsi; jne 0x395e0; ret; 
0x00000000004395f0: endbr64; test rdi, rdi; je 0x395fe; test rsi, rsi; jne 0x39600; ret; 
0x0000000000439610: endbr64; test rdi, rdi; je 0x39620; jmp 0x38b80; nop; ret; 
0x0000000000423440: endbr64; test rdx, rdx; jne 0x23450; xor eax, eax; ret; 
0x0000000000435d20: endbr64; test rsi, rsi; jne 0x35d2d; xor rax, rax; ret; 
0x00000000004615e0: endbr64; test rsi, rsi; jne 0x615ed; xor rax, rax; ret; 
0x00000000004268d0: endbr64; xor eax, eax; ret; 
0x0000000000411450: endbr64; xor eax, eax; syscall; 
0x0000000000411450: endbr64; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x11468; ret; 
0x0000000000404de0: endbr64; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000404e00: endbr64; xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000454f99: fadd dword ptr [rax]; add byte ptr [rax], al; mov rcx, qword ptr [rax + 0xa0]; mov qword ptr [rcx + 0xe0], rdx; ret; 
0x000000000044fb75: fadd dword ptr [rcx + 0x5d]; pop r14; xor rax, rdx; pop r15; pop rbp; ret; 
0x0000000000418678: fadd dword ptr [rdx]; add byte ptr [rax], al; syscall; 
0x000000000042e230: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x2e1f0; lea rax, [rdi + 7]; ret; 
0x000000000044e10b: fadd st(7); add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x00000000004383c7: fbld tbyte ptr [rdi - 0x18]; xor bl, byte ptr [rip - 0x7ab70003]; ror byte ptr [rax + 0xf], 0x44; ret; 
0x0000000000410472: fcmovnb st(0), st(5); std; xlatb; ret; 
0x0000000000436665: fcmovnb st(0), st(5); sti; xchg ebx, eax; ret; 
0x000000000046bd49: fcom dword ptr [rip + 0x1ee80001]; xchg cl, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004181a4: fcomp dword ptr [rbx + 0x31]; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x000000000046183d: fcomp dword ptr [rbx + 0x41]; pop rsp; cmovne rax, rdx; pop rbp; ret; 
0x000000000040650a: fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000405407: fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; ret; 
0x000000000041818c: fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x00000000004076d0: fcos; jmp qword ptr [rsi + 0x66]; 
0x0000000000439bd0: fdiv st(5), st(0); jmp qword ptr [rsi + 0x66]; 
0x000000000041a9a3: fdivr dword ptr [rsi]; jmp rax; 
0x0000000000446b56: fdivr st(3); jmp qword ptr [rdi - 0x18]; 
0x0000000000406b64: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000460d57: ffreep st(1); call 0x77fed260; ret; 
0x0000000000454b6a: fiadd dword ptr [rax + rax]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000041861c: fiadd dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000042e392: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x2e480; lea rax, [rdi + 0xf]; ret; 
0x0000000000458cf5: fiadd word ptr [rax + rax]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000041b8ca: fiadd word ptr [rax]; add byte ptr [rbp + 0x5d0775c0], al; ret; 
0x0000000000459380: fiadd word ptr [rbp + 0x31]; sar byte ptr [rdx + 0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000459327: fiadd word ptr [rbp + 0x31]; sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004593f5: fiadd word ptr [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000411e41: fidiv dword ptr [rcx]; idiv byte ptr [rdi + 0x53564d41]; mov eax, 0x9d; syscall; 
0x000000000041128a: fidiv dword ptr [rdx + rdx + 0x48]; mov edx, 0xffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000046ca9d: fidiv dword ptr [rdx - 0x80]; ret; 
0x0000000000415b30: fidiv word ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x0000000000458923: fidivr dword ptr [rax + 0xca]; syscall; 
0x000000000047357d: fidivr dword ptr [rsi]; jmp rdx; 
0x00000000004788aa: fidivr word ptr [rax + 0xca]; syscall; 
0x0000000000458de1: fidivr word ptr [rax + 0xea]; syscall; 
0x000000000046677b: fidivr word ptr [rax + 1]; pop rbp; ret; 
0x0000000000419bd3: fidivr word ptr [rax + 9]; syscall; 
0x00000000004047e6: fidivr word ptr [rbx]; or al, byte ptr [rax]; cmp ecx, 1; jg 0x4850; call rax; 
0x00000000004786b7: fidivr word ptr [rdx + 0x7fffffff]; xor sil, 0x81; syscall; 
0x000000000040b80e: fidivr word ptr [rsi]; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000043e53d: fild dword ptr [r11]; add al, ch; sub bl, byte ptr [rsi - 4]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000429fb1: fild dword ptr [rax - 0x72b7f71b]; adc eax, 0x1894; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x0000000000467c91: fild dword ptr [rax - 0x72b7f71b]; adc eax, 0xad4; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000043e53e: fild dword ptr [rbx]; add al, ch; sub bl, byte ptr [rsi - 4]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000459716: fild word ptr [rax - 0x80]; test byte ptr [rcx + 0xcab8], 0; syscall; 
0x0000000000428913: fild word ptr [rcx + rcx*4 - 0x10]; not esi; and esi, 0x80; syscall; 
0x0000000000476120: fild word ptr [rcx - 0x77]; ret 0x8d4d; 
0x0000000000406e80: fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x0000000000435ed5: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004617a5: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000004347f6: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000404b9e: fimul dword ptr [rax - 0x77]; ret; 
0x0000000000406bae: fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x00000000004022f2: fimul dword ptr [rbp - 0x77]; ret; 
0x0000000000438543: fimul dword ptr [rcx + rcx*4 - 0x1a]; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004385b2: fimul dword ptr [rcx + rcx*4 - 0x1a]; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000045ffa5: fimul dword ptr [rcx - 0x37feb737]; sub rax, rdi; ret; 
0x0000000000407ac7: fimul word ptr [rax + 0x29]; ret 0x2149; 
0x0000000000406939: fimul word ptr [rax + 0x39]; ret; 
0x000000000047a318: fimul word ptr [rax - 0x3f]; out 2, al; jmp 0x7a26a; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000458052: fimul word ptr [rax - 0x77]; ret 0x4d89; 
0x000000000043ecf6: fimul word ptr [rax - 0x7d]; ret; 
0x0000000000458e12: fimul word ptr [rcx + 0xeab8c7]; add byte ptr [rax], al; syscall; 
0x000000000044ef8c: fimul word ptr [rcx + rcx*4 - 0x19]; call rax; 
0x00000000004022ef: fimul word ptr [rcx - 0x77]; fimul dword ptr [rbp - 0x77]; ret; 
0x0000000000428afa: fistp qword ptr [rax + 0xca]; syscall; 
0x0000000000411b64: fistp qword ptr [rax + 9]; syscall; 
0x0000000000428d2e: fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x000000000040b75d: fistp word ptr [rax]; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000425125: fistp word ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; jmp rax; 
0x0000000000455b3a: fistp word ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; jmp rax; 
0x0000000000423ed3: fistp word ptr [rbx + 0x41]; pop rsp; pop rbp; jmp rax; 
0x0000000000438f75: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; ret; 
0x000000000046a844: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000465785: fisttp dword ptr [rax - 0x77]; ret; 
0x0000000000417ac1: fisttp dword ptr [rax - 0x7b]; test byte ptr [rdi], -0x6c; ret; 
0x0000000000453136: fisttp dword ptr [rbx - 0xa763]; dec dword ptr [rdi]; test dword ptr [rip - 0x9ffffff], ebp; ret 0xf50; 
0x0000000000475302: fisttp dword ptr [rcx + 0x415b0c5a]; pop rsp; pop rbp; ret; 
0x000000000046579f: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000418302: fisttp qword ptr [rax - 0x77]; add eax, 0x8b686; ret; 
0x000000000044d7ed: fisttp qword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000041368f: fisttp qword ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0x66]; 
0x000000000043cc02: fisttp word ptr [rax + 0x39]; ret 0xf48; 
0x000000000042aff7: fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000471b26: fisttp word ptr [rax - 0x77]; ret; 
0x00000000004138c6: fisttp word ptr [rax - 0x7d]; ret; 
0x000000000046581f: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000438a94: fisttp word ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x000000000040824b: fisttp word ptr [rcx]; add byte ptr [rdi + rcx + 0x42], cl; ret; 
0x000000000043d0d0: fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000042e1d3: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000042f258: fisub word ptr [rdx - 0x4e]; and qword ptr [rsi], r12; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042e211: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000043e49e: fisubr word ptr [rbx]; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000042e831: fisubr word ptr [rcx]; ret 0xfec5; 
0x0000000000416ab1: fld dword ptr [rax + rax]; add byte ptr [rax - 0x77], cl; push rbp; shl byte ptr [rdi - 0x18], 0x31; cmp eax, 0x8948ffff; ret; 
0x000000000040b8f3: fld dword ptr [rax - 0x72b7f71b]; adc eax, 0x5122; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000040b963: fld dword ptr [rax - 0x72b7f71b]; adc eax, 0x5732; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x000000000042a3e3: fld dword ptr [rax - 0x72b7f71b]; adc eax, 0xb932; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x0000000000437a81: fld dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000437a81: fld dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x37a90; ret; 
0x000000000040e8e2: fld qword ptr [rbp + 0xf]; adc dword ptr [rax + 0x10], ecx; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040f2e2: fld qword ptr [rcx + 0xf]; adc dword ptr [rax + rdx - 0x10], edi; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000043e303: fldcw word ptr [rdx - 4]; jmp qword ptr [rsi + 0xf]; 
0x0000000000468989: fldenv [rsi + 0xf]; jbe 0x689dd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042ba39: fldenv [rsi + 0xf]; je 0x2ba8d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042b931: fldenv [rsi + 0xf]; xlatb; ret; 
0x0000000000431ded: fldenv [rsi - 0x70]; xor eax, eax; vzeroupper; ret; 
0x000000000046d821: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000466531: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000466674: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000040628c: fmul dword ptr [rax + 0x21]; ret; 
0x0000000000426370: fmul dword ptr [rax - 0x75]; jne 0x26355; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000040b0c0: fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000409eed: fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000041eab6: fmul dword ptr [rcx + 0x39]; ret 0x830f; 
0x0000000000455ba9: fmul dword ptr [rcx + rbp - 0x20]; cmp rax, 0x92f; ja 0x55cd0; mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x00000000004742c7: fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000404b9b: fmul qword ptr [rax + 0x29]; fimul dword ptr [rax - 0x77]; ret; 
0x0000000000459a8a: fmul qword ptr [rax - 0x73]; add eax, 0x14e; and ch, 8; jne 0x59a45; ret; 
0x000000000042a37a: fmul qword ptr [rax - 0x73]; add eax, 0x75ee; and ch, 8; jne 0x2a335; ret; 
0x000000000042f6a9: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000046b0dc: fnsave dword ptr [rcx]; ror byte ptr [rax - 0x77], cl; ret; 
0x000000000042bdb7: fnsave dword ptr [rdx + riz*2 + 0x60]; vpmovmskb eax, ymm4; inc eax; jne 0x2be04; vzeroupper; ret; 
0x0000000000473c4a: fnstcw word ptr [rdi + 1]; call rax; 
0x000000000043988c: frstor dword ptr [rdi - 0x18]; insd dword ptr [rdi], dx; mov edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x000000000046239b: frstor dword ptr [rdi - 0x18]; pop rsi; add bl, bh; jmp qword ptr [rsi + 0x66]; 
0x000000000046b7ea: fsqrt; push qword ptr [rcx]; rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x00000000004602e3: fst dword ptr [rax]; add byte ptr [rax], al; test edx, 0x40000000; je 0x602bf; ret; 
0x000000000045ffbc: fstp xword ptr [rdx]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000411b2c: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000411278: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000411295: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000411350: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000436843: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000004368ec: fsub dword ptr [rsi + 0xf]; xlatb; retf 0xf66; xlatb; ret; 
0x0000000000410bcc: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000042f6ef: fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x00000000004620b9: fsub st(3), st(0); shl dword ptr [rdi - 0x18], cl; add edi, ebx; jmp qword ptr [rsi + 0x66]; 
0x000000000042f2fa: fsubr qword ptr [rcx]; ret 0xe162; 
0x0000000000476b7b: fsubr st(0); jmp rcx; 
0x0000000000458df3: fucomi st(3); lea esp, [rsi + 0x2e]; nop dword ptr [rax + rax]; mov eax, 0xba; syscall; 
0x0000000000464128: fucompi st(0); or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000409cf7: fucompi st(0); ret; 
0x00000000004096b2: fucompi st(0); sub byte ptr [rdi - 0x2f140001], dh; nop word ptr [rax + rax]; ret; 
0x000000000044d4a8: hlt; cmp edi, ebx; dec dword ptr [rax + 0x29]; ret; 
0x000000000041dfec: hlt; idiv bh; dec dword ptr [rdi]; xchg ebp, eax; ret 0x2141; 
0x00000000004112c8: hlt; mov eax, edx; syscall; 
0x0000000000467a3b: hlt; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000401705: hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000044da98: hlt; ret; 
0x0000000000444ed7: hlt; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000046a39a: idiv ah; jmp qword ptr [rsi + 0x2e]; 
0x000000000041d7fb: idiv bh; call qword ptr [rax]; 
0x000000000041cd85: idiv bh; call rcx; 
0x0000000000417454: idiv bh; dec dword ptr [rax - 0x77]; ret 0x1b9; 
0x00000000004171d6: idiv bh; dec dword ptr [rax - 0x77]; ret 0x8341; 
0x000000000041e192: idiv bh; dec dword ptr [rbx - 0x90f7b]; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x000000000041e28c: idiv bh; dec dword ptr [rdi]; test dword ptr [rdx], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x8e743], al; jmp qword ptr [rax]; 
0x000000000041dfed: idiv bh; dec dword ptr [rdi]; xchg ebp, eax; ret 0x2141; 
0x000000000041da8a: idiv bh; dec dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000417816: idiv bh; dec ecx; ret; 
0x000000000041d94f: idiv bh; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x0000000000475ba0: idiv bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000403943: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000041b2a9: idiv bh; jmp qword ptr [rsi - 0x7f]; 
0x0000000000472838: idiv byte ptr [rax - 0x1b]; jmp 0x727bb; ret; 
0x0000000000473338: idiv byte ptr [rax - 0x1b]; jmp 0x732bb; ret; 
0x0000000000411e43: idiv byte ptr [rdi + 0x53564d41]; mov eax, 0x9d; syscall; 
0x0000000000458d9c: idiv byte ptr [rdi + 2]; mov eax, 0xe; syscall; 
0x000000000044090a: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x0000000000473fc1: idiv dword ptr [rax + rcx]; jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x0000000000471db2: idiv eax; jmp qword ptr [rsi + 0x66]; 
0x000000000047339d: idiv edi; call qword ptr [rbp + 0x48]; 
0x000000000042345e: idiv edi; dec dword ptr [rax + 0x39]; ret; 
0x000000000041d02f: idiv edi; dec dword ptr [rax + 1]; ret 0x8844; 
0x000000000042a74d: idiv edi; dec dword ptr [rax + 1]; ret; 
0x000000000047505b: idiv edi; dec dword ptr [rax - 0x75]; test dword ptr [rax + 0x44fffff7], ebp; mov dword ptr [rbp - 0x848], ebx; mov ecx, r11d; call rax; 
0x000000000041d693: idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004674c1: idiv edi; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000041cd77: idiv edi; dec dword ptr [rbx - 0x1f7cc7bb]; add cl, byte ptr [rcx - 0x437a763a]; idiv bh; call rcx; 
0x00000000004176ea: idiv edi; dec ecx; ret; 
0x0000000000475069: idiv edi; inc dword ptr [rcx + rcx*4 - 0x27]; call rax; 
0x0000000000475195: idiv edi; inc dword ptr [rcx + rcx*4 - 0x3f]; call rax; 
0x0000000000475062: idiv edi; inc dword ptr [rcx + rcx*4 - 0x63]; mov eax, 0x44fffff7; mov ecx, ebx; call rax; 
0x000000000041dee5: idiv edi; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x000000000041d6e9: idiv edi; jmp qword ptr [rax]; 
0x000000000042addd: idiv edi; jmp qword ptr [rdi - 0x18]; 
0x0000000000420a73: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041df52: idiv edi; jmp qword ptr [rsi + 0x66]; 
0x000000000041dce4: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000041b22b: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000046a399: idiv r12b; jmp qword ptr [rsi + 0x2e]; 
0x0000000000420a72: idiv rdi; jmp qword ptr [rsi + 0x2e]; 
0x000000000041df51: idiv rdi; jmp qword ptr [rsi + 0x66]; 
0x0000000000461c86: imul al; and al, 0x68; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004260ab: imul eax, dword ptr [rax + 0xf], 0x45; ret 0x389; 
0x0000000000426266: imul eax, dword ptr [rcx + 0xf], 0x8d4937b6; pop rdi; add dword ptr [rcx + rcx*4 - 0x11], ecx; call qword ptr [rax + 0x18]; 
0x000000000042e251: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x000000000040ccfe: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0xcd53; adc dword ptr [rcx + 7], edi; ret; 
0x00000000004549ab: imul eax, edx; ret; 
0x000000000041b95b: imul eax; call qword ptr [rsi - 2]; 
0x0000000000439cfd: imul eax; popfq; jae 0x39cfe; dec dword ptr [rax - 0x77]; ret; 
0x0000000000460e8c: imul ecx, dword ptr [rax + 0x29], -0x29; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000041b433: imul ecx, dword ptr [rax - 0x75], 0x10394807; je 0x1b490; ret; 
0x000000000041b4c3: imul ecx, dword ptr [rax - 0x75], 0x10394807; je 0x1b520; ret; 
0x00000000004132cc: imul ecx, dword ptr [rax], 0x5b; pop r12; pop r13; pop r14; pop rbp; ret; 
0x00000000004017b2: imul ecx, dword ptr [rcx], 0x67; call 0x774b0; mov byte ptr [rip + 0xa62fe], 1; pop rbp; ret; 
0x00000000004781aa: imul ecx; sar byte ptr [rsi - 0x166f0001], 0xbf; xchg ebx, eax; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000040cb97: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c95d: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004701d1: imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x000000000042f6f1: imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x0000000000449bde: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000046ed23: imul edi, esi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000459aa3: imul edx, dword ptr [rip - 0x3d090000], 0x40000000; je 0x59a7f; ret; 
0x000000000041b430: imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4c0: imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x000000000044a263: imul esi, eax, 0xc7490000; ret 0xffff; 
0x000000000046089b: imul esi, edi, -0x40; test eax, eax; je 0x60787; bsf eax, eax; ret; 
0x0000000000411261: in al, 0; add byte ptr [rax], al; syscall; 
0x000000000042a2a8: in al, 0x41; add byte ptr [rax], al; test dh, 8; jne 0x2a25b; ret; 
0x000000000042d90b: in al, 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000425d82: in al, 0x48; mov edi, dword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000042d1bc: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000043755b: in al, 0x75; pop rbx; pop r12; pop rbp; ret; 
0x0000000000453e35: in al, 0x88; or cl, ch; ret; 
0x000000000041be54: in al, 0xd; or dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000453cb8: in al, 0xe9; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000418c5c: in al, 0xf; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000453f73: in al, 0xfb; jmp qword ptr [rsi + 0x2e]; 
0x0000000000477415: in al, dx; adc byte ptr [rdi - 0x18], ah; jae 0x7743e; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000004772a1: in al, dx; adc byte ptr [rdi - 0x18], ah; out 0x24, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000423a75: in al, dx; add dword ptr [rip + 0x8f2e800], -2; jmp qword ptr [rsi - 0x70]; 
0x0000000000431320: in al, dx; add eax, 0x83480000; ret 0xeb10; 
0x0000000000454841: in al, dx; call 0x4de0; mov eax, dword ptr [rbp - 0x14]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454849: in al, dx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041b4df: in al, dx; movzx eax, byte ptr [rip + 0x916c9]; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x916bd], al; ret; 
0x000000000041b44f: in al, dx; movzx eax, byte ptr [rip + 0x91759]; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x9174d], al; ret; 
0x000000000042345a: in al, dx; or al, ch; lahf; idiv edi; dec dword ptr [rax + 0x39]; ret; 
0x000000000046e45b: in al, dx; or byte ptr [rax - 0x39], cl; ret; 
0x0000000000458ea5: in al, dx; or byte ptr [rax - 0x75], cl; jg 0x58eb3; call qword ptr [rbx]; 
0x00000000004502fd: in al, dx; or byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x0000000000463506: in al, dx; or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000434be4: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004016d3: in al, dx; ret; 
0x0000000000409eac: in al, dx; sbb byte ptr [rax - 0x39], cl; ret; 
0x0000000000409ade: in al, dx; sbb byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000411a5d: in al, dx; sbb byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000452df0: in al, dx; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004456ab: in al, dx; sti; jmp qword ptr [rdi - 0x18]; 
0x000000000044fef0: in al, dx; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000419af7: in eax, 0x48; lea esi, [rbp - 8]; syscall; 
0x000000000043e45f: in eax, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000458e9e: in eax, 0x53; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000041327a: in eax, 0x5b; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000046c80c: in eax, 0x74; jne 0x6c800; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046c77a: in eax, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000044971f: in eax, 0xe2; add eax, 0x54800; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000041981a: in eax, 0xe8; adc byte ptr [rdi + rdi*8 - 0x38b7a201], al; add eax, 0x93074; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000478a4d: in eax, 0xe8; lodsd eax, dword ptr [rsi]; ret 0xfff8; 
0x0000000000458a70: in eax, 0xe8; mov al, dl; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004549cd: in eax, 0xe8; popfq; stc; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000041b8c7: in eax, 0xe8; push rbx; fiadd word ptr [rax]; add byte ptr [rbp + 0x5d0775c0], al; ret; 
0x0000000000409590: in eax, 0xe8; retf 0x86; add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x000000000040b519: in eax, 0xff; dec dword ptr [rax - 0x77]; ret 0xcb8; 
0x0000000000420db7: in eax, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000411253: in eax, 0xff; rol byte ptr [rbp + 0x311675c0], 1; rcr byte ptr [rbp - 0x3d], 0x66; nop; mov eax, 0xe4; syscall; 
0x000000000040b72a: in eax, 2; lea rax, [rip + 0x2a4d]; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b62a: in eax, 2; lea rax, [rip + 0x2b8d]; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a0ca: in eax, 2; lea rax, [rip - 0x1bf13]; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000040b751: in eax, 2; lea rdx, [rip + 0x1936]; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b651: in eax, 2; lea rdx, [rip + 0x1a66]; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000040b781: in eax, 2; lea rdx, [rip + 0x21c6]; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b681: in eax, 2; lea rdx, [rip + 0x22f6]; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000040b7a1: in eax, 2; lea rdx, [rip + 0x266]; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b6a1: in eax, 2; lea rdx, [rip + 0x396]; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000040b6f7: in eax, 2; lea rdx, [rip + 0xa90]; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000040b5f7: in eax, 2; lea rdx, [rip + 0xbc0]; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042a121: in eax, 2; lea rdx, [rip - 0x1c7aa]; lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000042a0f1: in eax, 2; lea rdx, [rip - 0x1d03a]; lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000042a097: in eax, 2; lea rdx, [rip - 0x1dee0]; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a141: in eax, 2; lea rdx, [rip - 0x1e70a]; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x0000000000456a99: in eax, 4; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000042a2a1: in eax, 8; jne 0x2a285; lea rax, [rip + 0x41e4]; test dh, 8; jne 0x2a25b; ret; 
0x000000000042a383: in eax, 8; jne 0x2a335; ret; 
0x0000000000459a93: in eax, 8; jne 0x59a45; ret; 
0x0000000000460263: in eax, 8; jne 0x60225; ret; 
0x00000000004602d3: in eax, 8; jne 0x60295; ret; 
0x0000000000429fb3: in eax, 8; lea rdx, [rip + 0x1894]; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x000000000042a02f: in eax, 8; lea rdx, [rip + 0x1b48]; lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000040b8f5: in eax, 8; lea rdx, [rip + 0x5122]; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000040b965: in eax, 8; lea rdx, [rip + 0x5732]; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x0000000000467c93: in eax, 8; lea rdx, [rip + 0xad4]; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000042a3e5: in eax, 8; lea rdx, [rip + 0xb932]; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x0000000000411247: in eax, dx; cmp eax, 0x85480009; sal byte ptr [rax + rdx + 0x55], 0x48; mov ebp, esp; call rax; 
0x0000000000464d52: in eax, dx; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000439bcf: in eax, dx; fdiv st(5), st(0); jmp qword ptr [rsi + 0x66]; 
0x000000000042bbb2: in eax, dx; je 0x2bc0c; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000042bfb2: in eax, dx; je 0x2c00c; and ch, al; std; xlatb; ret 0xc0ff; 
0x0000000000436d32: in eax, dx; lea rax, [rcx - 1]; ret; 
0x0000000000425bb2: in eax, dx; ret; 
0x0000000000436e82: in eax, dx; sub rax, 1; ret; 
0x000000000046c906: inc byte ptr [rax]; add byte ptr [rax], al; leave; mov rax, r10; ret; 
0x0000000000404796: inc byte ptr [rax]; add byte ptr [rax], al; mov rdi, r8; mov esi, r13d; call rax; 
0x0000000000478ae3: inc byte ptr [rbp + 0x31]; sar byte ptr [rax + 0xca], cl; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x000000000045970b: inc byte ptr [rbp + 0x31]; sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004596e0: inc byte ptr [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041fb89: inc byte ptr [rbx - 0x67b7df18]; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000448749: inc byte ptr [rbx]; je 0x48750; ret; 
0x000000000046ce26: inc byte ptr [rcx]; jbe 0x6ce30; jmp 0x6ca10; nop; ret; 
0x0000000000452336: inc dword ptr [rax - 0x13f43]; jmp qword ptr [rdi + 0xf]; 
0x000000000041f433: inc dword ptr [rax - 0x46273]; call qword ptr [rax]; 
0x00000000004209c3: inc dword ptr [rax - 0x4b743]; jmp qword ptr [rax]; 
0x000000000044c717: inc dword ptr [rax - 0x80]; call qword ptr [rax + 0xf]; 
0x0000000000450dd2: inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x000000000042959f: inc dword ptr [rax - 0x80]; test byte ptr [rdi + 0x31d23145], 0xd2; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000453675: inc dword ptr [rax]; add byte ptr [rax + 0x21], cl; ret 0x8341; 
0x0000000000404fea: inc dword ptr [rax]; add byte ptr [rsi + 1], dh; ret; 
0x000000000045850f: inc dword ptr [rax]; lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004377ea: inc dword ptr [rbp + 0x31]; shr byte ptr [rdx + 1], 0x48; lea ecx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x000000000043be10: inc dword ptr [rbp + 0x480675c0]; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000043a2fc: inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x0000000000411963: inc dword ptr [rbp + 0x5d0874c0]; ret; 
0x00000000004173e5: inc dword ptr [rbp + rcx*4 + 0x53]; add dword ptr [rcx + 0x63], ecx; ret 0x8d48; 
0x0000000000450f35: inc dword ptr [rbp - 0x5d7bf037]; or byte ptr [rax], al; add byte ptr [rbx - 0x9b43], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000478c2c: inc dword ptr [rbx + 0x3145fce0]; rol byte ptr [rbx - 0x3d76fd38], cl; mov eax, r13d; syscall; 
0x0000000000426a23: inc dword ptr [rbx + 0x415bef23]; pop rsp; pop rbp; ret; 
0x000000000042952b: inc dword ptr [rbx + 0x7401046f]; lodsb al, byte ptr [rsi]; mov eax, 0x83; ret; 
0x000000000042954e: inc dword ptr [rbx - 0x1f7ce940]; test dword ptr [rdi], 0xfffde684; call qword ptr [rbp + 0x48]; 
0x000000000044fc8c: inc dword ptr [rbx - 0x7af0f501]; ret; 
0x000000000044b70c: inc dword ptr [rbx - 0x7fbfa711]; jmp qword ptr [rax]; 
0x0000000000452346: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0xf]; 
0x000000000046dffd: inc dword ptr [rbx - 6]; jmp qword ptr [rsi + 0x66]; 
0x0000000000455ad5: inc dword ptr [rcx + 0x5c]; pop rbp; ret; 
0x000000000045376f: inc dword ptr [rcx + 0xf]; mov dh, 0x56; or al, 0xf6; ret 0xf40; 
0x00000000004202f9: inc dword ptr [rcx + 1]; ret 0x8944; 
0x0000000000458dda: inc dword ptr [rcx + rcx*4 - 0x16]; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000458e0d: inc dword ptr [rcx + rcx*4 - 0x16]; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x00000000004506e6: inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop r12; pop rbp; ret; 
0x000000000047506b: inc dword ptr [rcx + rcx*4 - 0x27]; call rax; 
0x0000000000475197: inc dword ptr [rcx + rcx*4 - 0x3f]; call rax; 
0x0000000000475064: inc dword ptr [rcx + rcx*4 - 0x63]; mov eax, 0x44fffff7; mov ecx, ebx; call rax; 
0x0000000000419bca: inc dword ptr [rcx - 0x46]; and al, byte ptr [rax]; add byte ptr [rax], al; mov rsi, rbx; mov eax, 9; syscall; 
0x000000000044ec7a: inc dword ptr [rcx - 0x46]; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x000000000041fe40: inc dword ptr [rcx - 0x77]; ret 0x2948; 
0x000000000046ae54: inc dword ptr [rcx - 0x77]; ret 0x440f; 
0x000000000046ba88: inc dword ptr [rcx - 0x77]; ret 0xe883; 
0x0000000000443b61: inc dword ptr [rcx - 0x77]; ret; 
0x000000000043bb48: inc dword ptr [rcx - 0x7d]; ret; 
0x00000000004199ef: inc dword ptr [rcx - 0xa]; ret 0x7401; 
0x0000000000443394: inc dword ptr [rcx - 0xa]; ret 0x7501; 
0x00000000004454b9: inc dword ptr [rcx - 0xa]; ret 0xf02; 
0x0000000000446449: inc dword ptr [rcx - 0xa]; ret; 
0x000000000040d5fa: inc dword ptr [rcx - 0xff3e]; jmp qword ptr [rdx - 0x1f]; 
0x000000000041d7f3: inc dword ptr [rcx]; add byte ptr [rax], al; add bh, al; test eax, esi; idiv bh; call qword ptr [rax]; 
0x000000000041fccd: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000044d3b3: inc dword ptr [rcx]; ret 0xd089; 
0x0000000000460859: inc dword ptr [rdx]; add rax, rdi; ret; 
0x0000000000460876: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000460776: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000460849: inc dword ptr [rdx]; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460868: inc dword ptr [rdx]; lea rax, [rdi + rax + 8]; ret; 
0x0000000000460eeb: inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004356db: inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000042be81: inc eax; bzhi edx, eax, edx; jne 0x2bc60; xor eax, eax; vzeroupper; ret; 
0x0000000000410a03: inc eax; je 0x108b0; nop dword ptr [rax + rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000042bdbf: inc eax; jne 0x2be04; vzeroupper; ret; 
0x000000000042bdf4: inc eax; jne 0x2be40; vzeroupper; ret; 
0x000000000041147a: inc ebx; nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x0000000000460d1a: inc ecx; call 0x77fed223; ret; 
0x0000000000429349: inc ecx; call qword ptr [rbx]; 
0x000000000042bd91: inc ecx; jne 0x2bcc0; vzeroupper; ret; 
0x000000000042bc4b: inc ecx; jne 0x2bcc3; vzeroupper; ret; 
0x00000000004109d4: inc ecx; or rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042d037: inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x0000000000460366: inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410c86: inc edi; add eax, edi; vzeroupper; ret; 
0x000000000042b134: inc edi; add rax, rdi; jmp 0x2b0fc; xor eax, eax; ret; 
0x0000000000468014: inc edi; add rax, rdi; jmp 0x67fdc; xor eax, eax; ret; 
0x0000000000410494: inc edi; add rax, rdi; vzeroupper; ret; 
0x000000000042d904: inc edi; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x0000000000450e4f: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000042d1c0: inc edx; shr rax, 0x10; jmp 0x2d1b0; mov rax, rdx; ret; 
0x000000000045f870: inc edx; shr rax, 0x10; jmp 0x5f860; mov rax, rdi; ret; 
0x000000000040bce2: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040dc6b: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d3fd: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000041d79e: inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x000000000042b133: inc rdi; add rax, rdi; jmp 0x2b0fc; xor eax, eax; ret; 
0x0000000000468013: inc rdi; add rax, rdi; jmp 0x67fdc; xor eax, eax; ret; 
0x0000000000410493: inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042d903: inc rdi; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000042d1bf: inc rdx; shr rax, 0x10; jmp 0x2d1b0; mov rax, rdx; ret; 
0x000000000045f86f: inc rdx; shr rax, 0x10; jmp 0x5f860; mov rax, rdi; ret; 
0x000000000040bce1: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040dc6a: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d3fc: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000435364: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044e990: insb byte ptr [rdi], dx; cmp bh, ah; jmp qword ptr [rsi + 0x2e]; 
0x0000000000406ba8: insb byte ptr [rdi], dx; dec dword ptr [rcx]; add byte ptr [rax - 9], cl; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x0000000000411b73: insb byte ptr [rdi], dx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000408aad: insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000044e075: insb byte ptr [rdi], dx; ret 0x8948; 
0x0000000000456dcf: insb byte ptr [rdi], dx; ret 0xf1e9; 
0x00000000004146b1: insb byte ptr [rdi], dx; ret 0xf41; 
0x0000000000408dd9: insb byte ptr [rdi], dx; ret; 
0x0000000000454af5: insb byte ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x47; adc byte ptr [rax - 0x77], cl; ja 0x54b27; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004185c0: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add eax, 0x94337; ret; 
0x0000000000418673: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; sbb eax, 2; add byte ptr [rax], al; syscall; 
0x000000000044aa2f: insd dword ptr [rdi], dx; add al, 0; add byte ptr [rcx - 0x77], cl; ret 0x8548; 
0x00000000004640f7: insd dword ptr [rdi], dx; add byte ptr [rcx - 0x75], cl; jl 0x64121; or byte ptr [rdi - 0x18], ah; mov word ptr [rbp - 6], ds; jmp qword ptr [rsi + 0x66]; 
0x000000000040b347: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7c1076b4], dl; ret; 
0x00000000004109b6: insd dword ptr [rdi], dx; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042f0db: insd dword ptr [rdi], dx; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000047435d: insd dword ptr [rdi], dx; call 0xfffffffff07cceaf; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047466f: insd dword ptr [rdi], dx; call 0xfffffffff07cd1c1; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474993: insd dword ptr [rdi], dx; call 0xfffffffff07cd4e5; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000459e4b: insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x000000000041b42f: insd dword ptr [rdi], dx; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4bf: insd dword ptr [rdi], dx; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x000000000043988f: insd dword ptr [rdi], dx; mov edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000409edf: insd dword ptr [rdi], dx; ret 9; 
0x000000000044d41f: insd dword ptr [rdi], dx; ret; 
0x000000000044d418: int 0x28; add byte ptr [rax], al; add byte ptr [rdi - 0x18], ah; insd dword ptr [rdi], dx; ret; 
0x000000000046a842: int 0x31; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x000000000046e69f: int 0x5c; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000429239: int 0x83; outsd dx, dword ptr [rsi]; add al, 1; je 0x292e9; xor eax, eax; ret; 
0x000000000044eaf2: int 0x90; jmp rdx; 
0x0000000000447647: int 0xfb; jmp qword ptr [rdi - 0x18]; 
0x00000000004175a3: int 0xfe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000478050: int 0xff; dec dword ptr [rax - 0x77]; ret 0x31e9; 
0x0000000000448ea1: int 5; add byte ptr [rdx - 0x75], cl; add al, 0xe0; test rax, rax; je 0x48eaf; call rax; 
0x0000000000430ab8: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000040cfb5: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000040dc69: int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d3fb: int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000045ff39: int1; jae 0x5ff88; movsxd rax, ecx; ret; 
0x00000000004357af: int1; jb 0x355a4; mov rax, r8; vzeroupper; ret; 
0x0000000000460fe2: int1; jb 0x60d64; mov rax, r8; vzeroupper; ret; 
0x000000000040c995: int1; jl 0xc9e0; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040fb81: int1; jl 0xfbcc; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb88: int1; jl 0xfbd3; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb8f: int1; jl 0xfbda; adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fba2: int1; jl 0xfbed; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fba9: int1; jl 0xfbf4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fbb0: int1; jl 0xfbfb; adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fbbd: int1; jl 0xfc08; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fbc3: int1; jl 0xfc0e; adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fc8a: int1; jl 0xfcd5; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fc91: int1; jl 0xfcdc; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fc98: int1; jl 0xfce3; adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fce2: int1; jl 0xfd2d; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fce9: int1; jl 0xfd34; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fcf0: int1; jl 0xfd3b; adc dword ptr [rsi + 3], edx; ret; 
0x000000000040fd7f: int1; jl 0xfdca; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd86: int1; jl 0xfdd1; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd8d: int1; jl 0xfdd8; adc dword ptr [rsi + 7], edx; ret; 
0x00000000004684e4: int1; lea rax, [rdi + rax*4]; ret; 
0x0000000000473e28: int1; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000473df4: int1; mov esi, 0xa; mov edi, 1; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x000000000042c6ae: int1; or rax, rdi; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000042c9ce: int1; ret; 
0x00000000004679cd: int1; sar esi, cl; test esi, esi; je 0x67a50; mov eax, eax; ret; 
0x00000000004182ae: int1; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x1826d; xor eax, eax; ret; 
0x000000000044b63e: int1; sti; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000042bf7b: int1; sub eax, ecx; ret; 
0x000000000042bed4: int1; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c2d4: int1; sub rax, rcx; jne 0x2c2f0; ret; 
0x000000000046c770: int1; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6c760; mov eax, 1; ret; 
0x000000000042c9c5: int1; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000045f0c5: int1; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000042ce57: int1; vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000045f527: int1; vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x0000000000458a2b: int1; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000044fe32: iretd; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000411055: iretd; add rax, rdi; ret; 
0x0000000000437aed: iretd; add rsi, 8; cmp rsi, r8; jne 0x37ad0; mov eax, edi; ret; 
0x0000000000436810: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000436850: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000435ff0: iretd; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x0000000000418a0b: iretd; cmp r8, r10; jae 0x18982; ret; 
0x000000000042bc4a: iretd; inc ecx; jne 0x2bcc3; vzeroupper; ret; 
0x0000000000411074: iretd; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000410f74: iretd; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000411065: iretd; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000411046: iretd; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000478a8e: iretd; mov eax, 0xca; syscall; 
0x00000000004788a8: iretd; mov esi, ebx; mov eax, 0xca; syscall; 
0x000000000042bd8d: iretd; mov rdi, rdx; inc ecx; jne 0x2bcc0; vzeroupper; ret; 
0x000000000041923b: iretd; movsx eax, byte ptr [rsi]; neg eax; ret; 
0x0000000000430b82: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000478999: iretd; or eax, 2; mov edx, eax; mov eax, r12d; syscall; 
0x0000000000460874: iretd; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000460774: iretd; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000460856: iretd; sar rdi, 2; add rax, rdi; ret; 
0x0000000000460846: iretd; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460865: iretd; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000429fd7: iretd; test esi, esi; lea rdx, [rip + 0x161f]; lea rax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x0000000000467cb7: iretd; test esi, esi; lea rdx, [rip + 0x83f]; lea rax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x000000000044ca2d: iretd; xchg edx, eax; add eax, 0x4632e900; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000478e7c: iretd; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004100d7: ja 0x10100; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000410077: ja 0x10109; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000410326: ja 0x10340; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x00000000004102c6: ja 0x10349; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004112f7: ja 0x11348; ret; 
0x0000000000411391: ja 0x11398; ret; 
0x00000000004113f8: ja 0x11430; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11443; leave; ret; 
0x000000000041145e: ja 0x11468; ret; 
0x0000000000411b72: ja 0x11be0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411d2c: ja 0x11d80; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11d95; leave; ret; 
0x00000000004124d5: ja 0x1247a; or dword ptr [rax], eax; ret; 
0x0000000000419145: ja 0x19160; mov rax, qword ptr [rdx + 0x48]; test ecx, ecx; je 0x19158; mov qword ptr [rsi], rax; ret; 
0x0000000000422a91: ja 0x22ba0; mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000425d5b: ja 0x25d70; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426265: ja 0x262d0; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000426347: ja 0x26358; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426559: ja 0x26570; mov rax, qword ptr [rbx + 0x48]; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x00000000004027f2: ja 0x277c; movzx eax, byte ptr [rbp - 0x32]; neg rax; jmp 0x277c; or rax, 0xffffffffffffffff; ret; 
0x000000000042ae66: ja 0x2aea1; ret 0x127e; 
0x000000000042b11b: ja 0x2b108; add eax, ebp; clc; ja 0x2b15b; ret 0x167e; 
0x000000000042b120: ja 0x2b15b; ret 0x167e; 
0x000000000042b55c: ja 0x2b5a6; shl ecx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042d557: ja 0x2d55b; lea rax, [rdi + 2]; ret; 
0x000000000042d573: ja 0x2d579; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000042d5c4: ja 0x2d5ce; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000042d6a9: ja 0x2d6bb; lea rax, [rdi + 0x10]; ret; 
0x000000000042d71f: ja 0x2d735; lea rax, [rdi + 0x14]; ret; 
0x000000000042d7a1: ja 0x2d7bb; lea rax, [rdi + 0x18]; ret; 
0x00000000004319d3: ja 0x2e490; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000432032: ja 0x2e9f0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004326a2: ja 0x2ef60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000431d02: ja 0x31abe; xor eax, eax; vzeroupper; ret; 
0x0000000000431c4d: ja 0x31c22; xor eax, eax; vzeroupper; ret; 
0x0000000000431dec: ja 0x31dc7; nop; xor eax, eax; vzeroupper; ret; 
0x0000000000432a04: ja 0x327ae; xor eax, eax; ret; 
0x000000000043293d: ja 0x32917; xor eax, eax; ret; 
0x0000000000432ade: ja 0x32ac1; xor eax, eax; ret; 
0x0000000000435b36: ja 0x35b40; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000435d08: ja 0x35b40; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x0000000000437a8d: ja 0x37a90; ret; 
0x0000000000437c01: ja 0x37c08; ret; 
0x00000000004384c1: ja 0x384c8; ret; 
0x000000000043876a: ja 0x387c0; ret; 
0x0000000000438838: ja 0x38878; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x3888b; leave; ret; 
0x0000000000438944: ja 0x38950; ret; 
0x0000000000438981: ja 0x38988; ret; 
0x00000000004389ba: ja 0x389c0; ret; 
0x00000000004398af: ja 0x398ad; jmp qword ptr [rsi + 0x2e]; 
0x00000000004398cf: ja 0x398cd; jmp qword ptr [rsi + 0x2e]; 
0x0000000000404a6c: ja 0x4a40; mov rax, rsi; ret; 
0x00000000004054d5: ja 0x54a2; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000454afd: ja 0x54b27; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000455bb3: ja 0x55cd0; mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000456aa9: ja 0x56fc8; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000458ef4: ja 0x58f00; ret; 
0x0000000000459344: ja 0x59418; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000045fc07: ja 0x5fc0b; ret; 
0x000000000045fc23: ja 0x5fc29; mov dword ptr [rdi], ecx; ret; 
0x000000000045fc64: ja 0x5fc6e; mov qword ptr [rdi], rcx; ret; 
0x000000000045fce9: ja 0x5fcfb; ret; 
0x000000000045fd3f: ja 0x5fd55; ret; 
0x000000000045fdc1: ja 0x5fddb; ret; 
0x00000000004613f6: ja 0x61403; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004615ce: ja 0x61403; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x0000000000461cf3: ja 0x61d00; xor eax, eax; ret; 
0x0000000000461daf: ja 0x61de8; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x61dfb; leave; ret; 
0x0000000000467d29: ja 0x67d64; ret 0x117e; 
0x0000000000467ffe: ja 0x67feb; add eax, ebp; clc; ja 0x6803e; ret 0x137e; 
0x0000000000468003: ja 0x6803e; ret 0x137e; 
0x00000000004682af: ja 0x682c3; tzcnt eax, eax; cmp edx, eax; jbe 0x682c0; lea rax, [rdi + rax*4]; ret; 
0x000000000046846f: ja 0x684b9; shl ecx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000046852f: ja 0x68543; tzcnt eax, eax; cmp edx, eax; jbe 0x68540; lea rax, [rdi + rax*4]; ret; 
0x0000000000478190: ja 0x781b1; xor eax, eax; ret; 
0x000000000040b825: ja 0xb871; add byte ptr [rax], al; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000040ba55: ja 0xbb00; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000040b9e9: ja 0xbb0d; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000040bc9f: ja 0xbce1; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000040ce67: ja 0xce62; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040d0da: ja 0xd1c0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d06e: ja 0xd1cd; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d3bf: ja 0xd3c3; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000040d997: ja 0xda40; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d92b: ja 0xda4d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040dc35: ja 0xdc39; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000040e1d4: ja 0xe250; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e3b4: ja 0xe3d6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000040e799: ja 0xe800; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e8e1: ja 0xe8c0; movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040f75e: ja 0xf780; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000040f70e: ja 0xf789; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000040f875: ja 0xf878; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000040fab5: ja 0xfab8; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000040fe5a: ja 0xfe80; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040fdfa: ja 0xfe89; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000040fe1c: ja 0xff1d; mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000411b21: jae 0x11b24; ret; 
0x0000000000411c11: jae 0x11c14; ret; 
0x0000000000411c41: jae 0x11c44; ret; 
0x0000000000411db4: jae 0x11db7; ret; 
0x0000000000411e81: jae 0x11e84; ret; 
0x00000000004182b8: jae 0x1826d; xor eax, eax; ret; 
0x00000000004182ad: jae 0x182a0; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x1826d; xor eax, eax; ret; 
0x0000000000418a0f: jae 0x18982; ret; 
0x0000000000418985: jae 0x189d8; ret; 
0x000000000041b432: jae 0x1b49d; mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b431: jae 0x1b4a6; imul ecx, dword ptr [rax - 0x75], 0x10394807; je 0x1b490; ret; 
0x000000000041b4c2: jae 0x1b52d; mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x000000000041b4c1: jae 0x1b536; imul ecx, dword ptr [rax - 0x75], 0x10394807; je 0x1b520; ret; 
0x000000000041b895: jae 0x1b8d7; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041b8b8: jae 0x1b8fa; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000423e7c: jae 0x23e88; movzx eax, byte ptr [rax]; ret; 
0x0000000000423ea3: jae 0x23ee0; movzx eax, byte ptr [rax]; pop rbx; pop r12; pop rbp; ret; 
0x000000000042805d: jae 0x28080; movzx eax, byte ptr [rax]; ret; 
0x000000000042b541: jae 0x2b44e; xor eax, eax; ret; 
0x000000000042b45f: jae 0x2b467; xor eax, eax; ret; 
0x000000000042b7c1: jae 0x2b6ce; xor eax, eax; ret; 
0x000000000042b6df: jae 0x2b6e7; xor eax, eax; ret; 
0x0000000000437b11: jae 0x37b14; ret; 
0x0000000000437b41: jae 0x37b44; ret; 
0x0000000000437b71: jae 0x37b74; ret; 
0x0000000000437ba1: jae 0x37ba4; ret; 
0x0000000000437bd1: jae 0x37bd4; ret; 
0x0000000000439d00: jae 0x39cfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000040499c: jae 0x4980; mov rax, rsi; ret; 
0x0000000000454b64: jae 0x54b71; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000455e5f: jae 0x55e80; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004561a1: jae 0x56106; pop rbx; mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x000000000045828f: jae 0x582d1; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000045835e: jae 0x58368; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x0000000000458a55: jae 0x58a66; neg eax; ret; 
0x000000000045ff3a: jae 0x5ff88; movsxd rax, ecx; ret; 
0x0000000000466422: jae 0x6646d; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000467a3a: jae 0x67a30; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000468443: jae 0x6835e; xor eax, eax; ret; 
0x0000000000468373: jae 0x6837b; xor eax, eax; ret; 
0x00000000004686d1: jae 0x685de; xor eax, eax; ret; 
0x00000000004685f3: jae 0x685fb; xor eax, eax; ret; 
0x0000000000468a8c: jae 0x68ad6; add eax, edi; ret; 
0x000000000046c779: jae 0x6c760; mov eax, 1; ret; 
0x000000000046d604: jae 0x6d587; sub rax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000046d621: jae 0x6d587; test rax, rax; jne 0x6d60a; ret; 
0x000000000047038d: jae 0x704b3; mov rsi, rax; jmp 0x70325; nop dword ptr [rax + rax]; call rax; 
0x00000000004707b1: jae 0x7084c; leave; mov eax, 1; ret; 
0x0000000000477419: jae 0x7743e; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000040e3d3: jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004100d1: jb 0x10090; cmp rdx, 0x40; ja 0x10100; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000410071: jb 0x10090; cmp rdx, 0x40; ja 0x10109; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000410162: jb 0x10140; vmovdqu64 ymmword ptr [rcx], ymm16; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000410396: jb 0x10380; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000411495: jb 0x114a0; xor eax, eax; ret; 
0x00000000004167e0: jb 0x167f0; mov rcx, rax; cmp rcx, rdx; jne 0x167c0; mov eax, dword ptr [rcx]; ret; 
0x000000000041897c: jb 0x18a15; cmp rsi, r8; jae 0x189d8; ret; 
0x000000000041b42e: jb 0x1b49d; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4be: jb 0x1b52d; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x0000000000424c9c: jb 0x24c90; jmp 0x24ba6; nop dword ptr [rax + rax]; ret; 
0x0000000000426a8c: jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x0000000000429787: jb 0x29752; ret; 
0x000000000042b405: jb 0x2b40d; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000042b477: jb 0x2b461; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b685: jb 0x2b68d; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000042b6f7: jb 0x2b6e1; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042bee0: jb 0x2bef6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042c2e0: jb 0x2c2f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004319d1: jb 0x319cb; ja 0x2e490; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000432030: jb 0x32029; ja 0x2e9f0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004326a0: jb 0x32699; ja 0x2ef60; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004357b0: jb 0x355a4; mov rax, r8; vzeroupper; ret; 
0x00000000004356a0: jb 0x356e4; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000435725: jb 0x356e4; sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x00000000004356d6: jb 0x356e4; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000435779: jb 0x35788; sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000435ab0: jb 0x358a4; mov rax, r8; xtest; jne 0x35ac2; vzeroupper; ret; 
0x000000000044b101: jb 0x4b0ff; jmp qword ptr [rsi + 0x66]; 
0x000000000045001e: jb 0x50030; movsx edx, byte ptr [rdx]; mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x00000000004054d2: jb 0x54cc; jmp 0x12050; nop dword ptr [rax]; ret; 
0x000000000045608e: jb 0x56000; mov qword ptr [rax], rdx; jmp 0x55f96; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x000000000045644c: jb 0x56440; lea eax, [rdx + rdi]; ret; 
0x000000000045718a: jb 0x5713e; sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000460fe3: jb 0x60d64; mov rax, r8; vzeroupper; ret; 
0x0000000000461363: jb 0x610e4; mov rax, r8; xtest; jne 0x61375; vzeroupper; ret; 
0x0000000000468315: jb 0x6831d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000046838b: jb 0x68375; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000468595: jb 0x6859d; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000046860b: jb 0x685f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x00000000004693fd: jb 0x693e0; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000046ca9e: jb 0x6ca20; ret; 
0x0000000000474c14: jb 0x74c1b; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000040bc1b: jb 0xbc5d; vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000040c9db: jb 0xc9f1; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000040ca08: jb 0xca19; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000040ca1c: jb 0xca2a; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000040ca2d: jb 0xca3f; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000040ca42: jb 0xca48; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000040d315: jb 0xd319; vmovdqu64 zmmword ptr [rdx + 0x40], zmm23; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000040d8dd: jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040db8f: jb 0xdb93; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000040e3ca: jb 0xe350; cmp rdx, qword ptr [rip + 0x99745]; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040e341: jb 0xe363; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000040e7ac: jb 0xe7c0; mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040e84a: jb 0xe84c; add byte ptr [rax], al; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000040f2e1: jb 0xf2c0; movups xmmword ptr [r8 + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000040fbba: jb 0xfbca; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fbcd: jb 0xfbd9; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000040fbe6: jb 0xfbf2; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000040fbf9: jb 0xfc01; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000040fc04: jb 0xfc0e; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000040fc11: jb 0xfc15; mov byte ptr [rdi], cl; ret; 
0x000000000040fe51: jb 0xfe10; cmp rdx, 0x80; ja 0xfe80; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040fdf1: jb 0xfe10; cmp rdx, 0x80; ja 0xfe89; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000040fee6: jb 0xfec0; vmovdqu64 zmmword ptr [rcx + 0x100], zmm16; vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000412c92: jbe 0x12cac; sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x00000000004192d6: jbe 0x192c0; cmp eax, ecx; je 0x19204; sub eax, ecx; ret; 
0x0000000000419803: jbe 0x19810; ret; 
0x000000000041b494: jbe 0x1b4fb; jne 0x1b43c; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000041b524: jbe 0x1b58b; jne 0x1b4cc; or byte ptr [rip + 0x91681], 0xc; ret; 
0x000000000042ade3: jbe 0x2ade3; jmp qword ptr [rsi + 0x2e]; 
0x000000000042af81: jbe 0x2afd5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042afc9: jbe 0x2afd5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042b3f6: jbe 0x2b3bd; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b3b2: jbe 0x2b3bd; test eax, eax; je 0x2b3c0; lea rax, [rdi + rsi]; ret; 
0x000000000042b5c9: jbe 0x2b5c0; add rax, rdi; ret; 
0x000000000042b5ad: jbe 0x2b5c3; test eax, eax; je 0x2b3c0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042b676: jbe 0x2b63d; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b632: jbe 0x2b63d; test eax, eax; je 0x2b640; lea rax, [rdi + rsi]; ret; 
0x000000000042b849: jbe 0x2b840; add rax, rdi; ret; 
0x000000000042b82d: jbe 0x2b843; test eax, eax; je 0x2b640; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042b8cf: jbe 0x2bb70; add rax, rdi; add rax, rcx; ret; 
0x000000000042bb36: jbe 0x2bb70; add rax, rdi; ret; 
0x000000000042bb46: jbe 0x2bb70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042bb56: jbe 0x2bb70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042bb66: jbe 0x2bb70; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004319ed: jbe 0x319cb; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000431a0c: jbe 0x319cb; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004326bb: jbe 0x32699; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004326db: jbe 0x32699; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x00000000004344e7: jbe 0x344f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004354c7: jbe 0x354d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000435531: jbe 0x35550; test eax, eax; je 0x355a0; tzcnt eax, eax; vzeroupper; ret; 
0x000000000040423d: jbe 0x424f; syscall; 
0x00000000004438f6: jbe 0x43902; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000404fad: jbe 0x4fb0; ret; 
0x0000000000404fed: jbe 0x4ff0; ret; 
0x000000000040519d: jbe 0x51a0; ret; 
0x0000000000458e7a: jbe 0x58e88; jmp 0x58d10; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x0000000000460236: jbe 0x6023e; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000460760: jbe 0x60769; kmovd eax, k0; test eax, eax; je 0x60780; bsf eax, eax; ret; 
0x00000000004651f1: jbe 0x651eb; lea rdi, [rdi + 0x10]; jmp 0x65276; shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046641b: jbe 0x6642d; lea rdi, [rdi - 0x10]; jmp 0x66496; shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000467e54: jbe 0x67eb5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000467ea9: jbe 0x67eb5; inc rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004682b7: jbe 0x682c0; lea rax, [rdi + rax*4]; ret; 
0x0000000000468308: jbe 0x682c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x00000000004684e3: jbe 0x684d6; lea rax, [rdi + rax*4]; ret; 
0x00000000004684c3: jbe 0x684d9; test eax, eax; je 0x682c8; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000468537: jbe 0x68540; lea rax, [rdi + rax*4]; ret; 
0x0000000000468588: jbe 0x68540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468764: jbe 0x68757; lea rax, [rdi + rax*4]; ret; 
0x0000000000468744: jbe 0x6875a; test eax, eax; je 0x68548; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000046898c: jbe 0x689dd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000468a2e: jbe 0x68a7f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x00000000004687f4: jbe 0x68b00; add rax, rdi; add rax, rcx; ret; 
0x0000000000468a8b: jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aab: jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468acb: jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468aeb: jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000468ef6: jbe 0x68eac; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000046ce28: jbe 0x6ce30; jmp 0x6ca10; nop; ret; 
0x0000000000401012: je 0x1016; call rax; 
0x0000000000401012: je 0x1016; call rax; add rsp, 8; ret; 
0x00000000004103e5: je 0x103fe; clc; ret; 
0x00000000004103ec: je 0x10405; cld; ret; 
0x0000000000410479: je 0x104d0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000410613: je 0x104d4; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000410876: je 0x108b0; bsf eax, eax; add rax, rdi; ret; 
0x0000000000410a05: je 0x108b0; nop dword ptr [rax + rax]; bsf eax, eax; add rax, rdi; ret; 
0x0000000000410a65: je 0x10a70; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000410c67: je 0x10cc0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000410da4: je 0x10cc4; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000410f14: je 0x10e44; tzcnt eax, eax; xtest; jne 0x10f27; vzeroupper; ret; 
0x0000000000410f60: je 0x10f69; kmovd eax, k0; test eax, eax; je 0x10f80; bsf eax, eax; ret; 
0x0000000000410f68: je 0x10f80; bsf eax, eax; ret; 
0x0000000000411093: je 0x10f87; bsf eax, eax; ret; 
0x000000000041108b: je 0x11094; kmovd eax, k0; shr eax, cl; je 0x10f87; bsf eax, eax; ret; 
0x00000000004110d0: je 0x110b2; pmovmskb edx, xmm4; test edx, edx; je 0x110de; bsf eax, edx; ret; 
0x00000000004110d8: je 0x110de; bsf eax, edx; ret; 
0x000000000041117d: je 0x11190; bsf rax, rdx; ret; 
0x0000000000411120: je 0x111a0; bsf rax, rdx; ret; 
0x000000000041124e: je 0x11260; push rbp; mov rbp, rsp; call rax; 
0x000000000041128b: je 0x1129f; mov rdx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004112eb: je 0x11300; xor eax, eax; syscall; 
0x00000000004112eb: je 0x11300; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x11348; ret; 
0x00000000004113df: je 0x11410; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000411966: je 0x11970; pop rbp; ret; 
0x00000000004119a6: je 0x119b0; pop rbp; ret; 
0x0000000000411bb6: je 0x11b5f; mov r10d, r12d; xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x0000000000411b5d: je 0x11ba0; mov r10d, r12d; mov rdi, rbx; mov eax, 9; syscall; 
0x0000000000412459: je 0x12460; ret; 
0x00000000004124d0: je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x00000000004127af: je 0x127e2; movzx ecx, byte ptr [rax + 1]; jmp 0x126be; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000413b48: je 0x13b50; mov eax, r8d; ret; 
0x0000000000413b3d: je 0x13b8f; mov r8d, 1; test rsi, rsi; je 0x13b50; mov eax, r8d; ret; 
0x0000000000414009: je 0x13ff3; ret; 
0x0000000000401487: je 0x149f; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000401737: je 0x1740; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401737: je 0x1740; mov edi, 0x4a7aa8; jmp rax; ret; 
0x0000000000401779: je 0x1788; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401779: je 0x1788; mov edi, 0x4a7aa8; jmp rax; nop word ptr [rax + rax]; ret; 
0x00000000004017ae: je 0x17bb; mov edi, 0x496b20; call 0x774b0; mov byte ptr [rip + 0xa62fe], 1; pop rbp; ret; 
0x0000000000418279: je 0x182ba; ret; 
0x0000000000418a37: je 0x18a60; mov rdx, qword ptr [rcx]; mov rcx, rdi; jmp 0x189bc; nop dword ptr [rax]; ret; 
0x0000000000418fe4: je 0x18b89; xor ecx, ecx; jmp 0x18bd9; ret; 
0x000000000041914d: je 0x19158; mov qword ptr [rsi], rax; ret; 
0x00000000004191c5: je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004191c5: je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; nop; ret; 
0x00000000004191c0: je 0x191d0; test rdx, rdx; je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004192da: je 0x19204; sub eax, ecx; ret; 
0x0000000000401978: je 0x1981; mov eax, 1; jmp 0x1986; mov eax, 0; leave; ret; 
0x0000000000419824: je 0x19856; or dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000419987: je 0x19a18; mov esi, 1; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000419b01: je 0x19b18; xor eax, eax; mov dword ptr [rip + 0x930a9], eax; pop rbp; ret; 
0x0000000000419b3e: je 0x19b50; mov rsi, 0xffffffffffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x0000000000419b8b: je 0x19bbb; mov rbx, qword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000041b43a: je 0x1b490; ret; 
0x000000000041b4ca: je 0x1b520; ret; 
0x0000000000401e28: je 0x1e34; or dword ptr [rip + 0xaacc0], 0x400; ret; 
0x0000000000421c7c: je 0x21c83; test ax, ax; je 0x21c90; lea rdx, [rip + 0x60756]; add rax, rdx; ret; 
0x0000000000421c81: je 0x21c90; lea rdx, [rip + 0x60756]; add rax, rdx; ret; 
0x0000000000422356: je 0x21ded; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000422bec: je 0x22bef; ret; 
0x0000000000423358: je 0x23336; jmp 0x2333e; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000424c97: je 0x24ce0; cmp r13, rax; jb 0x24c90; jmp 0x24ba6; nop dword ptr [rax + rax]; ret; 
0x00000000004251dc: je 0x251f0; sub eax, 1; pop rbp; mov dword ptr [rip + 0x87a8c], eax; ret; 
0x00000000004260d9: je 0x260e0; ret; 
0x00000000004267e6: je 0x267f7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000426a87: je 0x26a98; cmp rsi, rcx; jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x0000000000427579: je 0x27590; cmp rax, rdi; jne 0x27570; mov rax, qword ptr [rax]; mov qword ptr [rdx], rax; ret; 
0x0000000000427a12: je 0x27a20; sub eax, 1; mov dword ptr [rip + 0x85257], eax; ret; 
0x0000000000428054: je 0x28068; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x28080; movzx eax, byte ptr [rax]; ret; 
0x00000000004283c6: je 0x283d8; mov eax, esi; ret; 
0x0000000000428417: je 0x28420; ret; 
0x0000000000428472: je 0x28451; ret; 
0x00000000004284e7: je 0x284f0; ret; 
0x0000000000428663: je 0x28666; ret; 
0x000000000042923e: je 0x292e9; xor eax, eax; ret; 
0x00000000004291c5: je 0x29358; mov eax, 0x16; ret; 
0x00000000004291bc: je 0x29480; cmp eax, 0x21; je 0x29358; mov eax, 0x16; ret; 
0x0000000000429530: je 0x294de; mov eax, 0x83; ret; 
0x000000000042962c: je 0x29640; mov dword ptr [rdi], 0; nop; xor eax, eax; leave; ret; 
0x00000000004296a5: je 0x296ae; leave; mov eax, 1; ret; 
0x0000000000429f8b: je 0x29f90; ret; 
0x0000000000429fd6: je 0x29fa7; test esi, esi; lea rdx, [rip + 0x161f]; lea rax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x000000000042a094: je 0x2a0b0; and ch, 2; lea rdx, [rip - 0x1dee0]; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a1cd: je 0x2a17e; ret; 
0x000000000042a1e9: je 0x2a208; and ecx, 4; lea rax, [rip + 0x3d4b]; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x000000000042a23d: je 0x2a211; ret; 
0x000000000042a1f8: je 0x2a239; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000042a26e: je 0x2a285; and edx, 8; lea rax, [rip + 0x6696]; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000042a2c5: je 0x2a299; ret; 
0x000000000042a343: je 0x2a357; test byte ptr [rip + 0x827a9], 1; lea rdx, [rip + 0xa1bd]; cmove rax, rdx; ret; 
0x000000000042a39d: je 0x2a36f; ret; 
0x000000000042a3bb: je 0x2a3c0; ret; 
0x000000000042a40d: je 0x2a3d8; ret; 
0x000000000042a42b: je 0x2a430; ret; 
0x000000000042a47d: je 0x2a448; ret; 
0x000000000042ae54: je 0x2aeb0; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042b05a: je 0x2b067; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042b3b6: je 0x2b3c0; lea rax, [rdi + rsi]; ret; 
0x000000000042b5b1: je 0x2b3c0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042b636: je 0x2b640; lea rax, [rdi + rsi]; ret; 
0x000000000042b831: je 0x2b640; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042ba3c: je 0x2ba8d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042bade: je 0x2bb2f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000042bbb3: je 0x2bc0c; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000042bf4c: je 0x2bf65; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bc60; ret; 
0x000000000042bf75: je 0x2bf8d; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000042bfb3: je 0x2c00c; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000042c34c: je 0x2c365; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c060; ret; 
0x000000000042c375: je 0x2c38d; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000042c749: je 0x2c713; pmovmskb eax, xmm1; sub eax, ecx; jne 0x2c754; ret; 
0x000000000042cb8e: je 0x2c96a; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x000000000042cc00: je 0x2cc09; vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000042d0d0: je 0x2ce16; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x000000000042ce43: je 0x2ce4e; vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000042d1bd: je 0x2d1c8; inc rdx; shr rax, 0x10; jmp 0x2d1b0; mov rax, rdx; ret; 
0x000000000042dd95: je 0x2dda6; and byte ptr [rbp - 0x11], dh; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042dd7a: je 0x2ddc0; bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2dd89; add rax, rdi; ret; 
0x000000000042deef: je 0x2df08; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042ef8e: je 0x2efe0; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042f477: je 0x2f48f; test cl, ch; ret 0xfffb; 
0x000000000043094d: je 0x30960; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000430b79: je 0x30a15; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000431925: je 0x31928; xchg edx, eax; sub eax, edx; ret; 
0x000000000043267a: je 0x32700; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x00000000004354aa: je 0x354ad; xchg edx, eax; sub eax, edx; ret; 
0x0000000000435535: je 0x355a0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000435815: je 0x358a0; tzcnt eax, eax; jmp 0x35ab9; xor eax, eax; ret; 
0x0000000000435b72: je 0x35b80; bsf edx, edx; sub edx, eax; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x0000000000435e24: je 0x35e33; sar rdx, cl; test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000435db4: je 0x35e33; sar rdx, cl; test rdx, rdx; je 0x35e60; bsf rax, rdx; ret; 
0x0000000000435e2c: je 0x35e50; bsf rax, rdx; ret; 
0x0000000000435dbc: je 0x35e60; bsf rax, rdx; ret; 
0x0000000000435f84: je 0x35f8c; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000435fca: je 0x35fa1; nop dword ptr [rax]; bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x0000000000435fab: je 0x35fb3; bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x0000000000435fef: je 0x35fc0; bsr eax, eax; lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x00000000004360d7: je 0x36080; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x0000000000436187: je 0x36140; bsr rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004361ca: je 0x361d2; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004364c5: je 0x364cd; bsr eax, eax; add rax, rdi; ret; 
0x000000000043654c: je 0x364e3; nop; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004364ef: je 0x364f7; bsr eax, eax; add rax, rsi; ret; 
0x0000000000436531: je 0x36540; bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x0000000000436655: je 0x36608; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000436614: je 0x36660; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x0000000000436511: je 0x36660; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004366ec: je 0x366b5; kmovd ecx, k0; bsr ecx, ecx; sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000436731: je 0x366d9; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000436773: je 0x3677b; bsr eax, eax; add rax, rdi; ret; 
0x00000000004367ea: je 0x367d6; bsr eax, eax; add rax, r8; ret; 
0x00000000004367ce: je 0x367d6; bsr eax, eax; add rax, rdi; ret; 
0x000000000043680f: je 0x367e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004368f7: je 0x367e0; shl eax, 0x10; or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x000000000043684f: je 0x36820; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000436937: je 0x368e5; bsr eax, eax; add rax, rdi; ret; 
0x00000000004369d7: je 0x36995; bsr eax, eax; add rax, rdi; ret; 
0x0000000000436a14: je 0x36a1c; bsr eax, eax; add rax, rdi; ret; 
0x0000000000437c98: je 0x380de; mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x0000000000438540: je 0x385a4; mov edx, ebx; mov rsi, r12; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000438650: je 0x38688; cmp byte ptr [rip + 0x6e3ff], 0; je 0x386ac; mov eax, 0x101; syscall; 
0x0000000000438659: je 0x386ac; mov eax, 0x101; syscall; 
0x000000000043875b: je 0x38770; mov eax, 1; syscall; 
0x000000000043875b: je 0x38770; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x387c0; ret; 
0x0000000000438829: je 0x38850; mov eax, 0x48; syscall; 
0x00000000004388be: je 0x388e0; mov eax, 0x48; syscall; 
0x00000000004389ee: je 0x389f1; ret; 
0x00000000004395d7: je 0x395de; test rsi, rsi; jne 0x395e0; ret; 
0x00000000004395f7: je 0x395fe; test rsi, rsi; jne 0x39600; ret; 
0x0000000000439617: je 0x39620; jmp 0x38b80; nop; ret; 
0x000000000043a21c: je 0x3a182; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000043e3a5: je 0x3e3ad; call rax; 
0x000000000043e502: je 0x3e50c; mov rdi, rbx; call rax; 
0x000000000043e69f: je 0x3e6aa; mov rdi, rbx; call rax; 
0x000000000043ee24: je 0x3ee37; mov rdi, rbx; call rax; 
0x0000000000403ef1: je 0x3f04; mov esi, 1; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x000000000043f58a: je 0x3f594; mov rdi, rbx; call rax; 
0x0000000000444513: je 0x4452a; ret 0xe9c1; 
0x0000000000447ea7: je 0x47ec3; mov rdi, rbx; call rdx; 
0x00000000004486dc: je 0x486e8; jmp 0x9e90; nop; nop dword ptr [rax]; ret; 
0x0000000000448708: je 0x48720; mov rsi, qword ptr [rip + 0x6465f]; jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000448746: je 0x48750; cmp esi, 3; je 0x48750; ret; 
0x000000000044874b: je 0x48750; ret; 
0x0000000000448775: je 0x48790; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000448cc1: je 0x48cc5; call rax; 
0x0000000000448eab: je 0x48eaf; call rax; 
0x0000000000449161: je 0x49165; call rdx; 
0x0000000000449742: je 0x49748; ret; 
0x0000000000404ecc: je 0x4ea0; call rcx; 
0x000000000044ef80: je 0x4efc0; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; mov rsi, rbx; mov rdi, r12; call rax; 
0x000000000044f167: je 0x4efc0; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [r12]; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x000000000044feb5: je 0x4fed0; test eax, eax; jne 0x4fed4; mov qword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x000000000044fed2: je 0x4fee0; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x0000000000405154: je 0x515b; pop rbx; pop r12; pop rbp; ret; 
0x00000000004054f4: je 0x5500; pop rbp; ret; 
0x000000000045580a: je 0x55867; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000455d10: je 0x55d18; ret; 
0x00000000004561ed: je 0x56121; mov rdi, rbx; call 0x55ed0; jmp 0x56121; mov eax, 0xffffffff; ret; 
0x00000000004563eb: je 0x563f0; and dword ptr [rbx], 0xffffffef; pop rbx; pop r12; pop rbp; ret; 
0x0000000000456447: je 0x56458; cmp rsi, rcx; jb 0x56440; lea eax, [rdx + rdi]; ret; 
0x00000000004572a9: je 0x57310; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000045850b: je 0x58511; mov byte ptr [rax - 1], 0; lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000045854a: je 0x5854f; mov byte ptr [rsi], 0; ret; 
0x0000000000458f7d: je 0x58fc8; xor r10d, r10d; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000459078: je 0x59080; xor eax, eax; ret; 
0x0000000000459a53: je 0x59a67; test byte ptr [rip + 0x53099], 1; lea rdx, [rip + 0x3dad]; cmove rax, rdx; ret; 
0x0000000000459aad: je 0x59a7f; ret; 
0x0000000000459b1d: je 0x59ace; ret; 
0x0000000000405c07: je 0x5c18; mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x000000000045f26f: je 0x5f06a; bsf ecx, ecx; mov rax, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x000000000045f2df: je 0x5f2e8; vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f77e: je 0x5f4e6; mov rax, rdi; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045f512: je 0x5f51d; vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f86d: je 0x5f878; inc rdx; shr rax, 0x10; jmp 0x5f860; mov rax, rdi; ret; 
0x000000000045ffa4: je 0x5ff80; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000046001c: je 0x60000; ret; 
0x000000000046027d: je 0x6024f; ret; 
0x00000000004602ed: je 0x602bf; ret; 
0x00000000004604f4: je 0x603e4; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000460768: je 0x60780; bsf eax, eax; ret; 
0x00000000004608a0: je 0x60787; bsf eax, eax; ret; 
0x0000000000460a89: je 0x60a91; and edx, 0xf; je 0x60aa0; ret; 
0x0000000000460a8e: je 0x60aa0; ret; 
0x0000000000460a97: je 0x60aa8; add rax, 2; ret; 
0x0000000000460b28: je 0x60b32; bsf eax, edx; shr rax, 2; ret; 
0x0000000000460bcd: je 0x60be0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000460b74: je 0x60bf0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000460cd5: je 0x60d60; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x00000000004616fc: je 0x61720; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000461691: je 0x61730; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000461da0: je 0x61dc8; mov eax, 0x101; syscall; 
0x0000000000462256: je 0x62240; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004063e6: je 0x63b4; leave; ret; 
0x0000000000464d51: je 0x64d40; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000466b57: je 0x66b60; xor eax, eax; ret; 
0x0000000000466d39: je 0x66d7b; mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004671a3: je 0x671b8; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000004679d2: je 0x67a50; mov eax, eax; ret; 
0x0000000000467c6b: je 0x67c70; ret; 
0x0000000000467cb6: je 0x67c87; test esi, esi; lea rdx, [rip + 0x83f]; lea rax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x0000000000467d14: je 0x67d80; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000467f3a: je 0x67f47; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000468300: je 0x682c0; tzcnt ecx, ecx; cmp al, cl; jbe 0x682c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x00000000004684c7: je 0x682c8; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000046836b: je 0x68375; tzcnt ecx, ecx; cmp al, cl; jae 0x6837b; xor eax, eax; ret; 
0x00000000004684db: je 0x684d6; tzcnt eax, eax; cmp edx, eax; jbe 0x684d6; lea rax, [rdi + rax*4]; ret; 
0x0000000000468580: je 0x68540; tzcnt ecx, ecx; cmp al, cl; jbe 0x68540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468748: je 0x68548; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004685eb: je 0x685f5; tzcnt ecx, ecx; cmp al, cl; jae 0x685fb; xor eax, eax; ret; 
0x000000000046875c: je 0x68757; tzcnt eax, eax; cmp edx, eax; jbe 0x68757; lea rax, [rdi + rax*4]; ret; 
0x000000000046c80d: je 0x6c873; jne 0x6c800; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046d57c: je 0x6d587; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d570; ret; 
0x000000000046e703: je 0x6e71e; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000046f914: je 0x6f920; ret; 
0x00000000004707ac: je 0x707b7; cmp rdx, rdi; jae 0x7084c; leave; mov eax, 1; ret; 
0x0000000000470c45: je 0x70c57; movss xmm0, dword ptr [rip + 0xa3b9]; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x0000000000470e0b: je 0x70e0f; leave; ret; 
0x0000000000473c40: je 0x73c6d; mov rdx, qword ptr [rbx]; mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000047405d: je 0x74063; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000474ace: je 0x74ae0; mov edi, 1; jmp rax; 
0x0000000000474ace: je 0x74ae0; mov edi, 1; jmp rax; nop word ptr [rax + rax]; ret; 
0x0000000000476adf: je 0x76a8b; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000477187: je 0x7718f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77190; ret; 
0x0000000000477207: je 0x7720f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77210; ret; 
0x000000000047749d: je 0x774a8; jmp 0x76900; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004774bd: je 0x774c8; jmp 0x76900; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004787a1: je 0x787b7; xor r10d, r10d; mov eax, r13d; syscall; 
0x0000000000478a13: je 0x78a20; ret; 
0x0000000000478a7a: je 0x78a80; ret; 
0x0000000000478ad3: je 0x78ae0; ret; 
0x000000000047a155: je 0x7a160; pop rbp; ret; 
0x000000000047a381: je 0x7a392; xor r10d, r10d; mov eax, ebx; syscall; 
0x000000000040959a: je 0x95a0; pop rbp; ret; 
0x000000000040b5f4: je 0xb610; and ch, 2; lea rdx, [rip + 0xbc0]; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000040b6f4: je 0xb710; and ch, 2; lea rdx, [rip + 0xa90]; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000040b8cb: je 0xb8d0; ret; 
0x000000000040b91d: je 0xb8e8; ret; 
0x000000000040b93b: je 0xb940; ret; 
0x000000000040b98d: je 0xb958; ret; 
0x000000000040ba86: je 0xba92; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040c216: je 0xc222; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040d12c: je 0xd138; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040d244: je 0xd25d; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000040d8d4: je 0xd8e1; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040d9d7: je 0xd9e3; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040dac4: je 0xdadd; std; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000040e201: je 0xe20d; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040e2a7: je 0xe2c0; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x000000000040e7b3: je 0xe7cb; clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040e7bb: je 0xe7d4; clc; ret; 
0x000000000040e7c3: je 0xe7db; cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000040e7c9: je 0xe7e2; cld; ret; 
0x000000000040e7d6: je 0xe7e2; movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x000000000040e7da: je 0xe7f2; jmp qword ptr [rsi - 0x77]; 
0x0000000000410089: jg 0x10092; ret; 
0x00000000004100b4: jg 0x100b6; ret; 
0x00000000004100b2: jg 0x100dd; jg 0x100b6; ret; 
0x00000000004100dd: jg 0x100e6; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000410168: jg 0x1016b; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x00000000004101c4: jg 0x101c6; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x00000000004101b1: jg 0x101e0; jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x00000000004101ca: jg 0x10210; adc bh, bh; ret; 
0x000000000041022b: jg 0x1022f; vmovdqu64 ymmword ptr [rdx + 0x20], ymm16; vmovdqu64 ymmword ptr [rdx + 0x40], ymm16; vmovdqu64 ymmword ptr [rdx + 0x60], ymm16; ret; 
0x00000000004103d2: jg 0x103f0; jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x0000000000410d77: jg 0x10dc1; add eax, edi; vzeroupper; ret; 
0x00000000004189d6: jg 0x18987; mov qword ptr [rax + 0x58], r8; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000040188a: jg 0x18f2; mov dword ptr [rbp - 0x40], 0x45c60015; ret 0xc600; 
0x000000000041bde4: jg 0x1be08; xor eax, eax; pop rbp; ret; 
0x0000000000429c98: jg 0x29c23; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000429c97: jg 0x29d18; mov eax, ebx; pop rbx; pop r12; pop rbp; ret; 
0x000000000042c9c8: jg 0x2c9d1; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000042c9cc: jg 0x2ca16; int1; ret; 
0x000000000042cb2e: jg 0x2cb7c; psrad mm1, qword ptr [rax - 0x73]; cmp dword ptr [rcx], r8d; vzeroupper; ret; 
0x000000000042cb4b: jg 0x2cb99; lar ecx, word ptr [rax - 0x73]; cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x000000000042cb6b: jg 0x2cbb9; mov cr1, rax; lea eax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000042cc28: jg 0x2cc31; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000042cc2c: jg 0x2cc76; int1; ret; 
0x000000000042ce5c: jg 0x2ce65; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000042ce60: jg 0x2ceaa; int1; ret; 
0x000000000042cec4: jg 0x2cf15; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042cee4: jg 0x2cf3d; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000042d062: jg 0x2cfe8; sgdt [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042d082: jg 0x2d008; mov rax, dr0; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042d0a2: jg 0x2d028; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000042cff0: jg 0x2d041; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042d045: jg 0x2d08b; ud0; ret; 
0x000000000042d696: jg 0x2d69f; lea rax, [rdi + 0xf]; ret; 
0x000000000042d6a6: jg 0x2d6af; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000042d6ba: jg 0x2d6c3; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000042d6d9: jg 0x2d6e2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000042d6f9: jg 0x2d702; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000042d719: jg 0x2d722; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000042d73a: jg 0x2d743; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000042d75a: jg 0x2d763; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000042d77a: jg 0x2d783; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d79a: jg 0x2d7a3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000042d7be: jg 0x2d7c7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000042d7dd: jg 0x2d7e6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000042d7fd: jg 0x2d806; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000042d81b: jg 0x2d824; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000042d83b: jg 0x2d844; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000042d85b: jg 0x2d864; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000042d81f: jg 0x2d878; or eax, 0x1c478d48; ret; 
0x000000000042d87b: jg 0x2d884; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004356b7: jg 0x35701; add eax, edi; vzeroupper; ret; 
0x0000000000437a78: jg 0x37ac2; cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000043a1f7: jg 0x3a2b8; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000404329: jg 0x432b; add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x0000000000404359: jg 0x435b; add byte ptr [rax], al; mov eax, 0xe7; syscall; 
0x00000000004047ed: jg 0x4850; call rax; 
0x00000000004046e5: jg 0x4870; mov edi, r13d; call rax; 
0x0000000000404794: jg 0x4898; mov rdi, r8; mov esi, r13d; call rax; 
0x0000000000404cc8: jg 0x4cd4; add byte ptr [rax - 0x7b], cl; dec dword ptr [rdi]; test ah, ch; ret; 
0x000000000044eae9: jg 0x4eb13; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000454803: jg 0x54838; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004054ed: jg 0x54b9; add byte ptr [rax], al; cmp eax, 1; je 0x5500; pop rbp; ret; 
0x0000000000458c7c: jg 0x58cb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458ea9: jg 0x58eb3; call qword ptr [rbx]; 
0x000000000045932f: jg 0x5937d; mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000459713: jg 0x5975d; mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045f0c8: jg 0x5f0d1; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000045f208: jg 0x5f261; bsf edx, r10d; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000045f308: jg 0x5f311; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000045f46b: jg 0x5f4b9; psrad mm1, qword ptr [rdi]; add esi, edx; jne 0x5f478; vzeroupper; ret; 
0x000000000045f52c: jg 0x5f535; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000045f594: jg 0x5f5e5; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000045f5b4: jg 0x5f60d; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000045f722: jg 0x5f6a8; sgdt [rax]; add byte ptr [rax], al; ret; 
0x000000000045f73c: jg 0x5f6c2; mov rax, dr0; add byte ptr [rax], al; ret; 
0x000000000045f756: jg 0x5f6dc; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000045f6c0: jg 0x5f711; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000045f707: jg 0x5f74d; ud0; ret; 
0x000000000045fcd6: jg 0x5fcdf; ret; 
0x000000000045fce6: jg 0x5fcef; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000045fcfa: jg 0x5fd03; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000045fd19: jg 0x5fd22; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000045fd29: jg 0x5fd32; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000045fd39: jg 0x5fd42; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000045fd5a: jg 0x5fd63; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000045fd7a: jg 0x5fd83; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045fd9a: jg 0x5fda3; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000045fdba: jg 0x5fdc3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fdde: jg 0x5fde7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000045fdfd: jg 0x5fe06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000045fe1d: jg 0x5fe26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000045fe3b: jg 0x5fe44; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000045fe5b: jg 0x5fe64; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000045fe7b: jg 0x5fe84; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000045fe9b: jg 0x5fea4; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004604a7: jg 0x604f1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000460ea7: jg 0x60ef1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000461cac: jg 0x61cc8; pop rbx; pop r12; pop rbp; ret; 
0x00000000004651f5: jg 0x65207; jmp 0x65276; shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046641f: jg 0x66411; jmp 0x66496; shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000466779: jg 0x667f0; fidivr word ptr [rax + 1]; pop rbp; ret; 
0x000000000046f912: jg 0x6f93c; je 0x6f920; ret; 
0x00000000004786bc: jg 0x786fe; xor dh, 0x81; syscall; 
0x00000000004788e1: jg 0x7889b; retf 0; add byte ptr [rcx + rax - 0x19], cl; syscall; 
0x000000000040b68d: jg 0xb6b1; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000040b9f7: jg 0xba00; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000040ba63: jg 0xba6c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000040baae: jg 0xbab7; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040badf: jg 0xbae8; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000040bc24: jg 0xbc28; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000040bc28: jg 0xbc2b; vzeroupper; ret; 
0x000000000040bce9: jg 0xbceb; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040bca8: jg 0xbcee; cmp ah, al; vzeroupper; ret; 
0x000000000040bca4: jg 0xbd06; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000040bd4c: jg 0xbd4e; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040c1e3: jg 0xc1ec; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0xc1f4; vzeroupper; ret; 
0x000000000040c23e: jg 0xc247; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040c9c4: jg 0xc9cd; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000040c9e8: jg 0xc9f1; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000040c9fc: jg 0xca05; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000040ce6e: jg 0xce68; ret; 
0x000000000040d080: jg 0xd089; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d0ec: jg 0xd0f5; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d14c: jg 0xd155; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040d167: jg 0xd170; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d197: jg 0xd1a0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000040d322: jg 0xd326; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000040d328: jg 0xd32b; ret; 
0x000000000040d3c6: jg 0xd3cb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000040d405: jg 0xd407; ret; 
0x000000000040d3cc: jg 0xd412; cmp bh, bh; ret; 
0x000000000040d3be: jg 0xd437; add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jg 0xd3cb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000040d3c5: jg 0xd446; add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x000000000040d458: jg 0xd45a; ret; 
0x000000000040d93d: jg 0xd946; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d9a9: jg 0xd9b2; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d9f2: jg 0xd9fb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040da25: jg 0xda2e; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000040db9c: jg 0xdba0; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000040dba2: jg 0xdba5; ret; 
0x000000000040dc27: jg 0xdc30; vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000040dc3c: jg 0xdc41; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000040dc73: jg 0xdc75; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040dc42: jg 0xdc88; cmp bh, bh; ret; 
0x000000000040dccf: jg 0xdcd1; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040e3b8: jg 0xe3ea; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000040f718: jg 0xf721; vzeroupper; ret; 
0x000000000040f762: jg 0xf76b; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000040f7e2: jg 0xf7eb; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x000000000040f842: jg 0xf84b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040f837: jg 0xf870; jl 0xf83e; mov byte ptr [rdi], sil; ret; 
0x000000000040f8b1: jg 0xf8b5; vmovdqu ymmword ptr [rdx + 0x20], ymm0; vmovdqu ymmword ptr [rdx + 0x40], ymm0; vmovdqu ymmword ptr [rdx + 0x60], ymm0; vzeroupper; ret; 
0x000000000040fa82: jg 0xfa8b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040fa77: jg 0xfab0; jl 0xfa7e; mov byte ptr [rdi], sil; ret; 
0x000000000040fbdb: jg 0xfbe4; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000040fbd1: jg 0xfbea; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000040fe0c: jg 0xfe15; ret; 
0x000000000040fe37: jg 0xfe39; ret; 
0x000000000040fe60: jg 0xfe69; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040fe35: jg 0xfe80; jg 0xfe39; ret; 
0x000000000040ff45: jg 0xff47; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000040ff54: jg 0xff56; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000040ff3a: jg 0xff70; jl 0xff40; mov byte ptr [rax], cl; ret; 
0x000000000040ff4b: jg 0xff91; adc bh, bh; ret; 
0x000000000040ff5a: jg 0xffa0; adc bh, bh; ret; 
0x000000000040ffc3: jg 0xffc7; vmovdqu64 zmmword ptr [rdx + 0x40], zmm16; vmovdqu64 zmmword ptr [rdx + 0x80], zmm16; vmovdqu64 zmmword ptr [rdx + 0xc0], zmm16; ret; 
0x00000000004101ac: jge 0x101d9; cmp edx, 1; jg 0x101e0; jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x00000000004102c8: jge 0x102ca; add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004103cd: jge 0x103e9; cmp edx, 1; jg 0x103f0; jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x0000000000411324: jge 0x1131e; xor eax, eax; syscall; 
0x000000000040148b: jge 0x1435; call qword ptr [rbp - 0x60]; 
0x0000000000401484: jge 0x1436; add byte ptr [rsi + rdx + 0x48], dh; mov edi, dword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000401ea0: jge 0x1e26; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000423355: jge 0x23357; sbb eax, 0xe2ebdc74; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000425d85: jge 0x25d6f; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426377: jge 0x26361; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000042658f: jge 0x26579; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000042ce47: jge 0x2ce51; jle 0x2ce11; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000042ce86: jge 0x2ce90; jle 0x2ce91; mov dword ptr [rax - 3], ecx; ret; 
0x0000000000435db5: jge 0x35dff; sar edx, cl; test rdx, rdx; je 0x35e60; bsf rax, rdx; ret; 
0x00000000004360c1: jge 0x3609a; ret 0xfdc5; 
0x0000000000436171: jge 0x3614a; ret 0xfdc5; 
0x0000000000436361: jge 0x3633a; ret 0xfdc5; 
0x0000000000436411: jge 0x363ea; ret 0xfdc5; 
0x00000000004386ce: jge 0x38678; mov eax, 0x101; syscall; 
0x0000000000438794: jge 0x3878e; mov eax, 1; syscall; 
0x0000000000438e00: jge 0x38dba; mov rax, qword ptr [rbp - 0x50]; mov dword ptr [rbp - 0x3c], r8d; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000458978: jge 0x5895a; mov r9d, 0xffffffff; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000459c34: jge 0x59c32; ret 0x41c4; 
0x0000000000459cfc: jge 0x59cfa; ret 0x41c4; 
0x0000000000459d46: jge 0x59d44; ret 0x41c4; 
0x0000000000459d90: jge 0x59d8e; ret 0x41c4; 
0x0000000000459e1a: jge 0x59e18; ret 0x41c4; 
0x0000000000459fcc: jge 0x59fca; ret 0x41c4; 
0x000000000045a024: jge 0x5a022; ret 0x41c4; 
0x000000000045a0ac: jge 0x5a0aa; ret 0x41c4; 
0x000000000045a0fb: jge 0x5a0f9; ret 0x41c4; 
0x000000000045a147: jge 0x5a145; ret 0x41c4; 
0x000000000045a29c: jge 0x5a29a; ret 0x41c4; 
0x000000000045a2ec: jge 0x5a2ea; ret 0x41c4; 
0x000000000045a644: jge 0x5a642; ret 0x41c4; 
0x000000000045a70c: jge 0x5a70a; ret 0x41c4; 
0x000000000045a756: jge 0x5a754; ret 0x41c4; 
0x000000000045a7a0: jge 0x5a79e; ret 0x41c4; 
0x000000000045a82a: jge 0x5a828; ret 0x41c4; 
0x000000000045a9e8: jge 0x5a9e6; ret 0x41c4; 
0x000000000045aa41: jge 0x5aa3f; ret 0x41c4; 
0x000000000045aacc: jge 0x5aaca; ret 0x41c4; 
0x000000000045ab1b: jge 0x5ab19; ret 0x41c4; 
0x000000000045ab67: jge 0x5ab65; ret 0x41c4; 
0x000000000045acbc: jge 0x5acba; ret 0x41c4; 
0x000000000045ad0c: jge 0x5ad0a; ret 0x41c4; 
0x000000000045f516: jge 0x5f520; jle 0x5f4e0; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f556: jge 0x5f560; jle 0x5f561; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x00000000004063dd: jge 0x63d7; mov rsi, qword ptr [rbp - 0x10]; test rax, rax; je 0x63b4; leave; ret; 
0x00000000004651f8: jge 0x65243; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046b7f0: jge 0x6b7ee; add dword ptr [rdi], ecx; xchg ebp, eax; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x0000000000474365: jge 0x7435f; leave; ret; 
0x0000000000474519: jge 0x74513; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000474677: jge 0x74671; leave; ret; 
0x0000000000474731: jge 0x7472b; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000474943: jge 0x7493d; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047499b: jge 0x74995; leave; ret; 
0x0000000000474aac: jge 0x74aa6; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000474c64: jge 0x74c2e; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x0000000000474caa: jge 0x74c74; mov dword ptr [rbp - 0x4c], r9d; mov rdx, qword ptr [r10]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x00000000004788d8: jge 0x788a2; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; add rdi, r12; syscall; 
0x000000000040f832: jge 0xf860; cmp edx, 1; jg 0xf870; jl 0xf83e; mov byte ptr [rdi], sil; ret; 
0x000000000040fa72: jge 0xfaa0; cmp edx, 1; jg 0xfab0; jl 0xfa7e; mov byte ptr [rdi], sil; ret; 
0x000000000040ff35: jge 0xff69; cmp edx, 1; jg 0xff70; jl 0xff40; mov byte ptr [rax], cl; ret; 
0x00000000004101b3: jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x00000000004103d4: jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x00000000004191c9: jl 0x191d4; pop rax; jmp rdx; 
0x00000000004191c9: jl 0x191d4; pop rax; jmp rdx; nop; ret; 
0x000000000042a220: jl 0x2a258; add byte ptr [rax], al; test ch, 8; jne 0x2a1eb; ret; 
0x000000000042f472: jl 0x2f48b; test byte ptr [rax - 0x73], cl; je 0x2f48f; test cl, ch; ret 0xfffb; 
0x00000000004640fb: jl 0x64121; or byte ptr [rdi - 0x18], ah; mov word ptr [rbp - 6], ds; jmp qword ptr [rsi + 0x66]; 
0x0000000000473405: jl 0x73409; jmp qword ptr [rdi - 0x18]; 
0x00000000004777ba: jl 0x777bd; or byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000478ac9: jl 0x78a82; adc al, dh; xadd dword ptr [rdi], eax; cmp eax, 3; je 0x78ae0; ret; 
0x0000000000478cb6: jl 0x78c5d; sub byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000047a26c: jl 0x7a29e; sub byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, r9d; mov eax, 0xca; syscall; 
0x000000000040c953: jl 0xc99d; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040c95a: jl 0xc9a4; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040c961: jl 0xc9ab; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040c968: jl 0xc9b2; adc dword ptr [rcx - 1], edi; ret; 
0x000000000040c990: jl 0xc9da; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040c996: jl 0xc9e0; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040c99d: jl 0xc9e7; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040c9a4: jl 0xc9ee; adc dword ptr [rcx - 1], ebx; ret; 
0x000000000040cb8d: jl 0xcbd7; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040cb94: jl 0xcbde; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040cb9b: jl 0xcbe5; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040cba2: jl 0xcbec; adc dword ptr [rcx - 1], edi; ret; 
0x000000000040ccfb: jl 0xcd45; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd02: jl 0xcd4c; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd09: jl 0xcd53; adc dword ptr [rcx + 7], edi; ret; 
0x000000000040ce56: jl 0xcea0; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce5d: jl 0xcea7; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce64: jl 0xceae; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce6b: jl 0xceb5; adc dword ptr [rdi - 8], edi; ret; 
0x000000000040d24c: jl 0xd265; cld; ret; 
0x000000000040dacc: jl 0xdae5; cld; ret; 
0x000000000040f839: jl 0xf83e; mov byte ptr [rdi], sil; ret; 
0x000000000040fa79: jl 0xfa7e; mov byte ptr [rdi], sil; ret; 
0x000000000040fb7b: jl 0xfbc5; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb82: jl 0xfbcc; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb89: jl 0xfbd3; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb90: jl 0xfbda; adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fb9d: jl 0xfbe7; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fba3: jl 0xfbed; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fbaa: jl 0xfbf4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fbb1: jl 0xfbfb; adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fbbe: jl 0xfc08; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fbc4: jl 0xfc0e; adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fc84: jl 0xfcce; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fc8b: jl 0xfcd5; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fc92: jl 0xfcdc; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fc99: jl 0xfce3; adc dword ptr [rsi - 1], edx; ret; 
0x000000000040fcdd: jl 0xfd27; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fce3: jl 0xfd2d; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fcea: jl 0xfd34; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fcf1: jl 0xfd3b; adc dword ptr [rsi + 3], edx; ret; 
0x000000000040fd80: jl 0xfdca; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd87: jl 0xfdd1; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd8e: jl 0xfdd8; adc dword ptr [rsi + 7], edx; ret; 
0x000000000040ff3c: jl 0xff40; mov byte ptr [rax], cl; ret; 
0x0000000000411121: jle 0x1116b; bsf eax, edx; ret; 
0x000000000042ae69: jle 0x2ae7d; add rax, rdi; ret; 
0x000000000042b123: jle 0x2b13b; add rax, rdi; ret; 
0x000000000042c99a: jle 0x2c95d; mov word ptr [rdi], cx; nop; mov byte ptr [rax], 0; ret; 
0x000000000042c9b6: jle 0x2c9bf; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042cc04: jle 0x2cbc7; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000042cc16: jle 0x2cc1f; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042ce49: jle 0x2ce11; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000042ce6d: jle 0x2ce76; mov qword ptr [rax - 7], rcx; ret; 
0x000000000042ce88: jle 0x2ce91; mov dword ptr [rax - 3], ecx; ret; 
0x00000000004375a2: jle 0x375a8; add al, ch; push rsi; xlatb; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000043dadb: jle 0x3daec; mov dh, 0x91; push rsp; add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x0000000000448782: jle 0x487a8; sub eax, 1; mov rbx, qword ptr [rbp - 8]; mov dword ptr [rdx + 8], eax; leave; ret; 
0x00000000004506e1: jle 0x505da; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000045f099: jle 0x5f05c; mov word ptr [rdi], cx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f0b6: jle 0x5f0bf; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045f2e3: jle 0x5f2a6; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f2f6: jle 0x5f2ff; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045f518: jle 0x5f4e0; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f53e: jle 0x5f547; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000045f558: jle 0x5f561; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x0000000000467d2c: jle 0x67d3f; add rax, rdi; ret; 
0x0000000000468006: jle 0x6801b; add rax, rdi; ret; 
0x0000000000478150: jle 0x780e1; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000040bca7: jle 0xbd28; cmp r12b, al; vzeroupper; ret; 
0x000000000040f862: jle 0xf86b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000040faa2: jle 0xfaab; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000040fbf4: jle 0xfbb7; cmp dl, 4; jb 0xfc01; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x00000000004664cd: jmp 0x1055ee1e; ret; 
0x000000000043e49d: jmp 0x1080; nop word ptr [rax + rax]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004112c0: jmp 0x112c9; nop word ptr [rax + rax]; hlt; mov eax, edx; syscall; 
0x0000000000461871: jmp 0x11380; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411441: jmp 0x113fa; call 0x12400; nop dword ptr [rax]; endbr64; xor eax, eax; syscall; 
0x0000000000411bf3: jmp 0x11b74; nop dword ptr [rax + rax]; endbr64; mov eax, 0xa; syscall; 
0x0000000000448711: jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000411e5f: jmp 0x11df8; call 0x12400; nop word ptr [rax + rax]; endbr64; mov eax, 0x63; syscall; 
0x00000000004054d4: jmp 0x12050; nop dword ptr [rax]; ret; 
0x000000000041274b: jmp 0x126af; leave; xor eax, eax; ret; 
0x00000000004127b5: jmp 0x126be; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000412c9e: jmp 0x12c62; ret; 
0x0000000000413b7e: jmp 0x13930; nop dword ptr [rax + rax]; mov qword ptr [rdi], 0xffffffffffffffff; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000418a3f: jmp 0x189bc; nop dword ptr [rax]; ret; 
0x0000000000418fdd: jmp 0x18b80; test al, al; je 0x18b89; xor ecx, ecx; jmp 0x18bd9; ret; 
0x0000000000418fec: jmp 0x18bd9; ret; 
0x000000000040197f: jmp 0x1986; mov eax, 0; leave; ret; 
0x000000000046d7be: jmp 0x1b900; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000401bba: jmp 0x1bd2; lea edi, [rbx + 1]; mov rax, rdi; pop rbx; pop rbp; ret; 
0x000000000041eafd: jmp 0x1eafe; jmp qword ptr [rsi + 0x41]; 
0x000000000042335a: jmp 0x2333e; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000423e55: jmp 0x23bc3; or eax, 0xffffffff; ret; 
0x0000000000423e4b: jmp 0x23cf5; call 0x4d20; jmp 0x23bc3; or eax, 0xffffffff; ret; 
0x0000000000424c9e: jmp 0x24ba6; nop dword ptr [rax + rax]; ret; 
0x0000000000426968: jmp 0x25470; nop dword ptr [rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000004025b4: jmp 0x2550; xor eax, eax; ret; 
0x00000000004260c8: jmp 0x2609a; nop word ptr [rax + rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x0000000000426185: jmp 0x2611c; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000042833e: jmp 0x27710; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004278a2: jmp 0x27757; nop word ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000004027fb: jmp 0x277c; or rax, 0xffffffffffffffff; ret; 
0x0000000000428079: jmp 0x2805a; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000429181: jmp 0x29134; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000042b139: jmp 0x2b0fc; xor eax, eax; ret; 
0x000000000042b11c: jmp 0x2b121; vzeroupper; cmp edx, eax; jle 0x2b13b; add rax, rdi; ret; 
0x000000000042d1c6: jmp 0x2d1b0; mov rax, rdx; ret; 
0x000000000042e9d6: jmp 0x2e57b; xor eax, eax; ret; 
0x000000000042ef36: jmp 0x2eadb; xor eax, eax; ret; 
0x000000000042f4a4: jmp 0x2f041; xor eax, eax; ret; 
0x0000000000431e84: jmp 0x31a93; xor eax, eax; ret; 
0x0000000000432507: jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432b73: jmp 0x32781; xor eax, eax; ret; 
0x0000000000435565: jmp 0x355eb; add eax, ecx; vzeroupper; ret; 
0x000000000043581f: jmp 0x35ab9; xor eax, eax; ret; 
0x00000000004370b1: jmp 0x3709b; mov r10b, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000439619: jmp 0x38b80; nop; ret; 
0x000000000043f68f: jmp 0x39610; nop dword ptr [rax]; pop rbp; ret; 
0x000000000043e072: jmp 0x3e008; nop dword ptr [rax]; call rax; 
0x000000000043e01b: jmp 0x3e023; add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000447eee: jmp 0x47e2f; call 0x12400; nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x00000000004666fe: jmp 0x48ce900e; shl edx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000044dab2: jmp 0x4da86; nop dword ptr [rax]; ret; 
0x000000000043e302: jmp 0x4de0; nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x000000000044eb64: jmp 0x4ebb0; nop dword ptr [rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044feee: jmp 0x4fed9; in al, dx; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000450038: jmp 0x50020; nop word ptr [rax + rax]; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x00000000004504e4: jmp 0x50070; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000456097: jmp 0x55f96; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x00000000004561fb: jmp 0x56121; mov eax, 0xffffffff; ret; 
0x000000000045878d: jmp 0x58757; nop; xor eax, eax; ret; 
0x0000000000458e7c: jmp 0x58d10; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x0000000000458df4: jmp 0x58d83; nop word ptr cs:[rax + rax]; mov eax, 0xba; syscall; 
0x0000000000459843: jmp 0x596b7; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000045a5c3: jmp 0x59ddb; xor eax, eax; ret; 
0x000000000045afe3: jmp 0x5a7eb; xor eax, eax; ret; 
0x000000000045b9fc: jmp 0x5b211; xor eax, eax; ret; 
0x0000000000401646: jmp 0x5d5c57a6; ret; 
0x000000000045f876: jmp 0x5f860; mov rax, rdi; ret; 
0x000000000045ffd0: jmp 0x60040; nop dword ptr [rax]; mov eax, ecx; ret; 
0x0000000000461062: jmp 0x6136c; xor eax, eax; ret; 
0x0000000000461b0c: jmp 0x61a50; nop dword ptr [rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000463b09: jmp 0x64c70; nop; ret; 
0x0000000000465221: jmp 0x6526a; shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004651f7: jmp 0x65276; shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046644b: jmp 0x6648b; shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000466421: jmp 0x66496; shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000466532: jmp 0x66576; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000466774: jmp 0x667dc; cmp ecx, 0xde757fff; mov eax, 1; pop rbp; ret; 
0x0000000000466c69: jmp 0x66bc0; call 0x12300; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000454b34: jmp 0x66ca0; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000466d72: jmp 0x66d40; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000468019: jmp 0x67fdc; xor eax, eax; ret; 
0x0000000000467fff: jmp 0x68004; vzeroupper; cmp edx, eax; jle 0x6801b; add rax, rdi; ret; 
0x000000000046ce2a: jmp 0x6ca10; nop; ret; 
0x000000000046d822: jmp 0x6d866; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000470396: jmp 0x70325; nop dword ptr [rax + rax]; call rax; 
0x0000000000470816: jmp 0x7073c; nop dword ptr [rax + rax]; leave; xor eax, eax; ret; 
0x000000000047283b: jmp 0x727bb; ret; 
0x000000000047333b: jmp 0x732bb; ret; 
0x0000000000478187: jmp 0x74030; nop; nop dword ptr [rax]; ja 0x781b1; xor eax, eax; ret; 
0x00000000004742ca: jmp 0x7448d; add byte ptr [rdi + 1], bh; call rax; 
0x0000000000418c57: jmp 0x75c8c49c; in al, 0xf; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000047749f: jmp 0x76900; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000047a31d: jmp 0x7a26a; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000047a4ed: jmp 0x7a30e; add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000466456: jmp 0x855eda7; ret; 
0x00000000004768c6: jmp 0x8cbec13; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004096b8: jmp 0x968a; nop word ptr [rax + rax]; ret; 
0x00000000004486de: jmp 0x9e90; nop; nop dword ptr [rax]; ret; 
0x00000000004407dc: jmp 0x9e90; nop; nop word ptr [rax + rax]; ret; 
0x0000000000454699: jmp 0x9e90; nop; ret; 
0x0000000000426a82: jmp 0xa3bea88; je 0x26a98; cmp rsi, rcx; jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x000000000040b5a5: jmp 0xb57d; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000040905c: jmp 0xffffffffab498364; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458ce9: jmp 0xffffffffc88ed4ef; div rsi; mov rax, qword ptr [rip + 0x4de20]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000460fde: jmp 0xfffffffff13f57e5; jb 0x60d64; mov rax, r8; vzeroupper; ret; 
0x000000000047680c: jmp 0xfffffffff8b49bfa; jmp qword ptr [rsi + 0xf]; 
0x000000000042bf28: jmp 0xfffffffff9c7d6a1; xlatb; ret 0xff2d; 
0x000000000042bf4b: jmp 0xfffffffff9c7d6c4; xlatb; ret 0xff2d; 
0x000000000042c328: jmp 0xfffffffff9c7daa1; xlatb; ret 0xff2d; 
0x000000000042c34b: jmp 0xfffffffff9c7dac4; xlatb; ret 0xff2d; 
0x0000000000468440: jmp ptr [rax + rbx]; jae 0x6835e; xor eax, eax; ret; 
0x00000000004686ce: jmp ptr [rax + rbx]; jae 0x685de; xor eax, eax; ret; 
0x000000000042b53e: jmp ptr [rax + riz*2]; jae 0x2b44e; xor eax, eax; ret; 
0x000000000042b7be: jmp ptr [rax + riz*2]; jae 0x2b6ce; xor eax, eax; ret; 
0x000000000043792d: jmp ptr [rdx + 1]; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000437936: jmp ptr [rdx]; call rbx; 
0x0000000000447b1d: jmp ptr [rdx]; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x000000000042bd4b: jmp qword ptr [rax + 0x73]; 
0x000000000042c581: jmp qword ptr [rax + 0x7d]; 
0x000000000041b75a: jmp qword ptr [rax + rcx*2 + 3]; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000449759: jmp qword ptr [rax + rcx*2 - 0x77]; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x0000000000401158: jmp qword ptr [rax]; 
0x0000000000401158: jmp qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi + 1], bh; mov eax, 0xe; syscall; 
0x0000000000450dd5: jmp qword ptr [rbp + 0xf]; 
0x000000000041b8de: jmp qword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000042908d: jmp qword ptr [rcx]; 
0x000000000045233c: jmp qword ptr [rdi + 0xf]; 
0x0000000000461b1e: jmp qword ptr [rdi + rax*8]; add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004500a6: jmp qword ptr [rdi + rax*8]; add byte ptr [r8], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004114a6: jmp qword ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000040862e: jmp qword ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004014c6: jmp qword ptr [rdi - 0x18]; 
0x0000000000447cb9: jmp qword ptr [rdi - 0x18]; cmpsd dword ptr [rsi], dword ptr [rdi]; cld; call qword ptr [rbp + 0x48]; 
0x00000000004785c7: jmp qword ptr [rdi - 0x18]; ret 0xffb9; 
0x0000000000452836: jmp qword ptr [rdi - 0x18]; ret; 
0x000000000041a3ed: jmp qword ptr [rdi]; 
0x000000000040ccd6: jmp qword ptr [rdx + 0x51]; 
0x000000000040ce37: jmp qword ptr [rdx + 0x71]; 
0x000000000045b469: jmp qword ptr [rdx + 1]; 
0x000000000040d07b: jmp qword ptr [rdx - 0x1f]; 
0x000000000040cdef: jmp qword ptr [rdx - 0x2f]; 
0x00000000004109c5: jmp qword ptr [rdx - 0x4e]; 
0x00000000004109c5: jmp qword ptr [rdx - 0x4e]; and byte ptr gs:[rsi], ah; ret; 
0x000000000042c4bb: jmp qword ptr [rdx - 0x4e]; insd dword ptr [rdi], dx; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000043675c: jmp qword ptr [rdx - 0x4f]; 
0x000000000045b316: jmp qword ptr [rdx - 0x5f]; 
0x000000000042c647: jmp qword ptr [rdx - 0xd]; 
0x000000000040c935: jmp qword ptr [rdx - 0xf]; 
0x000000000041d517: jmp qword ptr [rdx]; 
0x000000000045125f: jmp qword ptr [rsi + 0x25]; 
0x000000000040491d: jmp qword ptr [rsi + 0x2e]; 
0x0000000000412413: jmp qword ptr [rsi + 0x2e]; nop dword ptr [rax + rax]; nop; endbr64; ret; 
0x0000000000448715: jmp qword ptr [rsi + 0x2e]; nop dword ptr [rax + rax]; ret; 
0x00000000004519af: jmp qword ptr [rsi + 0x3d]; 
0x0000000000414419: jmp qword ptr [rsi + 0x41]; 
0x000000000041426f: jmp qword ptr [rsi + 0x44]; 
0x0000000000427cc9: jmp qword ptr [rsi + 0x48]; 
0x000000000044e05e: jmp qword ptr [rsi + 0x49]; 
0x0000000000401e11: jmp qword ptr [rsi + 0x66]; 
0x0000000000406135: jmp qword ptr [rsi + 0xa]; 
0x0000000000402f72: jmp qword ptr [rsi + 0xf]; 
0x00000000004146ae: jmp qword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret 0xf41; 
0x00000000004507a2: jmp qword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0xe867; 
0x0000000000453096: jmp qword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x280f; 
0x0000000000477943: jmp qword ptr [rsi - 0x3f]; 
0x000000000040659d: jmp qword ptr [rsi - 0x70]; 
0x000000000043961d: jmp qword ptr [rsi - 0x70]; ret; 
0x0000000000450de2: jmp qword ptr [rsi - 0x75]; 
0x000000000040e7dc: jmp qword ptr [rsi - 0x77]; 
0x0000000000438158: jmp qword ptr [rsi - 0x7d]; 
0x000000000041ac67: jmp qword ptr [rsi - 0x7f]; 
0x0000000000450e55: jmp qword ptr [rsi]; 
0x000000000040173e: jmp rax; 
0x0000000000401c01: jmp rax; mov rax, rdi; ret; 
0x000000000046e502: jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x00000000004671af: jmp rax; nop dword ptr [rax]; ret; 
0x0000000000401780: jmp rax; nop word ptr [rax + rax]; ret; 
0x000000000040173e: jmp rax; ret; 
0x000000000041878d: jmp rbx; 
0x000000000040e854: jmp rcx; 
0x000000000042d525: jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbd5: jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000041cebe: jmp rdi; 
0x0000000000401d36: jmp rdx; 
0x000000000046e66f: jmp rdx; nop dword ptr [rax]; ret; 
0x00000000004191cc: jmp rdx; nop; ret; 
0x000000000047667d: jmp rsi; 
0x0000000000410685: jne 0x1068b; vzeroupper; ret; 
0x0000000000410f21: jne 0x10f27; vzeroupper; ret; 
0x0000000000411258: jne 0x11270; xor eax, eax; pop rbp; ret; 
0x0000000000411269: jne 0x11288; xor eax, eax; ret; 
0x000000000041131e: jne 0x11310; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000411407: jne 0x11443; leave; ret; 
0x0000000000411923: jne 0x1193d; leave; ret; 
0x0000000000411a59: jne 0x11a64; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411af9: jne 0x11b04; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411d1d: jne 0x11d40; mov eax, 0x19; syscall; 
0x0000000000411d3b: jne 0x11d95; leave; ret; 
0x00000000004123f3: jne 0x123f7; leave; ret; 
0x0000000000413ff1: jne 0x1400b; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rdi + 0x35a], al; ret; 
0x0000000000473f72: jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x0000000000473fc4: jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x0000000000401645: jne 0x1630; pop rbx; pop r12; pop rbp; ret; 
0x0000000000416776: jne 0x16760; pop rbx; mov eax, 1; pop r12; pop rbp; ret; 
0x00000000004167e8: jne 0x167c0; mov eax, dword ptr [rcx]; ret; 
0x00000000004016d2: jne 0x16c0; ret; 
0x0000000000417022: jne 0x16fa4; movsxd rdx, ebx; mov edi, dword ptr [rbp - 0x958]; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000417e56: jne 0x17e70; lea rax, [r9 + 1]; mov qword ptr [rip + 0x8fd25], rax; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x0000000000417f7b: jne 0x17f90; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x00000000004181a3: jne 0x1817d; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000041826b: jne 0x18280; shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x182ba; ret; 
0x0000000000418301: jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x000000000041923a: jne 0x1920b; movsx eax, byte ptr [rsi]; neg eax; ret; 
0x0000000000419afa: jne 0x19af4; syscall; 
0x000000000041a95a: jne 0x1a8b0; ret; 
0x000000000041b470: jne 0x1b43c; movzx eax, byte ptr [rip + 0x91737]; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x9172b], al; ret; 
0x000000000041b44e: jne 0x1b43c; movzx eax, byte ptr [rip + 0x91759]; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x9174d], al; ret; 
0x000000000041b496: jne 0x1b43c; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000041b500: jne 0x1b4cc; movzx eax, byte ptr [rip + 0x916a7]; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x9169b], al; ret; 
0x000000000041b4de: jne 0x1b4cc; movzx eax, byte ptr [rip + 0x916c9]; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x916bd], al; ret; 
0x000000000041b526: jne 0x1b4cc; or byte ptr [rip + 0x91681], 0xc; ret; 
0x000000000041b892: jne 0x1b8a0; mov dword ptr [rbx + 0x40], esi; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041b8cf: jne 0x1b8d8; pop rbp; ret; 
0x000000000041d41e: jne 0x1d41e; dec dword ptr [rax - 0x77]; ret; 
0x0000000000423447: jne 0x23450; xor eax, eax; ret; 
0x00000000004244e4: jne 0x244ed; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x00000000004257b7: jne 0x257c0; ret; 
0x0000000000425bb1: jne 0x25ba0; ret; 
0x0000000000425d81: jne 0x25d67; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426373: jne 0x26355; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000042658b: jne 0x2656d; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000042677e: jne 0x26770; ret; 
0x000000000042693a: jne 0x26960; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042715e: jne 0x27140; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042757e: jne 0x27570; mov rax, qword ptr [rax]; mov qword ptr [rdx], rax; ret; 
0x0000000000427563: jne 0x2757b; ret; 
0x00000000004275c5: jne 0x275d8; sub rdx, qword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000042798f: jne 0x279d0; mov qword ptr [rip + 0x852e0], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042833c: jne 0x28348; jmp 0x27710; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004285b8: jne 0x285c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004285f9: jne 0x28610; sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000042865b: jne 0x28652; and eax, 0x39; cmp eax, 8; je 0x28666; ret; 
0x000000000042873a: jne 0x28742; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000429238: jne 0x29207; sub dword ptr [rdi + 4], 1; je 0x292e9; xor eax, eax; ret; 
0x00000000004291fd: jne 0x29207; test eax, eax; jne 0x294d0; mov eax, 1; ret; 
0x0000000000429526: jne 0x2926a; sub dword ptr [rdi + 4], 1; je 0x294de; mov eax, 0x83; ret; 
0x0000000000429201: jne 0x294d0; mov eax, 1; ret; 
0x0000000000429753: jne 0x29790; mov rax, rsi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000429786: jne 0x297fa; leave; ret; 
0x0000000000429fb0: jne 0x29f8d; and ch, 8; lea rdx, [rip + 0x1894]; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x000000000042a11a: jne 0x2a0c9; ret; 
0x000000000042a0c7: jne 0x2a110; and ch, 2; lea rax, [rip - 0x1bf13]; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000042a227: jne 0x2a1eb; ret; 
0x000000000042a21b: jne 0x2a200; lea rax, [rip + 0x367c]; test ch, 8; jne 0x2a1eb; ret; 
0x000000000042a2af: jne 0x2a25b; ret; 
0x000000000042a2a3: jne 0x2a285; lea rax, [rip + 0x41e4]; test dh, 8; jne 0x2a25b; ret; 
0x000000000042a385: jne 0x2a335; ret; 
0x000000000042a379: jne 0x2a357; lea rax, [rip + 0x75ee]; and ch, 8; jne 0x2a335; ret; 
0x000000000042a37f: jne 0x2a381; add byte ptr [rax - 0x518af71b], al; ret; 
0x000000000042a3e2: jne 0x2a3bd; and ch, 8; lea rdx, [rip + 0xb932]; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000042b0ff: jne 0x2b105; vzeroupper; ret; 
0x000000000042b539: jne 0x2b470; sub al, 0x60; jae 0x2b44e; xor eax, eax; ret; 
0x000000000042b7b9: jne 0x2b6f0; sub al, 0x60; jae 0x2b6ce; xor eax, eax; ret; 
0x000000000042ba45: jne 0x2bb20; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042bae7: jne 0x2bb40; xor eax, eax; ret; 
0x000000000042bab7: jne 0x2bb60; xor eax, eax; ret; 
0x000000000042bf57: jne 0x2bc60; ret; 
0x000000000042be88: jne 0x2bc60; xor eax, eax; vzeroupper; ret; 
0x000000000042bd93: jne 0x2bcc0; vzeroupper; ret; 
0x000000000042bc4d: jne 0x2bcc3; vzeroupper; ret; 
0x000000000042bdc1: jne 0x2be04; vzeroupper; ret; 
0x000000000042bdf6: jne 0x2be40; vzeroupper; ret; 
0x000000000042bf0d: jne 0x2bef0; movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042bed8: jne 0x2bef0; ret; 
0x000000000042c357: jne 0x2c060; ret; 
0x000000000042c071: jne 0x2c077; vzeroupper; ret; 
0x000000000042c30d: jne 0x2c2f0; movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2c2f0; ret; 
0x000000000042c2d8: jne 0x2c2f0; ret; 
0x000000000042c3ab: jne 0x2c3b0; ret; 
0x000000000042c5d8: jne 0x2c4a4; ret; 
0x000000000042c4a1: jne 0x2c4aa; ret; 
0x000000000042c4d6: jne 0x2c500; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042c606: jne 0x2c60d; ret; 
0x000000000042c657: jne 0x2c66c; ret; 
0x000000000042c6e0: jne 0x2c6eb; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042c6b5: jne 0x2c6f0; xor eax, eax; ret; 
0x000000000042c751: jne 0x2c754; ret; 
0x000000000042c824: jne 0x2c827; ret; 
0x000000000042cd98: jne 0x2cd9e; vzeroupper; ret; 
0x000000000042d8e7: jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000042da64: jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x000000000042dad3: jne 0x2da99; add rax, rdx; vzeroupper; ret; 
0x000000000042db2b: jne 0x2db31; vzeroupper; ret; 
0x000000000042db23: jne 0x2db35; add rax, rdi; xtest; jne 0x2db31; vzeroupper; ret; 
0x000000000042dd83: jne 0x2dd89; add rax, rdi; ret; 
0x000000000042ddb5: jne 0x2dd89; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042dd98: jne 0x2dd89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042def2: jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042df39: jne 0x2df3c; ret; 
0x000000000042e300: jne 0x2e1f0; lea rax, [rdi + 0xb]; ret; 
0x000000000042e2ba: jne 0x2e1f0; lea rax, [rdi + 0xf]; ret; 
0x000000000042e265: jne 0x2e1f0; lea rax, [rdi + 3]; ret; 
0x000000000042e237: jne 0x2e1f0; lea rax, [rdi + 7]; ret; 
0x000000000042e1e6: jne 0x2e1f4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000042e25c: jne 0x2e3d0; test dl, 4; jne 0x2e1f0; lea rax, [rdi + 3]; ret; 
0x000000000042e33e: jne 0x2e400; test al, 0x40; jne 0x2e410; lea rax, [rdi + 7]; ret; 
0x000000000042e346: jne 0x2e410; lea rax, [rdi + 7]; ret; 
0x000000000042e22e: jne 0x2e410; test dl, 0x40; jne 0x2e1f0; lea rax, [rdi + 7]; ret; 
0x000000000042e2f7: jne 0x2e440; test dh, 4; jne 0x2e1f0; lea rax, [rdi + 0xb]; ret; 
0x000000000042e390: jne 0x2e470; test ah, 0x40; jne 0x2e480; lea rax, [rdi + 0xf]; ret; 
0x000000000042e399: jne 0x2e480; lea rax, [rdi + 0xf]; ret; 
0x000000000042e2b1: jne 0x2e480; test dh, 0x40; jne 0x2e1f0; lea rax, [rdi + 0xf]; ret; 
0x000000000042e9cb: jne 0x2e9b3; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2e57b; xor eax, eax; ret; 
0x000000000042ea34: jne 0x2ea3a; vzeroupper; ret; 
0x000000000042ef2b: jne 0x2ef13; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2eadb; xor eax, eax; ret; 
0x000000000042f499: jne 0x2f483; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2f041; xor eax, eax; ret; 
0x0000000000430bac: jne 0x30b90; xor eax, eax; sub eax, ecx; ret; 
0x00000000004319c9: jne 0x319b0; xor eax, eax; vzeroupper; ret; 
0x0000000000432014: jne 0x3201a; vzeroupper; ret; 
0x0000000000432697: jne 0x32680; xor eax, eax; ret; 
0x0000000000435abc: jne 0x35ac2; vzeroupper; ret; 
0x0000000000435bd9: jne 0x35b74; mov eax, esi; ret; 
0x0000000000435cc5: jne 0x35c7b; mov rax, rsi; ret; 
0x0000000000435d27: jne 0x35d2d; xor rax, rax; ret; 
0x000000000043622f: jne 0x36235; vzeroupper; ret; 
0x0000000000436b11: jne 0x36b00; ret; 
0x0000000000436b08: jne 0x36b20; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36b00; ret; 
0x0000000000436bc1: jne 0x36bb0; ret; 
0x0000000000436bb8: jne 0x36bd0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36bb0; ret; 
0x0000000000436d31: jne 0x36d20; lea rax, [rcx - 1]; ret; 
0x0000000000436d28: jne 0x36d40; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x36d20; lea rax, [rcx - 1]; ret; 
0x0000000000436e81: jne 0x36e70; sub rax, 1; ret; 
0x0000000000436e78: jne 0x36e90; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36e70; sub rax, 1; ret; 
0x000000000043700b: jne 0x36f9d; push 1; push 0; call rax; 
0x000000000043712f: jne 0x37154; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043755c: jne 0x3759e; pop rbx; pop r12; pop rbp; ret; 
0x0000000000437af5: jne 0x37ad0; mov eax, edi; ret; 
0x000000000043856c: jne 0x38613; add rsp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x00000000004386cb: jne 0x3866d; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x000000000043867b: jne 0x38723; leave; ret; 
0x000000000043878e: jne 0x38780; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000438847: jne 0x3888b; leave; ret; 
0x00000000004388dc: jne 0x3891b; leave; ret; 
0x00000000004395dc: jne 0x395e0; ret; 
0x00000000004395fc: jne 0x39600; ret; 
0x0000000000439ace: jne 0x39b40; mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x000000000043a2ff: jne 0x3a308; pop rbp; ret; 
0x000000000043bdbb: jne 0x3bdd0; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x000000000043be13: jne 0x3be1b; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043be67: jne 0x3be70; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043c4d7: jne 0x3c4db; call rax; 
0x000000000043ca4d: jne 0x3ca51; call rax; 
0x000000000043cb78: jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d2db: jne 0x3d2df; call rax; 
0x000000000043d419: jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000043e06d: jne 0x3e008; nop; xor eax, eax; jmp 0x3e008; nop dword ptr [rax]; call rax; 
0x000000000043e020: jne 0x3e025; mov qword ptr [rbx], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043e1e8: jne 0x3e220; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, ebx; syscall; 
0x000000000043e288: jne 0x3e2c0; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, ebx; syscall; 
0x000000000043e45e: jne 0x3e445; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000404ab4: jne 0x4ab0; add r10, rbp; leave; mov rax, r10; sub rax, rdx; ret; 
0x000000000044ae96: jne 0x4ae80; pop rbx; pop r12; pop rbp; ret; 
0x000000000044b15a: jne 0x4b130; pop rbx; pop r12; pop rbp; ret; 
0x000000000044ea25: jne 0x4ea00; ret; 
0x0000000000404ec4: jne 0x4ea0; mov rcx, qword ptr [r15]; test rcx, rcx; je 0x4ea0; call rcx; 
0x000000000044eb22: jne 0x4eb30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044ed25: jne 0x4ed63; leave; mov eax, edx; ret; 
0x000000000044edd0: jne 0x4edc0; mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x4eeb9; leave; ret; 
0x000000000044eddf: jne 0x4eeb9; leave; ret; 
0x000000000044feb9: jne 0x4fed4; mov qword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x000000000045009c: jne 0x500a0; ret; 
0x0000000000450098: jne 0x500bb; test ecx, ecx; jne 0x500a0; ret; 
0x0000000000405268: jne 0x5270; ret; 
0x0000000000452f37: jne 0x52f7a; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004540eb: jne 0x54102; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454926: jne 0x5492a; leave; ret; 
0x00000000004549a1: jne 0x54980; ret; 
0x0000000000455731: jne 0x55720; ret; 
0x0000000000455d2b: jne 0x55d98; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000455feb: jne 0x55f78; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000045615b: jne 0x560e8; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x00000000004564fc: jne 0x56510; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000045655d: jne 0x565b0; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004570ff: jne 0x57188; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000457808: jne 0x57811; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xe8], rcx; mov rdi, r15; call rax; 
0x00000000004580ce: jne 0x581c9; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x00000000004583dc: jne 0x583f0; mov ecx, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], ecx; cmove eax, ecx; ret; 
0x00000000004584c2: jne 0x584d8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045861c: jne 0x58637; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004586d8: jne 0x586ef; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045884b: jne 0x58888; xor eax, eax; ret; 
0x00000000004588b8: jne 0x588c0; xend; xor eax, eax; ret; 
0x0000000000458917: jne 0x58950; mov r9d, 0xffffffff; xor r8d, r8d; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000459a95: jne 0x59a45; ret; 
0x0000000000459a89: jne 0x59a67; lea rax, [rip + 0x14e]; and ch, 8; jne 0x59a45; ret; 
0x000000000045a5b8: jne 0x5a598; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x59ddb; xor eax, eax; ret; 
0x000000000045a69b: jne 0x5a6a1; vzeroupper; ret; 
0x000000000045afd8: jne 0x5afb8; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x5a7eb; xor eax, eax; ret; 
0x000000000045b9f1: jne 0x5b9d3; lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x5b211; xor eax, eax; ret; 
0x000000000045f472: jne 0x5f478; vzeroupper; ret; 
0x00000000004601dd: jne 0x60208; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000460265: jne 0x60225; ret; 
0x0000000000460259: jne 0x6023e; lea rax, [rip + 0xbe]; and ch, 8; jne 0x60225; ret; 
0x00000000004602d5: jne 0x60295; ret; 
0x00000000004602c9: jne 0x602ae; lea rax, [rip + 0x9ce]; and ch, 8; jne 0x60295; ret; 
0x0000000000460704: jne 0x6070a; vzeroupper; ret; 
0x000000000046136f: jne 0x61375; vzeroupper; ret; 
0x0000000000406100: jne 0x613c; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x00000000004614a4: jne 0x61440; mov eax, esi; ret; 
0x0000000000461580: jne 0x61539; mov rax, rsi; ret; 
0x00000000004615e7: jne 0x615ed; xor rax, rax; ret; 
0x0000000000461913: jne 0x6196a; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000461ab6: jne 0x61ae1; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000461d54: jne 0x61d5b; leave; movzx eax, al; ret; 
0x0000000000461dbe: jne 0x61dfb; leave; ret; 
0x0000000000461ea5: jne 0x61ec3; leave; mov eax, edx; ret; 
0x0000000000461f83: jne 0x61f87; leave; ret; 
0x000000000046209c: jne 0x620bc; leave; ret; 
0x000000000046214b: jne 0x62153; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004622ee: jne 0x6230b; leave; ret; 
0x000000000046238d: jne 0x6239c; leave; ret; 
0x000000000046241d: jne 0x6242c; leave; ret; 
0x00000000004624f9: jne 0x625b7; leave; ret; 
0x0000000000462614: jne 0x6263c; leave; ret; 
0x0000000000463af8: jne 0x63af0; mov dword ptr [rax + 8], 0; mov qword ptr [rax + 0x10], 0; jmp 0x64c70; nop; ret; 
0x00000000004063e1: jne 0x63d3; test rax, rax; je 0x63b4; leave; ret; 
0x0000000000466355: jne 0x663c7; leave; ret; 
0x00000000004666c6: jne 0x666e0; test rdx, rdx; jne 0x666f0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x00000000004666cb: jne 0x666f0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000046677a: jne 0x6675a; mov eax, 1; pop rbp; ret; 
0x0000000000466773: jne 0x66760; cmp cx, 0x7fff; jne 0x6675a; mov eax, 1; pop rbp; ret; 
0x0000000000466758: jne 0x66788; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x000000000046682c: jne 0x66890; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x000000000046691b: jne 0x66942; mov qword ptr [rax + 8], rdx; pop rbp; ret; 
0x0000000000466915: jne 0x66961; cmp rcx, qword ptr [rdi + 0x30]; jne 0x66942; mov qword ptr [rax + 8], rdx; pop rbp; ret; 
0x0000000000466cd0: jne 0x66cd8; ret; 
0x0000000000466ccc: jne 0x66cf3; test ecx, ecx; jne 0x66cd8; ret; 
0x0000000000467c0f: jne 0x67c40; leave; ret; 
0x0000000000467c90: jne 0x67c6d; and ch, 8; lea rdx, [rip + 0xad4]; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x0000000000467fdf: jne 0x67fe5; vzeroupper; ret; 
0x000000000046843b: jne 0x68384; sub al, 0x18; jae 0x6835e; xor eax, eax; ret; 
0x00000000004686c9: jne 0x68604; sub al, 0x18; jae 0x685de; xor eax, eax; ret; 
0x0000000000468995: jne 0x68a70; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000468a37: jne 0x68aa0; xor eax, eax; ret; 
0x0000000000468a07: jne 0x68ae0; xor eax, eax; ret; 
0x000000000040688c: jne 0x68e0; lea rax, [rip + 0x9f92b]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000469372: jne 0x69376; leave; ret; 
0x000000000046a852: jne 0x6a85c; mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x000000000046c80f: jne 0x6c800; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000046c904: jne 0x6ca08; leave; mov rax, r10; ret; 
0x000000000046d585: jne 0x6d570; ret; 
0x000000000046d563: jne 0x6d57e; ret; 
0x000000000046d62a: jne 0x6d60a; ret; 
0x000000000046d7bc: jne 0x6d7c8; jmp 0x1b900; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000046df15: jne 0x6df19; leave; ret; 
0x000000000046dff7: jne 0x6dffb; leave; ret; 
0x000000000046e067: jne 0x6e06b; leave; ret; 
0x000000000046e15f: jne 0x6e163; leave; ret; 
0x000000000046e1c3: jne 0x6e1c7; leave; ret; 
0x000000000046e60c: jne 0x6e619; leave; ret; 
0x00000000004705d7: jne 0x705e5; leave; ret; 
0x00000000004706bc: jne 0x706c0; leave; ret; 
0x0000000000470e04: jne 0x70e0d; cmp qword ptr [r9 + 0x38], 0; je 0x70e0f; leave; ret; 
0x0000000000473f65: jne 0x73f7b; lea rdx, [rip + 0x391a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x0000000000473fbc: jne 0x73fd0; mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x0000000000474361: jne 0x74353; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474515: jne 0x74507; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000474673: jne 0x74665; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047472d: jne 0x7471f; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000047493f: jne 0x74931; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000474997: jne 0x74989; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474aa8: jne 0x74a9a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000474f33: jne 0x74f20; ret; 
0x0000000000475270: jne 0x75278; ret; 
0x000000000047693a: jne 0x76970; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000047718d: jne 0x77190; ret; 
0x000000000047720d: jne 0x77210; ret; 
0x0000000000477288: jne 0x77290; ret; 
0x00000000004774d8: jne 0x774e0; ret; 
0x0000000000478a72: jne 0x78a67; and edx, 3; cmp edx, 2; je 0x78a80; ret; 
0x00000000004090d5: jne 0x902d; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004090d0: jne 0x910d; test rax, rax; jne 0x902d; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004095bb: jne 0x95c0; ret; 
0x0000000000409775: jne 0x9740; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x0000000000409889: jne 0x9a4c; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000040af0b: jne 0xaf22; mov rax, qword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000040b0bc: jne 0xb0c7; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040b67a: jne 0xb629; ret; 
0x000000000040b627: jne 0xb670; and ch, 2; lea rax, [rip + 0x2b8d]; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000040b77a: jne 0xb729; ret; 
0x000000000040b727: jne 0xb770; and ch, 2; lea rax, [rip + 0x2a4d]; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b892: jne 0xb7f8; test eax, eax; lea rdx, [rip + 0x481f]; lea rax, [rip + 0x47b8]; cmovne rax, rdx; ret; 
0x000000000040b800: jne 0xb820; test eax, eax; lea rdx, [rip + 0x3f35]; lea rax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000040b852: jne 0xb834; and dh, 2; lea rax, [rip + 0x4582]; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000040b8f2: jne 0xb8cd; and ch, 8; lea rdx, [rip + 0x5122]; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000040b962: jne 0xb93d; and ch, 8; lea rdx, [rip + 0x5732]; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x000000000040c1ee: jne 0xc1f4; vzeroupper; ret; 
0x000000000040fa36: jne 0xfa3c; vzeroupper; ret; 
0x000000000041d79c: jno 0x1d79c; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x0000000000439f80: jno 0x39f7e; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000040c964: jno 0xc964; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040cb9e: jno 0xcb9e; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040cd05: jno 0xcd0d; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040ce55: jno 0xced3; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce5c: jno 0xceda; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce63: jno 0xcee1; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce6a: jno 0xcee8; adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000401bbd: jnp 0x1bc0; mov rax, rdi; pop rbx; pop rbp; ret; 
0x0000000000428404: jnp 0x283c3; jmp qword ptr [rsi + 0xf]; 
0x000000000043f181: jnp 0x3f1b5; std; jmp qword ptr [rsi + 0x66]; 
0x000000000044daab: jnp 0x4dabd; call 0x4da60; jmp 0x4da86; nop dword ptr [rax]; ret; 
0x0000000000458563: jnp 0x58564; jmp qword ptr [rsi + 0x2e]; 
0x0000000000459a4e: jnp 0x59a7f; add eax, 0x12741000; test byte ptr [rip + 0x53099], 1; lea rdx, [rip + 0x3dad]; cmove rax, rdx; ret; 
0x0000000000428692: jns 0x28651; jmp qword ptr [rsi + 0x2e]; 
0x000000000042a0ee: jns 0x2a0de; and ch, 2; lea rdx, [rip - 0x1d03a]; lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000043a2fa: jns 0x3a2f9; inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x000000000045a38b: jns 0x5a389; ret 0x41c4; 
0x000000000045a3e3: jns 0x5a3e1; ret 0x41c4; 
0x000000000045a448: jns 0x5a446; ret 0x41c4; 
0x000000000045a499: jns 0x5a497; ret 0x41c4; 
0x000000000045a4f9: jns 0x5a4f7; ret 0x41c4; 
0x000000000045a54b: jns 0x5a549; ret 0x41c4; 
0x000000000045adab: jns 0x5ada9; ret 0x41c4; 
0x000000000045ae03: jns 0x5ae01; ret 0x41c4; 
0x000000000045ae68: jns 0x5ae66; ret 0x41c4; 
0x000000000045aeb9: jns 0x5aeb7; ret 0x41c4; 
0x000000000045af19: jns 0x5af17; ret 0x41c4; 
0x000000000045af6b: jns 0x5af69; ret 0x41c4; 
0x000000000045da17: jns 0x5da1b; add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000470e08: jns 0x70e42; add byte ptr [rdx + rax - 0x37], dh; ret; 
0x000000000040b64e: jns 0xb63e; and ch, 2; lea rdx, [rip + 0x1a66]; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000040b74e: jns 0xb73e; and ch, 2; lea rdx, [rip + 0x1936]; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040c96b: jns 0xc96c; ret; 
0x000000000040cba5: jns 0xcba6; ret; 
0x000000000040cd0c: jns 0xcd15; ret; 
0x0000000000428469: jns 0xce30837; cmp eax, 4; je 0x28451; ret; 
0x000000000040ed19: jns 0xed6b; ret; 
0x000000000041133b: jo 0x1133e; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000412453: jo 0x1249d; cmp dword ptr [rax + 8], 0; je 0x12460; ret; 
0x00000000004189e2: jo 0x18a24; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000041b42c: jo 0x1b493; jb 0x1b49d; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4bc: jo 0x1b523; jb 0x1b52d; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x000000000041d347: jo 0x1d347; jmp qword ptr [rsi + 0xf]; 
0x0000000000427644: jo 0x2764e; xor eax, eax; ret; 
0x0000000000427680: jo 0x2768a; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x0000000000439acf: jo 0x39b19; mov edi, dword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x00000000004547fc: jo 0x54785; add eax, 0x1fa8300; jg 0x54838; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004557ab: jo 0x557bd; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; ret; 
0x0000000000462da3: jo 0x62d9f; dec dword ptr [rbx - 0x7cb7efbd]; ret; 
0x0000000000466356: jo 0x66321; ret; 
0x000000000040976e: jo 0x9778; add byte ptr [rax], al; cmp rax, rsi; jne 0x9740; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x000000000042b0f5: jp 0x2b106; mov esp, 0xf80148c0; xtest; jne 0x2b105; vzeroupper; ret; 
0x0000000000439ee9: jp 0x39eed; js 0x39efc; test bh, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004461f2: jp 0x461d5; sti; jmp qword ptr [rdi - 0x18]; 
0x000000000045857b: jp 0x5857c; jmp qword ptr [rsi - 0x70]; 
0x0000000000460b75: jp 0x60bbf; bsf eax, edx; shr rax, 2; ret; 
0x0000000000467fd5: jp 0x67fe6; mov esp, 0xf80148c0; xtest; jne 0x67fe5; vzeroupper; ret; 
0x000000000040bc20: jp 0xbc42; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000040d31c: jp 0xd31f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000040db96: jp 0xdb99; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000040e1d5: jp 0xe1e6; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e345: jp 0xe357; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000411c90: js 0x11cb9; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x00000000004189de: js 0x18a18; mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000041b492: js 0x1b49c; jbe 0x1b4fb; jne 0x1b43c; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000041b522: js 0x1b52c; jbe 0x1b58b; jne 0x1b4cc; or byte ptr [rip + 0x91681], 0xc; ret; 
0x00000000004292c3: js 0x29570; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000042ddb2: js 0x2dda9; leave; jne 0x2dd89; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000439eeb: js 0x39efc; test bh, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043b839: js 0x3b857; mov eax, 0xca; syscall; 
0x000000000043e057: js 0x3e075; mov eax, 0xca; syscall; 
0x000000000044ec6c: js 0x4ecb6; lea esi, [rbp - 0x140]; movups xmmword ptr [rbp - 0xb8], xmm0; mov r10d, 8; mov eax, 0xd; syscall; 
0x00000000004051e4: js 0x51f5; or al, byte ptr [rax]; ret; 
0x00000000004051bc: js 0x5234; or al, byte ptr [rax]; ret; 
0x0000000000458ad8: js 0x58ae2; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x53e00], 0; ret; 
0x0000000000405c04: js 0x5c26; add byte ptr [rdi + rcx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000470478: js 0x70496; mov eax, 0xca; syscall; 
0x0000000000472839: js 0x72820; jmp 0x727bb; ret; 
0x0000000000473339: js 0x73320; jmp 0x732bb; ret; 
0x0000000000474dce: js 0x74df0; mov qword ptr [r8], rdx; ret; 
0x000000000047820e: js 0x78230; mov qword ptr [r8], rdx; ret; 
0x000000000040e8f0: js 0xe922; ret; 
0x0000000000410896: kmovd eax, k0; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000041108d: kmovd eax, k0; shr eax, cl; je 0x10f87; bsf eax, eax; ret; 
0x0000000000410870: kmovd eax, k0; test eax, eax; je 0x108b0; bsf eax, eax; add rax, rdi; ret; 
0x0000000000410f62: kmovd eax, k0; test eax, eax; je 0x10f80; bsf eax, eax; ret; 
0x0000000000460762: kmovd eax, k0; test eax, eax; je 0x60780; bsf eax, eax; ret; 
0x00000000004364e9: kmovd eax, k1; test eax, eax; je 0x364f7; bsr eax, eax; add rax, rsi; ret; 
0x000000000042c3a5: kmovd eax, k1; test eax, eax; jne 0x2c3b0; ret; 
0x000000000042c600: kmovd eax, k1; test eax, eax; jne 0x2c60d; ret; 
0x000000000042c651: kmovd eax, k1; test eax, eax; jne 0x2c66c; ret; 
0x000000000043664c: kmovd eax, k2; andn eax, eax, ecx; je 0x36608; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000436728: kmovd eax, k2; andn eax, eax, ecx; je 0x366d9; bsr eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043660e: kmovd eax, k4; test eax, eax; je 0x36660; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x00000000004366ee: kmovd ecx, k0; bsr ecx, ecx; sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x000000000042b455: kmovd ecx, k0; tzcnt ecx, ecx; cmp al, cl; jae 0x2b467; xor eax, eax; ret; 
0x000000000042b6d5: kmovd ecx, k0; tzcnt ecx, ecx; cmp al, cl; jae 0x2b6e7; xor eax, eax; ret; 
0x000000000042b3ec: kmovd ecx, k0; tzcnt ecx, ecx; cmp al, cl; jbe 0x2b3bd; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b66c: kmovd ecx, k0; tzcnt ecx, ecx; cmp al, cl; jbe 0x2b63d; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042c5d2: kmovd ecx, k1; test ecx, ecx; jne 0x2c4a4; ret; 
0x000000000042c49b: kmovd ecx, k1; test ecx, ecx; jne 0x2c4aa; ret; 
0x0000000000435bd3: kmovd edx, k0; test edx, edx; jne 0x35b74; mov eax, esi; ret; 
0x000000000046149e: kmovd edx, k0; test edx, edx; jne 0x61440; mov eax, esi; ret; 
0x00000000004100ac: kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000040fe2e: kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000410891: kord k0, k1, k0; kmovd eax, k0; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000435cc0: kortestd k2, k0; jne 0x35c7b; mov rax, rsi; ret; 
0x000000000046157b: kortestd k2, k0; jne 0x61539; mov rax, rsi; ret; 
0x000000000042345d: lahf; idiv edi; dec dword ptr [rax + 0x39]; ret; 
0x0000000000460d37: lahf; shr eax, 2; vzeroupper; ret; 
0x000000000044d1fd: lahf; sti; dec dword ptr [rax - 0x77]; ret; 
0x00000000004584db: lahf; sti; jmp qword ptr [rsi - 0x70]; 
0x000000000042cb4d: lar ecx, word ptr [rax - 0x73]; cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x000000000042cb4c: lar r9, word ptr [rax - 0x73]; cmp dword ptr [rcx], r12d; vzeroupper; ret; 
0x0000000000436554: lea eax, [rax + rax + 0x20]; ret; 
0x0000000000436537: lea eax, [rax + rax + 0x40]; ret; 
0x0000000000419161: lea eax, [rax + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x000000000043661a: lea eax, [rax + rax + 0x60]; ret; 
0x0000000000460d54: lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d44: lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d34: lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d14: lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000042bb14: lea eax, [rax + rdi + 0x10]; ret; 
0x000000000042bb24: lea eax, [rax + rdi + 0x20]; ret; 
0x000000000042baf4: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000042c907: lea eax, [rax + rdx + 1]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042c847: lea eax, [rax + rdx + 1]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000043881f: lea eax, [rbp - 0x30]; mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x38850; mov eax, 0x48; syscall; 
0x0000000000447c48: lea eax, [rbp - 0x40]; push 0; push 0; call rax; 
0x0000000000417761: lea eax, [rbp - 0xb0]; mov dword ptr [rbp - 0xc4], 0x30; mov qword ptr [rbp - 0xb8], rax; call 0x16ee0; leave; ret; 
0x00000000004020cd: lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xaa8b6], rax; pop rbx; pop rbp; ret; 
0x0000000000401acd: lea eax, [rbx + 1]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000417e59: lea eax, [rcx + 1]; mov qword ptr [rip + 0x8fd25], rax; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x0000000000458cfc: lea eax, [rcx + rax + 0x4000]; ret; 
0x000000000040e8a8: lea eax, [rcx + rcx*2]; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x000000000042cb50: lea eax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x000000000042cb70: lea eax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000042cb33: lea eax, [rcx + rdi + 1]; vzeroupper; ret; 
0x000000000042cd91: lea eax, [rcx + rdi + 1]; xtest; jne 0x2cd9e; vzeroupper; ret; 
0x0000000000436d34: lea eax, [rcx - 1]; ret; 
0x00000000004291c7: lea eax, [rcx]; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000042d6ac: lea eax, [rdi + 0x10]; ret; 
0x000000000042d6c1: lea eax, [rdi + 0x11]; ret; 
0x000000000042d6df: lea eax, [rdi + 0x12]; ret; 
0x000000000042d6ff: lea eax, [rdi + 0x13]; ret; 
0x000000000042d722: lea eax, [rdi + 0x14]; ret; 
0x000000000042d741: lea eax, [rdi + 0x15]; ret; 
0x000000000042d761: lea eax, [rdi + 0x16]; ret; 
0x000000000042d781: lea eax, [rdi + 0x17]; ret; 
0x000000000042d7a4: lea eax, [rdi + 0x18]; ret; 
0x000000000042d7c9: lea eax, [rdi + 0x19]; ret; 
0x000000000042d7e7: lea eax, [rdi + 0x1a]; ret; 
0x000000000042d807: lea eax, [rdi + 0x1b]; ret; 
0x000000000042d823: lea eax, [rdi + 0x1c]; ret; 
0x000000000042d843: lea eax, [rdi + 0x1d]; ret; 
0x000000000042d863: lea eax, [rdi + 0x1e]; ret; 
0x000000000042d883: lea eax, [rdi + 0x1f]; ret; 
0x0000000000458512: lea eax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042d5fd: lea eax, [rdi + 0xa]; ret; 
0x000000000042d61d: lea eax, [rdi + 0xb]; ret; 
0x000000000042d63f: lea eax, [rdi + 0xc]; ret; 
0x000000000042d65f: lea eax, [rdi + 0xd]; ret; 
0x000000000042d67f: lea eax, [rdi + 0xe]; ret; 
0x000000000042d699: lea eax, [rdi + 0xf]; ret; 
0x000000000042d547: lea eax, [rdi + 1]; ret; 
0x000000000042d55a: lea eax, [rdi + 2]; ret; 
0x000000000042d565: lea eax, [rdi + 3]; ret; 
0x000000000042d578: lea eax, [rdi + 4]; ret; 
0x000000000042d58d: lea eax, [rdi + 5]; ret; 
0x000000000042d5ab: lea eax, [rdi + 6]; ret; 
0x000000000042d5b7: lea eax, [rdi + 7]; ret; 
0x000000000042d5ca: lea eax, [rdi + 8]; ret; 
0x000000000042d5df: lea eax, [rdi + 9]; ret; 
0x000000000042bb49: lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000460878: lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000411067: lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000435ff5: lea eax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x000000000042ba53: lea eax, [rdi + rax + 0x30]; ret; 
0x000000000041089e: lea eax, [rdi + rax + 0x40]; ret; 
0x0000000000411075: lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000410f75: lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000435fd4: lea eax, [rdi + rax + 1]; vzeroupper; ret; 
0x000000000046086b: lea eax, [rdi + rax + 8]; ret; 
0x00000000004360de: lea eax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004682ba: lea eax, [rdi + rax*4]; ret; 
0x000000000042df90: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000410a6b: lea eax, [rdi + rax]; ret; 
0x0000000000410888: lea eax, [rdi + rcx + 0x20]; ret; 
0x000000000042b3f9: lea eax, [rdi + rcx + 0x40]; ret; 
0x000000000042b47a: lea eax, [rdi + rcx + 0x60]; ret; 
0x000000000042b468: lea eax, [rdi + rcx + 0x80]; ret; 
0x000000000046830b: lea eax, [rdi + rcx*4 + 0x40]; ret; 
0x000000000046838e: lea eax, [rdi + rcx*4 + 0x60]; ret; 
0x000000000046837c: lea eax, [rdi + rcx*4 + 0x80]; ret; 
0x000000000042d034: lea eax, [rdi + rcx]; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x000000000042b408: lea eax, [rdi + rdx + 0x20]; ret; 
0x00000000004109de: lea eax, [rdi + rdx + 0x40]; ret; 
0x000000000042d026: lea eax, [rdi + rdx + 0x60]; ret; 
0x0000000000468318: lea eax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000468704: lea eax, [rdi + rdx*4 + 0x40]; ret; 
0x000000000042b587: lea eax, [rdi + rdx]; ret; 
0x000000000042b3b9: lea eax, [rdi + rsi]; ret; 
0x00000000004197fc: lea eax, [rdi - 1]; cmp rax, -3; jbe 0x19810; ret; 
0x000000000042d0dc: lea eax, [rdi - 1]; ret; 
0x000000000042cb9a: lea eax, [rdi - 1]; vzeroupper; ret; 
0x000000000042d533: lea eax, [rdi]; ret; 
0x0000000000474dd9: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000412450: lea eax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000043d76b: lea eax, [rdx + rcx]; call rax; 
0x000000000042cb1b: lea eax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x0000000000426a8e: lea eax, [rdx + rdi]; ret; 
0x00000000004602e1: lea eax, [rip + 0x10d9]; test edx, 0x40000000; je 0x602bf; ret; 
0x000000000046029d: lea eax, [rip + 0x133d]; lea rdx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x0000000000429fe2: lea eax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x0000000000459a8c: lea eax, [rip + 0x14e]; and ch, 8; jne 0x59a45; ret; 
0x0000000000459aa1: lea eax, [rip + 0x1569]; test edx, 0x40000000; je 0x59a7f; ret; 
0x0000000000429f7b: lea eax, [rip + 0x18cf]; mov ecx, edx; not ecx; and ecx, 0x120; je 0x29f90; ret; 
0x000000000040b75b: lea eax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b65b: lea eax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000040b7ab: lea eax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b78b: lea eax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b68b: lea eax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000042a039: lea eax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000040b72d: lea eax, [rip + 0x2a4d]; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b62d: lea eax, [rip + 0x2b8d]; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a1c1: lea eax, [rip + 0x2c39]; test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000040b774: lea eax, [rip + 0x2fc6]; jne 0xb729; ret; 
0x000000000042a1a4: lea eax, [rip + 0x3026]; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x000000000040b674: lea eax, [rip + 0x3106]; jne 0xb629; ret; 
0x000000000040b6ab: lea eax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000042a21e: lea eax, [rip + 0x367c]; test ch, 8; jne 0x2a1eb; ret; 
0x000000000042a231: lea eax, [rip + 0x3b09]; test edx, 0x40000000; je 0x2a211; ret; 
0x000000000042a1ef: lea eax, [rip + 0x3d4b]; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x0000000000467c9d: lea eax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000040b80c: lea eax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000040b87a: lea eax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000042a2a6: lea eax, [rip + 0x41e4]; test dh, 8; jne 0x2a25b; ret; 
0x000000000040b858: lea eax, [rip + 0x4582]; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000040b8a2: lea eax, [rip + 0x47b8]; cmovne rax, rdx; ret; 
0x000000000040b82a: lea eax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000040b8ff: lea eax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x0000000000460271: lea eax, [rip + 0x4c9]; test edx, 0x40000000; je 0x6024f; ret; 
0x000000000042a2b9: lea eax, [rip + 0x4ca1]; test ecx, 0x40000000; je 0x2a299; ret; 
0x0000000000454b67: lea eax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000040b911: lea eax, [rip + 0x4f29]; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b96f: lea eax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x000000000040b981: lea eax, [rip + 0x55b9]; test edx, 0x40000000; je 0xb958; ret; 
0x0000000000459b11: lea eax, [rip + 0x59b9]; test edx, 0x40000000; je 0x59ace; ret; 
0x0000000000467cc2: lea eax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x0000000000459af4: lea eax, [rip + 0x5d86]; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x0000000000459b33: lea eax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x000000000042a274: lea eax, [rip + 0x6696]; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000042a37c: lea eax, [rip + 0x75ee]; and ch, 8; jne 0x2a335; ret; 
0x00000000004204b7: lea eax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000420534: lea eax, [rip + 0x81bc6]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205b7: lea eax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000042043c: lea eax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041fb94: lea eax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042a391: lea eax, [rip + 0x82a9]; test edx, 0x40000000; je 0x2a36f; ret; 
0x000000000041f372: lea eax, [rip + 0x82d88]; mov r14, rdx; mov r11d, 1; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000046022d: lea eax, [rip + 0x8bd]; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x000000000041250b: lea eax, [rip + 0x9a33f]; ret; 
0x00000000004124d3: lea eax, [rip + 0x9a377]; ret; 
0x00000000004602cc: lea eax, [rip + 0x9ce]; and ch, 8; jne 0x60295; ret; 
0x000000000040688f: lea eax, [rip + 0x9f92b]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b701: lea eax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000042a3ef: lea eax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000040b601: lea eax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042a401: lea eax, [rip + 0xb6f9]; test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a3ab: lea eax, [rip + 0xb96f]; mov ecx, edx; not ecx; and ecx, 0x128; je 0x2a3c0; ret; 
0x000000000042a45f: lea eax, [rip + 0xbadb]; cmovne rax, rdx; ret; 
0x000000000046025c: lea eax, [rip + 0xbe]; and ch, 8; jne 0x60225; ret; 
0x000000000042a471: lea eax, [rip + 0xc009]; test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000429fbd: lea eax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x0000000000467933: lea eax, [rip + 7]; cmove rax, rdx; ret; 
0x000000000042a114: lea eax, [rip - 0x1b99a]; jne 0x2a0c9; ret; 
0x000000000042a0cd: lea eax, [rip - 0x1bf13]; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000042a12b: lea eax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000042a0fb: lea eax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000042a0a1: lea eax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a14b: lea eax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000042ae03: lea eax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x00000000004360a5: lea eax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000436154: lea eax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x00000000004366fa: lea eax, [rsi + rcx + 0x60]; ret; 
0x00000000004614bd: lea eax, [rsi + rdx + 0x10]; ret; 
0x0000000000435bf8: lea eax, [rsi + rdx + 0x40]; ret; 
0x000000000046156f: lea eax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000461598: lea eax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435cb1: lea eax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435cd8: lea eax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435b79: lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x0000000000435be8: lea eax, [rsi + rdx]; ret; 
0x000000000040b62f: lea ebp, [rbx]; add byte ptr [rax], al; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000046e706: lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000416db5: lea ebx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000042626c: lea ebx, [rdi + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000474c5c: lea ebx, [rsp + rcx*8]; mov rdx, qword ptr [r14]; mov rdi, qword ptr [rbp - 0x38]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x0000000000431c47: lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x31c22; xor eax, eax; vzeroupper; ret; 
0x0000000000432937: lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x32917; xor eax, eax; ret; 
0x0000000000458a25: lea ecx, [rax - 0x7b]; ror byte ptr [rdi], cl; int1; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000458297: lea ecx, [rbp - 0x38]; call rax; 
0x0000000000436f7c: lea ecx, [rbp - 0x80]; xor r8d, r8d; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x000000000042235d: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000042d521: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbd1: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000040e8ac: lea ecx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x00000000004377f1: lea ecx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000430cd7: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000045efe9: lea ecx, [rip + 0x26391]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000045da14: lea ecx, [rip + 0x27966]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040e848: lea ecx, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000401bf3: lea ecx, [rip + 0x79427]; movsxd rax, dword ptr [r9 + rsi*4]; add rax, r9; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000412465: lea ecx, [rip + 0x946f5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000040e87e: lea ecx, [rip + 0xa3c]; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000043b838: lea edi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000419baf: lea edi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000047a26b: lea edi, [rax + rsi + 0x28]; xor r10d, r10d; mov edx, 1; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004675fb: lea edi, [rax - 0x16000009]; ret; 
0x0000000000478cb5: lea edi, [rbp + riz*4 + 0x28]; xor r10d, r10d; mov edx, 1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000418615: lea edi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000401bbc: lea edi, [rbx + 1]; mov rax, rdi; pop rbx; pop rbp; ret; 
0x00000000004191c8: lea edi, [rcx + rcx + 0x58]; jmp rdx; 
0x00000000004191c8: lea edi, [rcx + rcx + 0x58]; jmp rdx; nop; ret; 
0x00000000004651f4: lea edi, [rdi + 0x10]; jmp 0x65276; shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000431e7b: lea edi, [rdi + rcx - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x31a93; xor eax, eax; ret; 
0x00000000004324fe: lea edi, [rdi + rcx - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432b6a: lea edi, [rdi + rcx - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x32781; xor eax, eax; ret; 
0x000000000040d8e3: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000478ac8: lea edi, [rdi + rsi*4 + 0x10]; lock xadd dword ptr [rdi], eax; cmp eax, 3; je 0x78ae0; ret; 
0x000000000046641e: lea edi, [rdi - 0x10]; jmp 0x66496; shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000404510: lea edi, [rip + 0x76f92]; call 0x4370; xor eax, eax; ret; 
0x0000000000404dc4: lea edi, [rip + 0x78816]; mov rbp, rsp; call 0x4d00; nop word ptr [rax + rax]; ret; 
0x0000000000404d5f: lea edi, [rip + 0x7887b]; mov rbp, rsp; call 0x4d00; nop dword ptr [rax]; ret; 
0x000000000041fc75: lea edi, [rip + 0x82885]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041fbf5: lea edi, [rip + 0x82905]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f575: lea edi, [rip + 0x82f85]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f4f5: lea edi, [rip + 0x83005]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041be09: lea edi, [rip + 0x90e39]; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x0000000000401675: lea edi, [rip + 0xabaf5]; call 0x1610; mov byte ptr [rip + 0xabae1], 1; pop rbp; ret; 
0x0000000000427559: lea edx, [rax + 0x60]; mov rax, qword ptr [rax + 0x60]; test rax, rax; jne 0x2757b; ret; 
0x00000000004016c8: lea edx, [rax + 0x68]; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16c0; ret; 
0x00000000004025b1: lea edx, [rax + 1]; jmp 0x2550; xor eax, eax; ret; 
0x0000000000404fd4: lea edx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x00000000004179c9: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000456598: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x0000000000456560: lea edx, [rax + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000046e700: lea edx, [rax - 1]; je 0x6e71e; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041d691: lea edx, [rax]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004118fe: lea edx, [rbp - 0x1010]; syscall; 
0x00000000004388e1: lea edx, [rbp - 0x10]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000454255: lea edx, [rbp - 0x140]; call rbx; 
0x0000000000461e32: lea edx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x0000000000438851: lea edx, [rbp - 0x58]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000437006: lea edx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x0000000000422361: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000475187: lea edx, [rdi + rax*8]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x0000000000475054: lea edx, [rdi + rax*8]; mov rdi, qword ptr [rbp - 0x850]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x0000000000412461: lea edx, [rdi + rdi*4]; lea rcx, [rip + 0x946f5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000417a0f: lea edx, [rdx + rcx*4]; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004179d4: lea edx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000046792c: lea edx, [rip + 0x14e]; lea rax, [rip + 7]; cmove rax, rdx; ret; 
0x00000000004602a4: lea edx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x0000000000429fdb: lea edx, [rip + 0x161f]; lea rax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x0000000000429fb6: lea edx, [rip + 0x1894]; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x000000000040b754: lea edx, [rip + 0x1936]; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b654: lea edx, [rip + 0x1a66]; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000042a032: lea edx, [rip + 0x1b48]; lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000040b784: lea edx, [rip + 0x21c6]; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b684: lea edx, [rip + 0x22f6]; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000045f037: lea edx, [rip + 0x26343]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045f01d: lea edx, [rip + 0x2635d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000040b7a4: lea edx, [rip + 0x266]; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000045d7e7: lea edx, [rip + 0x27b93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045d7cd: lea edx, [rip + 0x27bad]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000040b734: lea edx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b634: lea edx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a1ab: lea edx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x0000000000473f68: lea edx, [rip + 0x391a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x000000000040b6a4: lea edx, [rip + 0x396]; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x0000000000459a5d: lea edx, [rip + 0x3dad]; cmove rax, rdx; ret; 
0x000000000040b805: lea edx, [rip + 0x3f35]; lea rax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000042a1f6: lea edx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x000000000040e8b5: lea edx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x000000000040b873: lea edx, [rip + 0x4107]; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000040b85f: lea edx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000040b89b: lea edx, [rip + 0x481f]; lea rax, [rip + 0x47b8]; cmovne rax, rdx; ret; 
0x000000000040b823: lea edx, [rip + 0x4a77]; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000040b8f8: lea edx, [rip + 0x5122]; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000042a27b: lea edx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000040b968: lea edx, [rip + 0x5732]; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x0000000000459afb: lea edx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x0000000000421c84: lea edx, [rip + 0x60756]; add rax, rdx; ret; 
0x0000000000459b2c: lea edx, [rip + 0x650e]; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000460234: lea edx, [rip + 0x676]; cmove rax, rdx; ret; 
0x0000000000467cbb: lea edx, [rip + 0x83f]; lea rax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x00000000004124f5: lea edx, [rip + 0x94665]; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x0000000000412445: lea edx, [rip + 0x94715]; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000042a34d: lea edx, [rip + 0xa1bd]; cmove rax, rdx; ret; 
0x000000000040b6fa: lea edx, [rip + 0xa90]; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x0000000000467c96: lea edx, [rip + 0xad4]; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000042a3e8: lea edx, [rip + 0xb932]; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000040b5fa: lea edx, [rip + 0xbc0]; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042adfc: lea edx, [rip + 0xbc1e]; lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x000000000042a0d4: lea edx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000042a124: lea edx, [rip - 0x1c7aa]; lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000042a0f4: lea edx, [rip - 0x1d03a]; lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000042a09a: lea edx, [rip - 0x1dee0]; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a144: lea edx, [rip - 0x1e70a]; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000040d8d7: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004179c5: lea edx, [rsi + rsi]; lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000044ec6e: lea esi, [rbp - 0x140]; movups xmmword ptr [rbp - 0xb8], xmm0; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000043700a: lea esi, [rbp - 0x70]; push 1; push 0; call rax; 
0x000000000041702e: lea esi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000419af9: lea esi, [rbp - 8]; syscall; 
0x000000000045828e: lea esi, [rbx + 0x40]; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000045835d: lea esi, [rbx + 8]; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000040422c: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000042e9ce: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2e57b; xor eax, eax; ret; 
0x000000000042ef2e: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2eadb; xor eax, eax; ret; 
0x000000000042f49c: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2f041; xor eax, eax; ret; 
0x000000000045a5bb: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x59ddb; xor eax, eax; ret; 
0x000000000045afdb: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x5a7eb; xor eax, eax; ret; 
0x000000000045b9f4: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x5b211; xor eax, eax; ret; 
0x0000000000431fa3: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; sub rdx, -0x80; jmp 0x31a93; xor eax, eax; ret; 
0x0000000000432623: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; sub rdx, -0x80; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432c91: lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; sub rdx, -0x80; jmp 0x32781; xor eax, eax; ret; 
0x00000000004054d1: lea esi, [rdx - 8]; jmp 0x12050; nop dword ptr [rax]; ret; 
0x0000000000458d51: lea esi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x0000000000416dae: lea esi, [rip + 0x64cfc]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x0000000000404509: lea esi, [rip + 0x76f8c]; lea rdi, [rip + 0x76f92]; call 0x4370; xor eax, eax; ret; 
0x0000000000404350: lea esi, [rip + 0x79212]; syscall; 
0x0000000000404320: lea esi, [rip + 0x79242]; syscall; 
0x000000000043f688: lea esi, [rip - 0x133e]; pop rbp; jmp 0x39610; nop dword ptr [rax]; pop rbp; ret; 
0x0000000000448a1d: lea esi, [rip - 0x253]; mov rbp, rsp; call 0x39610; pop rbp; mov qword ptr [rip + 0x64349], 0; ret; 
0x000000000046641a: lea esi, [rsi + 0x10]; lea rdi, [rdi - 0x10]; jmp 0x66496; shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000466c6f: lea esi, [rsi + 0x1f0ffffa]; add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000431e80: lea esi, [rsi + rcx - 0x80]; jmp 0x31a93; xor eax, eax; ret; 
0x0000000000432503: lea esi, [rsi + rcx - 0x80]; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432b6f: lea esi, [rsi + rcx - 0x80]; jmp 0x32781; xor eax, eax; ret; 
0x000000000040d8e8: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000042bf46: lea esi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bc60; ret; 
0x000000000042c346: lea esi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c060; ret; 
0x00000000004651f0: lea esi, [rsi - 8]; lea rdi, [rdi + 0x10]; jmp 0x65276; shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000457106: lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000413cca: lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000458df5: lea esp, [rsi + 0x2e]; nop dword ptr [rax + rax]; mov eax, 0xba; syscall; 
0x0000000000447c47: lea r8, [rbp - 0x40]; push 0; push 0; call rax; 
0x000000000040e8a7: lea r8d, [rcx + rcx*2]; lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x0000000000458296: lea r9, [rbp - 0x38]; call rax; 
0x0000000000436f7b: lea r9, [rbp - 0x80]; xor r8d, r8d; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x000000000040e847: lea r9, [rip + 0x72]; shl ecx, 6; add rcx, r9; jmp rcx; 
0x0000000000401bf2: lea r9, [rip + 0x79427]; movsxd rax, dword ptr [r9 + rsi*4]; add rax, r9; notrack jmp rax; mov rax, rdi; ret; 
0x000000000040e87d: lea r9, [rip + 0xa3c]; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000043d76a: lea rax, [r10 + r9]; call rax; 
0x0000000000436553: lea rax, [r8 + rax + 0x20]; ret; 
0x0000000000436536: lea rax, [r8 + rax + 0x40]; ret; 
0x0000000000419160: lea rax, [r8 + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x0000000000436619: lea rax, [r8 + rax + 0x60]; ret; 
0x0000000000417e58: lea rax, [r9 + 1]; mov qword ptr [rip + 0x8fd25], rax; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000042bb13: lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042bb23: lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042baf3: lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043881e: lea rax, [rbp - 0x30]; mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x38850; mov eax, 0x48; syscall; 
0x0000000000417760: lea rax, [rbp - 0xb0]; mov dword ptr [rbp - 0xc4], 0x30; mov qword ptr [rbp - 0xb8], rax; call 0x16ee0; leave; ret; 
0x0000000000401acc: lea rax, [rbx + 1]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000458cfb: lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000042cb4f: lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x000000000042cb6f: lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000042cb32: lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x000000000042cd90: lea rax, [rcx + rdi + 1]; xtest; jne 0x2cd9e; vzeroupper; ret; 
0x0000000000436d33: lea rax, [rcx - 1]; ret; 
0x000000000042d6ab: lea rax, [rdi + 0x10]; ret; 
0x000000000042d6c0: lea rax, [rdi + 0x11]; ret; 
0x000000000042d6de: lea rax, [rdi + 0x12]; ret; 
0x000000000042d6fe: lea rax, [rdi + 0x13]; ret; 
0x000000000042d721: lea rax, [rdi + 0x14]; ret; 
0x000000000042d740: lea rax, [rdi + 0x15]; ret; 
0x000000000042d760: lea rax, [rdi + 0x16]; ret; 
0x000000000042d780: lea rax, [rdi + 0x17]; ret; 
0x000000000042d7a3: lea rax, [rdi + 0x18]; ret; 
0x000000000042d7c8: lea rax, [rdi + 0x19]; ret; 
0x000000000042d7e6: lea rax, [rdi + 0x1a]; ret; 
0x000000000042d806: lea rax, [rdi + 0x1b]; ret; 
0x000000000042d822: lea rax, [rdi + 0x1c]; ret; 
0x000000000042d842: lea rax, [rdi + 0x1d]; ret; 
0x000000000042d862: lea rax, [rdi + 0x1e]; ret; 
0x000000000042d882: lea rax, [rdi + 0x1f]; ret; 
0x0000000000458511: lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042d5fc: lea rax, [rdi + 0xa]; ret; 
0x000000000042d61c: lea rax, [rdi + 0xb]; ret; 
0x000000000042d63e: lea rax, [rdi + 0xc]; ret; 
0x000000000042d65e: lea rax, [rdi + 0xd]; ret; 
0x000000000042d67e: lea rax, [rdi + 0xe]; ret; 
0x000000000042d698: lea rax, [rdi + 0xf]; ret; 
0x000000000042d546: lea rax, [rdi + 1]; ret; 
0x000000000042d559: lea rax, [rdi + 2]; ret; 
0x000000000042d564: lea rax, [rdi + 3]; ret; 
0x000000000042d577: lea rax, [rdi + 4]; ret; 
0x000000000042d58c: lea rax, [rdi + 5]; ret; 
0x000000000042d5aa: lea rax, [rdi + 6]; ret; 
0x000000000042d5b6: lea rax, [rdi + 7]; ret; 
0x000000000042d5c9: lea rax, [rdi + 8]; ret; 
0x000000000042d5de: lea rax, [rdi + 9]; ret; 
0x000000000042bb48: lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000411066: lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000435ff4: lea rax, [rdi + rax + 0x21]; vzeroupper; ret; 
0x000000000042ba52: lea rax, [rdi + rax + 0x30]; ret; 
0x000000000041089d: lea rax, [rdi + rax + 0x40]; ret; 
0x000000000043651a: lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000435fd3: lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x000000000046086a: lea rax, [rdi + rax + 8]; ret; 
0x00000000004360dd: lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x00000000004682b9: lea rax, [rdi + rax*4]; ret; 
0x000000000042df8f: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000410a6a: lea rax, [rdi + rax]; ret; 
0x0000000000410887: lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042b3f8: lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b479: lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b467: lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000046830a: lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x000000000046838d: lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x000000000046837b: lea rax, [rdi + rcx*4 + 0x80]; ret; 
0x000000000042d033: lea rax, [rdi + rcx]; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x000000000042b407: lea rax, [rdi + rdx + 0x20]; ret; 
0x00000000004109dd: lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042d025: lea rax, [rdi + rdx + 0x60]; ret; 
0x0000000000468317: lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000468703: lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x000000000042b586: lea rax, [rdi + rdx]; ret; 
0x000000000042b3b8: lea rax, [rdi + rsi]; ret; 
0x00000000004197fb: lea rax, [rdi - 1]; cmp rax, -3; jbe 0x19810; ret; 
0x000000000042d0db: lea rax, [rdi - 1]; ret; 
0x000000000042cb99: lea rax, [rdi - 1]; vzeroupper; ret; 
0x000000000042d532: lea rax, [rdi]; ret; 
0x0000000000474dd8: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x000000000041244f: lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000042cb1a: lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x00000000004602e0: lea rax, [rip + 0x10d9]; test edx, 0x40000000; je 0x602bf; ret; 
0x000000000046029c: lea rax, [rip + 0x133d]; lea rdx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x0000000000429fe1: lea rax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x0000000000459a8b: lea rax, [rip + 0x14e]; and ch, 8; jne 0x59a45; ret; 
0x0000000000459aa0: lea rax, [rip + 0x1569]; test edx, 0x40000000; je 0x59a7f; ret; 
0x0000000000429f7a: lea rax, [rip + 0x18cf]; mov ecx, edx; not ecx; and ecx, 0x120; je 0x29f90; ret; 
0x000000000040b75a: lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b65a: lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000040b7aa: lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000040b78a: lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b68a: lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000042a038: lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000040b72c: lea rax, [rip + 0x2a4d]; lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b62c: lea rax, [rip + 0x2b8d]; lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a1c0: lea rax, [rip + 0x2c39]; test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000040b773: lea rax, [rip + 0x2fc6]; jne 0xb729; ret; 
0x000000000042a1a3: lea rax, [rip + 0x3026]; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x000000000040b673: lea rax, [rip + 0x3106]; jne 0xb629; ret; 
0x000000000040b6aa: lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x000000000042a21d: lea rax, [rip + 0x367c]; test ch, 8; jne 0x2a1eb; ret; 
0x000000000042a230: lea rax, [rip + 0x3b09]; test edx, 0x40000000; je 0x2a211; ret; 
0x000000000042a1ee: lea rax, [rip + 0x3d4b]; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x0000000000467c9c: lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000040b80b: lea rax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000040b879: lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000042a2a5: lea rax, [rip + 0x41e4]; test dh, 8; jne 0x2a25b; ret; 
0x000000000040b857: lea rax, [rip + 0x4582]; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000040b8a1: lea rax, [rip + 0x47b8]; cmovne rax, rdx; ret; 
0x000000000040b829: lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000040b8fe: lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x0000000000460270: lea rax, [rip + 0x4c9]; test edx, 0x40000000; je 0x6024f; ret; 
0x000000000042a2b8: lea rax, [rip + 0x4ca1]; test ecx, 0x40000000; je 0x2a299; ret; 
0x0000000000454b66: lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000040b910: lea rax, [rip + 0x4f29]; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b96e: lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x000000000040b980: lea rax, [rip + 0x55b9]; test edx, 0x40000000; je 0xb958; ret; 
0x0000000000459b10: lea rax, [rip + 0x59b9]; test edx, 0x40000000; je 0x59ace; ret; 
0x0000000000467cc1: lea rax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x0000000000459af3: lea rax, [rip + 0x5d86]; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x0000000000459b32: lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x000000000042a273: lea rax, [rip + 0x6696]; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000042a37b: lea rax, [rip + 0x75ee]; and ch, 8; jne 0x2a335; ret; 
0x00000000004204b6: lea rax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000420533: lea rax, [rip + 0x81bc6]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205b6: lea rax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000042043b: lea rax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041fb93: lea rax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042a390: lea rax, [rip + 0x82a9]; test edx, 0x40000000; je 0x2a36f; ret; 
0x000000000041f371: lea rax, [rip + 0x82d88]; mov r14, rdx; mov r11d, 1; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000046022c: lea rax, [rip + 0x8bd]; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x000000000041250a: lea rax, [rip + 0x9a33f]; ret; 
0x00000000004124d2: lea rax, [rip + 0x9a377]; ret; 
0x00000000004602cb: lea rax, [rip + 0x9ce]; and ch, 8; jne 0x60295; ret; 
0x000000000040688e: lea rax, [rip + 0x9f92b]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b700: lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000042a3ee: lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000040b600: lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042a400: lea rax, [rip + 0xb6f9]; test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a3aa: lea rax, [rip + 0xb96f]; mov ecx, edx; not ecx; and ecx, 0x128; je 0x2a3c0; ret; 
0x000000000042a45e: lea rax, [rip + 0xbadb]; cmovne rax, rdx; ret; 
0x000000000046025b: lea rax, [rip + 0xbe]; and ch, 8; jne 0x60225; ret; 
0x000000000042a470: lea rax, [rip + 0xc009]; test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000429fbc: lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x0000000000467932: lea rax, [rip + 7]; cmove rax, rdx; ret; 
0x000000000042a113: lea rax, [rip - 0x1b99a]; jne 0x2a0c9; ret; 
0x000000000042a0cc: lea rax, [rip - 0x1bf13]; lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000042a12a: lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000042a0fa: lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000042a0a0: lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a14a: lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000042ae02: lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x00000000004360a4: lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000436153: lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x00000000004366f9: lea rax, [rsi + rcx + 0x60]; ret; 
0x000000000046156e: lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000461597: lea rax, [rsi + rdx - 0x20]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435cb0: lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435cd7: lea rax, [rsi + rdx - 0x80]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000474c5b: lea rbx, [r12 + r9*8]; mov rdx, qword ptr [r14]; mov rdi, qword ptr [rbp - 0x38]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x000000000046e705: lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000042626b: lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000416db4: lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000042d520: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbd0: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000042235c: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000040e8ab: lea rcx, [rdi + rdx - 0x60]; and rdi, 0xfffffffffffffff0; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x00000000004377f0: lea rcx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000430cd6: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000045efe8: lea rcx, [rip + 0x26391]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000045da13: lea rcx, [rip + 0x27966]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000412464: lea rcx, [rip + 0x946f5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000478cb4: lea rdi, [r13 + r12*4 + 0x28]; xor r10d, r10d; mov edx, 1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000047a26a: lea rdi, [r8 + rsi + 0x28]; xor r10d, r10d; mov edx, 1; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004191c7: lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004191c7: lea rdi, [r9 + rcx + 0x58]; jmp rdx; nop; ret; 
0x000000000043b837: lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000419bae: lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x0000000000418614: lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004651f3: lea rdi, [rdi + 0x10]; jmp 0x65276; shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000431e7a: lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x31a93; xor eax, eax; ret; 
0x00000000004324fd: lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432b69: lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x32781; xor eax, eax; ret; 
0x000000000040d8e2: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000478ac7: lea rdi, [rdi + rsi*4 + 0x10]; lock xadd dword ptr [rdi], eax; cmp eax, 3; je 0x78ae0; ret; 
0x000000000046641d: lea rdi, [rdi - 0x10]; jmp 0x66496; shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000040450f: lea rdi, [rip + 0x76f92]; call 0x4370; xor eax, eax; ret; 
0x0000000000404dc3: lea rdi, [rip + 0x78816]; mov rbp, rsp; call 0x4d00; nop word ptr [rax + rax]; ret; 
0x0000000000404d5e: lea rdi, [rip + 0x7887b]; mov rbp, rsp; call 0x4d00; nop dword ptr [rax]; ret; 
0x000000000041fc74: lea rdi, [rip + 0x82885]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041fbf4: lea rdi, [rip + 0x82905]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f574: lea rdi, [rip + 0x82f85]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f4f4: lea rdi, [rip + 0x83005]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041be08: lea rdi, [rip + 0x90e39]; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x0000000000401674: lea rdi, [rip + 0xabaf5]; call 0x1610; mov byte ptr [rip + 0xabae1], 1; pop rbp; ret; 
0x0000000000475186: lea rdx, [r15 + rax*8]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x00000000004179c8: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000456597: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000045655f: lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000427558: lea rdx, [rax + 0x60]; mov rax, qword ptr [rax + 0x60]; test rax, rax; jne 0x2757b; ret; 
0x00000000004016c7: lea rdx, [rax + 0x68]; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16c0; ret; 
0x00000000004025b0: lea rdx, [rax + 1]; jmp 0x2550; xor eax, eax; ret; 
0x0000000000404fd3: lea rdx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x000000000046e6ff: lea rdx, [rax - 1]; je 0x6e71e; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x00000000004118fd: lea rdx, [rbp - 0x1010]; syscall; 
0x00000000004388e0: lea rdx, [rbp - 0x10]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000454254: lea rdx, [rbp - 0x140]; call rbx; 
0x0000000000461e31: lea rdx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x0000000000438850: lea rdx, [rbp - 0x58]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000437005: lea rdx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x0000000000422360: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000475053: lea rdx, [rdi + rax*8]; mov rdi, qword ptr [rbp - 0x850]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x0000000000412460: lea rdx, [rdi + rdi*4]; lea rcx, [rip + 0x946f5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000417a0e: lea rdx, [rdx + rcx*4]; mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004179d3: lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000046792b: lea rdx, [rip + 0x14e]; lea rax, [rip + 7]; cmove rax, rdx; ret; 
0x00000000004602a3: lea rdx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x0000000000429fda: lea rdx, [rip + 0x161f]; lea rax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x0000000000429fb5: lea rdx, [rip + 0x1894]; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x000000000040b753: lea rdx, [rip + 0x1936]; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b653: lea rdx, [rip + 0x1a66]; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000042a031: lea rdx, [rip + 0x1b48]; lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000040b783: lea rdx, [rip + 0x21c6]; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b683: lea rdx, [rip + 0x22f6]; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000045f036: lea rdx, [rip + 0x26343]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045f01c: lea rdx, [rip + 0x2635d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000040b7a3: lea rdx, [rip + 0x266]; lea rax, [rip + 0x20f]; cmovne rax, rdx; ret; 
0x000000000045d7e6: lea rdx, [rip + 0x27b93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045d7cc: lea rdx, [rip + 0x27bad]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000040b733: lea rdx, [rip + 0x2a06]; cmove rax, rdx; ret; 
0x000000000040b633: lea rdx, [rip + 0x2b16]; cmove rax, rdx; ret; 
0x000000000042a1aa: lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x0000000000473f67: lea rdx, [rip + 0x391a2]; cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x000000000040b6a3: lea rdx, [rip + 0x396]; lea rax, [rip + 0x31f]; cmovne rax, rdx; ret; 
0x0000000000459a5c: lea rdx, [rip + 0x3dad]; cmove rax, rdx; ret; 
0x000000000040b804: lea rdx, [rip + 0x3f35]; lea rax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000042a1f5: lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x000000000040e8b4: lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x000000000040b872: lea rdx, [rip + 0x4107]; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000040b85e: lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x000000000040b89a: lea rdx, [rip + 0x481f]; lea rax, [rip + 0x47b8]; cmovne rax, rdx; ret; 
0x000000000040b822: lea rdx, [rip + 0x4a77]; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000040b8f7: lea rdx, [rip + 0x5122]; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000042a27a: lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000040b967: lea rdx, [rip + 0x5732]; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x0000000000459afa: lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x0000000000421c83: lea rdx, [rip + 0x60756]; add rax, rdx; ret; 
0x0000000000459b2b: lea rdx, [rip + 0x650e]; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000460233: lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x0000000000467cba: lea rdx, [rip + 0x83f]; lea rax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x00000000004124f4: lea rdx, [rip + 0x94665]; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x0000000000412444: lea rdx, [rip + 0x94715]; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x000000000042a34c: lea rdx, [rip + 0xa1bd]; cmove rax, rdx; ret; 
0x000000000040b6f9: lea rdx, [rip + 0xa90]; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x0000000000467c95: lea rdx, [rip + 0xad4]; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000042a3e7: lea rdx, [rip + 0xb932]; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000040b5f9: lea rdx, [rip + 0xbc0]; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042adfb: lea rdx, [rip + 0xbc1e]; lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x000000000042a0d3: lea rdx, [rip - 0x1bf8a]; cmove rax, rdx; ret; 
0x000000000042a123: lea rdx, [rip - 0x1c7aa]; lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000042a0f3: lea rdx, [rip - 0x1d03a]; lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000042a099: lea rdx, [rip - 0x1dee0]; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000042a143: lea rdx, [rip - 0x1e70a]; lea rax, [rip - 0x1e781]; cmovne rax, rdx; ret; 
0x000000000040d8d6: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004179c7: lea rdx, ss:[r8 + rdx*4]; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000040422b: lea rsi, [r9 + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000044ec6d: lea rsi, [rbp - 0x140]; movups xmmword ptr [rbp - 0xb8], xmm0; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000437009: lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x000000000041702d: lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000419af8: lea rsi, [rbp - 8]; syscall; 
0x000000000045828d: lea rsi, [rbx + 0x40]; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000045835c: lea rsi, [rbx + 8]; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000042e9cd: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2e57b; xor eax, eax; ret; 
0x000000000042ef2d: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2eadb; xor eax, eax; ret; 
0x000000000042f49b: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2f041; xor eax, eax; ret; 
0x000000000045a5ba: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x59ddb; xor eax, eax; ret; 
0x000000000045afda: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x5a7eb; xor eax, eax; ret; 
0x000000000045b9f3: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x5b211; xor eax, eax; ret; 
0x0000000000431fa2: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; sub rdx, -0x80; jmp 0x31a93; xor eax, eax; ret; 
0x0000000000432622: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; sub rdx, -0x80; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432c90: lea rsi, [rdi + rsi - 0x80]; add rdi, -0x80; sub rdx, -0x80; jmp 0x32781; xor eax, eax; ret; 
0x00000000004054d0: lea rsi, [rdx - 8]; jmp 0x12050; nop dword ptr [rax]; ret; 
0x0000000000458d50: lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x0000000000416dad: lea rsi, [rip + 0x64cfc]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x0000000000404508: lea rsi, [rip + 0x76f8c]; lea rdi, [rip + 0x76f92]; call 0x4370; xor eax, eax; ret; 
0x000000000040434f: lea rsi, [rip + 0x79212]; syscall; 
0x000000000040431f: lea rsi, [rip + 0x79242]; syscall; 
0x000000000043f687: lea rsi, [rip - 0x133e]; pop rbp; jmp 0x39610; nop dword ptr [rax]; pop rbp; ret; 
0x0000000000448a1c: lea rsi, [rip - 0x253]; mov rbp, rsp; call 0x39610; pop rbp; mov qword ptr [rip + 0x64349], 0; ret; 
0x0000000000466419: lea rsi, [rsi + 0x10]; lea rdi, [rdi - 0x10]; jmp 0x66496; shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000431e7f: lea rsi, [rsi + r9 - 0x80]; jmp 0x31a93; xor eax, eax; ret; 
0x0000000000432502: lea rsi, [rsi + r9 - 0x80]; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432b6e: lea rsi, [rsi + r9 - 0x80]; jmp 0x32781; xor eax, eax; ret; 
0x000000000040d8e7: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000042bf45: lea rsi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bc60; ret; 
0x000000000042c345: lea rsi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c060; ret; 
0x00000000004651ef: lea rsi, [rsi - 8]; lea rdi, [rdi + 0x10]; jmp 0x65276; shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000457105: lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000413cc9: lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000460273: leave; add al, 0; add bh, dh; ret 0; 
0x0000000000429203: leave; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x0000000000405502: leave; add byte ptr [rax], al; pop rbp; mov qword ptr [rip + 0xa0c3b], rax; ret; 
0x0000000000432ad7: leave; add ecx, r9d; cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x000000000045ffa7: leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000042c6f2: leave; bswap rax; sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x000000000042ddaf: leave; bzhi ecx, ecx, eax; jne 0x2dd89; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000419be7: leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x000000000042b45c: leave; cmp al, cl; jae 0x2b467; xor eax, eax; ret; 
0x000000000042b6dc: leave; cmp al, cl; jae 0x2b6e7; xor eax, eax; ret; 
0x0000000000468370: leave; cmp al, cl; jae 0x6837b; xor eax, eax; ret; 
0x00000000004685f0: leave; cmp al, cl; jae 0x685fb; xor eax, eax; ret; 
0x000000000042b474: leave; cmp al, cl; jb 0x2b461; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b6f4: leave; cmp al, cl; jb 0x2b6e1; lea rax, [rdi + rcx + 0x60]; ret; 
0x0000000000468388: leave; cmp al, cl; jb 0x68375; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x0000000000468608: leave; cmp al, cl; jb 0x685f5; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x000000000042b3f3: leave; cmp al, cl; jbe 0x2b3bd; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b673: leave; cmp al, cl; jbe 0x2b63d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468305: leave; cmp al, cl; jbe 0x682c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468585: leave; cmp al, cl; jbe 0x68540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x00000000004692fe: leave; cmp eax, 0x69e80001; mov al, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x0000000000432ada: leave; cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x000000000042dd92: leave; cmp sil, byte ptr [rdi + rcx + 0x20]; jne 0x2dd89; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042dace: leave; cmp sil, byte ptr [rdx + rax]; jne 0x2da99; add rax, rdx; vzeroupper; ret; 
0x000000000045f6f8: leave; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x000000000041914c: leave; je 0x19158; mov qword ptr [rsi], rax; ret; 
0x0000000000404ecb: leave; je 0x4ea0; call rcx; 
0x0000000000461870: leave; jmp 0x11380; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000418feb: leave; jmp 0x18bd9; ret; 
0x0000000000426967: leave; jmp 0x25470; nop dword ptr [rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000004504e3: leave; jmp 0x50070; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000454b33: leave; jmp 0x66ca0; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000425d65: leave; jmp rax; 
0x000000000040e853: leave; jmp rcx; 
0x000000000041a959: leave; jne 0x1a8b0; ret; 
0x000000000042b538: leave; jne 0x2b470; sub al, 0x60; jae 0x2b44e; xor eax, eax; ret; 
0x000000000042b7b8: leave; jne 0x2b6f0; sub al, 0x60; jae 0x2b6ce; xor eax, eax; ret; 
0x000000000042c5d7: leave; jne 0x2c4a4; ret; 
0x000000000042c4a0: leave; jne 0x2c4aa; ret; 
0x000000000042ddb4: leave; jne 0x2dd89; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000436b10: leave; jne 0x36b00; ret; 
0x0000000000436bc0: leave; jne 0x36bb0; ret; 
0x0000000000436e80: leave; jne 0x36e70; sub rax, 1; ret; 
0x000000000045009b: leave; jne 0x500a0; ret; 
0x0000000000466ccf: leave; jne 0x66cd8; ret; 
0x000000000046843a: leave; jne 0x68384; sub al, 0x18; jae 0x6835e; xor eax, eax; ret; 
0x00000000004686c8: leave; jne 0x68604; sub al, 0x18; jae 0x685de; xor eax, eax; ret; 
0x00000000004100ab: leave; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000040fe2d: leave; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000432936: leave; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x32917; xor eax, eax; ret; 
0x0000000000410886: leave; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042b412: leave; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b482: leave; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b466: leave; lea rax, [rdi + rcx + 0x80]; ret; 
0x0000000000468322: leave; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468395: leave; lea rax, [rdi + rcx*4 + 0x60]; ret; 
0x000000000046837a: leave; lea rax, [rdi + rcx*4 + 0x80]; ret; 
0x000000000042d032: leave; lea rax, [rdi + rcx]; inc ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x0000000000437004: leave; lea rdx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x0000000000409776: leave; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x00000000004296a7: leave; mov eax, 1; ret; 
0x000000000044ed27: leave; mov eax, edx; ret; 
0x0000000000447c42: leave; mov qword ptr [rbp - 0x40], r8; lea r8, [rbp - 0x40]; push 0; push 0; call rax; 
0x0000000000404ac8: leave; mov rax, r10; ret; 
0x0000000000404ab9: leave; mov rax, r10; sub rax, rdx; ret; 
0x000000000045f277: leave; mov rax, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000461d56: leave; movzx eax, al; ret; 
0x0000000000430abc: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042efa2: leave; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042e4d8: leave; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042efb2: leave; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042e4f3: leave; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c4da: leave; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042bcde: leave; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ef92: leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042e4c6: leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x0000000000454995: leave; movzx ecx, byte ptr [r8 + rcx + 9]; add eax, ecx; cmp rdx, rsi; jne 0x54980; ret; 
0x00000000004186bd: leave; or byte ptr [rax], al; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042d0d8: leave; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x000000000042cb96: leave; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x000000000045f789: leave; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000401986: leave; ret; 
0x0000000000476572: leave; scasd eax, dword ptr [rdi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000423468: leave; setne al; movzx eax, al; neg eax; ret; 
0x00000000004366f4: leave; sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000412716: leave; test eax, eax; sete al; ret; 
0x000000000042c5d5: leave; test ecx, ecx; jne 0x2c4a4; ret; 
0x000000000042c49e: leave; test ecx, ecx; jne 0x2c4aa; ret; 
0x000000000042cb62: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000045f248: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; vzeroupper; ret; 
0x000000000042cb42: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x000000000045f235: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; vzeroupper; ret; 
0x000000000042cb25: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x000000000045f222: leave; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x000000000045f72c: leave; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 0x21]; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x000000000045f712: leave; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 1]; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x00000000004100af: leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000040fe32: leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000412750: leave; xor eax, eax; ret; 
0x0000000000436f85: leave; xor edx, edx; call rax; 
0x0000000000414186: lock add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x000000000046de89: lock add al, byte ptr [rax]; add byte ptr [rcx - 0x74b7e7bd], cl; pop rbp; clc; leave; ret; 
0x0000000000409255: lock add dword ptr [rax - 0x73], ecx; push rsp; ret 0xfff0; 
0x000000000047415e: lock add dword ptr [rax], eax; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000478a6e: lock cmpxchg dword ptr [rcx], edi; jne 0x78a67; and edx, 3; cmp edx, 2; je 0x78a80; ret; 
0x0000000000428657: lock cmpxchg dword ptr [rcx], esi; jne 0x28652; and eax, 0x39; cmp eax, 8; je 0x28666; ret; 
0x0000000000458847: lock cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x0000000000478acc: lock xadd dword ptr [rdi], eax; cmp eax, 3; je 0x78ae0; ret; 
0x0000000000478a09: lock xadd dword ptr [rdi], eax; shr eax, 2; cmp eax, 3; je 0x78a20; ret; 
0x000000000046f850: lodsb al, byte ptr [rsi]; adc eax, dword ptr [rcx]; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; jmp qword ptr [rdi - 0x18]; 
0x0000000000431660: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000436938: lodsb al, byte ptr [rsi]; bsr eax, eax; add rax, rdi; ret; 
0x0000000000476861: lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000429531: lodsb al, byte ptr [rsi]; mov eax, 0x83; ret; 
0x0000000000434824: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000429bd8: lodsb al, byte ptr [rsi]; push rdi; add eax, 0xa78fe800; std; jmp qword ptr [rdi - 0x18]; 
0x0000000000414e66: lodsd eax, dword ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x000000000047680f: lodsd eax, dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000046761e: lodsd eax, dword ptr [rsi]; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000478a4f: lodsd eax, dword ptr [rsi]; ret 0xfff8; 
0x000000000040b67b: lodsd eax, dword ptr [rsi]; ret; 
0x0000000000410086: loope 0x10086; sub byte ptr [rdi + 7], bh; ret; 
0x00000000004100da: loope 0x100da; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x00000000004100b1: loope 0x10132; sub dword ptr [rdi], edi; ret; 
0x0000000000410165: loope 0x10165; sub byte ptr [rdi + 1], bh; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x00000000004101c1: loope 0x101c1; or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x00000000004101c7: loope 0x101c7; or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x0000000000410228: loope 0x10228; sub byte ptr [rdi + 2], bh; vmovdqu64 ymmword ptr [rdx + 0x20], ymm16; vmovdqu64 ymmword ptr [rdx + 0x40], ymm16; vmovdqu64 ymmword ptr [rdx + 0x60], ymm16; ret; 
0x000000000041122c: loope 0x1124e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004182b1: loope 0x182b7; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x1826d; xor eax, eax; ret; 
0x000000000042a1a1: loope 0x2a1ab; lea rax, [rip + 0x3026]; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x000000000042a1ec: loope 0x2a1f2; lea rax, [rip + 0x3d4b]; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x000000000042b55f: loope 0x2b581; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042b7ea: loope 0x2b80c; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000042bf0e: loope 0x2bf58; movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c30e: loope 0x2c358; movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2c2f0; ret; 
0x000000000042ce59: loope 0x2ce59; or byte ptr [rdi + 7], bh; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000042ce6a: loope 0x2ce69; or byte ptr [rsi + 7], bh; mov qword ptr [rax - 7], rcx; ret; 
0x000000000042cec1: loope 0x2cec1; sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042ce46: loope 0x2cec5; or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000042cee1: loope 0x2cee1; sub byte ptr [rdi + 0x57], bh; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000042ce85: loope 0x2cf04; or byte ptr [rsi + 7], bh; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042cfed: loope 0x2cfed; sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042d042: loope 0x2d042; sub byte ptr [rdi + 0x44], bh; ud0; ret; 
0x000000000042d05f: loope 0x2d05f; sub byte ptr [rdi - 0x7c], bh; sgdt [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042d07f: loope 0x2d07f; sub byte ptr [rdi - 0x7c], bh; mov rax, dr0; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042d09f: loope 0x2d09f; sub byte ptr [rdi - 0x7c], bh; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000042d526: loope 0x2d58e; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000042e39b: loope 0x2e39d; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x0000000000435cc1: loope 0x35cbc; cwde; sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x0000000000435f28: loope 0x35f4a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000436568: loope 0x36568; sub byte ptr [rdi + 0x57], ch; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000436584: loope 0x36584; sub byte ptr [rdi + 0x5f], ch; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x00000000004461f3: loope 0x461f0; jmp qword ptr [rdi - 0x18]; 
0x00000000004494eb: loope 0x494a2; dec dword ptr [rax - 0x39]; ret 0x2b40; 
0x000000000044953a: loope 0x494f1; dec dword ptr [rax - 0x39]; ret 0x30c0; 
0x000000000044958c: loope 0x49543; dec dword ptr [rax - 0x39]; ret 0x3440; 
0x00000000004495b5: loope 0x4956c; dec dword ptr [rax - 0x39]; ret 0x3060; 
0x00000000004495de: loope 0x49595; dec dword ptr [rax - 0x39]; ret 0x3380; 
0x0000000000449607: loope 0x495be; dec dword ptr [rax - 0x39]; ret 0x3280; 
0x0000000000449630: loope 0x495e7; dec dword ptr [rax - 0x39]; ret 0x2aa0; 
0x0000000000449659: loope 0x49610; dec dword ptr [rax - 0x39]; ret 0x33e0; 
0x0000000000449682: loope 0x49639; dec dword ptr [rax - 0x39]; ret 0x3000; 
0x00000000004496ab: loope 0x49662; dec dword ptr [rax - 0x39]; ret 0x2f40; 
0x0000000000459af1: loope 0x59afb; lea rax, [rip + 0x5d86]; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x000000000045f529: loope 0x5f529; or byte ptr [rdi + 7], bh; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000045f53b: loope 0x5f53a; or byte ptr [rsi + 7], bh; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000045f591: loope 0x5f591; sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000045f515: loope 0x5f594; or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f5b1: loope 0x5f5b1; sub byte ptr [rdi + 0x57], bh; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000045f555: loope 0x5f5d4; or byte ptr [rsi + 7], bh; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045f6bd: loope 0x5f6bd; sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000045f704: loope 0x5f704; sub byte ptr [rdi + 0x44], bh; ud0; ret; 
0x000000000045f71f: loope 0x5f71f; sub byte ptr [rdi - 0x7c], bh; sgdt [rax]; add byte ptr [rax], al; ret; 
0x000000000045f739: loope 0x5f739; sub byte ptr [rdi - 0x7c], bh; mov rax, dr0; add byte ptr [rax], al; ret; 
0x000000000045f753: loope 0x5f753; sub byte ptr [rdi - 0x7c], bh; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000045fbd6: loope 0x5fc3e; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000046157c: loope 0x61577; cwde; sal byte ptr [rbp - 0x49], 1; mov rax, rsi; ret; 
0x00000000004651fb: loope 0x65249; mov dword ptr [rdi], ecx; ret; 
0x000000000046522c: loope 0x6527a; mov dword ptr [rdi - 8], ecx; ret; 
0x00000000004652ad: loope 0x652fb; mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000468472: loope 0x68494; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004686fa: loope 0x68704; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x00000000004693fe: loope 0x6945b; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000046e5b3: loope 0x6e59a; add eax, dword ptr [rax]; ret; 
0x0000000000476860: loope 0x7680e; clc; jmp qword ptr [rsi + 0x66]; 
0x000000000040d07d: loope 0xd07d; jg 0xd089; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d0e9: loope 0xd0e9; jg 0xd0f5; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d156: loope 0xd156; sub byte ptr [rdi + 6], ch; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d164: loope 0xd164; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d194: loope 0xd194; jg 0xd1a0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000040d325: loope 0xd325; jg 0xd32b; ret; 
0x000000000040d3c2: loope 0xd3c2; jg 0xd446; add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x000000000040d93a: loope 0xd93a; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040d9a6: loope 0xd9a6; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040da22: loope 0xda22; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000040db9f: loope 0xdb9f; sub byte ptr [rdi + 1], bh; ret; 
0x000000000040e84f: loope 0xe857; add rcx, r9; jmp rcx; 
0x000000000040e888: loope 0xe890; add rcx, r9; jmp rcx; 
0x000000000040e885: loope 0xe896; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000040fe09: loope 0xfe09; jg 0xfe15; ret; 
0x000000000040fe2f: loope 0xfe2c; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000040fe5d: loope 0xfe5d; jg 0xfe69; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040fe34: loope 0xfeb5; jg 0xfe39; ret; 
0x000000000040ff42: loope 0xff42; sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000040ff48: loope 0xff48; sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000040ff51: loope 0xff51; or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000040ff57: loope 0xff57; or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000040ffc0: loope 0xffc0; jg 0xffc7; vmovdqu64 zmmword ptr [rdx + 0x40], zmm16; vmovdqu64 zmmword ptr [rdx + 0x80], zmm16; vmovdqu64 zmmword ptr [rdx + 0xc0], zmm16; ret; 
0x0000000000458a56: maskmovq mm3, mm0; ret; 
0x0000000000435cc6: mov ah, 0x48; mov eax, esi; ret; 
0x0000000000474caf: mov ah, 0x49; mov edx, dword ptr [rdx]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x0000000000468ef7: mov ah, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x000000000041c182: mov ah, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000453f72: mov ah, ah; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000423432: mov ah, al; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000413602: mov ah, byte ptr [rcx - 1]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000043f9ab: mov al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000474077: mov al, 0; add byte ptr [rax], al; ret; 
0x0000000000401485: mov al, 0; je 0x149f; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x000000000045b71f: mov al, 0x29; ret 0xe162; 
0x000000000040b87c: mov al, 0x40; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000439027: mov al, 0x41; call rdi; 
0x0000000000438e05: mov al, 0x44; mov dword ptr [rbp - 0x3c], eax; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x00000000004416ae: mov al, 0x48; mov dword ptr [rbp - 0x70], ecx; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004459d3: mov al, 0xbe; add eax, 0xe9000000; ret 0xfffe; 
0x0000000000407e47: mov al, 0xe8; ret; 
0x0000000000447123: mov al, 0xe9; ret; 
0x0000000000469304: mov al, 0xf9; jmp qword ptr [rsi + 0xf]; 
0x0000000000445f81: mov al, 0xf; mov dh, 0x42; dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x0000000000443bad: mov al, 0xf; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4201; 
0x0000000000442e96: mov al, 0xf; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x00000000004640bc: mov al, 2; cli; jmp qword ptr [rdi - 0x18]; 
0x0000000000454f98: mov al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov byte ptr [rax + 0x48000000], ah; mov dword ptr [rcx + 0xe0], edx; ret; 
0x0000000000458d54: mov al, byte ptr [rdx]; add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000458a72: mov al, dl; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000040634d: mov bh, 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000478aca: mov bh, 0x10; lock xadd dword ptr [rdi], eax; cmp eax, 3; je 0x78ae0; ret; 
0x0000000000436188: mov bh, 0x48; bsr eax, eax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000042e238: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x0000000000461581: mov bh, 0x48; mov eax, esi; ret; 
0x00000000004778bc: mov bh, 0x55; and byte ptr [rsi - 9], ah; ret 0x7f8; 
0x0000000000447ffe: mov bh, 0x57; or cl, byte ptr [rax + 0x39]; ret 0x1a73; 
0x0000000000411442: mov bh, 0x67; call 0x12400; nop dword ptr [rax]; endbr64; xor eax, eax; syscall; 
0x000000000046ced5: mov bh, 0x8f; add eax, dword ptr [rax]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411445: mov bh, 0xf; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; xor eax, eax; syscall; 
0x00000000004096db: mov bh, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000460d56: mov bh, bl; shr eax, 2; vzeroupper; ret; 
0x0000000000409ab8: mov bl, 0xff; dec dword ptr [rax - 0x75]; call 0x16ac; jmp qword ptr [rsi + 0x66]; 
0x0000000000464ab0: mov bl, 1; add byte ptr [rdi], cl; mov dh, 4; xor byte ptr [rax - 0x77], cl; ret; 
0x0000000000440e54: mov bl, 3; add al, ch; adc al, 0x35; cld; jmp qword ptr [rdi - 0x18]; 
0x0000000000440eb6: mov bl, 3; add al, ch; mov dl, 0x34; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000041148f: mov bl, 9; add byte ptr [rax + 0x39], cl; clc; jb 0x114a0; xor eax, eax; ret; 
0x0000000000442353: mov byte ptr [r8 - 0x75], r9b; mov ebp, 0xffffff68; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000046c32f: mov byte ptr [r9 - 0x77], r9b; jmp qword ptr [rdi - 0x18]; 
0x0000000000454f9f: mov byte ptr [rax + 0x48000000], ah; mov dword ptr [rcx + 0xe0], edx; ret; 
0x00000000004189e4: mov byte ptr [rax + 0x68], 1; ret; 
0x000000000040ff73: mov byte ptr [rax + rdx - 1], cl; ret; 
0x0000000000437008: mov byte ptr [rax - 0x73], cl; jne 0x36f9d; push 1; push 0; call rax; 
0x0000000000442354: mov byte ptr [rax - 0x75], cl; mov ebp, 0xffffff68; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000440907: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000045850d: mov byte ptr [rax - 1], 0; lea rax, [rdi + 0xa8]; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042c9a0: mov byte ptr [rax], 0; ret; 
0x00000000004501b4: mov byte ptr [rax], ah; pop rbx; pop r12; pop rbp; ret; 
0x000000000040ff3e: mov byte ptr [rax], cl; ret; 
0x00000000004501b3: mov byte ptr [rax], r12b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000404d9c: mov byte ptr [rbp + 0x31], 0xd2; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000004591df: mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000458b97: mov byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000417a13: mov byte ptr [rbx + rax], ch; add byte ptr [rax], al; mov qword ptr [rax + 0x340], rdx; ret; 
0x000000000046350b: mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000042975a: mov byte ptr [rcx - 0x46], 8; add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000044596d: mov byte ptr [rcx - 0x77], al; ret; 
0x000000000046c330: mov byte ptr [rcx - 0x77], cl; jmp qword ptr [rdi - 0x18]; 
0x000000000042a26c: mov byte ptr [rcx], 0x74; adc eax, 0x4808e283; lea eax, [rip + 0x6696]; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000044d7c6: mov byte ptr [rcx], 0x88; dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000004016fb: mov byte ptr [rcx], bl; add byte ptr [rdi - 0x18], spl; mov ebx, 0xf4000026; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000042d6a8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000045fce8: mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042d71e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045fd3e: mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000042d7a0: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdc0: mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000413ff9: mov byte ptr [rdi + 0x35a], al; ret; 
0x00000000004292c4: mov byte ptr [rdi + 0x64000002], ah; mov qword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x00000000004189f5: mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000040f874: mov byte ptr [rdi + 1], dh; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000040f873: mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042d556: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000045fc06: mov byte ptr [rdi + 2], dh; ret; 
0x000000000042d572: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000045fc22: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000042d5c3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000045fc63: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000040f878: mov byte ptr [rdi + rdx - 1], dh; ret; 
0x000000000040f877: mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000045f0a0: mov byte ptr [rdi + rdx], 0; ret; 
0x000000000040ba92: mov byte ptr [rdi], cl; ret; 
0x0000000000445a6b: mov byte ptr [rdi], cl; test byte ptr [rax], dh; add eax, 0x8b480000; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x000000000042d530: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000040f871: mov byte ptr [rdi], dh; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000040f83c: mov byte ptr [rdi], dh; ret; 
0x000000000040f870: mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000040f83b: mov byte ptr [rdi], sil; ret; 
0x0000000000470cd4: mov byte ptr [rip + 0x3c445], 8; ret; 
0x0000000000470ccd: mov byte ptr [rip + 0x3c44b], 8; mov byte ptr [rip + 0x3c445], 8; ret; 
0x0000000000470cc6: mov byte ptr [rip + 0x3c451], 8; mov byte ptr [rip + 0x3c44b], 8; mov byte ptr [rip + 0x3c445], 8; ret; 
0x0000000000470cbf: mov byte ptr [rip + 0x3c457], 8; mov byte ptr [rip + 0x3c451], 8; mov byte ptr [rip + 0x3c44b], 8; mov byte ptr [rip + 0x3c445], 8; ret; 
0x0000000000470cb8: mov byte ptr [rip + 0x3c45d], 8; mov byte ptr [rip + 0x3c457], 8; mov byte ptr [rip + 0x3c451], 8; mov byte ptr [rip + 0x3c44b], 8; mov byte ptr [rip + 0x3c445], 8; ret; 
0x000000000041b50f: mov byte ptr [rip + 0x9169b], al; ret; 
0x000000000041b4ed: mov byte ptr [rip + 0x916bd], al; ret; 
0x000000000041b47f: mov byte ptr [rip + 0x9172b], al; ret; 
0x000000000041b45d: mov byte ptr [rip + 0x9174d], al; ret; 
0x00000000004017bb: mov byte ptr [rip + 0xa62fe], 1; pop rbp; ret; 
0x0000000000405f2b: mov byte ptr [rip + 0xa68ee], 1; mov eax, 0x13e; syscall; 
0x00000000004051ba: mov byte ptr [rip + 0xa7678], al; ret; 
0x0000000000401680: mov byte ptr [rip + 0xabae1], 1; pop rbp; ret; 
0x000000000045854c: mov byte ptr [rsi], 0; ret; 
0x0000000000470c53: mov ch, 0xa3; add byte ptr [rax], al; pop rbp; ret; 
0x000000000045b33c: mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000042f25e: mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042f0bc: mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x0000000000428e67: mov ch, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000404f8b: mov cl, 0x11; or al, byte ptr [rax]; ret; 
0x0000000000458849: mov cl, 0x17; jne 0x58888; xor eax, eax; ret; 
0x0000000000428659: mov cl, 0x31; jne 0x28652; and eax, 0x39; cmp eax, 8; je 0x28666; ret; 
0x0000000000478a70: mov cl, 0x39; jne 0x78a67; and edx, 3; cmp edx, 2; je 0x78a80; ret; 
0x0000000000401bfc: mov cl, 0x4c; add eax, ecx; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000436661: mov cl, 0x7d; and byte ptr [rbx + rbx*8 - 0x3b], dh; sti; xchg ebx, eax; ret; 
0x0000000000477cba: mov cl, 0x98; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004687ed: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; add rax, rdi; add rax, rcx; ret; 
0x0000000000468a84: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa4: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac4: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae4: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000429182: mov cl, 0xfd; jmp qword ptr [rsi + 0x2e]; 
0x000000000041368b: mov cl, 6; add al, ch; fisttp qword ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0x66]; 
0x000000000045d7d5: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x0000000000450dcc: mov cl, byte ptr [rcx - 0x13f43]; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x000000000042c712: mov cl, byte ptr [rsi + rdx]; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x000000000040ba84: mov cl, byte ptr [rsi]; je 0xba92; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040c214: mov cl, byte ptr [rsi]; je 0xc222; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040d12a: mov cl, byte ptr [rsi]; je 0xd138; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040d9d5: mov cl, byte ptr [rsi]; je 0xd9e3; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040e1ff: mov cl, byte ptr [rsi]; je 0xe20d; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040e7d4: mov cl, byte ptr [rsi]; je 0xe7e2; movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x000000000040ca44: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000042cb6d: mov cr1, rax; lea eax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000042cb6c: mov cr9, rax; lea eax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000040ca32: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000042d6b4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcf4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042d7b8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fdd8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042d550: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000045fc00: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000040ca31: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000042a404: mov dh, 0; add bh, dh; ret 0; 
0x0000000000423ea6: mov dh, 0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000423e7f: mov dh, 0; ret; 
0x000000000044ea21: mov dh, 0x17; test dl, dl; jne 0x4ea00; ret; 
0x0000000000441ab6: mov dh, 0x28; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000420530: mov dh, 0x34; add ecx, dword ptr [rax - 0x73]; add eax, 0x81bc6; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000426269: mov dh, 0x37; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000426a21: mov dh, 0x40; inc dword ptr [rbx + 0x415bef23]; pop rsp; pop rbp; ret; 
0x000000000044e8e7: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x0000000000418d99: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x0000000000418c5e: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000413dca: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000044d961: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000445f83: mov dh, 0x42; dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x0000000000418b18: mov dh, 0x44; ret 0xc368; 
0x0000000000468309: mov dh, 0x48; lea eax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000443baf: mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4201; 
0x0000000000442e98: mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x0000000000454998: mov dh, 0x4c; or byte ptr [rcx], cl; add eax, ecx; cmp rdx, rsi; jne 0x54980; ret; 
0x0000000000444563: mov dh, 0x4d; ret 0xcf89; 
0x0000000000450900: mov dh, 0x50; or al, 0xf6; ret 0xf01; 
0x0000000000453199: mov dh, 0x52; or al, 0xf6; ret 0xf01; 
0x000000000044fe2d: mov dh, 0x53; add al, dh; iretd; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000044cb81: mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004534c2: mov dh, 0x56; or al, 0xf6; ret 0xf40; 
0x000000000041df4f: mov dh, 0x85; idiv rdi; jmp qword ptr [rsi + 0x66]; 
0x000000000046a6a4: mov dh, 0x89; push rsp; add eax, dword ptr [rax]; add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x000000000041dfea: mov dh, 0x8d; hlt; idiv bh; dec dword ptr [rdi]; xchg ebp, eax; ret 0x2141; 
0x000000000043dadd: mov dh, 0x91; push rsp; add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x0000000000413f6d: mov dh, 0x97; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x00000000004020d6: mov dh, 0xa8; or al, byte ptr [rax]; pop rbx; pop rbp; ret; 
0x000000000041148e: mov dh, 0xb3; or dword ptr [rax], eax; cmp rax, rdi; jb 0x114a0; xor eax, eax; ret; 
0x000000000042346d: mov dh, 0xc0; neg eax; ret; 
0x0000000000461d58: mov dh, 0xc0; ret; 
0x000000000041018b: mov dh, 0xc6; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040ff10: mov dh, 0xc6; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x000000000040fffe: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000440906: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000475301: mov dh, 0xdb; mov dword ptr [rdx + 0xc], ebx; pop rbx; pop r12; pop rbp; ret; 
0x000000000042bee3: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042c6e6: mov dh, 0xe; sub eax, ecx; ret; 
0x0000000000418127: mov dh, 0xf6; call 0x17a60; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046e666: mov dh, 0xfc; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x0000000000464ab4: mov dh, 4; xor byte ptr [rax - 0x77], cl; ret; 
0x0000000000419851: mov dh, 5; pop rcx; xor ecx, dword ptr [rcx]; add byte ptr [rbx + 0x933573d], cl; add byte ptr [rcx - 0x77], al; ret; 
0x000000000045f034: mov dh, 7; lea rdx, [rip + 0x26343]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045d7e4: mov dh, 7; lea rdx, [rip + 0x27b93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042c6e3: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042bee6: mov dh, 7; sub eax, ecx; ret; 
0x000000000041a955: mov dh, 9; test r9b, r9b; jne 0x1a8b0; ret; 
0x0000000000460d55: mov dil, r11b; shr eax, 2; vzeroupper; ret; 
0x0000000000456d0c: mov dl, 0; add bl, ch; movabs dword ptr [0xe800000000801f0f], eax; ret; 
0x000000000045a2dd: mov dl, 0x29; ret 0xfec5; 
0x0000000000440eba: mov dl, 0x34; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000045b338: mov dl, 0x4e; and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000042f25a: mov dl, 0x4e; and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042f0b8: mov dl, 0x4e; and dword ptr [rsi], esp; mov ch, 0xfb; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x00000000004109c7: mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000046082a: mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x000000000041102a: mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000042f0e0: mov dl, 0x66; and dword ptr [rsi], esp; ret; 
0x00000000004109b5: mov dl, 0x6d; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042f0da: mov dl, 0x6d; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x00000000004607fd: mov dl, 0x6e; and byte ptr [rdi], ah; ret 0xb262; 
0x0000000000410ffd: mov dl, 0x6e; and byte ptr [rsi], ah; ret 0xb262; 
0x000000000041086b: mov dl, 0x6e; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000045718b: mov dl, 0xfb; jmp qword ptr [rsi - 0x70]; 
0x00000000004370b4: mov dl, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x000000000042710e: mov dl, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x00000000004292cb: mov dword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000428605: mov dword ptr [0x2f8], edi; ret; 
0x00000000004186c2: mov dword ptr [0x698], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044ffae: mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x000000000044ffa6: mov dword ptr [r10 + 4], r11d; mov qword ptr [r10 + 8], rcx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x00000000004786ad: mov dword ptr [r8 + rdx*4 + 8], 0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x000000000040ca3a: mov dword ptr [r9 - 2], ecx; ret; 
0x000000000040ca25: mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000463b02: mov dword ptr [rax + 0x10], 0; jmp 0x64c70; nop; ret; 
0x000000000046d612: mov dword ptr [rax + 0x10], 0; ret; 
0x00000000004565d1: mov dword ptr [rax + 0x10], ecx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000045576d: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004557aa: mov dword ptr [rax + 0x10], esi; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; ret; 
0x0000000000427639: mov dword ptr [rax + 0x18], ecx; mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000455ea4: mov dword ptr [rax + 0x18], edx; xor eax, eax; mov dword ptr [rbx], ecx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004619f0: mov dword ptr [rax + 0x28], 0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000417a12: mov dword ptr [rax + 0x32c], ecx; mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004179cd: mov dword ptr [rax + 0x340], edx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000417a19: mov dword ptr [rax + 0x340], edx; ret; 
0x00000000004179d8: mov dword ptr [rax + 0x348], edx; ret; 
0x00000000004189dd: mov dword ptr [rax + 0x38], edi; mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000046d775: mov dword ptr [rax + 0x390], edx; leave; ret; 
0x000000000042d905: mov dword ptr [rax + 0x3a], 0xe4750734; add rax, rdi; vzeroupper; ret; 
0x000000000045659c: mov dword ptr [rax + 0x40], ecx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x00000000004557ae: mov dword ptr [rax + 0x40], ecx; mov qword ptr [rax], rdx; ret; 
0x0000000000455771: mov dword ptr [rax + 0x40], ecx; ret; 
0x00000000004189e1: mov dword ptr [rax + 0x40], esi; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000042767b: mov dword ptr [rax + 0x48], ecx; mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x0000000000455f08: mov dword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x00000000004189d9: mov dword ptr [rax + 0x58], eax; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x00000000004268b1: mov dword ptr [rax + 0xa0], 0xffffffff; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004268a5: mov dword ptr [rax + 0xa8], 0; ret; 
0x0000000000454f97: mov dword ptr [rax + 0xd8], ecx; mov rcx, qword ptr [rax + 0xa0]; mov qword ptr [rcx + 0xe0], rdx; ret; 
0x0000000000463afa: mov dword ptr [rax + 8], 0; mov qword ptr [rax + 0x10], 0; jmp 0x64c70; nop; ret; 
0x00000000004267f0: mov dword ptr [rax + 8], 0; ret; 
0x0000000000455762: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000458ad7: mov dword ptr [rax + 8], edi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x53e00], 0; ret; 
0x000000000046d60e: mov dword ptr [rax + 8], edx; mov qword ptr [rax + 0x10], 0; ret; 
0x00000000004557a6: mov dword ptr [rax + 8], edx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; ret; 
0x000000000046691e: mov dword ptr [rax + 8], edx; pop rbp; ret; 
0x0000000000412474: mov dword ptr [rax + 8], edx; ret; 
0x000000000042767f: mov dword ptr [rax + 8], esi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x0000000000427643: mov dword ptr [rax + 8], esi; xor eax, eax; ret; 
0x0000000000460298: mov dword ptr [rax + rax], 0x58d4808; cmp eax, 0x48000013; lea edx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x0000000000460228: mov dword ptr [rax + rax], 0x58d4808; mov ebp, 0x48000008; lea edx, [rip + 0x676]; cmove rax, rdx; ret; 
0x000000000040ff6b: mov dword ptr [rax + rdx - 4], ecx; ret; 
0x000000000040ff64: mov dword ptr [rax + rdx - 8], ecx; ret; 
0x00000000004786ae: mov dword ptr [rax + rdx*4 + 8], 0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x000000000042c9b8: mov dword ptr [rax - 3], ecx; ret; 
0x000000000042c9da: mov dword ptr [rax - 7], ecx; ret; 
0x00000000004267e9: mov dword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000044eb78: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411b88: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004500a8: mov dword ptr [rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004114a8: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000040a7df: mov dword ptr [rax], 0xc; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408630: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x0000000000461b20: mov dword ptr [rax], 2; xor eax, eax; ret; 
0x000000000040fdfc: mov dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x00000000004667bb: mov dword ptr [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x000000000040ff71: mov dword ptr [rax], ecx; mov byte ptr [rax + rdx - 1], cl; ret; 
0x000000000040ff69: mov dword ptr [rax], ecx; mov dword ptr [rax + rdx - 4], ecx; ret; 
0x0000000000456005: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040ff61: mov dword ptr [rax], ecx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x000000000046dde9: mov dword ptr [rax], edi; leave; ret; 
0x0000000000456095: mov dword ptr [rax], edx; jmp 0x55f96; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x000000000046ddd5: mov dword ptr [rax], edx; leave; ret; 
0x000000000045576a: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000458a97: mov dword ptr [rax], edx; mov qword ptr [rip + 0x53e44], 0; ret; 
0x00000000004565a0: mov dword ptr [rax], edx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x00000000004557b2: mov dword ptr [rax], edx; ret; 
0x0000000000456564: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x0000000000454a14: mov dword ptr [rax], esp; pop rbx; pop r12; pop rbp; ret; 
0x0000000000454a13: mov dword ptr [rax], r12d; pop rbx; pop r12; pop rbp; ret; 
0x0000000000457010: mov dword ptr [rbp + 2], ebx; add al, ch; push rdi; sar edx, cl; jmp qword ptr [rdi - 0x18]; 
0x000000000045483f: mov dword ptr [rbp - 0x14], eax; call 0x4de0; mov eax, dword ptr [rbp - 0x14]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000405f26: mov dword ptr [rbp - 0x18], eax; xor eax, eax; mov byte ptr [rip + 0xa68ee], 1; mov eax, 0x13e; syscall; 
0x000000000047073d: mov dword ptr [rbp - 0x20], eax; call 0x70be0; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x0000000000455cd0: mov dword ptr [rbp - 0x38], edx; call 0x22be0; mov edx, dword ptr [rbp - 0x38]; mov rdi, r15; mov esi, edx; call qword ptr [rbx + 0x18]; 
0x0000000000438e0b: mov dword ptr [rbp - 0x38], edx; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000438e07: mov dword ptr [rbp - 0x3c], eax; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000438e06: mov dword ptr [rbp - 0x3c], r8d; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x000000000040188c: mov dword ptr [rbp - 0x40], 0x45c60015; ret 0xc600; 
0x0000000000438823: mov dword ptr [rbp - 0x40], eax; cmp esi, 9; je 0x38850; mov eax, 0x48; syscall; 
0x0000000000447c44: mov dword ptr [rbp - 0x40], eax; lea r8, [rbp - 0x40]; push 0; push 0; call rax; 
0x0000000000447b14: mov dword ptr [rbp - 0x40], eax; mov rsi, qword ptr [rbp - 0x90]; push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000474cb8: mov dword ptr [rbp - 0x48], edx; call rax; 
0x000000000041f17b: mov dword ptr [rbp - 0x4a4], 0; mov dword ptr [rbp - 0x4a8], 0; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x000000000041f185: mov dword ptr [rbp - 0x4a8], 0; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x0000000000474cad: mov dword ptr [rbp - 0x4c], ecx; mov rdx, qword ptr [r10]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x0000000000474cac: mov dword ptr [rbp - 0x4c], r9d; mov rdx, qword ptr [r10]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x000000000041f18f: mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x0000000000440ad7: mov dword ptr [rbp - 0x58], ecx; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000441ca3: mov dword ptr [rbp - 0x68], ecx; mov rsi, qword ptr [rbp - 0xa8]; mov qword ptr [rbp - 0x88], rcx; mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000044511f: mov dword ptr [rbp - 0x70], ecx; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004465cb: mov dword ptr [rbp - 0x70], ecx; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004416b0: mov dword ptr [rbp - 0x70], ecx; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000044423a: mov dword ptr [rbp - 0x70], ecx; mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004410ab: mov dword ptr [rbp - 0x70], ecx; mov rsi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000440adb: mov dword ptr [rbp - 0x78], ecx; call rax; 
0x0000000000442352: mov dword ptr [rbp - 0x78], ecx; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000044512a: mov dword ptr [rbp - 0x80], ecx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000475066: mov dword ptr [rbp - 0x848], ebx; mov ecx, r11d; call rax; 
0x0000000000475065: mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x0000000000475192: mov dword ptr [rbp - 0x860], eax; mov ecx, r8d; call rax; 
0x0000000000475191: mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x000000000043dc32: mov dword ptr [rbp - 0x88], ecx; add rax, rsi; call rax; 
0x0000000000441cae: mov dword ptr [rbp - 0x88], ecx; mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000043db41: mov dword ptr [rbp - 0x90], ecx; call 0x17820; mov r10, qword ptr [rbp - 0xa0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x000000000043d751: mov dword ptr [rbp - 0x90], ecx; call 0x17820; mov r10, qword ptr [rbp - 0xb0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x00000000004434ea: mov dword ptr [rbp - 0x90], ecx; mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004410b6: mov dword ptr [rbp - 0x90], ecx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004428d8: mov dword ptr [rbp - 0x98], ecx; mov r9, qword ptr [rbp - 0x68]; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x000000000043d41c: mov dword ptr [rbp - 0xa0], ebx; call rax; 
0x0000000000445900: mov dword ptr [rbp - 0xa0], ecx; mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000446d53: mov dword ptr [rbp - 0xa0], ecx; mov rsi, qword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000401153: mov dword ptr [rbp - 0xb0], 0x20; mov edi, 1; mov eax, 0xe; syscall; 
0x000000000043cb7b: mov dword ptr [rbp - 0xb0], ebx; call rax; 
0x000000000043dc2b: mov dword ptr [rbp - 0xb0], edx; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x0000000000417642: mov dword ptr [rbp - 0xb8], eax; call 0x16ee0; leave; ret; 
0x000000000043dc24: mov dword ptr [rbp - 0xc0], ebx; mov qword ptr [rbp - 0xb0], r10; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x0000000000417637: mov dword ptr [rbp - 0xc4], 0x30; mov qword ptr [rbp - 0xb8], rax; call 0x16ee0; leave; ret; 
0x00000000004244ee: mov dword ptr [rbp - 0xd8], ecx; mov rdi, rbx; call rax; 
0x0000000000457812: mov dword ptr [rbp - 0xe8], ecx; mov rdi, r15; call rax; 
0x0000000000437c92: mov dword ptr [rbp - 0xf0], eax; je 0x380de; mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x0000000000411336: mov dword ptr [rbp - 8], eax; call 0x28410; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000461e2b: mov dword ptr [rbp - 8], eax; mov r8, rsi; lea rdx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x00000000004388b6: mov dword ptr [rbp - 8], eax; xor eax, eax; cmp esi, 9; je 0x388e0; mov eax, 0x48; syscall; 
0x00000000004118fa: mov dword ptr [rbp - 8], edx; lea rdx, [rbp - 0x1010]; syscall; 
0x000000000046de8d: mov dword ptr [rbx + 0x18], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046e325: mov dword ptr [rbx + 0x20], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425c91: mov dword ptr [rbx + 0x20], eax; xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x000000000041b8b7: mov dword ptr [rbx + 0x40], esi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041b894: mov dword ptr [rbx + 0x40], esi; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000427527: mov dword ptr [rbx + 0x60], esp; pop rbx; pop r12; pop rbp; ret; 
0x0000000000423176: mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004249ff: mov dword ptr [rbx + 0x90], eax; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x0000000000459840: mov dword ptr [rbx + 0xc], ecx; jmp 0x596b7; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000044876f: mov dword ptr [rbx + 8], eax; cmp eax, -3; je 0x48790; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004501b0: mov dword ptr [rbx + 8], edx; mov byte ptr [rax], r12b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000454a10: mov dword ptr [rbx + 8], edx; mov dword ptr [rax], r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000046a6a5: mov dword ptr [rbx + rax], edx; add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x0000000000440eb5: mov dword ptr [rbx - 0x4d17fffd], esi; xor al, 0xfc; jmp qword ptr [rsi - 0x70]; 
0x0000000000449157: mov dword ptr [rbx - 0x80], edx; mov rdx, qword ptr [r15 + r14*8]; test rdx, rdx; je 0x49165; call rdx; 
0x0000000000459022: mov dword ptr [rbx], 2; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000042a4ae: mov dword ptr [rbx], eax; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000043e023: mov dword ptr [rbx], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004506be: mov dword ptr [rbx], eax; pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x0000000000475439: mov dword ptr [rbx], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000455ea9: mov dword ptr [rbx], ecx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000405c0e: mov dword ptr [rcx + 0x20], edx; pop rbp; ret; 
0x000000000042212a: mov dword ptr [rcx + 0x29c901fa], ecx; ret 0xd139; 
0x000000000042da75: mov dword ptr [rcx + 0x7343a40], 0x1481c75; clc; vzeroupper; ret; 
0x0000000000454fa5: mov dword ptr [rcx + 0xe0], edx; ret; 
0x00000000004603a7: mov dword ptr [rcx + 1], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000410ca7: mov dword ptr [rcx + 1], 0x77f8c5f8; ret; 
0x000000000045061d: mov dword ptr [rcx + rdx*8], eax; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000040ca3b: mov dword ptr [rcx - 2], ecx; ret; 
0x000000000040ca26: mov dword ptr [rcx - 4], ecx; ret; 
0x000000000040ca15: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000419232: mov dword ptr [rcx], 0x1c68348; test al, al; jne 0x1920b; movsx eax, byte ptr [rsi]; neg eax; ret; 
0x0000000000460367: mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000410c87: mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x000000000044d3f5: mov dword ptr [rcx], 0xfb3ca4e8; dec dword ptr [rax + 0x29]; ret; 
0x0000000000411b2e: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000470ee7: mov dword ptr [rcx], edx; leave; ret; 
0x000000000041b7ec: mov dword ptr [rcx], edx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000470f48: mov dword ptr [rcx], edx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044975c: mov dword ptr [rcx], edx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000473fcb: mov dword ptr [rcx], edx; ret; 
0x0000000000425c0f: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000454af8: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x28], rsi; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000428600: mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000458519: mov dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042d6bd: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x000000000042d6fb: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000042d77d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d71b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045fd3b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000042d79d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdbd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fcfd: mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000042d7e0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045fe00: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000042d800: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045fe20: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d7c1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fde1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004502c6: mov dword ptr [rdi + 0x10], edx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042d7e3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045fe03: mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000425be7: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000467175: mov dword ptr [rdi + 0x18], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000042d7c5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x000000000042d803: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000425c13: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000045fde5: mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004590c8: mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x0000000000428076: mov dword ptr [rdi + 0x28], ecx; jmp 0x2805a; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000454afc: mov dword ptr [rdi + 0x28], esi; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041404f: mov dword ptr [rdi + 0x360], edx; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rdi + 0x35a], al; ret; 
0x0000000000425be3: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000425c17: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000417e64: mov dword ptr [rdi + 0x490], eax; pop rbp; ret; 
0x0000000000425bdb: mov dword ptr [rdi + 0x58], eax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000474015: mov dword ptr [rdi + 0x98], esi; ret; 
0x000000000042d73d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x000000000045fd5d: mov dword ptr [rdi + 0xe], ecx; ret; 
0x000000000042d6db: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000042d75d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000045fd1b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000418753: mov dword ptr [rdi + 2], edx; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000042d5a7: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000045fc47: mov dword ptr [rdi + 3], edx; ret; 
0x000000000044fed7: mov dword ptr [rdi + 4], eax; ret; 
0x000000000042d589: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x000000000045fc39: mov dword ptr [rdi + 4], edx; ret; 
0x000000000042d63b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fcab: mov dword ptr [rdi + 5], edx; ret; 
0x000000000042d65b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x000000000045fcbb: mov dword ptr [rdi + 6], edx; ret; 
0x000000000042d5f9: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000042d67b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x000000000045fc89: mov dword ptr [rdi + 7], edx; ret; 
0x000000000044febc: mov dword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x0000000000479ebf: mov dword ptr [rdi + 8], eax; nop; xor eax, eax; mov r12, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425beb: mov dword ptr [rdi + 8], eax; ret; 
0x00000000004664c8: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000466458: mov dword ptr [rdi + 8], ecx; ret; 
0x000000000047a14f: mov dword ptr [rdi + 8], edx; cmp eax, 0x21; je 0x7a160; pop rbp; ret; 
0x000000000042d619: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000042d5db: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x0000000000466670: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000466538: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x0000000000467168: mov dword ptr [rdi + 8], edx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000045fc7b: mov dword ptr [rdi + 8], edx; ret; 
0x000000000046581d: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000040d134: mov dword ptr [rdi + rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000040e7de: mov dword ptr [rdi + rdx - 1], esi; mov byte ptr [rdi], cl; ret; 
0x000000000040ba8e: mov dword ptr [rdi + rdx - 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000045f0b8: mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000040ba9b: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000040e7c8: mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000045f0db: mov dword ptr [rdi + rdx - 7], ecx; ret; 
0x000000000040bacc: mov dword ptr [rdi + rdx - 8], ecx; ret; 
0x000000000040e7ba: mov dword ptr [rdi + rdx - 8], esi; ret; 
0x000000000040d0fe: mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000448cb7: mov dword ptr [rdi + riz*8], edx; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48cc5; call rax; 
0x0000000000473fd1: mov dword ptr [rdi + rsi*8], edx; ret; 
0x00000000004652af: mov dword ptr [rdi - 0x10], ecx; ret; 
0x00000000004652a8: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046522e: mov dword ptr [rdi - 8], ecx; ret; 
0x00000000004666cd: mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000046682e: mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x000000000042962e: mov dword ptr [rdi], 0; nop; xor eax, eax; leave; ret; 
0x000000000044fec3: mov dword ptr [rdi], 0; ret; 
0x0000000000413b89: mov dword ptr [rdi], 0xffffffff; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000466708: mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000466884: mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x0000000000417ffc: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x8fb53]; mov qword ptr [rsi], rax; ret; 
0x0000000000465228: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000466452: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004652a1: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004664c1: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000042d575: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000042d5c7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x000000000042cc07: mov dword ptr [rdi], ecx; mov byte ptr [rax], 0; ret; 
0x000000000042d554: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000045fc04: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000045f2e6: mov dword ptr [rdi], ecx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000042d5a5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000045fc45: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000042d5f7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000045fc87: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000042d617: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000045fc97: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000040e7c6: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000040d0fc: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x000000000040fbfb: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000042d638: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fca8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000042d658: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000045fcb8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000042d678: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000045fcc8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000040e7b7: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000042d586: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000045fc36: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000042d5d8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000045fc78: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x000000000040fc07: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000042c99d: mov dword ptr [rdi], ecx; nop; mov byte ptr [rax], 0; ret; 
0x000000000045f09c: mov dword ptr [rdi], ecx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045fc25: mov dword ptr [rdi], ecx; ret; 
0x000000000042d544: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x000000000042d562: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000042d5b4: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x000000000045002b: mov dword ptr [rdi], edx; ret; 
0x000000000042ce4c: mov dword ptr [rdi], esi; mov byte ptr [rax], 0; ret; 
0x00000000004103f1: mov dword ptr [rdi], esi; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000045f51b: mov dword ptr [rdi], esi; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000040ca23: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004103e9: mov dword ptr [rdi], esi; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000040ca12: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000467165: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000040bac9: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004103e1: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040ca37: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x000000000040ba9f: mov dword ptr [rdi], esi; ret; 
0x000000000044ffaf: mov dword ptr [rdx + 0x14], eax; leave; ret; 
0x0000000000405c38: mov dword ptr [rdx + 0x20], eax; pop rbp; ret; 
0x0000000000405c30: mov dword ptr [rdx + 0x28], eax; mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x0000000000405c0a: mov dword ptr [rdx + 0x28], ecx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000475303: mov dword ptr [rdx + 0xc], ebx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000423431: mov dword ptr [rdx + 0xe0], ecx; leave; ret; 
0x000000000044ffa7: mov dword ptr [rdx + 4], ebx; mov qword ptr [r10 + 8], rcx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x000000000044878b: mov dword ptr [rdx + 8], eax; leave; ret; 
0x0000000000458a93: mov dword ptr [rdx + 8], eax; mov qword ptr [rax], rdx; mov qword ptr [rip + 0x53e44], 0; ret; 
0x000000000041860a: mov dword ptr [rdx + 8], eax; mov qword ptr [rip + 0x942fc], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000044ffab: mov dword ptr [rdx + 8], ecx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x000000000046675a: mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x00000000004667c2: mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x000000000046de6d: mov dword ptr [rdx], eax; leave; ret; 
0x000000000041127a: mov dword ptr [rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000411297: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004667a7: mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x0000000000411352: mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000438cba: mov dword ptr [rdx], eax; pop rbx; pop r12; pop rbp; ret; 
0x000000000041b801: mov dword ptr [rdx], eax; ret; 
0x0000000000455ac8: mov dword ptr [rdx], ecx; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ced3: mov dword ptr [rip + 0x38fb7], eax; pop rbx; pop r12; pop rbp; ret; 
0x000000000046b7f6: mov dword ptr [rip + 0x41134], eax; leave; ret; 
0x0000000000458ade: mov dword ptr [rip + 0x53e00], 0; ret; 
0x0000000000458a9a: mov dword ptr [rip + 0x53e44], 0; ret; 
0x0000000000449731: mov dword ptr [rip + 0x5e2d9], eax; mov qword ptr [rip + 0x5e2da], rdx; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x0000000000449738: mov dword ptr [rip + 0x5e2da], edx; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x0000000000448a2d: mov dword ptr [rip + 0x64349], 0; ret; 
0x000000000043966e: mov dword ptr [rip + 0x6e074], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000429822: mov dword ptr [rip + 0x7deb0], eax; pop rbp; ret; 
0x0000000000429817: mov dword ptr [rip + 0x7deb7], eax; call 0x37b90; mov dword ptr [rip + 0x7deb0], eax; pop rbp; ret; 
0x00000000004286a7: mov dword ptr [rip + 0x7f023], eax; ret; 
0x00000000004284d7: mov dword ptr [rip + 0x7f1ef], eax; ret; 
0x00000000004284c7: mov dword ptr [rip + 0x7f1fb], eax; ret; 
0x00000000004284b7: mov dword ptr [rip + 0x7f207], eax; ret; 
0x00000000004284a7: mov dword ptr [rip + 0x7f213], eax; ret; 
0x00000000004286c7: mov dword ptr [rip + 0x7f3cb], eax; ret; 
0x00000000004286b8: mov dword ptr [rip + 0x7f3e2], eax; ret; 
0x00000000004284fc: mov dword ptr [rip + 0x802f2], eax; ret; 
0x0000000000427a60: mov dword ptr [rip + 0x8520e], 0; ret; 
0x0000000000427a17: mov dword ptr [rip + 0x85257], eax; ret; 
0x0000000000427a02: mov dword ptr [rip + 0x85264], 0; ret; 
0x0000000000427992: mov dword ptr [rip + 0x852e0], ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004251e2: mov dword ptr [rip + 0x87a8c], eax; ret; 
0x00000000004251a5: mov dword ptr [rip + 0x87ac1], 0; pop rbp; ret; 
0x0000000000418304: mov dword ptr [rip + 0x8b686], eax; ret; 
0x00000000004186ba: mov dword ptr [rip + 0x8c938], ebx; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000417e5d: mov dword ptr [rip + 0x8fd25], eax; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000041be52: mov dword ptr [rip + 0x90de4], 0; ret; 
0x0000000000419d6a: mov dword ptr [rip + 0x92be8], eax; leave; ret; 
0x0000000000419d5c: mov dword ptr [rip + 0x92bfe], eax; movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x0000000000419822: mov dword ptr [rip + 0x93074], 0; ret; 
0x0000000000419b05: mov dword ptr [rip + 0x930a9], eax; pop rbp; ret; 
0x000000000041860e: mov dword ptr [rip + 0x942fc], eax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000412504: mov dword ptr [rip + 0x9a34e], eax; lea rax, [rip + 0x9a33f]; ret; 
0x00000000004124c2: mov dword ptr [rip + 0x9a3a8], edi; cmp qword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x000000000041148c: mov dword ptr [rip + 0x9b3b6], eax; cmp rax, rdi; jb 0x114a0; xor eax, eax; ret; 
0x0000000000405507: mov dword ptr [rip + 0xa0c3b], eax; ret; 
0x0000000000405253: mov dword ptr [rip + 0xa0ed7], eax; ret; 
0x0000000000405233: mov dword ptr [rip + 0xa0eef], eax; ret; 
0x0000000000405248: mov dword ptr [rip + 0xa0f16], 1; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405203: mov dword ptr [rip + 0xa0f17], eax; ret; 
0x0000000000405228: mov dword ptr [rip + 0xa0f36], 1; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051f8: mov dword ptr [rip + 0xa0f66], 1; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004051e2: mov dword ptr [rip + 0xa0f78], eax; ret; 
0x00000000004051d8: mov dword ptr [rip + 0xa0f86], 1; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x0000000000405009: mov dword ptr [rip + 0xa1191], eax; ret; 
0x0000000000404f99: mov dword ptr [rip + 0xa1199], eax; ret; 
0x0000000000404ff2: mov dword ptr [rip + 0xa11a0], eax; ret; 
0x0000000000404fd8: mov dword ptr [rip + 0xa11aa], edx; ret; 
0x0000000000404f89: mov dword ptr [rip + 0xa11b1], eax; ret; 
0x0000000000409777: mov dword ptr [rip + 0xa30a3], 0; ret; 
0x0000000000405218: mov dword ptr [rip + 0xa7616], eax; ret; 
0x00000000004020d4: mov dword ptr [rip + 0xaa8b6], eax; pop rbx; pop rbp; ret; 
0x0000000000401f5c: mov dword ptr [rip + 0xaaafe], edx; pop rbx; pop rbp; ret; 
0x0000000000401f56: mov dword ptr [rip + 0xaab00], ecx; mov dword ptr [rip + 0xaaafe], edx; pop rbx; pop rbp; ret; 
0x000000000040423c: mov dword ptr [rsi + 0x10], esi; syscall; 
0x000000000046c821: mov dword ptr [rsi + 0x18], 0; ret; 
0x000000000046c819: mov dword ptr [rsi + 0x18], edx; ret; 
0x0000000000404230: mov dword ptr [rsi + 8], eax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000466849: mov dword ptr [rsi + 8], eax; mov eax, 2; pop rbp; ret; 
0x0000000000466881: mov dword ptr [rsi + 8], ecx; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x0000000000474f29: mov dword ptr [rsi + rax], ecx; add rax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x000000000040fc0a: mov dword ptr [rsi - 2], ecx; ret; 
0x000000000040fbfd: mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000474002: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000418006: mov dword ptr [rsi], eax; ret; 
0x0000000000449751: mov dword ptr [rsi], ecx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000458adb: mov dword ptr [rsi], edi; mov qword ptr [rip + 0x53e00], 0; ret; 
0x0000000000466706: mov dword ptr [rsi], edx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x00000000004666eb: mov dword ptr [rsi], edx; ret; 
0x0000000000404239: mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000427523: mov dword ptr [rsp], eax; mov qword ptr [rbx + 0x60], r12; pop rbx; pop r12; pop rbp; ret; 
0x0000000000475435: mov dword ptr [rsp], ecx; mov qword ptr [rbx], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000466759: mov dword ptr cs:[rdx], 0; mov eax, 1; pop rbp; ret; 
0x000000000044eb77: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411b87: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004500a7: mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004114a7: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000040a7de: mov dword ptr fs:[rax], 0xc; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040862f: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000461b1f: mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000411b2d: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000411279: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000411296: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000411351: mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000040ba9a: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000042d582: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000045fc32: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000042d5d3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000045fc73: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000042d540: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000045fbf0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000401981: mov eax, 0; leave; ret; 
0x0000000000401009: mov eax, 0; test rax, rax; je 0x1016; call rax; 
0x000000000040172e: mov eax, 0; test rax, rax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401770: mov eax, 0; test rax, rax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; 
0x00000000004113e3: mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000043854c: mov eax, 0x101; syscall; 
0x0000000000461ce7: mov eax, 0x106; syscall; 
0x0000000000461ce7: mov eax, 0x106; syscall; cmp eax, 0xfffff000; ja 0x61d00; xor eax, eax; ret; 
0x00000000004051b2: mov eax, 0x10; cmova eax, edx; mov byte ptr [rip + 0xa7678], al; ret; 
0x0000000000416da8: mov eax, 0x10b; lea rsi, [rip + 0x64cfc]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x0000000000418667: mov eax, 0x111; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000438937: mov eax, 0x11; syscall; 
0x0000000000438937: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x38950; ret; 
0x00000000004389ab: mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004389ab: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x389c0; ret; 
0x0000000000405f32: mov eax, 0x13e; syscall; 
0x0000000000417034: mov eax, 0x14; syscall; 
0x00000000004186ef: mov eax, 0x14e; mov rdi, rbx; syscall; 
0x000000000040b544: mov eax, 0x16; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004589c4: mov eax, 0x16; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b5b0: mov eax, 0x16; ret; 
0x0000000000411d1f: mov eax, 0x19; syscall; 
0x0000000000411b14: mov eax, 0x1c; syscall; 
0x0000000000411b14: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x11b24; ret; 
0x0000000000437ab4: mov eax, 0x27; syscall; 
0x0000000000437ab4: mov eax, 0x27; syscall; ret; 
0x0000000000475068: mov eax, 0x44fffff7; mov ecx, ebx; call rax; 
0x0000000000467cc4: mov eax, 0x48000005; cmovne eax, edx; ret; 
0x000000000040b8a4: mov eax, 0x48000047; cmovne eax, edx; ret; 
0x000000000043882b: mov eax, 0x48; syscall; 
0x0000000000454250: mov eax, 0x48fffffe; lea edx, [rbp - 0x140]; call rbx; 
0x00000000004541ae: mov eax, 0x4cfffffe; mov edx, esp; mov rdi, r13; call rbx; 
0x0000000000437ca5: mov eax, 0x4f; syscall; 
0x0000000000411e74: mov eax, 0x63; syscall; 
0x0000000000411e74: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11e84; ret; 
0x000000000043a2f3: mov eax, 0x690; call 0x11c00; test eax, eax; jne 0x3a308; pop rbp; ret; 
0x0000000000437a74: mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000429532: mov eax, 0x83; ret; 
0x000000000041f3b4: mov eax, 0x89000000; ret 0xc083; 
0x0000000000437b04: mov eax, 0x8f; syscall; 
0x0000000000437b04: mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x37b14; ret; 
0x0000000000437bc4: mov eax, 0x90; syscall; 
0x0000000000437bc4: mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x37bd4; ret; 
0x0000000000437b34: mov eax, 0x91; syscall; 
0x0000000000437b34: mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x37b44; ret; 
0x0000000000437b64: mov eax, 0x92; syscall; 
0x0000000000437b64: mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x37b74; ret; 
0x0000000000437b94: mov eax, 0x93; syscall; 
0x0000000000437b94: mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x37ba4; ret; 
0x0000000000411da7: mov eax, 0x9d; syscall; 
0x0000000000411da7: mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11db7; ret; 
0x0000000000404233: mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000403efd: mov eax, 0x9e; syscall; 
0x0000000000411c04: mov eax, 0xa; syscall; 
0x0000000000411c04: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x11c14; ret; 
0x0000000000438e01: mov eax, 0xb0458b48; mov dword ptr [rbp - 0x3c], r8d; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000411c34: mov eax, 0xb; syscall; 
0x0000000000411c34: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x11c44; ret; 
0x0000000000458e00: mov eax, 0xba; syscall; 
0x00000000004624fb: mov eax, 0xc9000000; ret; 
0x0000000000411484: mov eax, 0xc; syscall; 
0x00000000004788e2: mov eax, 0xca; add rdi, r12; syscall; 
0x0000000000429324: mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x00000000004786a8: mov eax, 0xca; mov dword ptr [r8 + rdx*4 + 8], 0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x0000000000404d44: mov eax, 0xca; syscall; 
0x0000000000458ee7: mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x58f00; ret; 
0x0000000000404df1: mov eax, 0xca; syscall; ret; 
0x0000000000478ae7: mov eax, 0xca; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x000000000042844c: mov eax, 0xca; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000404da5: mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000459389: mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000043881d: mov eax, 0xd0458d48; mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x38850; mov eax, 0x48; syscall; 
0x0000000000437a80: mov eax, 0xd9; syscall; 
0x0000000000437a80: mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x37a90; ret; 
0x000000000044ec81: mov eax, 0xd; syscall; 
0x000000000041861b: mov eax, 0xda; syscall; 
0x0000000000411260: mov eax, 0xe4; syscall; 
0x000000000040432d: mov eax, 0xe7; syscall; 
0x0000000000468ef1: mov eax, 0xe8000141; jbe 0x68eac; stc; jmp qword ptr [rsi + 0xf]; 
0x00000000004675fc: mov eax, 0xe9fffff7; ret; 
0x0000000000412ade: mov eax, 0xe9fffffd; sar ebp, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000401162: mov eax, 0xe; syscall; 
0x0000000000458de2: mov eax, 0xea; syscall; 
0x0000000000453027: mov eax, 0xf3d2e867; sti; jmp qword ptr [rsi - 0x70]; 
0x000000000043af69: mov eax, 0xf880e867; cld; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000044eba1: mov eax, 0xf; syscall; 
0x0000000000407b40: mov eax, 0xfffc34e9; jmp qword ptr [rsi + 0x2e]; 
0x00000000004667a0: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x00000000004326a4: mov eax, 0xfffffc8; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000432034: mov eax, 0xfffffc9; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000464d05: mov eax, 0xffffffb8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000044eb71: mov eax, 0xffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411b81: mov eax, 0xffffffd8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004500a1: mov eax, 0xffffffd8; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004114a1: mov eax, 0xffffffd8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000408629: mov eax, 0xffffffd8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000461b19: mov eax, 0xffffffd8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000043a309: mov eax, 0xffffffd8; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x000000000041b795: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000041b775: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000041b755: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000478a04: mov eax, 0xfffffff8; lock xadd dword ptr [rdi], eax; shr eax, 2; cmp eax, 3; je 0x78a20; ret; 
0x0000000000411bed: mov eax, 0xffffffff; jmp 0x11b74; nop dword ptr [rax + rax]; endbr64; mov eax, 0xa; syscall; 
0x000000000042789d: mov eax, 0xffffffff; jmp 0x27757; nop word ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000004571d4: mov eax, 0xffffffff; leave; ret; 
0x0000000000455ad1: mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000041127c: mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041bc72: mov eax, 0xffffffff; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000411299: mov eax, 0xffffffff; ret; 
0x000000000040197a: mov eax, 1; jmp 0x1986; mov eax, 0; leave; ret; 
0x000000000040434a: mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x000000000040431a: mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x0000000000462271: mov eax, 1; leave; ret; 
0x0000000000412711: mov eax, 1; leave; test eax, eax; sete al; ret; 
0x00000000004667bd: mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x00000000004666e5: mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x0000000000466d3b: mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000416779: mov eax, 1; pop r12; pop rbp; ret; 
0x0000000000466760: mov eax, 1; pop rbp; ret; 
0x00000000004192e9: mov eax, 1; ret; 
0x0000000000450023: mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000043875d: mov eax, 1; syscall; 
0x000000000043875d: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x387c0; ret; 
0x0000000000438974: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x38988; ret; 
0x0000000000413b40: mov eax, 1; test rsi, rsi; je 0x13b50; mov eax, r8d; ret; 
0x0000000000466834: mov eax, 2; pop rbp; ret; 
0x0000000000460ac0: mov eax, 2; ret; 
0x0000000000460ac8: mov eax, 3; ret; 
0x0000000000411384: mov eax, 3; syscall; 
0x0000000000411384: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x11398; ret; 
0x0000000000460ad0: mov eax, 4; ret; 
0x0000000000460ad8: mov eax, 5; ret; 
0x0000000000437bf4: mov eax, 5; syscall; 
0x0000000000437bf4: mov eax, 5; syscall; cmp rax, -0x1000; ja 0x37c08; ret; 
0x0000000000460ae0: mov eax, 6; ret; 
0x0000000000460ae8: mov eax, 7; ret; 
0x0000000000462d08: mov eax, 8; ret; 
0x00000000004384b4: mov eax, 8; syscall; 
0x00000000004384b4: mov eax, 8; syscall; cmp rax, -0x1000; ja 0x384c8; ret; 
0x0000000000411bbd: mov eax, 9; or r10d, 0x40; syscall; 
0x0000000000411b65: mov eax, 9; syscall; 
0x000000000043b830: mov eax, dword ptr [0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000459856: mov eax, dword ptr [0x10]; ret; 
0x000000000046716d: mov eax, dword ptr [0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000045b0ac: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c7e: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b398: mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000449a04: mov eax, dword ptr [r12 + 8]; sub eax, dword ptr [rbx + 8]; pop rbx; pop r12; pop rbp; ret; 
0x00000000004571c1: mov eax, dword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000041b7ef: mov eax, dword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000042755d: mov eax, dword ptr [rax + 0x60]; test rax, rax; jne 0x2757b; ret; 
0x00000000004016cc: mov eax, dword ptr [rax + 0x68]; test rax, rax; jne 0x16c0; ret; 
0x0000000000426778: mov eax, dword ptr [rax + 0x68]; test rax, rax; jne 0x26770; ret; 
0x000000000040976c: mov eax, dword ptr [rax + 0x870]; cmp rax, rsi; jne 0x9740; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x0000000000455d2e: mov eax, dword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000455e62: mov eax, dword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004571ba: mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000046f98f: mov eax, dword ptr [rax + 8]; mov rdx, r14; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x000000000043e315: mov eax, dword ptr [rax + 8]; ret; 
0x000000000043e325: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000041f384: mov eax, dword ptr [rax + rcx*8]; jmp rax; 
0x0000000000464d13: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000454b6e: mov eax, dword ptr [rax + rdi*8]; ret; 
0x0000000000448cbb: mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x48cc5; call rax; 
0x0000000000448ea5: mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x48eaf; call rax; 
0x00000000004204be: mov eax, dword ptr [rax + rsi*8]; jmp rax; 
0x0000000000419989: mov eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, 1; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000418977: mov eax, dword ptr [rax]; cmp r8, r10; jb 0x18a15; cmp rsi, r8; jae 0x189d8; ret; 
0x0000000000427581: mov eax, dword ptr [rax]; mov qword ptr [rdx], rax; ret; 
0x0000000000455ac5: mov eax, dword ptr [rax]; mov qword ptr [rdx], rcx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000464d10: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000043a311: mov eax, dword ptr [rax]; ret; 
0x0000000000474060: mov eax, dword ptr [rbp - 0x10]; leave; ret; 
0x0000000000473e07: mov eax, dword ptr [rbp - 0x138]; call rax; 
0x0000000000454847: mov eax, dword ptr [rbp - 0x14]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046df05: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6df19; leave; ret; 
0x000000000046dfe7: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e057: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e06b; leave; ret; 
0x0000000000470747: mov eax, dword ptr [rbp - 0x20]; leave; ret; 
0x0000000000469362: mov eax, dword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x69376; leave; ret; 
0x000000000046e14f: mov eax, dword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1b3: mov eax, dword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e5fc: mov eax, dword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e619; leave; ret; 
0x000000000044f179: mov eax, dword ptr [rbp - 0x38]; call rax; 
0x000000000044ef87: mov eax, dword ptr [rbp - 0x38]; mov rsi, rbx; mov rdi, r12; call rax; 
0x0000000000474c6a: mov eax, dword ptr [rbp - 0x40]; call rax; 
0x0000000000474cb4: mov eax, dword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x0000000000438e03: mov eax, dword ptr [rbp - 0x50]; mov dword ptr [rbp - 0x3c], r8d; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000447b21: mov eax, dword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000401ea3: mov eax, dword ptr [rbp - 0x78]; call rax; 
0x0000000000440ad3: mov eax, dword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000047505f: mov eax, dword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x000000000047518b: mov eax, dword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x000000000044235d: mov eax, dword ptr [rbp - 0x88]; call rax; 
0x0000000000441cbc: mov eax, dword ptr [rbp - 0x90]; call rax; 
0x00000000004410c4: mov eax, dword ptr [rbp - 0x98]; call rax; 
0x00000000004428ea: mov eax, dword ptr [rbp - 0xa0]; call rax; 
0x000000000044590b: mov eax, dword ptr [rbp - 0xa8]; call rax; 
0x000000000041133f: mov eax, dword ptr [rbp - 8]; leave; ret; 
0x000000000044edd3: mov eax, dword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x4eeb9; leave; ret; 
0x0000000000466349: mov eax, dword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x663c7; leave; ret; 
0x000000000043c4ca: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; add r14, r15; test r11d, r11d; jne 0x3c4db; call rax; 
0x000000000043cb6f: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d40f: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test r10d, r10d; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000043d2d3: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test edx, edx; jne 0x3d2df; call rax; 
0x000000000043ca45: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test esi, esi; jne 0x3ca51; call rax; 
0x000000000046dde1: mov eax, dword ptr [rbx + 0x10]; mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000425d7d: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rbp - 0x1c]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000425d5e: mov eax, dword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000466c66: mov eax, dword ptr [rbx + 0x20]; jmp 0x66bc0; call 0x12300; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000042634a: mov eax, dword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000042655c: mov eax, dword ptr [rbx + 0x48]; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000045b0ad: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c7f: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b399: mov eax, dword ptr [rbx + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000041f176: mov eax, dword ptr [rbx + rax*8]; xor ebx, ebx; mov dword ptr [rbp - 0x4a4], 0; mov dword ptr [rbp - 0x4a8], 0; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x000000000043966b: mov eax, dword ptr [rbx]; mov qword ptr [rip + 0x6e074], rax; pop rbx; pop r12; pop rbp; ret; 
0x000000000045da1a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000460015: mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x60000; ret; 
0x000000000045eff2: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004167ea: mov eax, dword ptr [rcx]; ret; 
0x0000000000428095: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004275a4: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004275cb: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004564fe: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000456510: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000425bdf: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000427935: mov eax, dword ptr [rdi + 0x68]; ret; 
0x0000000000473f85: mov eax, dword ptr [rdi + 0x90]; ret; 
0x0000000000473fe5: mov eax, dword ptr [rdi + 0x98]; ret; 
0x0000000000455d05: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x0000000000474025: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x0000000000474085: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x0000000000474075: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x0000000000474035: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x0000000000473ff5: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000423e75: mov eax, dword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x23e88; movzx eax, byte ptr [rax]; ret; 
0x0000000000428057: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x28080; movzx eax, byte ptr [rax]; ret; 
0x0000000000427555: mov eax, dword ptr [rdi + 8]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rax + 0x60]; test rax, rax; jne 0x2757b; ret; 
0x0000000000474ac5: mov eax, dword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x74ae0; mov edi, 1; jmp rax; 
0x000000000040af0e: mov eax, dword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000041f502: mov eax, dword ptr [rdi + rax*8]; jmp rax; 
0x000000000042c6d1: mov eax, dword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000041b435: mov eax, dword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4c5: mov eax, dword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x0000000000404fa5: mov eax, dword ptr [rdi]; cmp rax, 0x408; jbe 0x4fb0; ret; 
0x0000000000405195: mov eax, dword ptr [rdi]; cmp rax, 0xa0; jbe 0x51a0; ret; 
0x0000000000404fe5: mov eax, dword ptr [rdi]; cmp rax, 0xffff; jbe 0x4ff0; ret; 
0x00000000004286a5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x7f023], eax; ret; 
0x00000000004284d5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x7f1ef], eax; ret; 
0x00000000004284c5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x7f1fb], eax; ret; 
0x00000000004284b5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x7f207], eax; ret; 
0x00000000004284a5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x7f213], eax; ret; 
0x00000000004286c5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x7f3cb], eax; ret; 
0x00000000004286b5: mov eax, dword ptr [rdi]; mov qword ptr [rip + 0x7f3e2], rax; ret; 
0x00000000004671aa: mov eax, dword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000004671aa: mov eax, dword ptr [rdi]; mov rdi, rdx; jmp rax; nop dword ptr [rax]; ret; 
0x0000000000405245: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f16], 1; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405225: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f36], 1; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051f5: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f66], 1; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004051d5: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f86], 1; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x0000000000405215: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x0000000000405005: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0xa1191], rax; ret; 
0x0000000000404f95: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0xa1199], rax; ret; 
0x0000000000404f85: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0xa11b1], rax; ret; 
0x0000000000459074: mov eax, dword ptr [rdi]; test al, 2; je 0x59080; xor eax, eax; ret; 
0x00000000004588b4: mov eax, dword ptr [rdi]; test eax, eax; jne 0x588c0; xend; xor eax, eax; ret; 
0x0000000000477189: mov eax, dword ptr [rdi]; test eax, eax; jne 0x77190; ret; 
0x0000000000477209: mov eax, dword ptr [rdi]; test eax, eax; jne 0x77210; ret; 
0x0000000000477284: mov eax, dword ptr [rdi]; test eax, eax; jne 0x77290; ret; 
0x00000000004774d4: mov eax, dword ptr [rdi]; test eax, eax; jne 0x774e0; ret; 
0x0000000000419148: mov eax, dword ptr [rdx + 0x48]; test ecx, ecx; je 0x19158; mov qword ptr [rsi], rax; ret; 
0x000000000045d7d6: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000046d55d: mov eax, dword ptr [rdx + rax*8]; test rax, rax; jne 0x6d57e; ret; 
0x0000000000418272: mov eax, dword ptr [rdx + rax]; cmp rax, -1; je 0x182ba; ret; 
0x0000000000412500: mov eax, dword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x00000000004561a8: mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x0000000000456007: mov eax, dword ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x000000000046e5b1: mov eax, dword ptr [rip + 0x3e5e1]; ret; 
0x000000000046e5a1: mov eax, dword ptr [rip + 0x3e5e9]; ret; 
0x000000000046e591: mov eax, dword ptr [rip + 0x3e5f1]; ret; 
0x000000000046e581: mov eax, dword ptr [rip + 0x3e5f9]; ret; 
0x000000000046e571: mov eax, dword ptr [rip + 0x3e601]; ret; 
0x000000000046e561: mov eax, dword ptr [rip + 0x3e609]; ret; 
0x000000000046e551: mov eax, dword ptr [rip + 0x3e611]; ret; 
0x000000000046e541: mov eax, dword ptr [rip + 0x3e619]; ret; 
0x000000000046e531: mov eax, dword ptr [rip + 0x3e621]; ret; 
0x000000000046e521: mov eax, dword ptr [rip + 0x3e629]; ret; 
0x000000000046e511: mov eax, dword ptr [rip + 0x3e631]; ret; 
0x000000000046e509: mov eax, dword ptr [rip + 0x3e691]; ret; 
0x0000000000469314: mov eax, dword ptr [rip + 0x435a6]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000458cf2: mov eax, dword ptr [rip + 0x4de20]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000447f05: mov eax, dword ptr [rip + 0x64e6d]; ret; 
0x00000000004389e5: mov eax, dword ptr [rip + 0x6e12d]; test rax, rax; je 0x389f1; ret; 
0x000000000043e4c5: mov eax, dword ptr [rip + 0x6e86d]; ret; 
0x000000000043e4b5: mov eax, dword ptr [rip + 0x6e875]; ret; 
0x0000000000427915: mov eax, dword ptr [rip + 0x7f7e5]; ret; 
0x00000000004284f0: mov eax, dword ptr [rip + 0x844f2]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x0000000000417fff: mov eax, dword ptr [rip + 0x8fb53]; mov qword ptr [rsi], rax; ret; 
0x0000000000411245: mov eax, dword ptr [rip + 0x93ded]; test rax, rax; je 0x11260; push rbp; mov rbp, rsp; call rax; 
0x0000000000405260: mov eax, dword ptr [rip + 0xa75ce]; test eax, eax; jne 0x5270; ret; 
0x000000000046cece: mov eax, dword ptr [rsi + riz - 0x18]; mov qword ptr [rip + 0x38fb7], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000423ecd: mov eax, dword ptr [rsp + 0x20]; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000425fb8: mov eax, dword ptr [rsp + 0x28]; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000449a05: mov eax, dword ptr [rsp + 8]; sub eax, dword ptr [rbx + 8]; pop rbx; pop r12; pop rbp; ret; 
0x000000000043a310: mov eax, dword ptr fs:[rax]; ret; 
0x00000000004385b7: mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000438791: mov eax, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000411321: mov eax, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x00000000004386c7: mov eax, eax; mov rsi, qword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000413b4b: mov eax, eax; ret; 
0x000000000042845c: mov eax, eax; syscall; 
0x00000000004356e5: mov eax, eax; vzeroupper; ret; 
0x0000000000435ab7: mov eax, eax; xtest; jne 0x35ac2; vzeroupper; ret; 
0x000000000046136a: mov eax, eax; xtest; jne 0x61375; vzeroupper; ret; 
0x0000000000449899: mov eax, ebp; pop r12; pop r13; pop rbp; ret; 
0x00000000004497e8: mov eax, ebp; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004787a7: mov eax, ebp; syscall; 
0x0000000000466673: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000474159: mov eax, ebx; add rsp, 0x1f0; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b0bf: mov eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004742c6: mov eax, ebx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x000000000046183c: mov eax, ebx; pop rbx; pop r12; cmovne rax, rdx; pop rbp; ret; 
0x0000000000405406: mov eax, ebx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000041818b: mov eax, ebx; pop rbx; pop r12; pop rbp; ret; 
0x000000000043e1f7: mov eax, ebx; syscall; 
0x000000000046653b: mov eax, ecx; adc eax, eax; ret; 
0x000000000042846a: mov eax, ecx; and eax, 0xc; cmp eax, 4; je 0x28451; ret; 
0x0000000000458cec: mov eax, ecx; div rsi; mov rax, qword ptr [rip + 0x4de20]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x00000000004565ce: mov eax, ecx; mov qword ptr [rax + 0x10], rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000041a951: mov eax, ecx; movzx r9d, byte ptr [rcx]; test r9b, r9b; jne 0x1a8b0; ret; 
0x0000000000416938: mov eax, ecx; pop r13; pop rbp; ret; 
0x0000000000406a29: mov eax, ecx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004168b4: mov eax, ecx; ret; 
0x0000000000404c2d: mov eax, ecx; syscall; 
0x000000000045f785: mov eax, edi; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000473e24: mov eax, edi; mov rcx, r14; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000473c46: mov eax, edi; mov rcx, rbx; mov edi, 1; call rax; 
0x0000000000404a63: mov eax, edi; mov rdi, rdx; cmp rax, 9; ja 0x4a40; mov rax, rsi; ret; 
0x0000000000401bc0: mov eax, edi; pop rbx; pop rbp; ret; 
0x000000000045f279: mov eax, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000401c04: mov eax, edi; ret; 
0x0000000000418b0e: mov eax, edi; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000466841: mov eax, edx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x0000000000435d0e: mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x0000000000419b92: mov eax, edx; leave; ret; 
0x0000000000419af3: mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x00000000004044f8: mov eax, edx; pop rbp; ret; 
0x000000000040449a: mov eax, edx; pop rbx; pop r12; add qword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x0000000000458762: mov eax, edx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000475a5d: mov eax, edx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000448060: mov eax, edx; pop rbx; pop r13; pop rbp; ret; 
0x0000000000465825: mov eax, edx; pop rbx; ret; 
0x0000000000404aca: mov eax, edx; ret; 
0x000000000047879d: mov eax, edx; shr eax, 1; je 0x787b7; xor r10d, r10d; mov eax, r13d; syscall; 
0x000000000047a37d: mov eax, edx; shr eax, 1; je 0x7a392; xor r10d, r10d; mov eax, ebx; syscall; 
0x0000000000404abb: mov eax, edx; sub rax, rdx; ret; 
0x0000000000401ed2: mov eax, edx; syscall; 
0x000000000040f816: mov eax, edx; vzeroupper; ret; 
0x0000000000475184: mov eax, esi; lea rdx, [r15 + rax*8]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x0000000000461e2f: mov eax, esi; lea rdx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x0000000000429756: mov eax, esi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000044eaeb: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000428915: mov eax, esi; not esi; and esi, 0x80; syscall; 
0x000000000040499f: mov eax, esi; ret; 
0x0000000000419ba7: mov eax, esi; syscall; 
0x00000000004228ed: mov eax, esp; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000424980: mov eax, esp; pop r12; pop r13; pop rbp; ret; 
0x0000000000411cc2: mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000438a96: mov eax, esp; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000416e87: mov eax, esp; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000411c93: mov eax, esp; pop rbx; pop r12; pop rbp; ret; 
0x00000000004789a0: mov eax, esp; syscall; 
0x00000000004228ec: mov eax, r12d; pop r12; pop r13; pop r14; pop rbp; ret; 
0x00000000004506c1: mov eax, r12d; pop r12; pop rbp; ret; 
0x0000000000422eed: mov eax, r12d; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000450620: mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000047899f: mov eax, r12d; syscall; 
0x00000000004787a6: mov eax, r13d; syscall; 
0x0000000000475183: mov eax, r14d; lea rdx, [r15 + rax*8]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x0000000000428914: mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x0000000000413b4a: mov eax, r8d; ret; 
0x000000000042845b: mov eax, r8d; syscall; 
0x0000000000404c2c: mov eax, r9d; syscall; 
0x000000000043bd87: mov ebp, 0x39480006; ret 0x5172; 
0x00000000004100d2: mov ebp, 0x40fa8348; ja 0x10100; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x0000000000436551: mov ebp, 0x448d49c0; add byte ptr [rax], ah; ret; 
0x000000000040988b: mov ebp, 0x48000001; add esp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000046022f: mov ebp, 0x48000008; lea edx, [rip + 0x676]; cmove rax, rdx; ret; 
0x000000000042a34f: mov ebp, 0x480000a1; cmove eax, edx; ret; 
0x000000000040fe52: mov ebp, 0x80fa8148; add byte ptr [rax], al; add byte ptr [rdi + 0x24], dh; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x0000000000435726: mov ebp, 0x83d72948; shl byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x000000000041dd97: mov ebp, 0x83fffffe; mov ebp, 0xfffff6f0; or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x00000000004481c3: mov ebp, 0xa236e867; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004367ed: mov ebp, 0xc0014cc0; ret; 
0x0000000000435fae: mov ebp, 0xc0014cc0; vzeroupper; ret; 
0x00000000004364f2: mov ebp, 0xf00148c0; ret; 
0x0000000000431a0d: mov ebp, 0xf44b60f; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x00000000004080aa: mov ebp, 0xf6000004; ret 0xf0f; 
0x00000000004364c8: mov ebp, 0xf80148c0; ret; 
0x0000000000435f87: mov ebp, 0xf80148c0; vzeroupper; ret; 
0x0000000000436227: mov ebp, 0xf80148c0; xtest; jne 0x36235; vzeroupper; ret; 
0x0000000000417028: mov ebp, 0xfffff6a8; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x000000000041dd9c: mov ebp, 0xfffff6f0; or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x0000000000475059: mov ebp, 0xfffff7b0; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x000000000041c9b0: mov ebp, 0xfffffea8; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000439ad2: mov ebp, 0xfffffee8; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000437ca0: mov ebp, 0xffffff10; mov eax, 0x4f; syscall; 
0x0000000000453dda: mov ebp, 0xffffff40; cmp dword ptr [rdi], ecx; test cl, ch; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x00000000004458fa: mov ebp, 0xffffff48; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000446d62: mov ebp, 0xffffff48; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x00000000004428d2: mov ebp, 0xffffff50; mov qword ptr [rbp - 0x98], rcx; mov r9, qword ptr [rbp - 0x68]; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x00000000004410be: mov ebp, 0xffffff58; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004434e4: mov ebp, 0xffffff60; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000441cb6: mov ebp, 0xffffff60; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x0000000000445124: mov ebp, 0xffffff68; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000442357: mov ebp, 0xffffff68; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000440acd: mov ebp, 0xffffff70; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x00000000004416bc: mov ebp, 0xffffff78; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000047435c: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047451c: mov ebp, dword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000044eaf1: mov ebp, ecx; nop; jmp rdx; 
0x000000000041195d: mov ebp, esp; call 0x11680; test eax, eax; je 0x11970; pop rbp; ret; 
0x000000000041199d: mov ebp, esp; call 0x11680; test eax, eax; je 0x119b0; pop rbp; ret; 
0x0000000000419819: mov ebp, esp; call 0x11c30; pop rbp; mov qword ptr [rip + 0x93074], 0; ret; 
0x000000000040958f: mov ebp, esp; call 0x11c60; cmp rax, -1; je 0x95a0; pop rbp; ret; 
0x000000000041240d: mov ebp, esp; call 0x12320; nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x000000000043bdd2: mov ebp, esp; call 0x18430; xor eax, eax; pop rbp; ret; 
0x000000000041b8c6: mov ebp, esp; call 0x29720; test eax, eax; jne 0x1b8d8; pop rbp; ret; 
0x0000000000448a24: mov ebp, esp; call 0x39610; pop rbp; mov qword ptr [rip + 0x64349], 0; ret; 
0x0000000000404d66: mov ebp, esp; call 0x4d00; nop dword ptr [rax]; ret; 
0x0000000000404dcb: mov ebp, esp; call 0x4d00; nop word ptr [rax + rax]; ret; 
0x000000000045888a: mov ebp, esp; call 0x4d80; xor eax, eax; pop rbp; ret; 
0x00000000004588cb: mov ebp, esp; call 0x4e00; xor eax, eax; pop rbp; ret; 
0x0000000000459082: mov ebp, esp; call 0x58f20; xor eax, eax; pop rbp; ret; 
0x0000000000466b62: mov ebp, esp; call 0x668f0; mov eax, 1; pop rbp; ret; 
0x000000000046d9c0: mov ebp, esp; call 0x6db90; pop rbp; neg eax; sbb eax, eax; ret; 
0x0000000000411252: mov ebp, esp; call rax; 
0x0000000000419af6: mov ebp, esp; lea rsi, [rbp - 8]; syscall; 
0x0000000000458e9d: mov ebp, esp; push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000418616: mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x000000000043a1f9: mov ebx, 0x48000000; add esp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000046dc2c: mov ebx, 0x8948fff9; ret; 
0x00000000004438f1: mov ebx, 0xe80003c3; jbe 0x43902; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000410615: mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000401701: mov ebx, 0xf4000026; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000042053a: mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000041f37c: mov ebx, 1; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000439ad8: mov ebx, dword ptr [rbp - 0x110]; call rbx; 
0x0000000000419be4: mov ebx, dword ptr [rbp - 8]; leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000425d62: mov ebx, dword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409062: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000448788: mov ebx, dword ptr [rbp - 8]; mov dword ptr [rdx + 8], eax; leave; ret; 
0x00000000004571d1: mov ebx, dword ptr [rbp - 8]; mov eax, 0xffffffff; leave; ret; 
0x000000000046226e: mov ebx, dword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x0000000000455f04: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000046dde5: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rax], rdi; leave; ret; 
0x000000000046ddd1: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; leave; ret; 
0x000000000042342d: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rdx + 0xe0], rcx; leave; ret; 
0x000000000046de69: mov ebx, dword ptr [rbp - 8]; mov qword ptr [rdx], rax; leave; ret; 
0x00000000004571b6: mov ebx, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x0000000000419b8e: mov ebx, dword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000046203f: mov ebx, dword ptr [rbp - 8]; pop rax; pop rdx; leave; ret; 
0x000000000040b595: mov ebx, dword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x0000000000458df0: mov ebx, eax; neg ebx; jmp 0x58d83; nop word ptr cs:[rax + rax]; mov eax, 0xba; syscall; 
0x0000000000458ea1: mov ebx, edi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000455d22: mov ebx, edi; sub rsp, 8; test byte ptr [rdi], 2; jne 0x55d98; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000401d16: mov ecx, 0x3ec80148; jmp rax; 
0x000000000041ceb9: mov ecx, 0x3ecf0148; jmp rdi; 
0x000000000042bd46: mov ecx, 0x83d72948; jmp qword ptr [rax + 0x73]; 
0x000000000042a3eb: mov ecx, 0x8d480000; add eax, 0xb10b; cmovne rax, rdx; ret; 
0x000000000042a3ae: mov ecx, 0xd1890000; not ecx; and ecx, 0x128; je 0x2a3c0; ret; 
0x0000000000470c4b: mov ecx, 0xf30000a3; divps xmm0, xmmword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x000000000040b983: mov ecx, 0xf7000055; ret 0; 
0x0000000000459b13: mov ecx, 0xf7000059; ret 0; 
0x0000000000411b25: mov ecx, 0xffffffd8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000449754: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004100a2: mov ecx, 0xffffffff; bzhi ecx, ecx, edx; kmovd k1, ecx; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000040fe23: mov ecx, 0xffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000045897b: mov ecx, 0xffffffff; mov edx, ebx; mov eax, 0xca; syscall; 
0x000000000045891a: mov ecx, 0xffffffff; xor r8d, r8d; mov edx, ebx; mov eax, 0xca; syscall; 
0x000000000045b0b0: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c82: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b39c: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000459f3a: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000045a692: mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; xtest; jne 0x5a6a1; vzeroupper; ret; 
0x0000000000455766: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000454f9e: mov ecx, dword ptr [rax + 0xa0]; mov qword ptr [rcx + 0xe0], rdx; ret; 
0x0000000000473e00: mov ecx, dword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x0000000000437921: mov ecx, dword ptr [rbp - 0x1a0]; mov rdx, qword ptr [rbp - 0x198]; push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x00000000004416ac: mov ecx, dword ptr [rbp - 0x50]; mov qword ptr [rbp - 0x70], rcx; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000445907: mov ecx, dword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x00000000004428df: mov ecx, dword ptr [rbp - 0x68]; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x0000000000446d4f: mov ecx, dword ptr [rbp - 0x70]; mov qword ptr [rbp - 0xa0], rcx; mov rsi, qword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000444236: mov ecx, dword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x70], rcx; mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004434f1: mov ecx, dword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000043d764: mov ecx, dword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x000000000045b0b1: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c83: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b39d: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000459f3b: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000045a693: mov ecx, dword ptr [rbx + rcx*4]; sub eax, ecx; xtest; jne 0x5a6a1; vzeroupper; ret; 
0x000000000045878b: mov ecx, dword ptr [rbx]; jmp 0x58757; nop; xor eax, eax; ret; 
0x0000000000474f25: mov ecx, dword ptr [rcx + 8]; mov qword ptr [rsi + rax], rcx; add rax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x000000000040ca33: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000040ca20: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000040ca0e: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000428072: mov ecx, dword ptr [rdi + 0x30]; mov qword ptr [rdi + 0x28], rcx; jmp 0x2805a; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000473fbf: mov ecx, dword ptr [rdi + rsi*8]; cmp al, 8; jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x0000000000428468: mov ecx, dword ptr [rdi]; mov eax, ecx; and eax, 0xc; cmp eax, 4; je 0x28451; ret; 
0x0000000000404ec7: mov ecx, dword ptr [rdi]; test rcx, rcx; je 0x4ea0; call rcx; 
0x00000000004583de: mov ecx, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], ecx; cmove eax, ecx; ret; 
0x000000000045d7d3: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042d6f4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000042d714: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045fd34: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000045fd24: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000042d775: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d795: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdb5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd95: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d6b5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcf5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042d7d8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045fdf8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000042d7f8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045fe18: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d7b9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fdd9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042d735: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000045fd55: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000042d6d4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000045fd14: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000042d755: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000045fd75: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000042c9b0: mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f0b0: mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042ce80: mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f550: mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000040ba95: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000042c9d1: mov ecx, dword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm0; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f0d2: mov ecx, dword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm0; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000042ce65: mov ecx, dword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm16; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f536: mov ecx, dword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm16; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000042c6cc: mov ecx, dword ptr [rsi + rdx - 8]; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000040bac1: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042d570: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000045fc20: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000042d5c1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000045fc61: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000042d580: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000045fc30: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000042d5d1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000045fc71: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000042d5a0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000045fc40: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000042d5f1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000045fc81: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000042d611: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000045fc91: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000040e7c0: mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000040d0f7: mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x000000000042d631: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fca1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000042d651: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000045fcb1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000042d671: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000045fcc1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000040e7af: mov ecx, dword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000042d551: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000045fc01: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000040ca1f: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000475199: mov ecx, eax; call rax; 
0x00000000004167e3: mov ecx, eax; cmp rcx, rdx; jne 0x167c0; mov eax, dword ptr [rcx]; ret; 
0x0000000000460013: mov ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x60000; ret; 
0x00000000004742c9: mov ecx, ebp; mov esi, 1; mov edi, 1; call rax; 
0x000000000047506d: mov ecx, ebx; call rax; 
0x0000000000473c49: mov ecx, ebx; mov edi, 1; call rax; 
0x000000000045ffa6: mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000437003: mov ecx, ecx; lea rdx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x0000000000418a3d: mov ecx, edi; jmp 0x189bc; nop dword ptr [rax]; ret; 
0x000000000041018e: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040f80e: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040ff13: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x000000000040fffa: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000429f81: mov ecx, edx; not ecx; and ecx, 0x120; je 0x29f90; ret; 
0x0000000000467c61: mov ecx, edx; not ecx; and ecx, 0x120; je 0x67c70; ret; 
0x000000000042a3b1: mov ecx, edx; not ecx; and ecx, 0x128; je 0x2a3c0; ret; 
0x000000000042a421: mov ecx, edx; not ecx; and ecx, 0x128; je 0x2a430; ret; 
0x000000000040b8c1: mov ecx, edx; not ecx; and ecx, 0x128; je 0xb8d0; ret; 
0x000000000040b931: mov ecx, edx; not ecx; and ecx, 0x128; je 0xb940; ret; 
0x000000000040e3d6: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000473e27: mov ecx, esi; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000473df3: mov ecx, esi; mov esi, 0xa; mov edi, 1; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x000000000046c76f: mov ecx, esi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6c760; mov eax, 1; ret; 
0x000000000047506c: mov ecx, r11d; call rax; 
0x0000000000475198: mov ecx, r8d; call rax; 
0x000000000047a01a: mov edi, 0x2d6b005; add byte ptr [rcx], bh; ret 0x4e0f; 
0x00000000004016f9: mov edi, 0x401988; call 0x3dc0; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000041e7ef: mov edi, 0x440f48c0; ret 0x8de9; 
0x00000000004017b0: mov edi, 0x496b20; call 0x774b0; mov byte ptr [rip + 0xa62fe], 1; pop rbp; ret; 
0x0000000000401739: mov edi, 0x4a7aa8; jmp rax; 
0x000000000040177b: mov edi, 0x4a7aa8; jmp rax; nop word ptr [rax + rax]; ret; 
0x0000000000401739: mov edi, 0x4a7aa8; jmp rax; ret; 
0x0000000000403ef8: mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x0000000000419992: mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000419b47: mov edi, 0x5003; mov eax, edx; syscall; 
0x0000000000419aee: mov edi, 0x5005; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000411e44: mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x0000000000429073: mov edi, 0x7e65705; add byte ptr [rcx], bh; ret 0x4e0f; 
0x0000000000404328: mov edi, 0x7f; mov eax, 0xe7; syscall; 
0x000000000046a949: mov edi, 0xf158d48; ret 3; 
0x0000000000412463: mov edi, 0xf50d8d48; or dword ptr [rax], r8d; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000451685: mov edi, 0xf6000003; ret 0xf10; 
0x0000000000438547: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000416da3: mov edi, 0xffffff9c; mov eax, 0x10b; lea rsi, [rip + 0x64cfc]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x00000000004113eb: mov edi, 0xffffff9c; syscall; 
0x0000000000473c4b: mov edi, 1; call rax; 
0x0000000000474ad0: mov edi, 1; jmp rax; 
0x0000000000474ad0: mov edi, 1; jmp rax; nop word ptr [rax + rax]; ret; 
0x000000000040115d: mov edi, 1; mov eax, 0xe; syscall; 
0x0000000000473dfa: mov edi, 1; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x0000000000458d9d: mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000404345: mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404315: mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x0000000000404c27: mov edi, 2; mov eax, r9d; syscall; 
0x0000000000439ad1: mov edi, dword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000425d84: mov edi, dword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000458977: mov edi, dword ptr [rbp - 0x20]; mov r9d, 0xffffffff; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000474ca9: mov edi, dword ptr [rbp - 0x38]; mov dword ptr [rbp - 0x4c], r9d; mov rdx, qword ptr [r10]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x0000000000474c63: mov edi, dword ptr [rbp - 0x38]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x00000000004788d7: mov edi, dword ptr [rbp - 0x38]; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; add rdi, r12; syscall; 
0x0000000000438dff: mov edi, dword ptr [rbp - 0x48]; mov rax, qword ptr [rbp - 0x50]; mov dword ptr [rbp - 0x3c], r8d; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x000000000040148a: mov edi, dword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x00000000004386cd: mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000401e9f: mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000475058: mov edi, dword ptr [rbp - 0x850]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x00000000004416bb: mov edi, dword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000440acc: mov edi, dword ptr [rbp - 0x90]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000417027: mov edi, dword ptr [rbp - 0x958]; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000445123: mov edi, dword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000442356: mov edi, dword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004434e3: mov edi, dword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000441cb5: mov edi, dword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x00000000004410bd: mov edi, dword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004428d1: mov edi, dword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0x98], rcx; mov r9, qword ptr [rbp - 0x68]; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x00000000004458f9: mov edi, dword ptr [rbp - 0xb8]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000446d61: mov edi, dword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000437c9f: mov edi, dword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x0000000000474364: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x0000000000438793: mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000474518: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004063dc: mov edi, dword ptr [rbp - 8]; mov rsi, qword ptr [rbp - 0x10]; test rax, rax; je 0x63b4; leave; ret; 
0x0000000000411323: mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x000000000044daaa: mov edi, dword ptr [rbx + 0x10]; call 0x4da60; jmp 0x4da86; nop dword ptr [rax]; ret; 
0x000000000044eae8: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000458ea8: mov edi, dword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000044f171: mov edi, dword ptr [rsp]; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x0000000000419533: mov edi, eax; call 0x2a2d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000404997: mov edi, eax; cmp rdx, rcx; jae 0x4980; mov rax, rsi; ret; 
0x0000000000429322: mov edi, eax; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000042957e: mov edi, eax; mov eax, 0xca; syscall; 
0x0000000000458e13: mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000458dde: mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x000000000040479b: mov edi, eax; mov esi, r13d; call rax; 
0x0000000000411333: mov edi, eax; mov qword ptr [rbp - 8], rax; call 0x28410; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000459331: mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000454243: mov edi, ebp; call 0x66ae0; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004541a4: mov edi, ebp; call 0x66ae0; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000426270: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x00000000004046ec: mov edi, ebp; call rax; 
0x00000000004541b6: mov edi, ebp; call rbx; 
0x0000000000439890: mov edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x000000000045424b: mov edi, ebp; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004096b1: mov edi, ebx; call 0x4de0; jmp 0x968a; nop word ptr [rax + rax]; ret; 
0x000000000040b58d: mov edi, ebx; call 0x5510; mov rbx, qword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x00000000004561f4: mov edi, ebx; call 0x55ed0; jmp 0x56121; mov eax, 0xffffffff; ret; 
0x0000000000422a9e: mov edi, ebx; call qword ptr [rax + 0x38]; 
0x000000000042236a: mov edi, ebx; call rax; 
0x0000000000447eaa: mov edi, ebx; call rdx; 
0x0000000000428af9: mov edi, ebx; mov eax, 0xca; syscall; 
0x0000000000411b63: mov edi, ebx; mov eax, 9; syscall; 
0x0000000000428912: mov edi, ebx; mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x0000000000428d2d: mov edi, ebx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000455b39: mov edi, ebx; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000423ed2: mov edi, ebx; pop rbx; pop r12; pop rbp; jmp rax; 
0x00000000004186f5: mov edi, ebx; syscall; 
0x0000000000459715: mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418a0a: mov edi, ecx; cmp r8, r10; jae 0x18982; ret; 
0x0000000000478a8d: mov edi, ecx; mov eax, 0xca; syscall; 
0x00000000004788a7: mov edi, ecx; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478998: mov edi, ecx; or eax, 2; mov edx, eax; mov eax, r12d; syscall; 
0x0000000000478e7b: mov edi, ecx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000455bbc: mov edi, edi; call qword ptr [rbx + 0x18]; 
0x0000000000457819: mov edi, edi; call rax; 
0x0000000000455cdc: mov edi, edi; mov esi, edx; call qword ptr [rbx + 0x18]; 
0x0000000000439b27: mov edi, edx; call rsi; 
0x0000000000404a66: mov edi, edx; cmp rax, 9; ja 0x4a40; mov rax, rsi; ret; 
0x000000000042bd8f: mov edi, edx; inc ecx; jne 0x2bcc0; vzeroupper; ret; 
0x0000000000412749: mov edi, edx; jmp 0x126af; leave; xor eax, eax; ret; 
0x00000000004671ad: mov edi, edx; jmp rax; 
0x00000000004671ad: mov edi, edx; jmp rax; nop dword ptr [rax]; ret; 
0x0000000000456ab5: mov edi, esp; call qword ptr [rax + 0x18]; 
0x000000000046f9e3: mov edi, esp; call qword ptr [rax]; 
0x000000000046fb2b: mov edi, esp; call qword ptr [rcx]; 
0x000000000044ef8e: mov edi, esp; call rax; 
0x000000000047a2f6: mov edi, esp; mov esi, r9d; mov eax, 0xca; syscall; 
0x000000000047a4aa: mov edi, esp; or eax, 2; mov edx, eax; mov eax, ebx; syscall; 
0x00000000004593ff: mov edi, esp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000046f9e2: mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb2a: mov edi, r12d; call qword ptr [rcx]; 
0x000000000046f99b: mov edi, r12d; call rax; 
0x00000000004046eb: mov edi, r13d; call rax; 
0x0000000000411332: mov edi, r8d; mov qword ptr [rbp - 8], rax; call 0x28410; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000042df8a: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000419bcc: mov edx, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x0000000000404340: mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404310: mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x000000000046e4fd: mov edx, 0x3ed00148; jmp rax; 
0x000000000046e4fd: mov edx, 0x3ed00148; jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x0000000000401683: mov edx, 0x5d01000a; ret; 
0x000000000042ded2: mov edx, 0x62fffffe; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000046931a: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000041b42b: mov edx, 0x6d726570; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4bb: mov edx, 0x6d726570; imul esi, dword ptr [rbx + 0x73], 0x78b4869; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x00000000004788dd: mov edx, 0x7fffffff; mov eax, 0xca; add rdi, r12; syscall; 
0x0000000000478a27: mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000000459384: mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000458edd: mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000045932b: mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045970f: mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000478af1: mov edx, 0x7fffffff; syscall; 
0x00000000004786b8: mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x0000000000466845: mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x0000000000473879: mov edx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x000000000041b8d9: mov edx, 0xffffffd8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000411271: mov edx, 0xffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041128e: mov edx, 0xffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000411349: mov edx, 0xffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000041b7f3: mov edx, 0xffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044975f: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044090b: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000041f980: mov edx, 1; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000458842: mov edx, 1; lock cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x0000000000404e0b: mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000404e0b: mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000478cbc: mov edx, 1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000404de7: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000404de7: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000429573: mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000047a272: mov edx, 1; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004791cd: mov edx, 1; mov rdi, r11; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047a2f0: mov edx, 1; mov rdi, r12; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004593f9: mov edx, 1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004788a1: mov edx, 1; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478e75: mov edx, 1; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000478a87: mov edx, 1; mov rdi, rcx; mov eax, 0xca; syscall; 
0x0000000000404da0: mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000404d3a: mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000043e1ed: mov edx, 2; mov esi, 0x80; mov eax, ebx; syscall; 
0x000000000041197e: mov edx, 2; pop rbp; test eax, eax; cmove eax, edx; ret; 
0x000000000044ec7c: mov edx, 8; mov eax, 0xd; syscall; 
0x000000000042975c: mov edx, 8; mov eax, 0xe; syscall; 
0x0000000000458d48: mov edx, 8; mov rdx, r14; lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x00000000004118f2: mov edx, dword ptr [0x28]; mov qword ptr [rbp - 8], rdx; lea rdx, [rbp - 0x1010]; syscall; 
0x000000000046d57f: mov edx, dword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d570; ret; 
0x000000000046d61b: mov edx, dword ptr [rax + 8]; cmp rcx, rdx; jae 0x6d587; test rax, rax; jne 0x6d60a; ret; 
0x0000000000474de1: mov edx, dword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000470ee0: mov edx, dword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; leave; ret; 
0x000000000046d60b: mov edx, dword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000044914f: mov edx, dword ptr [rbp + rsi*8 - 0xa0]; mov qword ptr [rbx - 0x80], rdx; mov rdx, qword ptr [r15 + r14*8]; test rdx, rdx; je 0x49165; call rdx; 
0x0000000000438789: mov edx, dword ptr [rbp - 0x18]; mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000411319: mov edx, dword ptr [rbp - 0x18]; mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000437928: mov edx, dword ptr [rbp - 0x198]; push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000455cd8: mov edx, dword ptr [rbp - 0x38]; mov rdi, r15; mov esi, edx; call qword ptr [rbx + 0x18]; 
0x00000000004113fb: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11443; leave; ret; 
0x0000000000411d2f: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11d95; leave; ret; 
0x000000000043866f: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x38723; leave; ret; 
0x000000000043883b: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x3888b; leave; ret; 
0x0000000000461db2: mov edx, dword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x61dfb; leave; ret; 
0x000000000044f175: mov edx, dword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x000000000044ef83: mov edx, dword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; mov rsi, rbx; mov rdi, r12; call rax; 
0x000000000043db4d: mov edx, dword ptr [rbp - 0xa0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x000000000043d75d: mov edx, dword ptr [rbp - 0xb0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x000000000043d2cc: mov edx, dword ptr [rbp - 0xb4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test edx, edx; jne 0x3d2df; call rax; 
0x0000000000411917: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x1193d; leave; ret; 
0x000000000042977a: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x297fa; leave; ret; 
0x00000000004388d0: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x3891b; leave; ret; 
0x0000000000462090: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x620bc; leave; ret; 
0x00000000004622e2: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6230b; leave; ret; 
0x0000000000462381: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6239c; leave; ret; 
0x0000000000462411: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6242c; leave; ret; 
0x00000000004624ed: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x625b7; leave; ret; 
0x0000000000462608: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6263c; leave; ret; 
0x0000000000467c03: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x67c40; leave; ret; 
0x0000000000469366: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x69376; leave; ret; 
0x000000000046df09: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6df19; leave; ret; 
0x000000000046dfeb: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e05b: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e06b; leave; ret; 
0x000000000046e153: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1b7: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e600: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e619; leave; ret; 
0x00000000004705cb: mov edx, dword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x705e5; leave; ret; 
0x00000000004742c2: mov edx, dword ptr [rbp]; mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x00000000004244e7: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x0000000000473c43: mov edx, dword ptr [rbx]; mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x00000000004182fa: mov edx, dword ptr [rcx + rdx + 0x18]; test rdx, rdx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x000000000045efef: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000045da1d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000412470: mov edx, dword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000418a3a: mov edx, dword ptr [rcx]; mov rcx, rdi; jmp 0x189bc; nop dword ptr [rax]; ret; 
0x0000000000428099: mov edx, dword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000405c34: mov edx, dword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x000000000045780b: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xe8], rcx; mov rdi, r15; call rax; 
0x000000000046de48: mov edx, dword ptr [rdi + 0x490]; mov qword ptr [rax], rdx; leave; ret; 
0x00000000004671a6: mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000004671a6: mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; nop dword ptr [rax]; ret; 
0x000000000044915b: mov edx, dword ptr [rdi + rsi*8]; test rdx, rdx; je 0x49165; call rdx; 
0x000000000046c812: mov edx, dword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000425ba5: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x25ba0; ret; 
0x0000000000455725: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x55720; ret; 
0x0000000000474df1: mov edx, dword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x0000000000470f45: mov edx, dword ptr [rdx]; mov qword ptr [r9], rdx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474cb1: mov edx, dword ptr [rdx]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x0000000000417f7e: mov edx, dword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x0000000000401e92: mov edx, dword ptr [rip + 0xaa9a8]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000045fdf5: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000045fe15: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d5a2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000045fc42: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000042d583: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000045fc33: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000042d634: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fca4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000042d654: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000045fcb4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000042d5f3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000045fc83: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000042d674: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000045fcc4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000042d613: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000045fc93: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000042d5d4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000045fc74: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000042d560: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000045fc10: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000042d5b1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000045fc51: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000473e21: mov edx, dword ptr [rsi]; mov r8, r15; mov rcx, r14; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000474c60: mov edx, dword ptr [rsi]; mov rdi, qword ptr [rbp - 0x38]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x000000000042d541: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000045fbf1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000419bac: mov edx, eax; lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000047a4af: mov edx, eax; mov eax, ebx; syscall; 
0x000000000047899d: mov edx, eax; mov eax, r12d; syscall; 
0x0000000000478c36: mov edx, eax; mov eax, r13d; syscall; 
0x000000000043e69a: mov edx, eax; test rax, rax; je 0x3e6aa; mov rdi, rbx; call rax; 
0x0000000000458789: mov edx, ebp; mov ecx, dword ptr [rbx]; jmp 0x58757; nop; xor eax, eax; ret; 
0x0000000000458ddc: mov edx, ebp; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000458e0f: mov edx, ebp; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000422a98: mov edx, ebp; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000458922: mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000438542: mov edx, ebx; mov rsi, r12; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004385b1: mov edx, ebx; mov rsi, r12; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000416dbc: mov edx, ebx; syscall; 
0x0000000000411e40: mov edx, ebx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x0000000000461ce5: mov edx, ecx; mov eax, 0x106; syscall; 
0x0000000000438935: mov edx, ecx; mov eax, 0x11; syscall; 
0x0000000000438935: mov edx, ecx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x38950; ret; 
0x0000000000411da5: mov edx, ecx; mov eax, 0x9d; syscall; 
0x0000000000411da5: mov edx, ecx; mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11db7; ret; 
0x0000000000428454: mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000418a04: mov edx, ecx; mov rsi, rdx; mov rdi, r9; cmp r8, r10; jae 0x18982; ret; 
0x0000000000411d15: mov edx, ecx; xor r8d, r8d; test cl, 6; jne 0x11d40; mov eax, 0x19; syscall; 
0x0000000000404994: mov edx, edi; mov rdi, rax; cmp rdx, rcx; jae 0x4980; mov rax, rsi; ret; 
0x0000000000410001: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040f811: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040ff16: mov edx, edi; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x000000000046f993: mov edx, esi; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000458d4e: mov edx, esi; lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x00000000004113e1: mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000046f9dd: mov edx, esi; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb25: mov edx, esi; mov rsi, r13; mov edi, r12d; call qword ptr [rcx]; 
0x00000000004389a5: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004541b3: mov edx, esp; mov rdi, r13; call rbx; 
0x0000000000411b60: mov edx, esp; mov rdi, rbx; mov eax, 9; syscall; 
0x0000000000411e3d: mov edx, esp; mov rdx, rbx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x00000000004377f6: mov edx, esp; push 0; call rbx; 
0x0000000000411bb9: mov edx, esp; xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x0000000000458ddb: mov edx, r13d; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000458e0e: mov edx, r13d; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000462d8e: mov es, edi; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000438854: mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000450021: mov esi, 0x1b812; add byte ptr [rax], al; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x000000000042043e: mov esi, 0x4800081c; mov eax, dword ptr [rax + rcx*8]; jmp rax; 
0x0000000000461e35: mov esi, 0x5401; syscall; 
0x00000000004109c2: mov esi, 0x62fffffe; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000046025e: mov esi, 0x80000000; in eax, 8; jne 0x60225; ret; 
0x0000000000404d3f: mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000043e1f2: mov esi, 0x80; mov eax, ebx; syscall; 
0x0000000000428456: mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000458f82: mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000404dec: mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000458ee2: mov esi, 0x81; mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x58f00; ret; 
0x0000000000404dec: mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000043fd22: mov esi, 0x8348014b; ret; 
0x000000000041bf22: mov esi, 0x83480153; ret; 
0x000000000044ddd1: mov esi, 0x83480234; ret; 
0x0000000000473e29: mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000473df5: mov esi, 0xa; mov edi, 1; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x0000000000468301: mov esi, 0xc9bc0ff3; cmp al, cl; jbe 0x682c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468581: mov esi, 0xc9bc0ff3; cmp al, cl; jbe 0x68540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000419ba0: mov esi, 0xc; xor edi, edi; mov eax, esi; syscall; 
0x000000000041da85: mov esi, 0xf085c7c0; idiv bh; dec dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004205fb: mov esi, 0xfffb4885; jmp qword ptr [rax]; 
0x00000000004647d8: mov esi, 0xfffb52e9; jmp qword ptr [rsi - 0x70]; 
0x0000000000464788: mov esi, 0xfffba2e9; jmp qword ptr [rsi - 0x70]; 
0x0000000000455e68: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000419b41: mov esi, 0xffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x0000000000456aaf: mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000403ef3: mov esi, 1; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x000000000041998d: mov esi, 1; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x00000000004742cb: mov esi, 1; mov edi, 1; call rax; 
0x0000000000429578: mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000422364: mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000428d2f: mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000474360: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474514: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000043878d: mov esi, dword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x000000000041131d: mov esi, dword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x00000000004063e0: mov esi, dword ptr [rbp - 0x10]; test rax, rax; je 0x63b4; leave; ret; 
0x0000000000404c21: mov esi, dword ptr [rbp - 0x110]; mov edi, 2; mov eax, r9d; syscall; 
0x000000000045424e: mov esi, dword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004541ac: mov esi, dword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000437931: mov esi, dword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000425d80: mov esi, dword ptr [rbp - 0x1c]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426372: mov esi, dword ptr [rbp - 0x20]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x00000000004386ca: mov esi, dword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000401e99: mov esi, dword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000445118: mov esi, dword ptr [rbp - 0x90]; mov qword ptr [rbp - 0x70], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004465c4: mov esi, dword ptr [rbp - 0x90]; mov qword ptr [rbp - 0x70], r9; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000044234b: mov esi, dword ptr [rbp - 0x90]; mov qword ptr [rbp - 0x78], r9; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000043dc1d: mov esi, dword ptr [rbp - 0x90]; mov qword ptr [rbp - 0xc0], r11; mov qword ptr [rbp - 0xb0], r10; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x00000000004416b4: mov esi, dword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000447b18: mov esi, dword ptr [rbp - 0x90]; push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000440ac5: mov esi, dword ptr [rbp - 0x98]; mov rdi, qword ptr [rbp - 0x90]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000044423e: mov esi, dword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000441ca7: mov esi, dword ptr [rbp - 0xa8]; mov qword ptr [rbp - 0x88], rcx; mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x00000000004428e3: mov esi, dword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x00000000004434dc: mov esi, dword ptr [rbp - 0xa8]; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004410af: mov esi, dword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000043ca3e: mov esi, dword ptr [rbp - 0xb4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test esi, esi; jne 0x3ca51; call rax; 
0x00000000004458f2: mov esi, dword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000446d5a: mov esi, dword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000438e0f: mov esi, dword ptr [rbx]; call rax; 
0x0000000000474c67: mov esi, dword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x000000000044f16e: mov esi, dword ptr [rbx]; mov rdi, qword ptr [r12]; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x000000000044870b: mov esi, dword ptr [rip + 0x6465f]; jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000412c91: mov esi, dword ptr [rsi + 0x18]; sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x000000000040e7c2: mov esi, dword ptr [rsi + rdx - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000040e7b2: mov esi, dword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040d0f9: mov esi, dword ptr [rsi + rdx]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x000000000040ca30: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000040ba99: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000040ca1e: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000040bac6: mov esi, dword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000040ca0b: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000470394: mov esi, eax; jmp 0x70325; nop dword ptr [rax + rax]; call rax; 
0x0000000000429759: mov esi, eax; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000468a83: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa3: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac3: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae3: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043ee1f: mov esi, eax; test rax, rax; je 0x3ee37; mov rdi, rbx; call rax; 
0x0000000000404d9b: mov esi, eax; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000040479e: mov esi, ebp; call rax; 
0x000000000046f9e0: mov esi, ebp; mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb28: mov esi, ebp; mov edi, r12d; call qword ptr [rcx]; 
0x000000000046f999: mov esi, ebp; mov edi, r12d; call rax; 
0x00000000004788a9: mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000458de0: mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000419bd2: mov esi, ebx; mov eax, 9; syscall; 
0x0000000000458e11: mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x00000000004786b6: mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x000000000044ef8b: mov esi, ebx; mov rdi, r12; call rax; 
0x000000000047a317: mov esi, ebx; shl rsi, 2; jmp 0x7a26a; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000045937f: mov esi, ebx; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000042763d: mov esi, ecx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000047a278: mov esi, ecx; mov eax, 0xca; syscall; 
0x000000000041f9e2: mov esi, ecx; sub eax, 0x20; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x00000000004389a9: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004113e9: mov esi, edi; mov edi, 0xffffff9c; syscall; 
0x0000000000422a9b: mov esi, edi; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000474ac9: mov esi, edi; test rax, rax; je 0x74ae0; mov edi, 1; jmp rax; 
0x0000000000455cde: mov esi, edx; call qword ptr [rbx + 0x18]; 
0x0000000000478aef: mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x000000000041f379: mov esi, edx; mov r11d, 1; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000455bb9: mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000418a07: mov esi, edx; mov rdi, r9; cmp r8, r10; jae 0x18982; ret; 
0x0000000000458d9b: mov esi, esi; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000438545: mov esi, esp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004385b4: mov esi, esp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040479d: mov esi, r13d; call rax; 
0x0000000000404d9a: mov esi, r8d; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000047a277: mov esi, r9d; mov eax, 0xca; syscall; 
0x0000000000435592: mov esp, 0x21e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000043581d: mov esp, 0x295e9c0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000467d22: mov esp, 0x2e2c1c0; vzeroupper; cmp edx, eax; jle 0x67d3f; add rax, rdi; ret; 
0x0000000000460ff2: mov esp, 0x2e8c1c0; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000046105d: mov esp, 0x2e8c1c0; jmp 0x6136c; xor eax, eax; ret; 
0x000000000046034f: mov esp, 0x2e8c1c0; vzeroupper; ret; 
0x00000000004606fc: mov esp, 0x2e8c1c0; xtest; jne 0x6070a; vzeroupper; ret; 
0x000000000042dacb: mov esp, 0x40c931c0; cmp dh, byte ptr [rdx + rax]; jne 0x2da99; add rax, rdx; vzeroupper; ret; 
0x0000000000435582: mov esp, 0x41e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000042baf1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042bb21: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042bb11: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042d0d7: mov esp, 0x48a4f3c9; lea eax, [rdi - 1]; ret; 
0x000000000042cb95: mov esp, 0x48a4f3c9; lea eax, [rdi - 1]; vzeroupper; ret; 
0x00000000004369d8: mov esp, 0x48c0bd0f; add eax, edi; ret; 
0x0000000000435572: mov esp, 0x61e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000042dd91: mov esp, 0x743a40c9; mov rbp, cr6; out dx, eax; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042b5c5: mov esp, 0x76c239c0; cmc; add rax, rdi; ret; 
0x00000000004684df: mov esp, 0x76c239c0; int1; lea rax, [rdi + rax*4]; ret; 
0x0000000000467e50: mov esp, 0x76c239c0; pop rdi; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042af7d: mov esp, 0x76c239c0; push rdx; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000468304: mov esp, 0x76c838c9; mov dh, 0x48; lea eax, [rdi + rcx*4 + 0x40]; ret; 
0x000000000042ae62: mov esp, 0x77f8c5c0; cmp edx, eax; jle 0x2ae7d; add rax, rdi; ret; 
0x0000000000410c6b: mov esp, 0x77f8c5c0; ret; 
0x0000000000422be7: mov esp, 0x833; je 0x22bef; ret; 
0x00000000004603a2: mov esp, 0x83d729c0; mov dword ptr [rcx + 1], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000410ca2: mov esp, 0x83d729c0; mov dword ptr [rcx + 1], 0x77f8c5f8; ret; 
0x0000000000460d52: mov esp, 0x88448dc0; ffreep st(1); call 0x77fed260; ret; 
0x0000000000460d32: mov esp, 0x88448dc0; lahf; shr eax, 2; vzeroupper; ret; 
0x000000000044ec90: mov esp, 0x89000000; ret 0x854d; 
0x00000000004783a9: mov esp, 0x8948ffff; ret; 
0x000000000042adff: mov esp, 0x8d480000; add eax, 0xfffffc87; cmovne rax, rdx; ret; 
0x0000000000435b75: mov esp, 0x8dc229d2; add al, 0x16; cmovae eax, esi; ret; 
0x0000000000435be4: mov esp, 0x8dc629d2; add al, 0x16; ret; 
0x000000000042e340: mov esp, 0xa8000000; jne 0x2e410; lea rax, [rdi + 7]; ret; 
0x000000000042df88: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000468a81: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa1: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac1: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae1: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000460871: mov esp, 0xc1cf29c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000460771: mov esp, 0xc1cf29c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000042b8ca: mov esp, 0xc22948c0; jbe 0x2bb70; add rax, rdi; add rax, rcx; ret; 
0x000000000042bb31: mov esp, 0xc22948c0; jbe 0x2bb70; add rax, rdi; ret; 
0x000000000042bb41: mov esp, 0xc22948c0; jbe 0x2bb70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042bb51: mov esp, 0xc22948c0; jbe 0x2bb70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042bb61: mov esp, 0xc22948c0; jbe 0x2bb70; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000435d03: mov esp, 0xc23948d1; ja 0x35b40; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004615c9: mov esp, 0xc23948d1; ja 0x61403; mov eax, edx; cmp rsi, rdx; cmovb eax, esi; ret; 
0x00000000004357c2: mov esp, 0xc63948c0; cmovb eax, esi; vzeroupper; ret; 
0x000000000042da71: mov esp, 0xc78348c0; add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x00000000004104b1: mov esp, 0xc78348c0; add rax, rdi; vzeroupper; ret; 
0x00000000004104a1: mov esp, 0xc78348c0; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000042d928: mov esp, 0xc78348c0; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x00000000004105d1: mov esp, 0xc78348c0; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000042b131: mov esp, 0xc7ff48c0; add rax, rdi; jmp 0x2b0fc; xor eax, eax; ret; 
0x0000000000468011: mov esp, 0xc7ff48c0; add rax, rdi; jmp 0x67fdc; xor eax, eax; ret; 
0x0000000000410491: mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000042d901: mov esp, 0xc7ff48c0; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x0000000000432ad6: mov esp, 0xc90144c9; cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x000000000044409e: mov esp, 0xcae80003; add bh, ah; jmp qword ptr [rdi - 0x18]; 
0x0000000000411051: mov esp, 0xcf2948c0; add rax, rdi; ret; 
0x0000000000411061: mov esp, 0xcf2948c0; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000411042: mov esp, 0xcf2948c0; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000460852: mov esp, 0xcf2948c0; sar rdi, 2; add rax, rdi; ret; 
0x0000000000460842: mov esp, 0xcf2948c0; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460861: mov esp, 0xcf2948c0; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000042c755: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c60e: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042be06: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000041061b: mov esp, 0xd00148c0; vzeroupper; ret; 
0x0000000000411233: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000460c83: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000004344e2: mov esp, 0xd32949d2; jbe 0x344f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004354c2: mov esp, 0xd32949d2; jbe 0x354d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000410f1c: mov esp, 0xd6010fc0; jne 0x10f27; vzeroupper; ret; 
0x0000000000460f72: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000435752: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000460f52: mov esp, 0xd72948c0; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000435742: mov esp, 0xd72948c0; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000403a75: mov esp, 0xe8000000; ret 0xffe0; 
0x000000000042aff2: mov esp, 0xef8348c0; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000410d72: mov esp, 0xef8348c0; jg 0x10dc1; add eax, edi; vzeroupper; ret; 
0x00000000004356b2: mov esp, 0xef8348c0; jg 0x35701; add eax, edi; vzeroupper; ret; 
0x00000000004604a2: mov esp, 0xef8348c0; jg 0x604f1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000460ea2: mov esp, 0xef8348c0; jg 0x60ef1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x00000000004604c2: mov esp, 0xef8348c0; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105e2: mov esp, 0xef8348c0; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042b3ad: mov esp, 0xf23948f0; jbe 0x2b3bd; test eax, eax; je 0x2b3c0; lea rax, [rdi + rsi]; ret; 
0x000000000042b62d: mov esp, 0xf23948f0; jbe 0x2b63d; test eax, eax; je 0x2b640; lea rax, [rdi + rsi]; ret; 
0x00000000004326dc: mov esp, 0xf44b60f; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042df31: mov esp, 0xf80148c0; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x0000000000410879: mov esp, 0xf80148c0; ret; 
0x000000000041047d: mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000041067d: mov esp, 0xf80148c0; xtest; jne 0x1068b; vzeroupper; ret; 
0x000000000042b0f7: mov esp, 0xf80148c0; xtest; jne 0x2b105; vzeroupper; ret; 
0x0000000000467fd7: mov esp, 0xf80148c0; xtest; jne 0x67fe5; vzeroupper; ret; 
0x0000000000435b30: mov esp, 0xf88348c1; and byte ptr [rdi + 8], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004613f0: mov esp, 0xf88348c1; or byte ptr [rdi + 0xb], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000045f276: mov esp, 0xf88948c9; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x000000000041b9c6: mov esp, 0xfe56d4e8; dec dword ptr [rax - 0x77]; ret; 
0x0000000000460362: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x0000000000410c82: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x0000000000411cba: mov esp, 0xffffffff; pop rbx; mov rax, r12; pop r12; pop rbp; ret; 
0x0000000000474358: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000479ec6: mov esp, dword ptr [rbp - 8]; leave; ret; 
0x000000000044eaee: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x0000000000458974: mov esp, eax; mov rdi, qword ptr [rbp - 0x20]; mov r9d, 0xffffffff; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000474520: mov esp, ecx; pop rcx; jmp rcx; 
0x00000000004292ca: mov qword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000428604: mov qword ptr [0x2f8], rdi; ret; 
0x00000000004186c1: mov qword ptr [0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044ffaa: mov qword ptr [r10 + 8], rcx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x0000000000438cb9: mov qword ptr [r10], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000427522: mov qword ptr [r12], rax; mov qword ptr [rbx + 0x60], r12; pop rbx; pop r12; pop rbp; ret; 
0x0000000000475434: mov qword ptr [r12], rcx; mov qword ptr [rbx], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000448cb6: mov qword ptr [r15 + r12*8], rdx; mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48cc5; call rax; 
0x00000000004667ba: mov qword ptr [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x0000000000474dd0: mov qword ptr [r8], rdx; ret; 
0x000000000040ca14: mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000470ee6: mov qword ptr [r9], rdx; leave; ret; 
0x0000000000470f47: mov qword ptr [r9], rdx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000463b01: mov qword ptr [rax + 0x10], 0; jmp 0x64c70; nop; ret; 
0x000000000046d611: mov qword ptr [rax + 0x10], 0; ret; 
0x00000000004565d0: mov qword ptr [rax + 0x10], rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000045576c: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004557a9: mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; ret; 
0x0000000000427638: mov qword ptr [rax + 0x18], rcx; mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000455ea3: mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004179cc: mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x0000000000417a18: mov qword ptr [rax + 0x340], rdx; ret; 
0x00000000004179d7: mov qword ptr [rax + 0x348], rdx; ret; 
0x00000000004189dc: mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000046d774: mov qword ptr [rax + 0x390], rdx; leave; ret; 
0x000000000045659b: mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x00000000004557ad: mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; ret; 
0x0000000000455770: mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004189e0: mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x000000000042767a: mov qword ptr [rax + 0x48], rcx; mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x0000000000455f07: mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x00000000004189d8: mov qword ptr [rax + 0x58], r8; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x00000000004268b0: mov qword ptr [rax + 0xa0], 0xffffffffffffffff; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004268a4: mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000454f96: mov qword ptr [rax + 0xd8], rcx; mov rcx, qword ptr [rax + 0xa0]; mov qword ptr [rcx + 0xe0], rdx; ret; 
0x00000000004267ef: mov qword ptr [rax + 8], 0; ret; 
0x0000000000455761: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000458ad6: mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x53e00], 0; ret; 
0x000000000046d60d: mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x00000000004557a5: mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; ret; 
0x000000000046691d: mov qword ptr [rax + 8], rdx; pop rbp; ret; 
0x0000000000412473: mov qword ptr [rax + 8], rdx; ret; 
0x000000000042767e: mov qword ptr [rax + 8], rsi; movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x0000000000427642: mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000040ff63: mov qword ptr [rax + rdx - 8], rcx; ret; 
0x000000000042c9d9: mov qword ptr [rax - 7], rcx; ret; 
0x00000000004267e8: mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000456004: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; pop r12; pop rbp; ret; 
0x000000000040ff60: mov qword ptr [rax], rcx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x000000000046dde8: mov qword ptr [rax], rdi; leave; ret; 
0x0000000000456094: mov qword ptr [rax], rdx; jmp 0x55f96; nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x000000000046ddd4: mov qword ptr [rax], rdx; leave; ret; 
0x0000000000455769: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000458a96: mov qword ptr [rax], rdx; mov qword ptr [rip + 0x53e44], 0; ret; 
0x000000000045659f: mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x00000000004557b1: mov qword ptr [rax], rdx; ret; 
0x0000000000456563: mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000405f25: mov qword ptr [rbp - 0x18], rax; xor eax, eax; mov byte ptr [rip + 0xa68ee], 1; mov eax, 0x13e; syscall; 
0x000000000047073c: mov qword ptr [rbp - 0x20], rax; call 0x70be0; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x0000000000438e0a: mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000447c43: mov qword ptr [rbp - 0x40], r8; lea r8, [rbp - 0x40]; push 0; push 0; call rax; 
0x0000000000438822: mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x38850; mov eax, 0x48; syscall; 
0x0000000000447b13: mov qword ptr [rbp - 0x40], rax; mov rsi, qword ptr [rbp - 0x90]; push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000474cb7: mov qword ptr [rbp - 0x48], r10; call rax; 
0x0000000000440ad6: mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000441ca2: mov qword ptr [rbp - 0x68], r9; mov rsi, qword ptr [rbp - 0xa8]; mov qword ptr [rbp - 0x88], rcx; mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000044511e: mov qword ptr [rbp - 0x70], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004465ca: mov qword ptr [rbp - 0x70], r9; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004410aa: mov qword ptr [rbp - 0x70], r9; mov rsi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004416af: mov qword ptr [rbp - 0x70], rcx; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000444239: mov qword ptr [rbp - 0x70], rcx; mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000442351: mov qword ptr [rbp - 0x78], r9; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000440ada: mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000445129: mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000043dc31: mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x0000000000441cad: mov qword ptr [rbp - 0x88], rcx; mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x000000000043db40: mov qword ptr [rbp - 0x90], r9; call 0x17820; mov r10, qword ptr [rbp - 0xa0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x000000000043d750: mov qword ptr [rbp - 0x90], r9; call 0x17820; mov r10, qword ptr [rbp - 0xb0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x00000000004434e9: mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004410b5: mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004428d7: mov qword ptr [rbp - 0x98], rcx; mov r9, qword ptr [rbp - 0x68]; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x000000000043d41b: mov qword ptr [rbp - 0xa0], r11; call rax; 
0x00000000004458ff: mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000446d52: mov qword ptr [rbp - 0xa0], rcx; mov rsi, qword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000401152: mov qword ptr [rbp - 0xb0], 0x20; mov edi, 1; mov eax, 0xe; syscall; 
0x000000000043dc2a: mov qword ptr [rbp - 0xb0], r10; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x000000000043cb7a: mov qword ptr [rbp - 0xb0], r11; call rax; 
0x0000000000417641: mov qword ptr [rbp - 0xb8], rax; call 0x16ee0; leave; ret; 
0x000000000043dc23: mov qword ptr [rbp - 0xc0], r11; mov qword ptr [rbp - 0xb0], r10; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x00000000004244ed: mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x0000000000457811: mov qword ptr [rbp - 0xe8], rcx; mov rdi, r15; call rax; 
0x0000000000437c91: mov qword ptr [rbp - 0xf0], rax; je 0x380de; mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x0000000000461e2a: mov qword ptr [rbp - 8], r8; mov r8, rsi; lea rdx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x0000000000411335: mov qword ptr [rbp - 8], rax; call 0x28410; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000004388b5: mov qword ptr [rbp - 8], rax; xor eax, eax; cmp esi, 9; je 0x388e0; mov eax, 0x48; syscall; 
0x00000000004118f9: mov qword ptr [rbp - 8], rdx; lea rdx, [rbp - 0x1010]; syscall; 
0x000000000046e1f0: mov qword ptr [rbx + 0x18], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046e324: mov qword ptr [rbx + 0x20], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000425c90: mov qword ptr [rbx + 0x20], rax; xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000427526: mov qword ptr [rbx + 0x60], r12; pop rbx; pop r12; pop rbp; ret; 
0x00000000004249fe: mov qword ptr [rbx + 0x90], rax; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x00000000004501af: mov qword ptr [rbx + 8], rdx; mov byte ptr [rax], r12b; pop rbx; pop r12; pop rbp; ret; 
0x0000000000454a0f: mov qword ptr [rbx + 8], rdx; mov dword ptr [rax], r12d; pop rbx; pop r12; pop rbp; ret; 
0x0000000000449156: mov qword ptr [rbx - 0x80], rdx; mov rdx, qword ptr [r15 + r14*8]; test rdx, rdx; je 0x49165; call rdx; 
0x000000000042a4ad: mov qword ptr [rbx], rax; mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x000000000043e022: mov qword ptr [rbx], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004506bd: mov qword ptr [rbx], rax; pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x0000000000475438: mov qword ptr [rbx], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000405c0d: mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000454fa4: mov qword ptr [rcx + 0xe0], rdx; ret; 
0x000000000045061c: mov qword ptr [rcx + rdx*8], rax; mov eax, r12d; pop rbx; pop r12; pop rbp; ret; 
0x000000000041b7eb: mov qword ptr [rcx], rdx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044975b: mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000473fca: mov qword ptr [rcx], rdx; ret; 
0x00000000004664ce: mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000425c0e: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000454af7: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x28], rsi; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000458518: mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000042d77c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d79c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdbc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd9c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d7df: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045fdff: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000042d7ff: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045fe1f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d7c0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fde0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004502c5: mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000425be6: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000467174: mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000425c12: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000428075: mov qword ptr [rdi + 0x28], rcx; jmp 0x2805a; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000454afb: mov qword ptr [rdi + 0x28], rsi; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000425be2: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000425c16: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000417e63: mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x0000000000425bda: mov qword ptr [rdi + 0x58], rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000474014: mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000042d73c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000045fd5c: mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000042d75c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000045fd7c: mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000042d63a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fcaa: mov qword ptr [rdi + 5], rdx; ret; 
0x000000000042d65a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000045fcba: mov qword ptr [rdi + 6], rdx; ret; 
0x000000000042d67a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000045fcca: mov qword ptr [rdi + 7], rdx; ret; 
0x000000000044febb: mov qword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x000000000046666f: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000466537: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004664c7: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000466457: mov qword ptr [rdi + 8], r9; ret; 
0x0000000000425bea: mov qword ptr [rdi + 8], rax; ret; 
0x0000000000467167: mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000046581c: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000045f0da: mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000040bacb: mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000040e7b9: mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000473fd0: mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004652ae: mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004652a7: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046522d: mov qword ptr [rdi - 8], r9; ret; 
0x0000000000413b88: mov qword ptr [rdi], 0xffffffffffffffff; xor r8d, r8d; mov eax, r8d; ret; 
0x00000000004652a0: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004664c0: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000465227: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000466451: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004651fc: mov qword ptr [rdi], r9; ret; 
0x0000000000417ffb: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8fb53]; mov qword ptr [rsi], rax; ret; 
0x000000000042d5c6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000042d5f6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000045fc86: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000042d616: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000045fc96: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000042d637: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fca7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000042d657: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000045fcb7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000042d677: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000045fcc7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000040e7b6: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000042d5d7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000045fc77: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000045fc66: mov qword ptr [rdi], rcx; ret; 
0x000000000042d5b3: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000045fc53: mov qword ptr [rdi], rdx; ret; 
0x000000000040ca11: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000467164: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000040bac8: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004103e0: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000405c37: mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x0000000000405c2f: mov qword ptr [rdx + 0x28], rax; mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x0000000000405c09: mov qword ptr [rdx + 0x28], rcx; mov qword ptr [rcx + 0x20], rdx; pop rbp; ret; 
0x0000000000423430: mov qword ptr [rdx + 0xe0], rcx; leave; ret; 
0x0000000000458a92: mov qword ptr [rdx + 8], rax; mov qword ptr [rax], rdx; mov qword ptr [rip + 0x53e44], 0; ret; 
0x0000000000418609: mov qword ptr [rdx + 8], rax; mov qword ptr [rip + 0x942fc], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x000000000046de6c: mov qword ptr [rdx], rax; leave; ret; 
0x000000000041b800: mov qword ptr [rdx], rax; ret; 
0x0000000000455ac7: mov qword ptr [rdx], rcx; pop rbx; pop r12; pop rbp; ret; 
0x000000000046ced2: mov qword ptr [rip + 0x38fb7], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000458add: mov qword ptr [rip + 0x53e00], 0; ret; 
0x0000000000458a99: mov qword ptr [rip + 0x53e44], 0; ret; 
0x0000000000449730: mov qword ptr [rip + 0x5e2d9], rax; mov qword ptr [rip + 0x5e2da], rdx; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x0000000000449737: mov qword ptr [rip + 0x5e2da], rdx; cmp qword ptr fs:[rdi], rsi; je 0x49748; ret; 
0x0000000000448a2c: mov qword ptr [rip + 0x64349], 0; ret; 
0x000000000043966d: mov qword ptr [rip + 0x6e074], rax; pop rbx; pop r12; pop rbp; ret; 
0x00000000004286b7: mov qword ptr [rip + 0x7f3e2], rax; ret; 
0x0000000000427a5f: mov qword ptr [rip + 0x8520e], 0; ret; 
0x0000000000427991: mov qword ptr [rip + 0x852e0], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000418303: mov qword ptr [rip + 0x8b686], rax; ret; 
0x00000000004186b9: mov qword ptr [rip + 0x8c938], rbx; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000417e5c: mov qword ptr [rip + 0x8fd25], rax; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000041be51: mov qword ptr [rip + 0x90de4], 0; ret; 
0x0000000000419d69: mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x0000000000419d5b: mov qword ptr [rip + 0x92bfe], rax; movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x0000000000419821: mov qword ptr [rip + 0x93074], 0; ret; 
0x000000000041860d: mov qword ptr [rip + 0x942fc], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000412503: mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x00000000004124c1: mov qword ptr [rip + 0x9a3a8], rdi; cmp qword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x000000000041148b: mov qword ptr [rip + 0x9b3b6], rax; cmp rax, rdi; jb 0x114a0; xor eax, eax; ret; 
0x0000000000405506: mov qword ptr [rip + 0xa0c3b], rax; ret; 
0x0000000000405252: mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405232: mov qword ptr [rip + 0xa0eef], rax; ret; 
0x0000000000405202: mov qword ptr [rip + 0xa0f17], rax; ret; 
0x0000000000405008: mov qword ptr [rip + 0xa1191], rax; ret; 
0x0000000000404f98: mov qword ptr [rip + 0xa1199], rax; ret; 
0x0000000000404ff1: mov qword ptr [rip + 0xa11a0], rax; ret; 
0x0000000000404fd7: mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x0000000000404f88: mov qword ptr [rip + 0xa11b1], rax; ret; 
0x00000000004020d3: mov qword ptr [rip + 0xaa8b6], rax; pop rbx; pop rbp; ret; 
0x000000000040423b: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000046c820: mov qword ptr [rsi + 0x18], 0; ret; 
0x000000000046c818: mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000466880: mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x000000000040422f: mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000466848: mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x0000000000474f28: mov qword ptr [rsi + rax], rcx; add rax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x0000000000418005: mov qword ptr [rsi], rax; ret; 
0x0000000000449750: mov qword ptr [rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000458ada: mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x53e00], 0; ret; 
0x0000000000466705: mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x00000000004666ea: mov qword ptr [rsi], rdx; ret; 
0x0000000000404238: mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000458adc: mov qword ptr ds:[rip + 0x53e00], 0; ret; 
0x00000000004292c9: mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000428603: mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004186c0: mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041b7ea: mov qword ptr fs:[rcx], rdx; mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044975a: mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041b7ff: mov qword ptr fs:[rdx], rax; ret; 
0x000000000044974f: mov qword ptr fs:[rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000040bac7: mov qword ptr ss:[rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000040423a: mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000043db4c: mov r10, qword ptr [rbp - 0xa0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x000000000043d75c: mov r10, qword ptr [rbp - 0xb0]; mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x0000000000411e3c: mov r10, r12; mov rdx, rbx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x0000000000438934: mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000438934: mov r10, rcx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x38950; ret; 
0x0000000000411da4: mov r10, rcx; mov eax, 0x9d; syscall; 
0x0000000000411da4: mov r10, rcx; mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11db7; ret; 
0x0000000000418a03: mov r10, rcx; mov rsi, rdx; mov rdi, r9; cmp r8, r10; jae 0x18982; ret; 
0x00000000004389a4: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004370b3: mov r10b, 0xfd; jmp qword ptr [rsi + 0xf]; 
0x0000000000419bcb: mov r10d, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x000000000041f97f: mov r10d, 1; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000044ec7b: mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000042975b: mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000458d47: mov r10d, 8; mov rdx, r14; lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x0000000000461ce4: mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000411d14: mov r10d, ecx; xor r8d, r8d; test cl, 6; jne 0x11d40; mov eax, 0x19; syscall; 
0x0000000000411b5f: mov r10d, r12d; mov rdi, rbx; mov eax, 9; syscall; 
0x0000000000411bb8: mov r10d, r12d; xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x000000000041f37b: mov r11d, 1; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000411cb9: mov r12, 0xffffffffffffffff; pop rbx; mov rax, r12; pop r12; pop rbp; ret; 
0x0000000000474357: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000479ec5: mov r12, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474cae: mov r12b, 0x49; mov edx, dword ptr [rdx]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x000000000041c181: mov r12b, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000458973: mov r12d, eax; mov rdi, qword ptr [rbp - 0x20]; mov r9d, 0xffffffff; mov edx, ebx; mov eax, 0xca; syscall; 
0x000000000047435b: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047435f: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474513: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000041f9e1: mov r14, rcx; sub eax, 0x20; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f378: mov r14, rdx; mov r11d, 1; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x00000000004205fa: mov r14d, 0xfffb4885; jmp qword ptr [rax]; 
0x0000000000474363: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474517: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000044eae7: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000418976: mov r8, qword ptr [r8]; cmp r8, r10; jb 0x18a15; cmp rsi, r8; jae 0x189d8; ret; 
0x0000000000473e23: mov r8, r15; mov rcx, r14; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000473c45: mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x00000000004742c5: mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x00000000004565cd: mov r8, rcx; mov qword ptr [rax + 0x10], rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000041a950: mov r8, rcx; movzx r9d, byte ptr [rcx]; test r9b, r9b; jne 0x1a8b0; ret; 
0x0000000000461e2e: mov r8, rsi; lea rdx, [rbp - 0x30]; mov esi, 0x5401; syscall; 
0x000000000043f9aa: mov r8b, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000438e04: mov r8b, 0x44; mov dword ptr [rbp - 0x3c], eax; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x00000000004416ad: mov r8b, 0x48; mov dword ptr [rbp - 0x70], ecx; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004459d2: mov r8b, 0xbe; add eax, 0xe9000000; ret 0xfffe; 
0x000000000042844b: mov r8d, 0xca; xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x000000000043881c: mov r8d, 0xd0458d48; mov qword ptr [rbp - 0x40], rax; cmp esi, 9; je 0x38850; mov eax, 0x48; syscall; 
0x0000000000407b3f: mov r8d, 0xfffc34e9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000413b3f: mov r8d, 1; test rsi, rsi; je 0x13b50; mov eax, r8d; ret; 
0x00000000004385b6: mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000438790: mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000411320: mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x00000000004386c6: mov r8d, eax; mov rsi, qword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000473dff: mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x0000000000437920: mov r9, qword ptr [rbp - 0x1a0]; mov rdx, qword ptr [rbp - 0x198]; push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x00000000004416ab: mov r9, qword ptr [rbp - 0x50]; mov qword ptr [rbp - 0x70], rcx; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000445906: mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x00000000004428de: mov r9, qword ptr [rbp - 0x68]; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x0000000000446d4e: mov r9, qword ptr [rbp - 0x70]; mov qword ptr [rbp - 0xa0], rcx; mov rsi, qword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000444235: mov r9, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x70], rcx; mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004434f0: mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000043d763: mov r9, qword ptr [rbp - 0x90]; lea rax, [r10 + r9]; call rax; 
0x0000000000460012: mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x60000; ret; 
0x0000000000437002: mov r9, rcx; lea rdx, [rbp - 0x78]; lea rsi, [rbp - 0x70]; push 1; push 0; call rax; 
0x000000000045897a: mov r9d, 0xffffffff; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000458919: mov r9d, 0xffffffff; xor r8d, r8d; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000401008: mov rax, 0; test rax, rax; je 0x1016; call rax; 
0x000000000040172d: mov rax, 0; test rax, rax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; 
0x000000000040176f: mov rax, 0; test rax, rax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; 
0x000000000044eba0: mov rax, 0xf; syscall; 
0x0000000000464d04: mov rax, 0xffffffffffffffb8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000044eb70: mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411b80: mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000004500a0: mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x00000000004114a0: mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000408628: mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000461b18: mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000043a308: mov rax, 0xffffffffffffffd8; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x000000000041b794: mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000041b774: mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000041b754: mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000411bec: mov rax, 0xffffffffffffffff; jmp 0x11b74; nop dword ptr [rax + rax]; endbr64; mov eax, 0xa; syscall; 
0x0000000000411354: mov rax, 0xffffffffffffffff; ret; 
0x000000000042d084: mov rax, dr0; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000045f73e: mov rax, dr0; add byte ptr [rax], al; ret; 
0x000000000043b82f: mov rax, qword ptr [0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000459855: mov rax, qword ptr [0x10]; ret; 
0x000000000046716c: mov rax, qword ptr [0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000423ecc: mov rax, qword ptr [r12 + 0x20]; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000425fb7: mov rax, qword ptr [r12 + 0x28]; mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x00000000004571c0: mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000041b7ee: mov rax, qword ptr [rax + 0x50]; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000042755c: mov rax, qword ptr [rax + 0x60]; test rax, rax; jne 0x2757b; ret; 
0x00000000004016cb: mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x16c0; ret; 
0x0000000000426777: mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x26770; ret; 
0x000000000040976b: mov rax, qword ptr [rax + 0x870]; cmp rax, rsi; jne 0x9740; mov dword ptr [rip + 0xa30a3], 0; ret; 
0x0000000000455d2d: mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000455e61: mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004571b9: mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x000000000046f98e: mov rax, qword ptr [rax + 8]; mov rdx, r14; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x000000000043e314: mov rax, qword ptr [rax + 8]; ret; 
0x000000000043e324: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000448cba: mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48cc5; call rax; 
0x0000000000448ea4: mov rax, qword ptr [rax + r12*8]; test rax, rax; je 0x48eaf; call rax; 
0x000000000041f383: mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x0000000000464d12: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000454b6d: mov rax, qword ptr [rax + rdi*8]; ret; 
0x00000000004204bd: mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000427580: mov rax, qword ptr [rax]; mov qword ptr [rdx], rax; ret; 
0x0000000000464d0f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000473f78: mov rax, qword ptr [rax]; ret; 
0x000000000047405f: mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000473e06: mov rax, qword ptr [rbp - 0x138]; call rax; 
0x000000000046dfe6: mov rax, qword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e056: mov rax, qword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e06b; leave; ret; 
0x0000000000470746: mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x000000000046e14e: mov rax, qword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1b2: mov rax, qword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e5fb: mov rax, qword ptr [rbp - 0x20]; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e619; leave; ret; 
0x000000000044f178: mov rax, qword ptr [rbp - 0x38]; call rax; 
0x000000000044ef86: mov rax, qword ptr [rbp - 0x38]; mov rsi, rbx; mov rdi, r12; call rax; 
0x0000000000474c69: mov rax, qword ptr [rbp - 0x40]; call rax; 
0x0000000000474cb3: mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x0000000000438e02: mov rax, qword ptr [rbp - 0x50]; mov dword ptr [rbp - 0x3c], r8d; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000447b20: mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000401ea2: mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000440ad2: mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000047505e: mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x000000000047518a: mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x000000000044235c: mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000441cbb: mov rax, qword ptr [rbp - 0x90]; call rax; 
0x00000000004410c3: mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004428e9: mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x000000000044590a: mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x000000000041133e: mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000044edd2: mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x4eeb9; leave; ret; 
0x0000000000466348: mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x663c7; leave; ret; 
0x000000000043c4c9: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; add r14, r15; test r11d, r11d; jne 0x3c4db; call rax; 
0x000000000043cb6e: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d40e: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test r10d, r10d; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000043d2d2: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test edx, edx; jne 0x3d2df; call rax; 
0x000000000043ca44: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r15]; test esi, esi; jne 0x3ca51; call rax; 
0x000000000046dde0: mov rax, qword ptr [rbx + 0x10]; mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax], rdi; leave; ret; 
0x0000000000425d7c: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rbp - 0x1c]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000425d5d: mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426349: mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000042655b: mov rax, qword ptr [rbx + 0x48]; xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000041f175: mov rax, qword ptr [rbx + rax*8]; xor ebx, ebx; mov dword ptr [rbp - 0x4a4], 0; mov dword ptr [rbp - 0x4a8], 0; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x000000000043966a: mov rax, qword ptr [rbx]; mov qword ptr [rip + 0x6e074], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000428094: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000425bde: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000427934: mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000473f84: mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000473fe4: mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000455d04: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x0000000000474024: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000474084: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x0000000000474074: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000474034: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x0000000000473ff4: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000423e74: mov rax, qword ptr [rdi + 8]; cmp rax, qword ptr [rdi + 0x10]; jae 0x23e88; movzx eax, byte ptr [rax]; ret; 
0x0000000000428056: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x28080; movzx eax, byte ptr [rax]; ret; 
0x0000000000427554: mov rax, qword ptr [rdi + 8]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rax + 0x60]; test rax, rax; jne 0x2757b; ret; 
0x0000000000474ac4: mov rax, qword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x74ae0; mov edi, 1; jmp rax; 
0x000000000040af0d: mov rax, qword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000041f501: mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000042c6d0: mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000041b434: mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4c4: mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x0000000000404fa4: mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x4fb0; ret; 
0x0000000000405194: mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x51a0; ret; 
0x0000000000404fe4: mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x4ff0; ret; 
0x00000000004286a4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f023], eax; ret; 
0x00000000004284d4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f1ef], eax; ret; 
0x00000000004284c4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f1fb], eax; ret; 
0x00000000004284b4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f207], eax; ret; 
0x00000000004284a4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f213], eax; ret; 
0x00000000004286c4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f3cb], eax; ret; 
0x00000000004286b4: mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x7f3e2], rax; ret; 
0x00000000004671a9: mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000004671a9: mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; nop dword ptr [rax]; ret; 
0x0000000000405244: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f16], 1; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405224: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f36], 1; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051f4: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f66], 1; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004051d4: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa0f86], 1; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x0000000000405214: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x0000000000405004: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa1191], rax; ret; 
0x0000000000404f94: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa1199], rax; ret; 
0x0000000000404f84: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa11b1], rax; ret; 
0x0000000000419147: mov rax, qword ptr [rdx + 0x48]; test ecx, ecx; je 0x19158; mov qword ptr [rsi], rax; ret; 
0x000000000046d55c: mov rax, qword ptr [rdx + rax*8]; test rax, rax; jne 0x6d57e; ret; 
0x0000000000418271: mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x182ba; ret; 
0x00000000004124ff: mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x000000000046e5b0: mov rax, qword ptr [rip + 0x3e5e1]; ret; 
0x000000000046e5a0: mov rax, qword ptr [rip + 0x3e5e9]; ret; 
0x000000000046e590: mov rax, qword ptr [rip + 0x3e5f1]; ret; 
0x000000000046e580: mov rax, qword ptr [rip + 0x3e5f9]; ret; 
0x000000000046e570: mov rax, qword ptr [rip + 0x3e601]; ret; 
0x000000000046e560: mov rax, qword ptr [rip + 0x3e609]; ret; 
0x000000000046e550: mov rax, qword ptr [rip + 0x3e611]; ret; 
0x000000000046e540: mov rax, qword ptr [rip + 0x3e619]; ret; 
0x000000000046e530: mov rax, qword ptr [rip + 0x3e621]; ret; 
0x000000000046e520: mov rax, qword ptr [rip + 0x3e629]; ret; 
0x000000000046e510: mov rax, qword ptr [rip + 0x3e631]; ret; 
0x000000000046e508: mov rax, qword ptr [rip + 0x3e691]; ret; 
0x0000000000458cf1: mov rax, qword ptr [rip + 0x4de20]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000447f04: mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x00000000004389e4: mov rax, qword ptr [rip + 0x6e12d]; test rax, rax; je 0x389f1; ret; 
0x000000000043e4c4: mov rax, qword ptr [rip + 0x6e86d]; ret; 
0x000000000043e4b4: mov rax, qword ptr [rip + 0x6e875]; ret; 
0x0000000000427914: mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x0000000000417ffe: mov rax, qword ptr [rip + 0x8fb53]; mov qword ptr [rsi], rax; ret; 
0x0000000000411244: mov rax, qword ptr [rip + 0x93ded]; test rax, rax; je 0x11260; push rbp; mov rbp, rsp; call rax; 
0x000000000046cecd: mov rax, qword ptr [rsi + r12 - 0x18]; mov qword ptr [rip + 0x38fb7], rax; pop rbx; pop r12; pop rbp; ret; 
0x000000000043b82e: mov rax, qword ptr fs:[0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000459854: mov rax, qword ptr fs:[0x10]; ret; 
0x000000000046716b: mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000464d0e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000404ac9: mov rax, r10; ret; 
0x0000000000404aba: mov rax, r10; sub rax, rdx; ret; 
0x0000000000459bb3: mov rax, r12; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000042497f: mov rax, r12; pop r12; pop r13; pop rbp; ret; 
0x0000000000411cc1: mov rax, r12; pop r12; pop rbp; ret; 
0x0000000000438a95: mov rax, r12; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000416e86: mov rax, r12; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000411c92: mov rax, r12; pop rbx; pop r12; pop rbp; ret; 
0x0000000000449898: mov rax, r13; pop r12; pop r13; pop rbp; ret; 
0x00000000004497e7: mov rax, r13; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004356e4: mov rax, r8; vzeroupper; ret; 
0x0000000000435ab6: mov rax, r8; xtest; jne 0x35ac2; vzeroupper; ret; 
0x0000000000461369: mov rax, r8; xtest; jne 0x61375; vzeroupper; ret; 
0x0000000000474158: mov rax, rbx; add rsp, 0x1f0; pop rbx; pop r12; pop rbp; ret; 
0x000000000040b0be: mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000046183b: mov rax, rbx; pop rbx; pop r12; cmovne rax, rdx; pop rbp; ret; 
0x0000000000405405: mov rax, rbx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000041818a: mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000458ceb: mov rax, rcx; div rsi; mov rax, qword ptr [rip + 0x4de20]; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000416937: mov rax, rcx; pop r13; pop rbp; ret; 
0x0000000000406a28: mov rax, rcx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004168b3: mov rax, rcx; ret; 
0x000000000045f784: mov rax, rdi; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000404a62: mov rax, rdi; mov rdi, rdx; cmp rax, 9; ja 0x4a40; mov rax, rsi; ret; 
0x0000000000401bbf: mov rax, rdi; pop rbx; pop rbp; ret; 
0x000000000045f278: mov rax, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000401c03: mov rax, rdi; ret; 
0x0000000000418b0d: mov rax, rdi; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000466840: mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; pop rbp; ret; 
0x0000000000419b91: mov rax, rdx; leave; ret; 
0x00000000004044f7: mov rax, rdx; pop rbp; ret; 
0x0000000000404499: mov rax, rdx; pop rbx; pop r12; add qword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x0000000000458761: mov rax, rdx; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000465824: mov rax, rdx; pop rbx; ret; 
0x0000000000410005: mov rax, rdx; ret; 
0x000000000040f815: mov rax, rdx; vzeroupper; ret; 
0x0000000000429755: mov rax, rsi; mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000040499e: mov rax, rsi; ret; 
0x000000000042dd96: mov rbp, cr6; out dx, eax; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000047451b: mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000044eaf0: mov rbp, r9; nop; jmp rdx; 
0x000000000041195c: mov rbp, rsp; call 0x11680; test eax, eax; je 0x11970; pop rbp; ret; 
0x000000000041199c: mov rbp, rsp; call 0x11680; test eax, eax; je 0x119b0; pop rbp; ret; 
0x0000000000419818: mov rbp, rsp; call 0x11c30; pop rbp; mov qword ptr [rip + 0x93074], 0; ret; 
0x000000000040958e: mov rbp, rsp; call 0x11c60; cmp rax, -1; je 0x95a0; pop rbp; ret; 
0x000000000041240c: mov rbp, rsp; call 0x12320; nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x000000000043bdd1: mov rbp, rsp; call 0x18430; xor eax, eax; pop rbp; ret; 
0x000000000041b8c5: mov rbp, rsp; call 0x29720; test eax, eax; jne 0x1b8d8; pop rbp; ret; 
0x0000000000448a23: mov rbp, rsp; call 0x39610; pop rbp; mov qword ptr [rip + 0x64349], 0; ret; 
0x0000000000404d65: mov rbp, rsp; call 0x4d00; nop dword ptr [rax]; ret; 
0x0000000000404dca: mov rbp, rsp; call 0x4d00; nop word ptr [rax + rax]; ret; 
0x0000000000458889: mov rbp, rsp; call 0x4d80; xor eax, eax; pop rbp; ret; 
0x00000000004588ca: mov rbp, rsp; call 0x4e00; xor eax, eax; pop rbp; ret; 
0x0000000000459081: mov rbp, rsp; call 0x58f20; xor eax, eax; pop rbp; ret; 
0x0000000000466b61: mov rbp, rsp; call 0x668f0; mov eax, 1; pop rbp; ret; 
0x000000000046d9bf: mov rbp, rsp; call 0x6db90; pop rbp; neg eax; sbb eax, eax; ret; 
0x0000000000411251: mov rbp, rsp; call rax; 
0x0000000000419af5: mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000458e9c: mov rbp, rsp; push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000439ad7: mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000419be3: mov rbx, qword ptr [rbp - 8]; leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000425d61: mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000409061: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000448787: mov rbx, qword ptr [rbp - 8]; mov dword ptr [rdx + 8], eax; leave; ret; 
0x00000000004571d0: mov rbx, qword ptr [rbp - 8]; mov eax, 0xffffffff; leave; ret; 
0x000000000046226d: mov rbx, qword ptr [rbp - 8]; mov eax, 1; leave; ret; 
0x0000000000455f03: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000046dde4: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax], rdi; leave; ret; 
0x000000000046ddd0: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; leave; ret; 
0x000000000042342c: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rdx + 0xe0], rcx; leave; ret; 
0x000000000046de68: mov rbx, qword ptr [rbp - 8]; mov qword ptr [rdx], rax; leave; ret; 
0x00000000004571b5: mov rbx, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x0000000000419b8d: mov rbx, qword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000046203e: mov rbx, qword ptr [rbp - 8]; pop rax; pop rdx; leave; ret; 
0x000000000040b594: mov rbx, qword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x0000000000419b8c: mov rbx, qword ptr cs:[rbp - 8]; mov rax, rdx; leave; ret; 
0x0000000000458ea0: mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000455d21: mov rbx, rdi; sub rsp, 8; test byte ptr [rdi], 2; jne 0x55d98; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000411b24: mov rcx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000449753: mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000040fe22: mov rcx, 0xffffffffffffffff; bzhi rcx, rcx, rdx; kmovq k1, rcx; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000404ec6: mov rcx, qword ptr [r15]; test rcx, rcx; je 0x4ea0; call rcx; 
0x0000000000455765: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000454f9d: mov rcx, qword ptr [rax + 0xa0]; mov qword ptr [rcx + 0xe0], rdx; ret; 
0x0000000000474f24: mov rcx, qword ptr [rcx + 8]; mov qword ptr [rsi + rax], rcx; add rax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x000000000040ca0d: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000428071: mov rcx, qword ptr [rdi + 0x30]; mov qword ptr [rdi + 0x28], rcx; jmp 0x2805a; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000473fbe: mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x000000000042d774: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d794: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdb4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd94: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d734: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000045fd54: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000042d754: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000045fd74: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000042c9d0: mov rcx, qword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm0; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f0d1: mov rcx, qword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm0; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000042ce64: mov rcx, qword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm16; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f535: mov rcx, qword ptr [rsi + rdx - 7]; vmovq qword ptr [rdi], xmm16; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000042c6cb: mov rcx, qword ptr [rsi + rdx - 8]; mov rax, qword ptr [rdi + rdx - 8]; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000040bac0: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042d5c0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000045fc60: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000042d5d0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000045fc70: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000042d5f0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000045fc80: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000042d610: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x000000000045fc90: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000042d630: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fca0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000042d650: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000045fcb0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000042d670: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000045fcc0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000040e7ae: mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040ca0c: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004742c8: mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x0000000000473e26: mov rcx, r14; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000473df2: mov rcx, r14; mov esi, 0xa; mov edi, 1; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x00000000004167e2: mov rcx, rax; cmp rcx, rdx; jne 0x167c0; mov eax, dword ptr [rcx]; ret; 
0x0000000000473c48: mov rcx, rbx; mov edi, 1; call rax; 
0x0000000000418a3c: mov rcx, rdi; jmp 0x189bc; nop dword ptr [rax]; ret; 
0x000000000041018d: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040f80d: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040ff12: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x000000000040fff9: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040e3d5: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000046c76e: mov rcx, rsi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6c760; mov eax, 1; ret; 
0x00000000004016f8: mov rdi, 0x401988; call 0x3dc0; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000044f170: mov rdi, qword ptr [r12]; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x0000000000439ad0: mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x0000000000425d83: mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000458976: mov rdi, qword ptr [rbp - 0x20]; mov r9d, 0xffffffff; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000474ca8: mov rdi, qword ptr [rbp - 0x38]; mov dword ptr [rbp - 0x4c], r9d; mov rdx, qword ptr [r10]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x0000000000474c62: mov rdi, qword ptr [rbp - 0x38]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x00000000004788d6: mov rdi, qword ptr [rbp - 0x38]; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; add rdi, r12; syscall; 
0x0000000000438dfe: mov rdi, qword ptr [rbp - 0x48]; mov rax, qword ptr [rbp - 0x50]; mov dword ptr [rbp - 0x3c], r8d; mov qword ptr [rbp - 0x38], rdx; mov rsi, qword ptr [rbx]; call rax; 
0x0000000000401489: mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000475057: mov rdi, qword ptr [rbp - 0x850]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x848], r11d; mov ecx, r11d; call rax; 
0x00000000004416ba: mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000440acb: mov rdi, qword ptr [rbp - 0x90]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x0000000000445122: mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000442355: mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004434e2: mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000441cb4: mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x00000000004410bc: mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004428d0: mov rdi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0x98], rcx; mov r9, qword ptr [rbp - 0x68]; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x00000000004458f8: mov rdi, qword ptr [rbp - 0xb8]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000446d60: mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000437c9e: mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x00000000004063db: mov rdi, qword ptr [rbp - 8]; mov rsi, qword ptr [rbp - 0x10]; test rax, rax; je 0x63b4; leave; ret; 
0x000000000044daa9: mov rdi, qword ptr [rbx + 0x10]; call 0x4da60; jmp 0x4da86; nop dword ptr [rax]; ret; 
0x0000000000458ea7: mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000474ca7: mov rdi, qword ptr ss:[rbp - 0x38]; mov dword ptr [rbp - 0x4c], r9d; mov rdx, qword ptr [r10]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x00000000004791d2: mov rdi, r11; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000456ab4: mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000044ef8d: mov rdi, r12; call rax; 
0x000000000047a2f5: mov rdi, r12; mov esi, r9d; mov eax, 0xca; syscall; 
0x000000000047a4a9: mov rdi, r12; or eax, 2; mov edx, eax; mov eax, ebx; syscall; 
0x00000000004593fe: mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000454242: mov rdi, r13; call 0x66ae0; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004541a3: mov rdi, r13; call 0x66ae0; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x000000000042626f: mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004541b5: mov rdi, r13; call rbx; 
0x000000000045424a: mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x0000000000455bbb: mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000457818: mov rdi, r15; call rax; 
0x0000000000455cdb: mov rdi, r15; mov esi, edx; call qword ptr [rbx + 0x18]; 
0x0000000000429321: mov rdi, r8; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000042957d: mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000040479a: mov rdi, r8; mov esi, r13d; call rax; 
0x0000000000459330: mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418a09: mov rdi, r9; cmp r8, r10; jae 0x18982; ret; 
0x00000000004788a6: mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478997: mov rdi, r9; or eax, 2; mov edx, eax; mov eax, r12d; syscall; 
0x0000000000478e7a: mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000419532: mov rdi, rax; call 0x2a2d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000404996: mov rdi, rax; cmp rdx, rcx; jae 0x4980; mov rax, rsi; ret; 
0x00000000004096b0: mov rdi, rbx; call 0x4de0; jmp 0x968a; nop word ptr [rax + rax]; ret; 
0x000000000040b58c: mov rdi, rbx; call 0x5510; mov rbx, qword ptr [rbp - 8]; xor eax, eax; leave; ret; 
0x00000000004561f3: mov rdi, rbx; call 0x55ed0; jmp 0x56121; mov eax, 0xffffffff; ret; 
0x0000000000422a9d: mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000422369: mov rdi, rbx; call rax; 
0x0000000000447ea9: mov rdi, rbx; call rdx; 
0x0000000000428af8: mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000411b62: mov rdi, rbx; mov eax, 9; syscall; 
0x0000000000428911: mov rdi, rbx; mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x0000000000428d2c: mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000455b38: mov rdi, rbx; pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000423ed1: mov rdi, rbx; pop rbx; pop r12; pop rbp; jmp rax; 
0x00000000004186f4: mov rdi, rbx; syscall; 
0x0000000000459714: mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000478a8c: mov rdi, rcx; mov eax, 0xca; syscall; 
0x0000000000439b26: mov rdi, rdx; call rsi; 
0x0000000000404a65: mov rdi, rdx; cmp rax, 9; ja 0x4a40; mov rax, rsi; ret; 
0x000000000042bd8e: mov rdi, rdx; inc ecx; jne 0x2bcc0; vzeroupper; ret; 
0x0000000000412748: mov rdi, rdx; jmp 0x126af; leave; xor eax, eax; ret; 
0x00000000004671ac: mov rdi, rdx; jmp rax; 
0x00000000004671ac: mov rdi, rdx; jmp rax; nop dword ptr [rax]; ret; 
0x000000000041b8d8: mov rdx, 0xffffffffffffffd8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000411270: mov rdx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041128d: mov rdx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000411348: mov rdx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000041b7f2: mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044975e: mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004118f1: mov rdx, qword ptr [0x28]; mov qword ptr [rbp - 8], rdx; lea rdx, [rbp - 0x1010]; syscall; 
0x0000000000474cb0: mov rdx, qword ptr [r10]; mov rax, qword ptr [rbp - 0x40]; mov qword ptr [rbp - 0x48], r10; call rax; 
0x00000000004742c1: mov rdx, qword ptr [r13]; mov r8, rbx; mov rcx, r13; mov esi, 1; mov edi, 1; call rax; 
0x0000000000473e20: mov rdx, qword ptr [r14]; mov r8, r15; mov rcx, r14; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000474c5f: mov rdx, qword ptr [r14]; mov rdi, qword ptr [rbp - 0x38]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x000000000045780a: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xe8], rcx; mov rdi, r15; call rax; 
0x000000000044915a: mov rdx, qword ptr [r15 + r14*8]; test rdx, rdx; je 0x49165; call rdx; 
0x000000000046d57e: mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d570; ret; 
0x000000000046d61a: mov rdx, qword ptr [rax + 8]; cmp rcx, rdx; jae 0x6d587; test rax, rax; jne 0x6d60a; ret; 
0x0000000000474de0: mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000470edf: mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r9], rdx; leave; ret; 
0x000000000046d60a: mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000044914e: mov rdx, qword ptr [rbp + r14*8 - 0xa0]; mov qword ptr [rbx - 0x80], rdx; mov rdx, qword ptr [r15 + r14*8]; test rdx, rdx; je 0x49165; call rdx; 
0x0000000000438788: mov rdx, qword ptr [rbp - 0x18]; mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x0000000000411318: mov rdx, qword ptr [rbp - 0x18]; mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x0000000000437927: mov rdx, qword ptr [rbp - 0x198]; push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x00000000004113fa: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11443; leave; ret; 
0x0000000000411d2e: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11d95; leave; ret; 
0x000000000043866e: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x38723; leave; ret; 
0x000000000043883a: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x3888b; leave; ret; 
0x0000000000461db1: mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x61dfb; leave; ret; 
0x000000000044f174: mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x000000000044ef82: mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; mov rsi, rbx; mov rdi, r12; call rax; 
0x0000000000411916: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x1193d; leave; ret; 
0x0000000000429779: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x297fa; leave; ret; 
0x00000000004388cf: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x3891b; leave; ret; 
0x000000000046208f: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x620bc; leave; ret; 
0x00000000004622e1: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6230b; leave; ret; 
0x0000000000462380: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6239c; leave; ret; 
0x0000000000462410: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6242c; leave; ret; 
0x00000000004624ec: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x625b7; leave; ret; 
0x0000000000462607: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6263c; leave; ret; 
0x0000000000467c02: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x67c40; leave; ret; 
0x0000000000469365: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x69376; leave; ret; 
0x000000000046df08: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6df19; leave; ret; 
0x000000000046dfea: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e05a: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e06b; leave; ret; 
0x000000000046e152: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1b6: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e5ff: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6e619; leave; ret; 
0x00000000004705ca: mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x705e5; leave; ret; 
0x00000000004244e6: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x0000000000473c42: mov rdx, qword ptr [rbx]; mov r8, r15; mov rcx, rbx; mov edi, 1; call rax; 
0x00000000004182f9: mov rdx, qword ptr [rcx + rdx + 0x18]; test rdx, rdx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x000000000041246f: mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000418a39: mov rdx, qword ptr [rcx]; mov rcx, rdi; jmp 0x189bc; nop dword ptr [rax]; ret; 
0x0000000000428098: mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000405c33: mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x000000000046de47: mov rdx, qword ptr [rdi + 0x490]; mov qword ptr [rax], rdx; leave; ret; 
0x00000000004671a5: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000004671a5: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; nop dword ptr [rax]; ret; 
0x000000000046c811: mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000425ba4: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x25ba0; ret; 
0x0000000000455724: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x55720; ret; 
0x0000000000474df0: mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x0000000000470f44: mov rdx, qword ptr [rdx]; mov qword ptr [r9], rdx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000417f7d: mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x0000000000401e91: mov rdx, qword ptr [rip + 0xaa9a8]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x000000000045fdf4: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000045fe14: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d633: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fca3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000042d653: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000045fcb3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000042d673: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000045fcc3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000042d5b0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000045fc50: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000438839: mov rdx, qword ptr ds:[rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x3888b; leave; ret; 
0x000000000044ef81: mov rdx, qword ptr ds:[rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; mov rsi, rbx; mov rdi, r12; call rax; 
0x00000000004118f0: mov rdx, qword ptr fs:[0x28]; mov qword ptr [rbp - 8], rdx; lea rdx, [rbp - 0x1010]; syscall; 
0x00000000004113f9: mov rdx, qword ptr ss:[rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11443; leave; ret; 
0x00000000004541b2: mov rdx, r12; mov rdi, r13; call rbx; 
0x00000000004377f5: mov rdx, r12; push 0; call rbx; 
0x0000000000458788: mov rdx, r13; mov ecx, dword ptr [rbx]; jmp 0x58757; nop; xor eax, eax; ret; 
0x0000000000422a97: mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000046f992: mov rdx, r14; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000458d4d: mov rdx, r14; lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x000000000046f9dc: mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb24: mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rcx]; 
0x0000000000419bab: mov rdx, rax; lea rdi, [rax + rbx]; mov eax, esi; syscall; 
0x000000000043e699: mov rdx, rax; test rax, rax; je 0x3e6aa; mov rdi, rbx; call rax; 
0x0000000000416dbb: mov rdx, rbx; syscall; 
0x0000000000411e3f: mov rdx, rbx; xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x0000000000404993: mov rdx, rdi; mov rdi, rax; cmp rdx, rcx; jae 0x4980; mov rax, rsi; ret; 
0x0000000000410000: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040f810: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040ff15: mov rdx, rdi; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x0000000000419b40: mov rsi, 0xffffffffffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x000000000043878c: mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x000000000041131c: mov rsi, qword ptr [rbp - 0x10]; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x00000000004063df: mov rsi, qword ptr [rbp - 0x10]; test rax, rax; je 0x63b4; leave; ret; 
0x0000000000404c20: mov rsi, qword ptr [rbp - 0x110]; mov edi, 2; mov eax, r9d; syscall; 
0x000000000045424d: mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004541ab: mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000437930: mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x0000000000426371: mov rsi, qword ptr [rbp - 0x20]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x00000000004386c9: mov rsi, qword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000401e98: mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000445117: mov rsi, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0x70], r9; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004465c3: mov rsi, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0x70], r9; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000044234a: mov rsi, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0x78], r9; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000043dc1c: mov rsi, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0xc0], r11; mov qword ptr [rbp - 0xb0], r10; mov qword ptr [rbp - 0x88], r9; add rax, rsi; call rax; 
0x00000000004416b3: mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x0000000000447b17: mov rsi, qword ptr [rbp - 0x90]; push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x0000000000440ac4: mov rsi, qword ptr [rbp - 0x98]; mov rdi, qword ptr [rbp - 0x90]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x000000000044423d: mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000441ca6: mov rsi, qword ptr [rbp - 0xa8]; mov qword ptr [rbp - 0x88], rcx; mov rdi, qword ptr [rbp - 0xa0]; mov rax, qword ptr [rbp - 0x90]; call rax; 
0x00000000004428e2: mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x00000000004434db: mov rsi, qword ptr [rbp - 0xa8]; mov rdi, qword ptr [rbp - 0xa0]; mov qword ptr [rbp - 0x90], rcx; mov r9, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004410ae: mov rsi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x00000000004458f1: mov rsi, qword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov qword ptr [rbp - 0xa0], rcx; mov r9, qword ptr [rbp - 0x68]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000446d59: mov rsi, qword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000438e0e: mov rsi, qword ptr [rbx]; call rax; 
0x0000000000474c66: mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x000000000044f16d: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [r12]; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x000000000044870a: mov rsi, qword ptr [rip + 0x6465f]; jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000412c90: mov rsi, qword ptr [rsi + 0x18]; sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x000000000040e7b1: mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040bac5: mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000040ca0a: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000438544: mov rsi, r12; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004385b3: mov rsi, r12; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000046f9df: mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb27: mov rsi, r13; mov edi, r12d; call qword ptr [rcx]; 
0x000000000046f998: mov rsi, r13; mov edi, r12d; call rax; 
0x0000000000458d9a: mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000422a9a: mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000470393: mov rsi, rax; jmp 0x70325; nop dword ptr [rax + rax]; call rax; 
0x0000000000429758: mov rsi, rax; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000043ee1e: mov rsi, rax; test rax, rax; je 0x3ee37; mov rdi, rbx; call rax; 
0x0000000000419bd1: mov rsi, rbx; mov eax, 9; syscall; 
0x000000000044ef8a: mov rsi, rbx; mov rdi, r12; call rax; 
0x000000000042763c: mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x00000000004113e8: mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000474ac8: mov rsi, rdi; test rax, rax; je 0x74ae0; mov edi, 1; jmp rax; 
0x0000000000418a06: mov rsi, rdx; mov rdi, r9; cmp r8, r10; jae 0x18982; ret; 
0x000000000044eaed: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000047451f: mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000040ca2f: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000040ca39: mov word ptr [r9 - 2], cx; ret; 
0x00000000004170c6: mov word ptr [rax + rax], es; add byte ptr [rax + 0x63], cl; ret; 
0x000000000040ff70: mov word ptr [rax], cx; mov byte ptr [rax + rdx - 1], cl; ret; 
0x0000000000410079: mov word ptr [rax], es; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000464100: mov word ptr [rbp - 6], ds; jmp qword ptr [rsi + 0x66]; 
0x000000000042d6bc: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcfc: mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042d7c4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fde4: mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042d588: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x000000000045fc38: mov word ptr [rdi + 4], dx; ret; 
0x000000000040450b: mov word ptr [rdi + 7], gs; add byte ptr [rax - 0x73], cl; cmp eax, 0x76f92; call 0x4370; xor eax, eax; ret; 
0x000000000042d5da: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000045fc7a: mov word ptr [rdi + 8], dx; ret; 
0x000000000040d133: mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040e7dd: mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x000000000040ba8d: mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000042cc06: mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000042d553: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000045fc03: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000045f2e5: mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000040fc06: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000042c99c: mov word ptr [rdi], cx; nop; mov byte ptr [rax], 0; ret; 
0x000000000045f09b: mov word ptr [rdi], cx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000042d543: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000045fbf3: mov word ptr [rdi], dx; ret; 
0x000000000042ce4b: mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x00000000004103f0: mov word ptr [rdi], si; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000045f51a: mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000040ca36: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000040fc09: mov word ptr [rsi - 2], cx; ret; 
0x00000000004386cc: movabs al, byte ptr [0x101b8a87d8b]; syscall; 
0x0000000000414a64: movabs al, byte ptr [0x2b42e8c0310006]; add cl, ch; ret 0xfff6; 
0x0000000000455d07: movabs al, byte ptr [0x30788348000000]; je 0x55d18; ret; 
0x00000000004654af: movabs al, byte ptr [0x348087e8d49d231]; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x000000000046f907: movabs al, byte ptr [0x441f0f66fffc]; cmp qword ptr [rdi + 0x28], rdi; je 0x6f920; ret; 
0x00000000004268b3: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rax + 0xa8], 0; ret; 
0x000000000040e8af: movabs al, byte ptr [0x5158d48f0e78348]; add al, 0; add byte ptr [rcx + rax - 0x3e], cl; jmp rdx; 
0x0000000000408c1c: movabs al, byte ptr [0x950fd439490009d5]; ret 0xb60f; 
0x00000000004044f1: movabs al, byte ptr [0xd089485c415bd231]; pop rbp; ret; 
0x0000000000454fa0: movabs al, byte ptr [0xe0918948000000]; add byte ptr [rax], al; ret; 
0x00000000004347ec: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000445960: movabs al, byte ptr [0xf6840ff08944]; add byte ptr [rax - 0x75], cl; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x00000000004020cc: movabs byte ptr [0x894800000204838d], al; add eax, 0xaa8b6; pop rbx; pop rbp; ret; 
0x0000000000460227: movabs byte ptr [0xbd058d48080004c7], al; or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x676; cmove rax, rdx; ret; 
0x0000000000473f6a: movabs byte ptr [0xf08323c80000391], al; test dword ptr [rcx + 0x48fff8d5], edx; mov eax, dword ptr [rax]; ret; 
0x0000000000434aea: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000450f3a: movabs byte ptr [0xffff64bd83000008], al; jmp qword ptr [rsi + 0xf]; 
0x000000000046d75c: movabs dword ptr [0x3289089480003], eax; add byte ptr [rax - 0x39], cl; ret 0xcab0; 
0x00000000004124cc: movabs dword ptr [0x58d481e74000009], eax; ja 0x1247a; or dword ptr [rax], eax; ret; 
0x000000000044eb1d: movabs dword ptr [0x8b480c75c0850000], eax; pop rbp; clc; leave; ret; 
0x00000000004124c5: movabs dword ptr [0x9a3883d83480009], eax; add byte ptr [rax], al; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x00000000004124be: movabs dword ptr [0x9a3a83d89480009], eax; add byte ptr [rax - 0x7d], cl; cmp eax, 0x9a388; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x9a377]; ret; 
0x0000000000470c4c: movabs dword ptr [0xa3b5055e0ff30000], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000459b26: movabs dword ptr [0xe158d481000052e], eax; add byte ptr gs:[rax], al; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000456d10: movabs dword ptr [0xe800000000801f0f], eax; ret; 
0x000000000045b30c: movabs eax, dword ptr [0x260da162f6fc250d]; cld; jmp qword ptr [rdx - 0x5f]; 
0x000000000043856e: movabs eax, dword ptr [0x5b60c48348000000]; pop r12; pop rbp; ret; 
0x000000000042a2bb: movabs eax, dword ptr [0xc1f700004c]; je 0x2a299; ret; 
0x000000000041d79b: movabs eax, dword ptr [0xfff71885c6fffe71]; jmp qword ptr [rax]; 
0x000000000043af68: movabs r8, 0x8949fffcf880e867; ret 0x8548; 
0x000000000041b42a: movabs rdx, 0x697373696d726570; mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x1b490; ret; 
0x000000000041b4ba: movabs rdx, 0x697373696d726570; mov rax, qword ptr [rdi]; cmp qword ptr [rax], rdx; je 0x1b520; ret; 
0x000000000042bf10: movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c310: movbe eax, dword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2c2f0; ret; 
0x000000000042bf17: movbe ecx, dword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c317: movbe ecx, dword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2c2f0; ret; 
0x000000000042bf0f: movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c30f: movbe rax, qword ptr [rdi + rdx - 8]; movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2c2f0; ret; 
0x000000000042bf16: movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c316: movbe rcx, qword ptr [rsi + rdx - 8]; sub rax, rcx; jne 0x2c2f0; ret; 
0x00000000004502c2: movd mm0, eax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004185bb: movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x000000000041866e: movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000044ff09: movd mm1, esi; xor eax, eax; movups xmmword ptr [rdi + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x000000000044ff08: movd xmm1, esi; xor eax, eax; movups xmmword ptr [rdi + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x00000000004189f0: movdqu xmm0, xmmword ptr [r8]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000042d6b0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcf0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042d6f0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000045fd30: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000045fd20: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000042d6d0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000045fd10: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000042d770: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000045fdb0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd90: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d730: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000045fd50: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000042d750: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000045fd70: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045fe90: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042d810: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe30: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d830: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000045fe50: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000045fe70: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042d690: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000042d6a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000045fce0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000045fcd0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000045fe94: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042d814: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe34: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d834: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000045fe54: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000045fe74: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042d87d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000045fe9d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042d81d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe3d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d83d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000045fe5d: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000042d85d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000045fe7d: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042d694: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000042d6a4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000045fce4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042d6f7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000042d717: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045fd37: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000045fd27: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000042d6d7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000045fd17: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000042d778: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d798: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdb8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd98: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d7db: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045fdfb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000042d7fb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045fe1b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d7bc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fddc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042d738: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000045fd58: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000042d758: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000045fd78: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000042d6b8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcf8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042d879: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000045fe99: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042d819: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe39: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d839: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000045fe59: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000042d859: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000045fe79: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000045fcd4: movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004189f1: movq mm0, qword ptr [r8]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x00000000004189f2: movq mm0, qword ptr [rax]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000042d6b1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcf1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042d6f1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000045fd31: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000045fd21: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000042d6d1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000045fd11: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000042d771: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000045fdb1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd91: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d731: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000045fd51: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000042d751: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000045fd71: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045fe91: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042d811: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe31: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d831: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000045fe51: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000045fe71: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042d691: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000042d6a1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000045fce1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000045fcd1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004502c1: movq mm0, rax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004185ba: movq mm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x000000000041866d: movq mm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000045fe95: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042d815: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe35: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d835: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000045fe55: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000045fe75: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044ffcd: movq qword ptr [r10], xmm0; ret; 
0x000000000042d87e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000045fe9e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x000000000042d81e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe3e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x000000000042d83e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000045fe5e: movq qword ptr [rdi + 0xe], mm2; ret; 
0x000000000042d85e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000045fe7e: movq qword ptr [rdi + 0xf], mm2; ret; 
0x000000000042d695: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x000000000042d6a5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000045fce5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042d6f8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000042d718: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045fd38: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000045fd28: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000042d6d8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000045fd18: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000042d779: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000042d799: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045fdb9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045fd99: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000042d7dc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045fdfc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000042d7fc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045fe1c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d7bd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fddd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042d739: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000045fd59: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000042d759: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000045fd79: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000042d6b9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045fcf9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042d87a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000045fe9a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042d81a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe3a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042d83a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000045fe5a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000042d85a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000045fe7a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000045fcd5: movq qword ptr [rdi], mm0; ret; 
0x000000000044ff17: movq qword ptr [rdi], xmm0; ret; 
0x00000000004502c0: movq xmm0, rax; mov qword ptr [rdi + 0x10], rdx; punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004185b9: movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x000000000041866c: movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x000000000040d8ee: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000044d3f8: movsb byte ptr [rdi], byte ptr [rsi]; cmp al, 0xfb; dec dword ptr [rax + 0x29]; ret; 
0x000000000041b2a8: movsb byte ptr [rdi], byte ptr [rsi]; idiv bh; jmp qword ptr [rsi - 0x7f]; 
0x0000000000456a98: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 4; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000042d0da: movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x000000000042cb98: movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x000000000041b527: movsb byte ptr [rdi], byte ptr [rsi]; or byte ptr [rip + 0x91681], 0xc; ret; 
0x000000000041b497: movsb byte ptr [rdi], byte ptr [rsi]; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000040d8e0: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040bce5: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040dc6e: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d400: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000045f27c: movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000479e2b: movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rdi - 0x18]; 
0x0000000000479e5f: movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000465262: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000004741aa: movsd dword ptr [rdi], dword ptr [rsi]; sar dh, 0xff; call qword ptr [rbx + 0x48]; 
0x0000000000478cb7: movsd dword ptr [rdi], dword ptr [rsi]; sub byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000470c47: movss xmm0, dword ptr [rip + 0xa3b9]; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x000000000041923c: movsx eax, byte ptr [rsi]; neg eax; ret; 
0x0000000000450020: movsx edx, byte ptr [rdx]; mov eax, 1; sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x0000000000401bf9: movsxd rax, dword ptr [r9 + rsi*4]; add rax, r9; notrack jmp rax; mov rax, rdi; ret; 
0x000000000046e4fa: movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x000000000045ff3c: movsxd rax, ecx; ret; 
0x000000000045fbcc: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000045ffbe: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000454993: movsxd rcx, ecx; movzx ecx, byte ptr [r8 + rcx + 9]; add eax, ecx; cmp rdx, rsi; jne 0x54980; ret; 
0x0000000000454b5a: movsxd rdi, edi; cmp rdi, qword ptr [rip + 0x2cc1c]; jae 0x54b71; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000464d0b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000450092: movsxd rdx, eax; cmp rax, rdx; jne 0x500bb; test ecx, ecx; jne 0x500a0; ret; 
0x0000000000466cc6: movsxd rdx, eax; cmp rax, rdx; jne 0x66cf3; test ecx, ecx; jne 0x66cd8; ret; 
0x0000000000417024: movsxd rdx, ebx; mov edi, dword ptr [rbp - 0x958]; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000470c48: movups xmm0, xmmword ptr [rip + 0xa3b9]; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x000000000042c742: movups xmm1, xmmword ptr [rdi + rdx + 0x10]; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x2c754; ret; 
0x000000000040e16e: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e7e9: movups xmm2, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e550: movups xmm3, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e236: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e790: movups xmm7, xmmword ptr [rsi + rdx - 0x10]; cmp rdx, 0x20; ja 0xe800; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000044ffc3: movups xmmword ptr [r10 + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x00000000004669df: movups xmmword ptr [r12 + 0x20], xmm1; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000040f2ed: movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000040e8e3: movups xmmword ptr [r8 + 0x10], xmm9; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040f2f2: movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000040e8e8: movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040e8ed: movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040f2e3: movups xmmword ptr [r8 + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000040f2e9: movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000046ca96: movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jb 0x6ca20; ret; 
0x000000000046ca91: movups xmmword ptr [r9 - 0x20], xmm0; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jb 0x6ca20; ret; 
0x000000000040e8e4: movups xmmword ptr [rax + 0x10], xmm1; movups xmmword ptr [r8 + 0x20], xmm8; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x0000000000427682: movups xmmword ptr [rax + 0x10], xmm1; xor eax, eax; ret; 
0x000000000040f2ee: movups xmmword ptr [rax + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000405c2b: movups xmmword ptr [rax + 0x20], xmm0; mov qword ptr [rdx + 0x28], rax; mov rdx, qword ptr [rdi + 0x28]; mov qword ptr [rdx + 0x20], rax; pop rbp; ret; 
0x000000000040e8e9: movups xmmword ptr [rax + 0x20], xmm0; movups xmmword ptr [r8 + 0x30], xmm7; ret; 
0x000000000040f2f3: movups xmmword ptr [rax + 0x20], xmm5; ret; 
0x000000000040e8ee: movups xmmword ptr [rax + 0x30], xmm7; ret; 
0x0000000000455f0f: movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x0000000000456641: movups xmmword ptr [rax + 0x40], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004565a2: movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000040f2e4: movups xmmword ptr [rax + rdx - 0x10], xmm7; movups xmmword ptr [r8], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x000000000040f2ea: movups xmmword ptr [rax], xmm0; movups xmmword ptr [r8 + 0x10], xmm4; movups xmmword ptr [r8 + 0x20], xmm5; ret; 
0x0000000000439b03: movups xmmword ptr [rax], xmm0; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044ec74: movups xmmword ptr [rbp - 0xb8], xmm0; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000042339b: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466b41: movups xmmword ptr [rbx + 0x18], xmm1; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000427e29: movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000042339f: movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466b45: movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000418675: movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000425d0a: movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004242ce: movups xmmword ptr [rbx + 8], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000423397: movups xmmword ptr [rbx + 8], xmm0; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043a136: movups xmmword ptr [rbx], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000426894: movups xmmword ptr [rcx + 0x10], xmm0; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000426898: movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000040ed08: movups xmmword ptr [rcx + 0x20], xmm10; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000040ed09: movups xmmword ptr [rcx + 0x20], xmm2; movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000042689c: movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000040ed0e: movups xmmword ptr [rcx + 0x30], xmm1; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000040ed0d: movups xmmword ptr [rcx + 0x30], xmm9; movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x00000000004268a0: movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000040ed13: movups xmmword ptr [rcx + 0x40], xmm0; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000040ed12: movups xmmword ptr [rcx + 0x40], xmm8; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000040ed17: movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000046ca97: movups xmmword ptr [rcx - 0x10], xmm1; cmp r10, r11; jb 0x6ca20; ret; 
0x000000000046ca92: movups xmmword ptr [rcx - 0x20], xmm0; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jb 0x6ca20; ret; 
0x000000000040e34b: movups xmmword ptr [rcx], xmm0; ret; 
0x000000000041039b: movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e23e: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e7f1: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e3ae: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000041039f: movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e3b2: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004103a3: movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e3b6: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004189f9: movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x00000000004267df: movups xmmword ptr [rdi + 0x58], xmm0; test rax, rax; je 0x267f7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000426699: movups xmmword ptr [rdi + 0xa0], xmm0; ret; 
0x000000000044ff0e: movups xmmword ptr [rdi + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x00000000004102cc: movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041032b: movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040e176: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e242: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e564: movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e29b: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000040e79e: movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e55f: movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e7f5: movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e247: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e2a0: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000040e55a: movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e2a5: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000040e555: movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e2aa: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000410335: movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000410331: movups xmmword ptr [rdi - 0x20], xmm0; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000458ad3: movups xmmword ptr [rdi], xmm0; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x53e00], 0; ret; 
0x0000000000410398: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000040e23b: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000040e7ee: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000040e3ab: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000410328: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040e173: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040e79b: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x00000000004102d1: movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000458544: movups xmmword ptr [rdi], xmm0; test rdx, rdx; je 0x5854f; mov byte ptr [rsi], 0; ret; 
0x0000000000410432: movups xmmword ptr [rdx + 0x10], xmm0; movups xmmword ptr [rdx + 0x20], xmm0; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x000000000040e343: movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000410436: movups xmmword ptr [rdx + 0x20], xmm0; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x000000000040e33f: movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000041043a: movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x000000000040e33b: movups xmmword ptr [rdx + 0x30], xmm5; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000044ffc4: movups xmmword ptr [rdx + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x000000000040e3bb: movups xmmword ptr [rdx + rdi - 0x10], xmm0; ret; 
0x000000000040e3ba: movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000040e348: movups xmmword ptr [rdx], xmm0; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000041042f: movups xmmword ptr [rdx], xmm0; movups xmmword ptr [rdx + 0x10], xmm0; movups xmmword ptr [rdx + 0x20], xmm0; movups xmmword ptr [rdx + 0x30], xmm0; ret; 
0x000000000040e347: movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004185c2: movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x00000000004185b2: movups xmmword ptr [rip + 0x94357], xmm0; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x0000000000405c54: movups xmmword ptr [rsi + 0x20], xmm0; pop rbp; ret; 
0x00000000004669e0: movups xmmword ptr [rsp + 0x20], xmm1; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000040e79a: movups xmmword ptr gs:[rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm7; ret; 
0x000000000042346c: movzx eax, al; neg eax; ret; 
0x0000000000461d57: movzx eax, al; ret; 
0x000000000042c618: movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042be10: movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x0000000000430abd: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000426a20: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; pop r12; pop rbp; ret; 
0x0000000000423ea5: movzx eax, byte ptr [rax]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000423e7e: movzx eax, byte ptr [rax]; ret; 
0x00000000004027f4: movzx eax, byte ptr [rbp - 0x32]; neg rax; jmp 0x277c; or rax, 0xffffffffffffffff; ret; 
0x0000000000414000: movzx eax, byte ptr [rdi + 0x35a]; test al, 3; je 0x13ff3; ret; 
0x0000000000432867: movzx eax, byte ptr [rdi + r9 + 0x40]; movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042c75f: movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c4f8: movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042bc89: movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c508: movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000042bca9: movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c676: movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042be4b: movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c664: movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042be2b: movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c3b7: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042bc68: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c068: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; xtest; jne 0x2c077; vzeroupper; ret; 
0x000000000045b0c3: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042efa3: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042e4d9: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042f137: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000432868: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000045b0e3: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042efb3: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042e4f4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b103: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042c4db: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042bcdf: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042f1be: movzx eax, byte ptr [rdi + rcx - 0x20]; movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000045b0a4: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x000000000042ef93: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042e4c7: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042f123: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000430cdb: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042f10a: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx ecx, byte ptr [rsi + rdx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000045f018: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x2635d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045d7c8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x27bad]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000430953: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004308e8: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000045f033: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x26343]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000045d7e3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x27b93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042c6e2: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042bee5: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000418b17: movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x000000000041b502: movzx eax, byte ptr [rip + 0x916a7]; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x9169b], al; ret; 
0x000000000041b4e0: movzx eax, byte ptr [rip + 0x916c9]; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x916bd], al; ret; 
0x000000000041b472: movzx eax, byte ptr [rip + 0x91737]; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x9172b], al; ret; 
0x000000000041b450: movzx eax, byte ptr [rip + 0x91759]; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x9174d], al; ret; 
0x000000000041f4fd: movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000046000e: movzx eax, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x60000; ret; 
0x000000000041018a: movzx eax, dh; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040ff0f: movzx eax, dh; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x000000000040fffd: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000440905: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000410189: movzx eax, sil; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040ff0e: movzx eax, sil; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x000000000040fffc: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000440904: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000419d62: movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x0000000000475300: movzx ebx, bl; mov dword ptr [rdx + 0xc], ebx; pop rbx; pop r12; pop rbp; ret; 
0x0000000000454996: movzx ecx, byte ptr [r8 + rcx + 9]; add eax, ecx; cmp rdx, rsi; jne 0x54980; ret; 
0x00000000004127b1: movzx ecx, byte ptr [rax + 1]; jmp 0x126be; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000454997: movzx ecx, byte ptr [rax + rcx + 9]; add eax, ecx; cmp rdx, rsi; jne 0x54980; ret; 
0x000000000041a954: movzx ecx, byte ptr [rcx]; test r9b, r9b; jne 0x1a8b0; ret; 
0x000000000043286d: movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000431b4b: movzx ecx, byte ptr [rsi + r9 + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000042c75a: movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c4f3: movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042bc84: movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c503: movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000042bca4: movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c613: movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042be0b: movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c671: movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042be46: movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c65f: movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042be26: movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000420437: movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041fb8f: movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042c3b3: movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042bc64: movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000045b0c8: movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c99: movzx ecx, byte ptr [rsi + rcx + 0x20]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042efa8: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000042e4de: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042f13c: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042e659: movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000045b0e8: movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459cb9: movzx ecx, byte ptr [rsi + rcx + 0x40]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042efb8: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x000000000042e4f9: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000043286e: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042e679: movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000045b108: movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459cd9: movzx ecx, byte ptr [rsi + rcx + 0x60]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c4e0: movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042bce4: movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042f1c3: movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042e703: movzx ecx, byte ptr [rsi + rcx - 0x20]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000045b0a8: movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c7a: movzx ecx, byte ptr [rsi + rcx]; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ef97: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042e4cb: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042f127: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042e638: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000042ea2b: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xtest; jne 0x2ea3a; vzeroupper; ret; 
0x000000000043200b: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; xtest; jne 0x3201a; vzeroupper; ret; 
0x000000000042f10f: movzx ecx, byte ptr [rsi + rdx + 0x40]; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042e61c: movzx ecx, byte ptr [rsi + rdx + 0x60]; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x0000000000436b0a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36b00; ret; 
0x0000000000436bba: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36bb0; ret; 
0x0000000000436e7a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x36e70; sub rax, 1; ret; 
0x00000000004308e4: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000430ba6: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x30b90; xor eax, eax; sub eax, ecx; ret; 
0x000000000042bee2: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042c6e5: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000046e665: movzx edi, ah; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x000000000042bf6e: movzx edi, byte ptr [rdi + rdx - 1]; movzx esi, byte ptr [rsi + rdx - 1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000042c715: movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x000000000046e664: movzx edi, r12b; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x000000000044ea20: movzx edx, byte ptr [rdi]; test dl, dl; jne 0x4ea00; ret; 
0x0000000000430ac1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000436d2a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x36d20; lea rax, [rcx - 1]; ret; 
0x000000000045da0f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x27966]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000430cdf: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000430957: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000043191e: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x31928; xchg edx, eax; sub eax, edx; ret; 
0x00000000004354a3: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x354ad; xchg edx, eax; sub eax, edx; ret; 
0x0000000000426267: movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000042052f: movzx esi, byte ptr [rbx + rax]; lea rax, [rip + 0x81bc6]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004204b2: movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000426268: movzx esi, byte ptr [rdi]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000004205b2: movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000042bf73: movzx esi, byte ptr [rsi + rdx - 1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x0000000000418126: movzx esi, dh; call 0x17a60; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000418125: movzx esi, sil; call 0x17a60; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040d12e: movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000040e7d8: movzx esi, word ptr [rsi + rdx - 1]; mov word ptr [rdi + rdx - 1], si; mov byte ptr [rdi], cl; ret; 
0x000000000040ba88: movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000046000d: movzx r8d, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x60000; ret; 
0x000000000041a953: movzx r9d, byte ptr [rcx]; test r9b, r9b; jne 0x1a8b0; ret; 
0x000000000040b686: mul byte ptr [rdx]; add byte ptr [rax], al; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x0000000000458942: neg eax; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x00000000004027f9: neg eax; jmp 0x277c; or rax, 0xffffffffffffffff; ret; 
0x0000000000411b2b: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000411277: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000411294: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000041134f: neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000041923f: neg eax; ret; 
0x000000000046d9c8: neg eax; sbb eax, eax; ret; 
0x0000000000458df2: neg ebx; jmp 0x58d83; nop word ptr cs:[rax + rax]; mov eax, 0xba; syscall; 
0x00000000004027f8: neg rax; jmp 0x277c; or rax, 0xffffffffffffffff; ret; 
0x000000000046f9d3: nop dword ptr [rax + rax]; add rbx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x0000000000410a0b: nop dword ptr [rax + rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000042bb08: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042c85b: nop dword ptr [rax + rax]; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000041105b: nop dword ptr [rax + rax]; bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043193b: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046e70b: nop dword ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000470398: nop dword ptr [rax + rax]; call rax; 
0x000000000046f90b: nop dword ptr [rax + rax]; cmp qword ptr [rdi + 0x28], rdi; je 0x6f920; ret; 
0x00000000004095ab: nop dword ptr [rax + rax]; endbr64; cmp byte ptr [rip + 0xa3265], 0; jne 0x95c0; ret; 
0x00000000004260cb: nop dword ptr [rax + rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x0000000000411b0b: nop dword ptr [rax + rax]; endbr64; mov eax, 0x1c; syscall; 
0x0000000000411e68: nop dword ptr [rax + rax]; endbr64; mov eax, 0x63; syscall; 
0x0000000000411bf8: nop dword ptr [rax + rax]; endbr64; mov eax, 0xa; syscall; 
0x0000000000426188: nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004384a8: nop dword ptr [rax + rax]; endbr64; mov eax, 8; syscall; 
0x00000000004774cb: nop dword ptr [rax + rax]; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x774e0; ret; 
0x000000000043892b: nop dword ptr [rax + rax]; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000411d9b: nop dword ptr [rax + rax]; endbr64; mov r10, rcx; mov eax, 0x9d; syscall; 
0x00000000004278a8: nop dword ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000043e308: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000427928: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000473fd8: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000474068: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000040520b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x0000000000427908: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x0000000000459848: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000474168: nop dword ptr [rax + rax]; endbr64; nop; ret; 
0x0000000000401708: nop dword ptr [rax + rax]; endbr64; ret; 
0x00000000004268c8: nop dword ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x00000000004112c3: nop dword ptr [rax + rax]; hlt; mov eax, edx; syscall; 
0x000000000042bedb: nop dword ptr [rax + rax]; jb 0x2bef6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042c2db: nop dword ptr [rax + rax]; jb 0x2c2f6; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000041915b: nop dword ptr [rax + rax]; lea rax, [r8 + rax + 0x48]; mov qword ptr [rsi], rax; ret; 
0x000000000042e438: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000042e448: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000042e458: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000042e468: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000042e478: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000042e3c8: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000042e3d8: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000042e3e8: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000042e3f8: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000042e408: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000042e418: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000042e428: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000042a22b: nop dword ptr [rax + rax]; lea rax, [rip + 0x3b09]; test edx, 0x40000000; je 0x2a211; ret; 
0x000000000042a2b3: nop dword ptr [rax + rax]; lea rax, [rip + 0x4ca1]; test ecx, 0x40000000; je 0x2a299; ret; 
0x000000000040b90b: nop dword ptr [rax + rax]; lea rax, [rip + 0x4f29]; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b97b: nop dword ptr [rax + rax]; lea rax, [rip + 0x55b9]; test edx, 0x40000000; je 0xb958; ret; 
0x000000000042a3fb: nop dword ptr [rax + rax]; lea rax, [rip + 0xb6f9]; test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a46b: nop dword ptr [rax + rax]; lea rax, [rip + 0xc009]; test edx, 0x40000000; je 0x2a448; ret; 
0x000000000041be03: nop dword ptr [rax + rax]; lea rdi, [rip + 0x90e39]; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x000000000047081b: nop dword ptr [rax + rax]; leave; xor eax, eax; ret; 
0x000000000042d528: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbd8: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000040f86b: nop dword ptr [rax + rax]; mov byte ptr [rdi], sil; mov byte ptr [rdi + 1], sil; mov byte ptr [rdi + rdx - 1], sil; ret; 
0x000000000042d54b: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000419153: nop dword ptr [rax + rax]; mov dword ptr [rsi], eax; ret; 
0x000000000040b5a8: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000458df8: nop dword ptr [rax + rax]; mov eax, 0xba; syscall; 
0x000000000042807b: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000460ab3: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x0000000000462d03: nop dword ptr [rax + rax]; mov eax, 8; ret; 
0x00000000004284eb: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x844f2]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x000000000040525b: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0xa75ce]; test eax, eax; jne 0x5270; ret; 
0x000000000040430b: nop dword ptr [rax + rax]; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x000000000045fc0b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000413b83: nop dword ptr [rax + rax]; mov qword ptr [rdi], 0xffffffffffffffff; xor r8d, r8d; mov eax, r8d; ret; 
0x00000000004103db: nop dword ptr [rax + rax]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x0000000000466cd3: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000041149b: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000043a303: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffd8; pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x000000000046e5b8: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000046e5a8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e5e1]; ret; 
0x000000000046e598: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e5e9]; ret; 
0x000000000046e588: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e5f1]; ret; 
0x000000000046e578: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e5f9]; ret; 
0x000000000046e568: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e601]; ret; 
0x000000000046e558: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e609]; ret; 
0x000000000046e548: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e611]; ret; 
0x000000000046e538: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e619]; ret; 
0x000000000046e528: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e621]; ret; 
0x000000000046e518: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3e629]; ret; 
0x000000000040d9fb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042d5bb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000045fc6b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000041b8d3: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffd8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000474deb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x000000000045fc4b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000412c8b: nop dword ptr [rax + rax]; mov rsi, qword ptr [rsi + 0x18]; sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x000000000044eb94: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000436ea5: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000412416: nop dword ptr [rax + rax]; nop; endbr64; ret; 
0x000000000042e3b7: nop dword ptr [rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000042e3a7: nop dword ptr [rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000468af6: nop dword ptr [rax + rax]; nop; xor eax, eax; ret; 
0x000000000043e4a3: nop dword ptr [rax + rax]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000416783: nop dword ptr [rax + rax]; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000401783: nop dword ptr [rax + rax]; ret; 
0x000000000042beeb: nop dword ptr [rax + rax]; sbb eax, eax; or eax, 1; ret; 
0x000000000045003b: nop dword ptr [rax + rax]; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000456453: nop dword ptr [rax + rax]; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000426a93: nop dword ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x000000000044fecb: nop dword ptr [rax + rax]; test eax, eax; je 0x4fee0; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000040b86b: nop dword ptr [rax + rax]; test eax, eax; lea rdx, [rip + 0x4107]; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000042afdb: nop dword ptr [rax + rax]; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042b06b: nop dword ptr [rax + rax]; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000040f85b: nop dword ptr [rax + rax]; vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000040d13b: nop dword ptr [rax + rax]; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040f84b: nop dword ptr [rax + rax]; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x00000000004127bb: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000042e1e8: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000047a159: nop dword ptr [rax]; add dword ptr [rdi + 4], 1; pop rbp; ret; 
0x0000000000435bec: nop dword ptr [rax]; add esi, 0x20; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx + 0x40]; ret; 
0x0000000000460aa5: nop dword ptr [rax]; add rax, 3; ret; 
0x000000000040b77d: nop dword ptr [rax]; and ch, 2; lea rdx, [rip + 0x21c6]; lea rax, [rip + 0x216f]; cmovne rax, rdx; ret; 
0x000000000040b67d: nop dword ptr [rax]; and ch, 2; lea rdx, [rip + 0x22f6]; lea rax, [rip + 0x227f]; cmovne rax, rdx; ret; 
0x000000000042a11d: nop dword ptr [rax]; and ch, 2; lea rdx, [rip - 0x1c7aa]; lea rax, [rip - 0x1c821]; cmovne rax, rdx; ret; 
0x000000000042baf9: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000041049d: nop dword ptr [rax]; bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042bb19: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042baec: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000041106c: nop dword ptr [rax]; bsf eax, eax; sub edi, ecx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000041104d: nop dword ptr [rax]; bsf eax, eax; sub rdi, rcx; add rax, rdi; ret; 
0x000000000042bb3c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000045f70c: nop dword ptr [rax]; bsf ecx, ecx; vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 1]; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000042b7f9: nop dword ptr [rax]; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000468709: nop dword ptr [rax]; bsf edx, edx; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000435fcc: nop dword ptr [rax]; bsr eax, eax; lea rax, [rdi + rax + 1]; vzeroupper; ret; 
0x000000000043554d: nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004666d9: nop dword ptr [rax]; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000040b59c: nop dword ptr [rax]; call 0x5f00; jmp 0xb57d; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000043e074: nop dword ptr [rax]; call rax; 
0x00000000004112dc: nop dword ptr [rax]; endbr64; cmp byte ptr [rip + 0x9576d], 0; je 0x11300; xor eax, eax; syscall; 
0x0000000000401e1d: nop dword ptr [rax]; endbr64; cmp qword ptr [rdi], 0; je 0x1e34; or dword ptr [rip + 0xaacc0], 0x400; ret; 
0x000000000041147c: nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x00000000004278bc: nop dword ptr [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000042759c: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000047727d: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77290; ret; 
0x000000000047400c: nop dword ptr [rax]; endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000041b749: nop dword ptr [rax]; endbr64; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000042696d: nop dword ptr [rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000043e319: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000473f7c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x0000000000455cfd: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x000000000047401c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000047407c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000047402c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000040518c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x51a0; ret; 
0x000000000042849d: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f213], eax; ret; 
0x0000000000447ef9: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x64e6d]; ret; 
0x00000000004389dc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x6e12d]; test rax, rax; je 0x389f1; ret; 
0x000000000043e4bc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x6e86d]; ret; 
0x000000000043e4ad: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x6e875]; ret; 
0x0000000000427939: nop dword ptr [rax]; endbr64; mov rax, rdi; ret; 
0x000000000041a86c: nop dword ptr [rax]; endbr64; ret; 
0x00000000004615dd: nop dword ptr [rax]; endbr64; test rsi, rsi; jne 0x615ed; xor rax, rax; ret; 
0x00000000004278dc: nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x0000000000411449: nop dword ptr [rax]; endbr64; xor eax, eax; syscall; 
0x000000000047818d: nop dword ptr [rax]; ja 0x781b1; xor eax, eax; ret; 
0x000000000042c6dd: nop dword ptr [rax]; jne 0x2c6eb; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000435cbd: nop dword ptr [rax]; kortestd k2, k0; jne 0x35c7b; mov rax, rsi; ret; 
0x0000000000404ac1: nop dword ptr [rax]; leave; mov rax, r10; ret; 
0x0000000000458e81: nop dword ptr [rax]; mov eax, 0x16; ret; 
0x0000000000427689: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x000000000045650c: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000045ffd5: nop dword ptr [rax]; mov eax, ecx; ret; 
0x000000000042cc0d: nop dword ptr [rax]; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f2ed: nop dword ptr [rax]; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045fc3d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000046c81d: nop dword ptr [rax]; mov qword ptr [rsi + 0x18], 0; ret; 
0x000000000044eb9c: nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000044eb69: nop dword ptr [rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000411b79: nop dword ptr [rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000408624: nop dword ptr [rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000461b11: nop dword ptr [rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000046e504: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x0000000000468b59: nop dword ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040e21d: nop dword ptr [rax]; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000045fc8d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000045fc9d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000411394: nop dword ptr [rax]; mov rdx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000411344: nop dword ptr [rax]; mov rdx, 0xffffffffffffffd8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000404c1c: nop dword ptr [rax]; mov rsi, qword ptr [rbp - 0x110]; mov edi, 2; mov eax, r9d; syscall; 
0x00000000004189e9: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [r8]; mov byte ptr [rdi + 0x68], 1; movups xmmword ptr [rdi + 0x58], xmm0; ret; 
0x000000000045fcec: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000045fd0c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000045fd8c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000045fd4d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000045fd6c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000042d69d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000045fcd9: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004308fd: nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043f694: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000405c4c: nop dword ptr [rax]; punpcklqdq xmm0, xmm0; movups xmmword ptr [rsi + 0x20], xmm0; pop rbp; ret; 
0x00000000004017c4: nop dword ptr [rax]; ret; 
0x00000000004275d1: nop dword ptr [rax]; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004549a4: nop dword ptr [rax]; sub rdx, rsi; imul eax, edx; ret; 
0x0000000000427a0d: nop dword ptr [rax]; test eax, eax; je 0x27a20; sub eax, 1; mov dword ptr [rip + 0x85257], eax; ret; 
0x0000000000467d4d: nop dword ptr [rax]; tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004357bd: nop dword ptr [rax]; tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x0000000000460d2d: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d0d: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000043558d: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000043557d: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x000000000043555c: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000410d6d: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000042c9bc: nop dword ptr [rax]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000045f0bd: nop dword ptr [rax]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000046848d: nop dword ptr [rax]; vzeroupper; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000042b57c: nop dword ptr [rax]; vzeroupper; bsf edx, edx; lea rax, [rdi + rdx]; ret; 
0x00000000004095a4: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000473fd7: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000474067: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000427907: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x0000000000401707: nop dword ptr cs:[rax + rax]; endbr64; ret; 
0x000000000042e437: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000042e447: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000042e457: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000042e467: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000042e477: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000042e3c7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000042e3d7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000042e3e7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000042e3f7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000042e407: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000042e417: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000042e427: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000458df7: nop dword ptr cs:[rax + rax]; mov eax, 0xba; syscall; 
0x000000000044eb93: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000436ea4: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000412415: nop dword ptr cs:[rax + rax]; nop; endbr64; ret; 
0x000000000042e3b6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000042e3a6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000468af5: nop dword ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x0000000000439bf7: nop dword ptr cs:[rax + rax]; ret; 
0x000000000046c6d7: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x000000000042bb07: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000041105a: nop word ptr [rax + rax]; bsf eax, eax; sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000046e70a: nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000046f90a: nop word ptr [rax + rax]; cmp qword ptr [rdi + 0x28], rdi; je 0x6f920; ret; 
0x00000000004260ca: nop word ptr [rax + rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x260e0; ret; 
0x0000000000411b0a: nop word ptr [rax + rax]; endbr64; mov eax, 0x1c; syscall; 
0x0000000000411e67: nop word ptr [rax + rax]; endbr64; mov eax, 0x63; syscall; 
0x0000000000426187: nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004278a7: nop word ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000043e307: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000427927: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000040520a: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x0000000000474167: nop word ptr [rax + rax]; endbr64; nop; ret; 
0x00000000004278fa: nop word ptr [rax + rax]; endbr64; ret; 
0x00000000004268c7: nop word ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x00000000004112c2: nop word ptr [rax + rax]; hlt; mov eax, edx; syscall; 
0x000000000042a22a: nop word ptr [rax + rax]; lea rax, [rip + 0x3b09]; test edx, 0x40000000; je 0x2a211; ret; 
0x000000000042a2b2: nop word ptr [rax + rax]; lea rax, [rip + 0x4ca1]; test ecx, 0x40000000; je 0x2a299; ret; 
0x000000000040b90a: nop word ptr [rax + rax]; lea rax, [rip + 0x4f29]; test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b97a: nop word ptr [rax + rax]; lea rax, [rip + 0x55b9]; test edx, 0x40000000; je 0xb958; ret; 
0x000000000042a3fa: nop word ptr [rax + rax]; lea rax, [rip + 0xb6f9]; test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a46a: nop word ptr [rax + rax]; lea rax, [rip + 0xc009]; test edx, 0x40000000; je 0x2a448; ret; 
0x000000000042d527: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbd7: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000040b5a7: nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000462d02: nop word ptr [rax + rax]; mov eax, 8; ret; 
0x00000000004284ea: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x844f2]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x000000000040525a: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0xa75ce]; test eax, eax; jne 0x5270; ret; 
0x000000000040430a: nop word ptr [rax + rax]; mov edx, 0x2d; mov edi, 2; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x000000000045fc0a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004103da: nop word ptr [rax + rax]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000041149a: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000045fc6a: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000412c8a: nop word ptr [rax + rax]; mov rsi, qword ptr [rsi + 0x18]; sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x000000000043e4a2: nop word ptr [rax + rax]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000416782: nop word ptr [rax + rax]; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000401782: nop word ptr [rax + rax]; ret; 
0x000000000045003a: nop word ptr [rax + rax]; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000456452: nop word ptr [rax + rax]; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x0000000000426a92: nop word ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x000000000044feca: nop word ptr [rax + rax]; test eax, eax; je 0x4fee0; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x000000000040b86a: nop word ptr [rax + rax]; test eax, eax; lea rdx, [rip + 0x4107]; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x00000000004127ba: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000473fd6: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000474066: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000427906: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x0000000000401706: nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000042e436: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x000000000042e446: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x000000000042e456: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x000000000042e466: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x000000000042e476: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x000000000042e3c6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x000000000042e3d6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x000000000042e3e6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x000000000042e3f6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x000000000042e406: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x000000000042e416: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x000000000042e426: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000458df6: nop word ptr cs:[rax + rax]; mov eax, 0xba; syscall; 
0x000000000044eb92: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000436ea3: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000412414: nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x000000000042e3b5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x000000000042e3a5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000468af4: nop word ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x0000000000439bf6: nop word ptr cs:[rax + rax]; ret; 
0x000000000046c6d6: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x000000000046de4a: nop; add al, 0; add byte ptr [rax - 0x77], cl; adc cl, cl; ret; 
0x0000000000458c0c: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004179ce: nop; add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc al, 0x8a; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000046d777: nop; add eax, dword ptr [rax]; add cl, cl; ret; 
0x0000000000435bdf: nop; add esi, 0x20; bsf edx, edx; sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x0000000000460a9f: nop; add rax, 1; ret; 
0x000000000046fb1f: nop; add rbx, 8; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [rcx]; 
0x00000000004104af: nop; bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004104bf: nop; bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042ae6f: nop; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042c3af: nop; bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000410f6f: nop; bsf eax, eax; sub edi, ecx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000046076f: nop; bsf eax, eax; sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000046085f: nop; bsf eax, eax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000042bb4f: nop; bsf eax, eax; sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042bb5f: nop; bsf eax, eax; sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b47f: nop; bsf ecx, ecx; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042ef9f: nop; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x000000000045f21f: nop; bsf ecx, ecx; vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x000000000042b3ff: nop; bsf edx, edx; cmp al, dl; jb 0x2b40d; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000042b67f: nop; bsf edx, edx; cmp al, dl; jb 0x2b68d; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000046143f: nop; bsf edx, edx; sub edx, eax; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x000000000041103f: nop; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000046083f: nop; bsf rax, rax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043654f: nop; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004284df: nop; endbr64; cmp dword ptr [rdi], 1; je 0x284f0; ret; 
0x0000000000437aaf: nop; endbr64; mov eax, 0x27; syscall; 
0x0000000000437aaf: nop; endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000437aff: nop; endbr64; mov eax, 0x8f; syscall; 
0x0000000000437bbf: nop; endbr64; mov eax, 0x90; syscall; 
0x0000000000437b2f: nop; endbr64; mov eax, 0x91; syscall; 
0x0000000000437b5f: nop; endbr64; mov eax, 0x92; syscall; 
0x0000000000437b8f: nop; endbr64; mov eax, 0x93; syscall; 
0x0000000000411c2f: nop; endbr64; mov eax, 0xb; syscall; 
0x000000000043896f: nop; endbr64; mov eax, 1; syscall; 
0x000000000041137f: nop; endbr64; mov eax, 3; syscall; 
0x0000000000437bef: nop; endbr64; mov eax, 5; syscall; 
0x0000000000461cdf: nop; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000404fdf: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x4ff0; ret; 
0x000000000042869f: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f023], eax; ret; 
0x00000000004284cf: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f1ef], eax; ret; 
0x00000000004284bf: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f1fb], eax; ret; 
0x00000000004284af: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f207], eax; ret; 
0x00000000004286bf: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x7f3cb], eax; ret; 
0x00000000004286af: nop; endbr64; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x7f3e2], rax; ret; 
0x0000000000404f7f: nop; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa11b1], rax; ret; 
0x000000000041241f: nop; endbr64; ret; 
0x0000000000466b4f: nop; endbr64; test byte ptr [rdi], 0x20; je 0x66b60; xor eax, eax; ret; 
0x000000000044eaf3: nop; jmp rdx; 
0x000000000042e3bf: nop; lea rax, [rdi + 1]; ret; 
0x000000000042e3af: nop; lea rax, [rdi]; ret; 
0x00000000004025af: nop; lea rdx, [rax + 1]; jmp 0x2550; xor eax, eax; ret; 
0x000000000042c99f: nop; mov byte ptr [rax], 0; ret; 
0x000000000045f09f: nop; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000405247: nop; mov dword ptr [rip + 0xa0f16], 1; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x0000000000405227: nop; mov dword ptr [rip + 0xa0f36], 1; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051f7: nop; mov dword ptr [rip + 0xa0f66], 1; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x00000000004051d7: nop; mov dword ptr [rip + 0xa0f86], 1; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x0000000000405217: nop; mov dword ptr [rip + 0xa7616], eax; ret; 
0x000000000045fbef: nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000041125f: nop; mov eax, 0xe4; syscall; 
0x00000000004565df: nop; mov eax, 0xffffffff; ret; 
0x0000000000460abf: nop; mov eax, 2; ret; 
0x0000000000460ac7: nop; mov eax, 3; ret; 
0x0000000000460acf: nop; mov eax, 4; ret; 
0x0000000000460ad7: nop; mov eax, 5; ret; 
0x0000000000460adf: nop; mov eax, 6; ret; 
0x0000000000460ae7: nop; mov eax, 7; ret; 
0x00000000004613ff: nop; mov eax, esi; ret; 
0x000000000042c9af: nop; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042ce7f: nop; mov ecx, dword ptr [rsi + rdx - 3]; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x000000000040e7bf: nop; mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], esi; ret; 
0x000000000042d55f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000004179cb: nop; mov qword ptr [rax + 0x340], rdx; lea rdx, [rdx + rcx*4]; mov qword ptr [rax + 0x348], rdx; ret; 
0x000000000045659a: nop; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; movups xmmword ptr [rax + 8], xmm1; xor eax, eax; ret; 
0x000000000040ff5f: nop; mov qword ptr [rax], rcx; mov qword ptr [rax + rdx - 8], rcx; ret; 
0x0000000000456562: nop; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000446d51: nop; mov qword ptr [rbp - 0xa0], rcx; mov rsi, qword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000473fcf: nop; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x0000000000405007: nop; mov qword ptr [rip + 0xa1191], rax; ret; 
0x0000000000404f97: nop; mov qword ptr [rip + 0xa1199], rax; ret; 
0x0000000000404ff0: nop; mov qword ptr [rip + 0xa11a0], rax; ret; 
0x0000000000404f87: nop; mov qword ptr [rip + 0xa11b1], rax; ret; 
0x000000000041a94f: nop; mov r8, rcx; movzx r9d, byte ptr [rcx]; test r9b, r9b; jne 0x1a8b0; ret; 
0x000000000045009f: nop; mov rax, 0xffffffffffffffd8; mov dword ptr fs:[rax], 0x4b; mov eax, 0xffffffff; ret; 
0x000000000045fc7f: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000045fcaf: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000045fcbf: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000445121: nop; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004465cd: nop; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004096af: nop; mov rdi, rbx; call 0x4de0; jmp 0x968a; nop word ptr [rax + rax]; ret; 
0x000000000042d5af: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000004416b2: nop; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000044423c: nop; mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004410ad: nop; mov rsi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000045fd1f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000045fe8f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000045fe4f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000045fe6f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042d68f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000045fccf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000047818c: nop; nop dword ptr [rax]; ja 0x781b1; xor eax, eax; ret; 
0x0000000000468b58: nop; nop dword ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004486e3: nop; nop dword ptr [rax]; ret; 
0x00000000004407e1: nop; nop word ptr [rax + rax]; ret; 
0x000000000044eb90: nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000439bf5: nop; nop word ptr cs:[rax + rax]; ret; 
0x000000000046d776: nop; nop; add eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000044eb8f: nop; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000043268f: nop; not ecx; bzhi eax, ecx, edx; jne 0x32680; xor eax, eax; ret; 
0x000000000040b6fc: nop; or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xa39; cmovne rax, rdx; ret; 
0x000000000042676f: nop; or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x26770; ret; 
0x0000000000455acf: nop; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x000000000042a30a: nop; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000043700c: nop; push 1; push 0; call rax; 
0x00000000004191cf: nop; ret; 
0x000000000041087f: nop; sub rdi, -0x40; bsf ecx, ecx; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042ae8f: nop; tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042ae9f: nop; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000460d4f: nop; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d3f: nop; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000042afef: nop; tzcnt eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004105df: nop; tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000004356af: nop; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000040f83f: nop; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040f76f: nop; vmovdqu ymmword ptr [rdi - 0x40], ymm0; vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x000000000042b56f: nop; vzeroupper; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000043e06f: nop; xor eax, eax; jmp 0x3e008; nop dword ptr [rax]; call rax; 
0x0000000000429634: nop; xor eax, eax; leave; ret; 
0x0000000000479ec2: nop; xor eax, eax; mov r12, qword ptr [rbp - 8]; leave; ret; 
0x0000000000428eed: nop; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000040959f: nop; xor eax, eax; pop rbp; ret; 
0x000000000040af1f: nop; xor eax, eax; ret; 
0x0000000000431def: nop; xor eax, eax; vzeroupper; ret; 
0x0000000000401ecf: nop; xor edi, edi; mov eax, edx; syscall; 
0x0000000000404d36: nop; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000461d99: not eax; test eax, 0x410000; je 0x61dc8; mov eax, 0x101; syscall; 
0x0000000000429f83: not ecx; and ecx, 0x120; je 0x29f90; ret; 
0x0000000000467c63: not ecx; and ecx, 0x120; je 0x67c70; ret; 
0x000000000042a3b3: not ecx; and ecx, 0x128; je 0x2a3c0; ret; 
0x000000000042a423: not ecx; and ecx, 0x128; je 0x2a430; ret; 
0x000000000040b8c3: not ecx; and ecx, 0x128; je 0xb8d0; ret; 
0x000000000040b933: not ecx; and ecx, 0x128; je 0xb940; ret; 
0x00000000004319c2: not ecx; bzhi eax, ecx, edx; jne 0x319b0; xor eax, eax; vzeroupper; ret; 
0x0000000000432690: not ecx; bzhi eax, ecx, edx; jne 0x32680; xor eax, eax; ret; 
0x0000000000428917: not esi; and esi, 0x80; syscall; 
0x0000000000401c00: notrack jmp rax; mov rax, rdi; ret; 
0x000000000046e501: notrack jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x000000000042d524: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbd4: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000004347f7: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434825: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004114aa: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000411485: or al, 0; add byte ptr [rax], al; syscall; 
0x000000000040a7e1: or al, 0; add byte ptr [rax], al; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000408632: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000419ba1: or al, 0; add byte ptr [rax], al; xor edi, edi; mov eax, esi; syscall; 
0x00000000004308e6: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042c713: or al, 0x16; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x0000000000430ba8: or al, 0x16; test al, al; jne 0x30b90; xor eax, eax; sub eax, ecx; ret; 
0x0000000000475436: or al, 0x24; mov qword ptr [rbx], rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000461cd0: or al, 0x31; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000044eb23: or al, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000004356d7: or al, 0x48; sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000475305: or al, 0x5b; pop r12; pop rbp; ret; 
0x000000000044fed3: or al, 0x83; call 0x44c87db; ret; 
0x0000000000427a13: or al, 0x83; call 0x5708031b; push rdx; or byte ptr [rax], al; ret; 
0x000000000041b893: or al, 0x89; jae 0x1b8d7; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045d7d4: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000040ca1d: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000045b0b2: or al, 0x8b; sub eax, ecx; ret; 
0x0000000000459c84: or al, 0x8b; sub eax, ecx; vzeroupper; ret; 
0x000000000045b39e: or al, 0x8b; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x0000000000459f3c: or al, 0x8b; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000045a694: or al, 0x8b; sub eax, ecx; xtest; jne 0x5a6a1; vzeroupper; ret; 
0x000000000045fbce: or al, 0x93; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000042d522: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbd2: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000004705d8: or al, 0xc9; ret; 
0x000000000045b0aa: or al, 0xe; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; ret; 
0x0000000000459c7c: or al, 0xe; mov eax, dword ptr [r11 + rax*4]; mov ecx, dword ptr [r11 + rcx*4]; sub eax, ecx; vzeroupper; ret; 
0x000000000042ef99: or al, 0xe; sub eax, ecx; ret; 
0x000000000042e4cd: or al, 0xe; sub eax, ecx; vzeroupper; ret; 
0x000000000042f129: or al, 0xe; sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042e63a: or al, 0xe; sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000042ea2d: or al, 0xe; sub eax, ecx; xtest; jne 0x2ea3a; vzeroupper; ret; 
0x000000000043200d: or al, 0xe; sub eax, ecx; xtest; jne 0x3201a; vzeroupper; ret; 
0x00000000004594d7: or al, 0xf6; ret 0x7501; 
0x00000000004594cf: or al, 0xf6; ret 0x7502; 
0x0000000000450902: or al, 0xf6; ret 0xf01; 
0x00000000004534c4: or al, 0xf6; ret 0xf40; 
0x0000000000473fc0: or al, 0xf7; cmp al, 8; jne 0x1513; mov qword ptr [rcx], rdx; ret; 
0x0000000000435b73: or al, 0xf; mov esp, 0x8dc229d2; add al, 0x16; cmovae eax, esi; ret; 
0x0000000000448943: or al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000413690: or al, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000428eeb: or al, 1; nop; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474f2a: or al, 6; add rax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x0000000000420439: or al, 6; lea rax, [rip + 0x81cbe]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041fb91: or al, 6; lea rax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042c3b5: or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042bc66: or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000424378: or al, 8; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000431c49: or al, ah; cmp edx, ecx; ja 0x31c22; xor eax, eax; vzeroupper; ret; 
0x0000000000432939: or al, ah; cmp edx, ecx; ja 0x32917; xor eax, eax; ret; 
0x000000000042036f: or al, byte ptr [rax]; add byte ptr [rax - 0x4b743], al; jmp qword ptr [rax]; 
0x0000000000467c99: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x3d; cmovne rax, rdx; ret; 
0x000000000040b6fd: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xa39; cmovne rax, rdx; ret; 
0x000000000043c44f: or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x0000000000420d27: or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x0000000000430e2d: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e557: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430e51: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040977b: or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000473e2a: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000473df6: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; mov r9, qword ptr [rbp - 0x140]; mov rax, qword ptr [rbp - 0x138]; call rax; 
0x0000000000411c05: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000411c05: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11c14; ret; 
0x00000000004095b8: or al, byte ptr [rax]; add byte ptr [rbp + 3], dh; ret; 
0x0000000000405f2f: or al, byte ptr [rax]; add dword ptr [rax + 0x13e], edi; syscall; 
0x00000000004051dc: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x000000000040524c: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0ed7], rax; ret; 
0x000000000040522c: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0eef], rax; ret; 
0x00000000004051fc: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa0f17], rax; ret; 
0x0000000000401679: or al, byte ptr [rax]; call 0x1610; mov byte ptr [rip + 0xabae1], 1; pop rbp; ret; 
0x00000000004054ca: or al, byte ptr [rax]; cmove rdi, rax; lea rsi, [rdx - 8]; jmp 0x12050; nop dword ptr [rax]; ret; 
0x00000000004047e8: or al, byte ptr [rax]; cmp ecx, 1; jg 0x4850; call rax; 
0x00000000004046e0: or al, byte ptr [rax]; cmp ecx, 1; jg 0x4870; mov edi, r13d; call rax; 
0x000000000040478f: or al, byte ptr [rax]; cmp ecx, 1; jg 0x4898; mov rdi, r8; mov esi, r13d; call rax; 
0x0000000000401f5a: or al, byte ptr [rax]; mov dword ptr [rip + 0xaaafe], edx; pop rbx; pop rbp; ret; 
0x0000000000401f54: or al, byte ptr [rax]; mov dword ptr [rip + 0xaab00], ecx; mov dword ptr [rip + 0xaaafe], edx; pop rbx; pop rbp; ret; 
0x0000000000401e96: or al, byte ptr [rax]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x0000000000401f60: or al, byte ptr [rax]; pop rbx; pop rbp; ret; 
0x0000000000404f8d: or al, byte ptr [rax]; ret; 
0x0000000000405264: or al, byte ptr [rax]; test eax, eax; jne 0x5270; ret; 
0x00000000004544c4: or al, byte ptr [rbx + rcx*4 + 0x67]; or byte ptr [rcx - 0x77], al; ret; 
0x0000000000445a29: or al, byte ptr [rcx - 0xa]; ret; 
0x00000000004188d8: or al, ch; add dl, byte ptr [rsi + 2]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000042345b: or al, ch; lahf; idiv edi; dec dword ptr [rax + 0x39]; ret; 
0x0000000000418751: or al, ch; mov dword ptr [rdi + 2], edx; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000418818: or al, ch; ret 0x256; 
0x00000000004678d3: or al, ch; xchg r15, rax; stc; dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x0000000000431c48: or al, r12b; cmp edx, ecx; ja 0x31c22; xor eax, eax; vzeroupper; ret; 
0x0000000000432938: or al, r12b; cmp edx, ecx; ja 0x32917; xor eax, eax; ret; 
0x00000000004438f7: or bh, ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000458562: or bh, byte ptr [rbx - 1]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000455ac9: or bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x0000000000465220: or bl, ch; shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000046836c: or bl, dh; bsf ecx, ecx; cmp al, cl; jae 0x6837b; xor eax, eax; ret; 
0x00000000004685ec: or bl, dh; bsf ecx, ecx; cmp al, cl; jae 0x685fb; xor eax, eax; ret; 
0x00000000004544c7: or byte ptr [ecx - 0x77], al; ret; 
0x0000000000448770: or byte ptr [r11 + 0x1974fdf8], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000449a0a: or byte ptr [r11 + 0x41], bl; pop rsp; pop rbp; ret; 
0x00000000004642f8: or byte ptr [r11 + 0x54891114], cl; ret; 
0x0000000000428ee7: or byte ptr [r11 - 0x6ffef3b9], r8b; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000429236: or byte ptr [r13 - 0x33], r14b; sub dword ptr [rdi + 4], 1; je 0x292e9; xor eax, eax; ret; 
0x00000000004296a3: or byte ptr [r15 + r8 - 0x37], r14b; mov eax, 1; ret; 
0x0000000000423399: or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000428058: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000423e76: or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 0xa], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000466d37: or byte ptr [r8 + r8*2 - 0x48], sil; add dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000479ec0: or byte ptr [r8 - 0x74b33fcf], r10b; clc; leave; ret; 
0x00000000004242d0: or byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000444237: or byte ptr [r8 - 0x77], 0x4d; nop; mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000474f26: or byte ptr [r8 - 0x77], cl; or al, 6; add rax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x0000000000450301: or byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x0000000000413262: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x000000000042086e: or byte ptr [r8], al; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x0000000000440ad4: or byte ptr [r9 + rcx*4 + 0x4d], 0xa8; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x00000000004664c9: or byte ptr [r9 - 0x2d], r9b; jmp 0x1055ee1e; ret; 
0x000000000040b543: or byte ptr [rax + 0x16], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000435cdb: or byte ptr [rax + 0x39], 0xc1; cmovb rax, rcx; ret; 
0x000000000043b57a: or byte ptr [rax + 0x39], cl; ret 0xed75; 
0x0000000000469789: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000428059: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000046cc64: or byte ptr [rax + 0x39], r9b; ret; 
0x0000000000423e77: or byte ptr [rax + 0x3b], cl; adc byte ptr [r11 + 0xa], r14b; movzx eax, byte ptr [rax]; ret; 
0x0000000000417023: or byte ptr [rax + 0x63], 0xd3; mov edi, dword ptr [rbp - 0x958]; lea rsi, [rbp - 0x930]; mov eax, 0x14; syscall; 
0x0000000000404232: or byte ptr [rax + 0x9e], bh; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000404231: or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004464a3: or byte ptr [rax + 0xf], 0x45; ret 0xc748; 
0x000000000046684b: or byte ptr [rax + 2], bh; pop rbp; ret; 
0x000000000046684a: or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x00000000004654b5: or byte ptr [rax + 3], cl; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8949; 
0x0000000000461566: or byte ptr [rax + 9], cl; ret 0xf48; 
0x0000000000466d38: or byte ptr [rax + rax*2 - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000404fa9: or byte ptr [rax + rax], al; add byte ptr [rsi + 1], dh; ret; 
0x000000000043e327: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000043e326: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004501b2: or byte ptr [rax + rcx*4 + 0x20], al; pop rbx; pop r12; pop rbp; ret; 
0x000000000046e45c: or byte ptr [rax - 0x39], cl; ret; 
0x0000000000401007: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000046f316: or byte ptr [rax - 0x3f], 0xe0; add eax, 0x1543948; and byte ptr [rdi], cl; xchg ebp, eax; ret 0xc931; 
0x000000000046e6fa: or byte ptr [rax - 0x3f], cl; call 0x50942f05; push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000429fb4: or byte ptr [rax - 0x73], cl; adc eax, 0x1894; lea rax, [rip + 0xe5d]; cmovne rax, rdx; ret; 
0x000000000042a030: or byte ptr [rax - 0x73], cl; adc eax, 0x1b48; lea rax, [rip + 0x2641]; cmovne rdx, rax; mov rax, rdx; ret; 
0x000000000040b8f6: or byte ptr [rax - 0x73], cl; adc eax, 0x5122; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000040b966: or byte ptr [rax - 0x73], cl; adc eax, 0x5732; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x0000000000467c94: or byte ptr [rax - 0x73], cl; adc eax, 0xad4; lea rax, [rip + 0x3d]; cmovne rax, rdx; ret; 
0x000000000042a3e6: or byte ptr [rax - 0x73], cl; adc eax, 0xb932; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x000000000042adfa: or byte ptr [rax - 0x73], cl; adc eax, 0xbc1e; lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x000000000042b3b7: or byte ptr [rax - 0x73], cl; add al, 0x37; ret; 
0x000000000046029b: or byte ptr [rax - 0x73], cl; add eax, 0x133d; lea rdx, [rip + 0x1566]; cmove rax, rdx; ret; 
0x000000000042a1a2: or byte ptr [rax - 0x73], cl; add eax, 0x3026; lea rdx, [rip + 0x2f2f]; cmove rax, rdx; ret; 
0x0000000000459af2: or byte ptr [rax - 0x73], cl; add eax, 0x5d86; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x000000000042a272: or byte ptr [rax - 0x73], cl; add eax, 0x6696; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x000000000046022b: or byte ptr [rax - 0x73], cl; add eax, 0x8bd; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x0000000000465cc4: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret 0x4808; 
0x0000000000466244: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000479ec1: or byte ptr [rax - 0x74b33fcf], dl; clc; leave; ret; 
0x0000000000405083: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000458ea6: or byte ptr [rax - 0x75], cl; jg 0x58eb3; call qword ptr [rbx]; 
0x00000000004502fe: or byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x00000000004242d1: or byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000463507: or byte ptr [rax - 0x75], cl; push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000444238: or byte ptr [rax - 0x77], 0x4d; nop; mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x000000000040ff62: or byte ptr [rax - 0x77], cl; adc al, r15b; ret; 
0x0000000000458a95: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x39], cl; add eax, 0x53e44; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041860c: or byte ptr [rax - 0x77], cl; add eax, 0x942fc; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000405404: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop rbp; ret; 
0x000000000046a853: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x00000000004557a8: or byte ptr [rax - 0x77], cl; jo 0x557bd; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; ret; 
0x0000000000458ad9: or byte ptr [rax - 0x77], cl; mov qword ptr ds:[rip + 0x53e00], 0; ret; 
0x0000000000474f27: or byte ptr [rax - 0x77], cl; or al, 6; add rax, 8; cmp rdi, rax; jne 0x74f20; ret; 
0x0000000000464423: or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000458760: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x41], 1; pop rsp; pop r13; pop rbp; ret; 
0x0000000000413b77: or byte ptr [rax - 0x77], cl; ret 0x14c; 
0x0000000000450302: or byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000465607: or byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000409c85: or byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000413263: or byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x00000000004329f3: or byte ptr [rax - 0x7d], 0xee; add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x0000000000465c2d: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046f2a8: or byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000046e8b8: or byte ptr [rax - 0x7d], cl; ret 0x4818; 
0x00000000004777bc: or byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000041a8da: or byte ptr [rax - 0x7d], cl; ret 0x8401; 
0x0000000000438f33: or byte ptr [rax - 0x7d], cl; ret; 
0x000000000041bc71: or byte ptr [rax - 1], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000043108c: or byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000460230: or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x676; cmove rax, rdx; ret; 
0x0000000000467cbe: or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x5b8; cmovne rax, rdx; ret; 
0x000000000042086f: or byte ptr [rax], al; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x000000000043108d: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004310b1: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041ddf7: or byte ptr [rax], al; add byte ptr [rax - 0x8e743], al; jmp qword ptr [rax]; 
0x0000000000439b1f: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; call rsi; 
0x00000000004251a9: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000427a06: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044ec7d: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x000000000042975d: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000458d49: or byte ptr [rax], al; add byte ptr [rax], al; mov rdx, r14; lea rsi, [rip + 0x28a31]; mov eax, 0xe; syscall; 
0x0000000000462d09: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004384b5: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004384b5: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x384c8; ret; 
0x0000000000417f78: or byte ptr [rax], al; add byte ptr [rbp + 0x13], dh; mov rdx, qword ptr [rip + 0x8fc04]; mov rax, rdx; ret; 
0x0000000000450f3b: or byte ptr [rax], al; add byte ptr [rbx - 0x9b43], al; jmp qword ptr [rsi + 0xf]; 
0x000000000042a349: or byte ptr [rax], al; add dword ptr [rax - 0x73], ecx; adc eax, 0xa1bd; cmove rax, rdx; ret; 
0x00000000004279a4: or byte ptr [rax], al; add dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x00000000004279bf: or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x000000000041f4f9: or byte ptr [rax], al; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000412457: or byte ptr [rax], al; je 0x12460; ret; 
0x000000000042798d: or byte ptr [rax], al; jne 0x279d0; mov qword ptr [rip + 0x852e0], rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000420538: or byte ptr [rax], al; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000417e61: or byte ptr [rax], al; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x0000000000417ff9: or byte ptr [rax], al; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8fb53]; mov qword ptr [rsi], rax; ret; 
0x00000000004186b7: or byte ptr [rax], al; mov qword ptr [rip + 0x8c938], rbx; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000418003: or byte ptr [rax], al; mov qword ptr [rsi], rax; ret; 
0x00000000004186be: or byte ptr [rax], al; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041f376: or byte ptr [rax], al; mov r14, rdx; mov r11d, 1; xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000041fb98: or byte ptr [rax], al; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x00000000004204bb: or byte ptr [rax], al; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x0000000000418b0b: or byte ptr [rax], al; mov rax, rdi; shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x0000000000417f82: or byte ptr [rax], al; mov rax, rdx; ret; 
0x0000000000427996: or byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000419530: or byte ptr [rax], al; mov rdi, rax; call 0x2a2d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000042adf8: or byte ptr [rax], al; or byte ptr [rax - 0x73], cl; adc eax, 0xbc1e; lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x0000000000418308: or byte ptr [rax], al; ret; 
0x00000000004284f4: or byte ptr [rax], al; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x0000000000427159: or byte ptr [rax], al; test rbx, rbx; jne 0x27140; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004284f3: or byte ptr [rax], r8b; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x000000000043bdba: or byte ptr [rbp + 0x13], dh; or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x000000000040b7ff: or byte ptr [rbp + 0x1e], dh; test eax, eax; lea rdx, [rip + 0x3f35]; lea rax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000045835f: or byte ptr [rbp + 0x31], al; shr byte ptr [rdx], 0x4c; lea ecx, [rbp - 0x38]; call rax; 
0x000000000042a21a: or byte ptr [rbp - 0x1d], dh; lea rax, [rip + 0x367c]; test ch, 8; jne 0x2a1eb; ret; 
0x00000000004602c8: or byte ptr [rbp - 0x1d], dh; lea rax, [rip + 0x9ce]; and ch, 8; jne 0x60295; ret; 
0x0000000000460258: or byte ptr [rbp - 0x1d], dh; lea rax, [rip + 0xbe]; and ch, 8; jne 0x60225; ret; 
0x000000000042a2a2: or byte ptr [rbp - 0x20], dh; lea rax, [rip + 0x41e4]; test dh, 8; jne 0x2a25b; ret; 
0x0000000000459a88: or byte ptr [rbp - 0x24], dh; lea rax, [rip + 0x14e]; and ch, 8; jne 0x59a45; ret; 
0x000000000042a378: or byte ptr [rbp - 0x24], dh; lea rax, [rip + 0x75ee]; and ch, 8; jne 0x2a335; ret; 
0x000000000040b8f1: or byte ptr [rbp - 0x27], dh; and ch, 8; lea rdx, [rip + 0x5122]; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x000000000040b961: or byte ptr [rbp - 0x27], dh; and ch, 8; lea rdx, [rip + 0x5732]; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x000000000042a3e1: or byte ptr [rbp - 0x27], dh; and ch, 8; lea rdx, [rip + 0xb932]; lea rax, [rip + 0xb10b]; cmovne rax, rdx; ret; 
0x0000000000429237: or byte ptr [rbp - 0x33], dh; sub dword ptr [rdi + 4], 1; je 0x292e9; xor eax, eax; ret; 
0x00000000004291fe: or byte ptr [rbp - 0x367af040], al; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x000000000042a226: or byte ptr [rbp - 0x3e], dh; ret; 
0x0000000000460264: or byte ptr [rbp - 0x42], dh; ret; 
0x000000000042a384: or byte ptr [rbp - 0x52], dh; ret; 
0x000000000042a2ae: or byte ptr [rbp - 0x56], dh; ret; 
0x000000000044ffad: or byte ptr [rbp - 0x77], al; adc al, 0xc9; ret; 
0x0000000000448771: or byte ptr [rbx + 0x1974fdf8], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000448747: or byte ptr [rbx + 0x37403fe], al; ret; 
0x00000000004132cd: or byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000046e736: or byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; jmp rax; 
0x0000000000406bbf: or byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000449a0b: or byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x00000000004642f9: or byte ptr [rbx + 0x54891114], cl; ret; 
0x0000000000464767: or byte ptr [rbx + 0x54891614], cl; ret; 
0x0000000000456006: or byte ptr [rbx + 0x5c415b02], cl; pop rbp; ret; 
0x000000000047a151: or byte ptr [rbx + 0x97421f8], al; pop rbp; ret; 
0x0000000000428ee8: or byte ptr [rbx - 0x6ffef3b9], al; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000449a08: or byte ptr [rbx], ch; or byte ptr [r11 + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000046666b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000466883: or byte ptr [rcx + 0x2b807], cl; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000466882: or byte ptr [rcx + 0x2b807], r9b; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000464f3f: or byte ptr [rcx + 0x39], cl; ret 0xeb75; 
0x000000000043b95d: or byte ptr [rcx + 0x39], cl; ret; 
0x000000000045912c: or byte ptr [rcx + 0x5c415bd0], cl; pop r13; pop rbp; ret; 
0x000000000040b399: or byte ptr [rcx + 0x5c415bd8], cl; pop r13; pop rbp; ret; 
0x000000000046e66b: or byte ptr [rcx + 0x5c], al; pop rbp; jmp rdx; 
0x000000000046e66b: or byte ptr [rcx + 0x5c], al; pop rbp; jmp rdx; nop dword ptr [rax]; ret; 
0x000000000046d95b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000465820: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x0000000000454a12: or byte ptr [rcx + rcx*4 + 0x20], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000440ad5: or byte ptr [rcx + rcx*4 + 0x4d], 0xa8; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x00000000004497e6: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000423581: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000042493c: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000046f991: or byte ptr [rcx + rcx*4 - 0xe], cl; add rax, qword ptr [rbx]; mov rsi, r13; mov edi, r12d; call rax; 
0x000000000046f9db: or byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb23: or byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov edi, r12d; call qword ptr [rcx]; 
0x0000000000437af1: or byte ptr [rcx + rdi - 0x3a], cl; jne 0x37ad0; mov eax, edi; ret; 
0x00000000004664ca: or byte ptr [rcx - 0x2d], cl; jmp 0x1055ee1e; ret; 
0x0000000000466672: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000457bfa: or byte ptr [rcx - 0x75], cl; push rdi; adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x00000000004667b9: or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; pop rbp; ret; 
0x00000000004544c8: or byte ptr [rcx - 0x77], al; ret; 
0x0000000000414bd7: or byte ptr [rcx - 0x77], al; xchg ebp, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000419f86: or byte ptr [rcx - 0x77], al; xchg edx, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000470ee5: or byte ptr [rcx - 0x77], cl; adc ecx, ecx; ret; 
0x000000000046993b: or byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004704c6: or byte ptr [rcx], al; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; div byte ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x000000000042ad93: or byte ptr [rcx], bh; ret 0xe875; 
0x000000000045499a: or byte ptr [rcx], cl; add eax, ecx; cmp rdx, rsi; jne 0x54980; ret; 
0x000000000042ad58: or byte ptr [rcx], cl; ret 0xc985; 
0x0000000000423298: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x000000000043e0d7: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x000000000041a3bd: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x000000000041a3e1: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8b48; 
0x000000000041a39c: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x0000000000454999: or byte ptr [rcx], r9b; add eax, ecx; cmp rdx, rsi; jne 0x54980; ret; 
0x00000000004682ae: or byte ptr [rdi + 0x12], dh; tzcnt eax, eax; cmp edx, eax; jbe 0x682c0; lea rax, [rdi + rax*4]; ret; 
0x000000000046852e: or byte ptr [rdi + 0x12], dh; tzcnt eax, eax; cmp edx, eax; jbe 0x68540; lea rax, [rdi + rax*4]; ret; 
0x000000000043bdbd: or byte ptr [rdi + 0x355], 0x80; xor eax, eax; ret; 
0x000000000040ff59: or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x00000000004613f5: or byte ptr [rdi + 0xb], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000042ce5b: or byte ptr [rdi + 7], bh; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000045f52b: or byte ptr [rdi + 7], bh; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x00000000004296a4: or byte ptr [rdi + rax - 0x37], dh; mov eax, 1; ret; 
0x00000000004640fd: or byte ptr [rdi - 0x18], ah; mov word ptr [rbp - 6], ds; jmp qword ptr [rsi + 0x66]; 
0x0000000000440023: or byte ptr [rdi - 0x18], ah; xchg di, ax; cld; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rsi*2 + 0x48], 0x89; ret; 
0x000000000040ff53: or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000427681: or byte ptr [rdi], cl; adc dword ptr [rax + 0x10], ecx; xor eax, eax; ret; 
0x000000000042339a: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000426037: or byte ptr [rdi], cl; mov dh, 0; pop rbx; pop r12; pop rbp; ret; 
0x0000000000426a1f: or byte ptr [rdi], cl; mov dh, 0x40; inc dword ptr [rbx + 0x415bef23]; pop rsp; pop rbp; ret; 
0x00000000004614ab: or byte ptr [rdi], cl; mov esp, 0x8dc629d2; add al, 0x16; ret; 
0x0000000000447361: or byte ptr [rdi], cl; test dword ptr [rbx], ecx; add dword ptr [rax], eax; add dh, dh; ret; 
0x0000000000473f71: or byte ptr [rdi], cl; test dword ptr [rcx + 0x48fff8d5], edx; mov eax, dword ptr [rax]; ret; 
0x0000000000445efa: or byte ptr [rdi], cl; test dword ptr [rdi], ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x0000000000442e3f: or byte ptr [rdi], cl; test edi, ebx; add byte ptr [rax], al; add dh, dh; ret; 
0x0000000000437eb1: or byte ptr [rdi], cl; xchg esp, eax; ret 0x950a; 
0x000000000041dda1: or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x000000000040e7ab: or byte ptr [rdx + 0x12], dh; mov rcx, qword ptr [rsi]; mov rsi, qword ptr [rsi + rdx - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rsi; ret; 
0x000000000040fbe5: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000040ca07: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000040b6f3: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0xa90]; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000040b5f3: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0xbc0]; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042a093: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip - 0x1dee0]; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000041b528: or byte ptr [rip + 0x91681], 0xc; ret; 
0x000000000041b498: or byte ptr [rip + 0x91711], 3; ret; 
0x000000000041b493: or byte ptr [rsi + 0x65], dh; jne 0x1b43c; or byte ptr [rip + 0x91711], 3; ret; 
0x000000000041b523: or byte ptr [rsi + 0x65], dh; jne 0x1b4cc; or byte ptr [rip + 0x91681], 0xc; ret; 
0x000000000042ce87: or byte ptr [rsi + 7], bh; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f557: or byte ptr [rsi + 7], bh; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042ce6c: or byte ptr [rsi + 7], bh; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f53d: or byte ptr [rsi + 7], bh; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x00000000004557ef: or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x000000000042ce48: or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000045f517: or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000438ec8: or ch, bh; dec dword ptr [rax - 0x77]; ret; 
0x0000000000448000: or cl, byte ptr [rax + 0x39]; ret 0x1a73; 
0x0000000000423c9f: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x0000000000424b35: or cl, byte ptr [rax + 1]; ret 0x8949; 
0x0000000000417a02: or cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x000000000046f242: or cl, byte ptr [rax - 0x7d]; ret 0x8008; 
0x0000000000449135: or cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000423e7d: or cl, byte ptr [rdi]; mov dh, 0; ret; 
0x000000000047a018: or cl, byte ptr [rdi]; mov edi, 0x2d6b005; add byte ptr [rcx], bh; ret 0x4e0f; 
0x0000000000429071: or cl, byte ptr [rdi]; mov edi, 0x7e65705; add byte ptr [rcx], bh; ret 0x4e0f; 
0x000000000043c84a: or cl, byte ptr [rdi]; xchg esp, eax; ret 0x8566; 
0x000000000045390f: or cl, ch; ret 0xfffb; 
0x000000000041d2f3: or cl, ch; ret; 
0x000000000044878d: or cl, cl; ret; 
0x000000000041fa11: or dh, al; add byte ptr [rip - 0x74917], ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000430cd9: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000423a7b: or dh, bh; jmp qword ptr [rsi - 0x70]; 
0x00000000004572a8: or dh, byte ptr [rbp + riz*2 + 0x44]; mov eax, esp; pop rbx; pop r12; pop rbp; ret; 
0x0000000000424c96: or dh, byte ptr [rdi + rax*2 + 0x49]; cmp ebp, eax; jb 0x24c90; jmp 0x24ba6; nop dword ptr [rax + rax]; ret; 
0x0000000000426a86: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jb 0x26a80; lea eax, [rdx + rdi]; ret; 
0x0000000000456446: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jb 0x56440; lea eax, [rdx + rdi]; ret; 
0x0000000000439417: or dh, dh; ret 0x7401; 
0x00000000004185b6: or dword ptr [r8], eax; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x00000000004185c6: or dword ptr [r8], eax; ret; 
0x0000000000412448: or dword ptr [r8], r8d; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x00000000004707ad: or dword ptr [rax + 0x39], ecx; cli; jae 0x7084c; leave; mov eax, 1; ret; 
0x0000000000426770: or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x26770; ret; 
0x00000000004105d6: or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000044e8e9: or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x000000000046d57d: or dword ptr [rax - 0x75], ecx; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000040b0bd: or dword ptr [rax - 0x77], ecx; fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000426e49: or dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], 0x84; pop rbp; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000422a33: or dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], 0x84; push rbx; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000426afb: or dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], 0x84; xchg ebx, eax; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000411a5a: or dword ptr [rax - 0x7d], ecx; in al, dx; sbb byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000463c46: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000042d1be: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x0000000000450dda: or dword ptr [rax], eax; add byte ptr [rax - 0x13f43], al; jmp qword ptr [rsi - 0x75]; 
0x00000000004602cf: or dword ptr [rax], eax; add byte ptr [rax - 0x418af71b], al; ret; 
0x0000000000430fbd: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e6c7: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430f17: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000453ffe: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000419826: or dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000458a4d: or dword ptr [rax], eax; add byte ptr [rax], al; bt rcx, rdx; jae 0x58a66; neg eax; ret; 
0x0000000000411bbe: or dword ptr [rax], eax; add byte ptr [rax], al; or r10d, 0x40; syscall; 
0x0000000000411b66: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004186ea: or dword ptr [rax], eax; add byte ptr [rcx], dh; sar byte ptr [rax + 0x14e], cl; mov rdi, rbx; syscall; 
0x0000000000425d58: or dword ptr [rax], eax; add byte ptr [rdi + 0x13], dh; mov rax, qword ptr [rbx + 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426262: or dword ptr [rax], eax; add byte ptr [rdi + 0x69], dh; movzx esi, byte ptr [r15]; lea rbx, [r15 + 1]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000426344: or dword ptr [rax], eax; add byte ptr [rdi + 0xf], dh; mov rax, qword ptr [rbx + 0x40]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000455bb0: or dword ptr [rax], eax; add byte ptr [rdi], cl; xchg dword ptr [rdi], edx; add dword ptr [rax], eax; add byte ptr [rcx - 0x76b32a], cl; call qword ptr [rbx + 0x18]; 
0x00000000004124cd: or dword ptr [rax], eax; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x9a377]; ret; 
0x000000000041b507: or dword ptr [rax], eax; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x9169b], al; ret; 
0x000000000041b4e5: or dword ptr [rax], eax; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x916bd], al; ret; 
0x000000000041b477: or dword ptr [rax], eax; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x9172b], al; ret; 
0x000000000041b455: or dword ptr [rax], eax; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x9174d], al; ret; 
0x000000000041be49: or dword ptr [rax], eax; call 0x39610; pop rbp; mov qword ptr [rip + 0x90de4], 0; ret; 
0x000000000041be0d: or dword ptr [rax], eax; call 0x4de0; xor eax, eax; pop rbp; ret; 
0x000000000041bddf: or dword ptr [rax], eax; cmp eax, 1; jg 0x1be08; xor eax, eax; pop rbp; ret; 
0x00000000004124c6: or dword ptr [rax], eax; cmp qword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x0000000000411490: or dword ptr [rax], eax; cmp rax, rdi; jb 0x114a0; xor eax, eax; ret; 
0x000000000040e3d1: or dword ptr [rax], eax; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000412c9c: or dword ptr [rax], eax; jmp 0x12c62; ret; 
0x00000000004197f9: or dword ptr [rax], eax; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x19810; ret; 
0x0000000000412508: or dword ptr [rax], eax; lea rax, [rip + 0x9a33f]; ret; 
0x0000000000418612: or dword ptr [rax], eax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000419d6e: or dword ptr [rax], eax; leave; ret; 
0x00000000004124bf: or dword ptr [rax], eax; mov qword ptr [rip + 0x9a3a8], rdi; cmp qword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x00000000004185b7: or dword ptr [rax], eax; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x0000000000419d60: or dword ptr [rax], eax; movzx eax, word ptr [rip - 0x19d31]; mov qword ptr [rip + 0x92be8], rax; leave; ret; 
0x0000000000419b09: or dword ptr [rax], eax; pop rbp; ret; 
0x0000000000406893: or dword ptr [rax], eax; pop rbx; pop r12; pop rbp; ret; 
0x00000000004124d7: or dword ptr [rax], eax; ret; 
0x0000000000412449: or dword ptr [rax], eax; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x00000000004124f9: or dword ptr [rax], eax; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x0000000000412469: or dword ptr [rax], eax; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000411249: or dword ptr [rax], eax; test rax, rax; je 0x11260; push rbp; mov rbp, rsp; call rax; 
0x00000000004124f8: or dword ptr [rax], r8d; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x0000000000412468: or dword ptr [rax], r8d; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000042b3b3: or dword ptr [rbp + 0x480874c0], eax; lea eax, [rdi + rsi]; ret; 
0x000000000041a956: or dword ptr [rbp - 0x7c], eax; leave; jne 0x1a8b0; ret; 
0x000000000046b623: or dword ptr [rbx + 1], edx; add byte ptr [rcx], dh; shl byte ptr [rdi - 0x18], 0x91; ret 0xfffa; 
0x000000000046ae51: or dword ptr [rbx - 0x76be0002], eax; ret 0x440f; 
0x000000000042a233: or dword ptr [rbx], edi; add byte ptr [rax], al; test edx, 0x40000000; je 0x2a211; ret; 
0x000000000041a9a0: or dword ptr [rcx + rax - 0x28], 0x3e; jmp rax; 
0x000000000047a269: or dword ptr [rcx - 0x73], 0x4528307c; xor edx, edx; mov edx, 1; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004191c6: or dword ptr [rcx - 0x73], ecx; jl 0x191d4; pop rax; jmp rdx; 
0x00000000004191c6: or dword ptr [rcx - 0x73], ecx; jl 0x191d4; pop rax; jmp rdx; nop; ret; 
0x0000000000458a4c: or dword ptr [rcx], 0x48000000; bt ecx, edx; jae 0x58a66; neg eax; ret; 
0x0000000000422a93: or dword ptr [rcx], eax; add byte ptr [rax], al; mov rdx, r13; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000404a6b: or dword ptr [rdi - 0x2e], esi; mov rax, rsi; ret; 
0x000000000044e8e5: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x000000000042c6e1: or dword ptr [rdi], ecx; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042ce44: or dword ptr [rdx - 0x1f], esp; jge 0x2ce51; jle 0x2ce11; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000045f513: or dword ptr [rdx - 0x1f], esp; jge 0x5f520; jle 0x5f4e0; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000450163: or dword ptr [rdx - 5], eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000401e2a: or dword ptr [rip + 0xaacc0], 0x400; ret; 
0x00000000004192d5: or dword ptr [rsi - 0x18], esi; cmp eax, ecx; je 0x19204; sub eax, ecx; ret; 
0x00000000004124f7: or dword ptr gs:[rax], r8d; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x000000000042d821: or eax, 0x1c478d48; ret; 
0x0000000000440531: or eax, 0x215f9e8; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045efea: or eax, 0x26391; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000045da15: or eax, 0x27966; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000435e25: or eax, 0x48fad348; test edx, edx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000436532: or eax, 0x49c0bd0f; lea eax, [rax + rax + 0x40]; ret; 
0x000000000040e849: or eax, 0x72; shl ecx, 6; add rcx, r9; jmp rcx; 
0x000000000042d818: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe38: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000401bf4: or eax, 0x79427; movsxd rax, dword ptr [r9 + rsi*4]; add rax, r9; notrack jmp rax; mov rax, rdi; ret; 
0x0000000000434707: or eax, 0x83480000; ret 0x4910; 
0x000000000045e277: or eax, 0x83480000; ret 0xe910; 
0x0000000000434735: or eax, 0x83480000; ret 0xeb10; 
0x000000000043577a: or eax, 0x83d72948; rol byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000419537: or eax, 0x8b480001; pop rbp; clc; leave; ret; 
0x00000000004205f5: or eax, 0x8d480000; mov r14d, 0xfffb4885; jmp qword ptr [rax]; 
0x0000000000412466: or eax, 0x946f5; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004291ad: or eax, 0xa30f4800; ret 0x820f; 
0x00000000004047e5: or eax, 0xa3bde; cmp ecx, 1; jg 0x4850; call rax; 
0x000000000040e87f: or eax, 0xa3c; and ecx, 0xf; shl ecx, 6; add rcx, r9; jmp rcx; 
0x00000000004046dd: or eax, 0xa3ce6; cmp ecx, 1; jg 0x4870; mov edi, r13d; call rax; 
0x0000000000401f57: or eax, 0xaab00; mov dword ptr [rip + 0xaaafe], edx; pop rbx; pop rbp; ret; 
0x000000000041be48: or eax, 0xc0e80009; xlatb; add dword ptr [rax], eax; pop rbp; mov qword ptr [rip + 0x90de4], 0; ret; 
0x0000000000461712: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x0000000000428467: or eax, 0xc8890f8b; and eax, 0xc; cmp eax, 4; je 0x28451; ret; 
0x0000000000402801: or eax, 0xffffffff; ret; 
0x0000000000413ff6: or eax, 1; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000041b47c: or eax, 1; mov byte ptr [rip + 0x9172b], al; ret; 
0x000000000042bef2: or eax, 1; ret; 
0x0000000000414058: or eax, 2; mov byte ptr [rdi + 0x35a], al; ret; 
0x000000000041b45a: or eax, 2; mov byte ptr [rip + 0x9174d], al; ret; 
0x000000000047a4ac: or eax, 2; mov edx, eax; mov eax, ebx; syscall; 
0x000000000047899a: or eax, 2; mov edx, eax; mov eax, r12d; syscall; 
0x0000000000478c33: or eax, 2; mov edx, eax; mov eax, r13d; syscall; 
0x000000000041b50c: or eax, 4; mov byte ptr [rip + 0x9169b], al; ret; 
0x000000000041b4ea: or eax, 8; mov byte ptr [rip + 0x916bd], al; ret; 
0x000000000041be55: or eax, 9; add byte ptr [rax], al; ret; 
0x000000000040b5fd: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xb49; cmovne rax, rdx; ret; 
0x0000000000430d5d: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e3e7: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430d81: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046412b: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000411c35: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000411c35: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11c44; ret; 
0x0000000000416da9: or eax, dword ptr [rcx]; add byte ptr [rax], al; lea rsi, [rip + 0x64cfc]; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000045eac1: or eax, dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000042a473: or eax, eax; add byte ptr [rax], al; test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000472834: or eax, eax; test sil, sil; js 0x72820; jmp 0x727bb; ret; 
0x0000000000473334: or eax, eax; test sil, sil; js 0x73320; jmp 0x732bb; ret; 
0x000000000043c7f8: or eax, ebp; ret 0xffe8; 
0x0000000000436900: or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x0000000000410b77: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042afa9: or eax, ecx; tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004105b5: or eax, ecx; tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000042c6b0: or eax, edi; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000042bf78: or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000042bed0: or eax, edi; or rcx, rsi; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c2d0: or eax, edi; or rcx, rsi; sub rax, rcx; jne 0x2c2f0; ret; 
0x000000000042c719: or eax, edi; sub eax, ecx; ret; 
0x0000000000410b7e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042c93d: or eax, edx; bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000043614d: or eax, edx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000438cb7: or eax, edx; mov qword ptr [r10], rax; pop rbx; pop r12; pop rbp; ret; 
0x000000000041103c: or eax, edx; nop; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000046a9d3: or eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000438e56: or ebp, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000461ae4: or ebx, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000040d8d5: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000454b65: or ecx, dword ptr [rax - 0x73]; add eax, 0x4daf3; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000455eaa: or ecx, dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000040e3d4: or ecx, dword ptr [rax - 0x77]; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000046e60d: or ecx, ecx; ret; 
0x0000000000430ab7: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c6ad: or ecx, esi; or rax, rdi; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000042bf7a: or ecx, esi; sub eax, ecx; ret; 
0x000000000042bed3: or ecx, esi; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c2d3: or ecx, esi; sub rax, rcx; jne 0x2c2f0; ret; 
0x00000000004017af: or edi, dword ptr [rdi + 0x496b20]; call 0x774b0; mov byte ptr [rip + 0xa62fe], 1; pop rbp; ret; 
0x000000000042d3f0: or edi, dword ptr [rsi]; jmp rcx; 
0x000000000042d523: or edi, dword ptr [rsi]; jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbd3: or edi, dword ptr [rsi]; jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000448a28: or edi, edi; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x64349], 0; ret; 
0x0000000000448a07: or edi, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000449380: or edi, esp; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000411bc3: or edx, 0x40; syscall; 
0x00000000004283c0: or edx, 2; cmp edx, 0xa; je 0x283d8; mov eax, esi; ret; 
0x0000000000461568: or edx, eax; bsf rdx, rdx; lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435caa: or edx, eax; bsf rdx, rdx; lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000041122f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000460c7f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000042dee7: or edx, ecx; bsf rdx, rdx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004109d7: or edx, ecx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000435ed0: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000479b3b: or esi, dword ptr [rax + rsi - 0x77]; ret 0x61e9; 
0x000000000040d8d3: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000428b4a: or esi, dword ptr [rdi + rax - 0x77]; ret 0x67e9; 
0x000000000042b05b: or esi, ebx; bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000046e563: or esi, esp; add eax, dword ptr [rax]; ret; 
0x0000000000411bc2: or r10d, 0x40; syscall; 
0x0000000000430cd8: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000472833: or r8, rax; test sil, sil; js 0x72820; jmp 0x727bb; ret; 
0x0000000000473333: or r8, rax; test sil, sil; js 0x73320; jmp 0x732bb; ret; 
0x000000000045390e: or r9b, r13b; ret 0xfffb; 
0x0000000000402800: or rax, 0xffffffffffffffff; ret; 
0x0000000000410b76: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042afa8: or rax, rcx; tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004105b4: or rax, rcx; tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000042c6af: or rax, rdi; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000042becf: or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c2cf: or rax, rdi; or rcx, rsi; sub rax, rcx; jne 0x2c2f0; ret; 
0x0000000000410b7d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000042c93c: or rax, rdx; bsf rax, rax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000043614c: or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000438cb6: or rax, rdx; mov qword ptr [r10], rax; pop rbx; pop r12; pop rbp; ret; 
0x000000000041103b: or rax, rdx; nop; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000430ab6: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c6ac: or rcx, rsi; or rax, rdi; cmp rax, rcx; jne 0x2c6f0; xor eax, eax; ret; 
0x000000000042bed2: or rcx, rsi; sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c2d2: or rcx, rsi; sub rax, rcx; jne 0x2c2f0; ret; 
0x0000000000461567: or rdx, rax; bsf rdx, rdx; lea rax, [rsi + rdx - 0x10]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x0000000000435ca9: or rdx, rax; bsf rdx, rdx; lea rax, [rsi + rdx - 0x40]; cmp rcx, rax; cmovb rax, rcx; ret; 
0x000000000041122e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000460c7e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000042dee6: or rdx, rcx; bsf rdx, rdx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004109d6: or rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000435ecf: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000040432e: out 0, eax; add byte ptr [rax], al; syscall; 
0x0000000000470c43: out 0x20, eax; je 0x70c57; movss xmm0, dword ptr [rip + 0xa3b9]; divss xmm0, dword ptr [rip + 0xa3b5]; pop rbp; ret; 
0x00000000004772a5: out 0x24, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x000000000043bc6f: out 0x31, al; jmp qword ptr [rdi - 0x18]; 
0x00000000004046de: out 0x3c, al; or al, byte ptr [rax]; cmp ecx, 1; jg 0x4870; mov edi, r13d; call rax; 
0x0000000000459400: out 0x40, eax; xor dh, 0x81; mov eax, 0xca; syscall; 
0x00000000004385b5: out 0x41, al; mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000423d38: out 0x41, eax; call qword ptr [rdi + 0x18]; 
0x000000000044f5c1: out 0x41, eax; call rcx; 
0x000000000047a2f7: out 0x44, eax; mov esi, ecx; mov eax, 0xca; syscall; 
0x000000000042e9cc: out 0x48, al; lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2e57b; xor eax, eax; ret; 
0x000000000042ef2c: out 0x48, al; lea esi, [rdi + rsi - 0x80]; add rdi, -0x80; jmp 0x2eadb; xor eax, eax; ret; 
0x0000000000448cb9: out 0x4a, eax; mov eax, dword ptr [rax + riz*8]; test rax, rax; je 0x48cc5; call rax; 
0x0000000000450039: out 0x66, al; nop dword ptr [rax + rax]; sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x000000000040d44a: out 0xc0, eax; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000044aa2d: out 0xe8, al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rcx - 0x77], cl; ret 0x8548; 
0x0000000000461a2d: out 0xe8, eax; stc; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000477cb8: out 0xe9, eax; mov cl, 0x98; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000040e8b2: out 0xf0, eax; lea rdx, [rip + 0x405]; add rdx, r8; jmp rdx; 
0x000000000046b307: out 0xfc, al; jmp qword ptr [rsi + 0xf]; 
0x0000000000422bd3: out 0xfd, al; jmp qword ptr [rsi + 0x2e]; 
0x000000000043dc5f: out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000460cf1: out 2, al; bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000047a31b: out 2, al; jmp 0x7a26a; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000040b855: out 2, al; lea rax, [rip + 0x4582]; lea rdx, [rip + 0x45db]; cmovne rax, rdx; ret; 
0x0000000000428415: out 2, eax; je 0x28420; ret; 
0x0000000000429076: out 7, al; add byte ptr [rcx], bh; ret 0x4e0f; 
0x00000000004591e4: out 7, al; xor sil, 0x81; syscall; 
0x000000000042a219: out 8, al; jne 0x2a200; lea rax, [rip + 0x367c]; test ch, 8; jne 0x2a1eb; ret; 
0x000000000042a377: out 8, al; jne 0x2a357; lea rax, [rip + 0x75ee]; and ch, 8; jne 0x2a335; ret; 
0x0000000000459a87: out 8, al; jne 0x59a67; lea rax, [rip + 0x14e]; and ch, 8; jne 0x59a45; ret; 
0x0000000000460257: out 8, al; jne 0x6023e; lea rax, [rip + 0xbe]; and ch, 8; jne 0x60225; ret; 
0x00000000004602c7: out 8, al; jne 0x602ae; lea rax, [rip + 0x9ce]; and ch, 8; jne 0x60295; ret; 
0x00000000004329f6: out dx, al; add byte ptr [rip + 0xf00], 0x48; sub edx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x00000000004687ef: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; add rax, rdi; add rax, rcx; ret; 
0x0000000000468a86: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa6: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac6: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae6: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000040b74f: out dx, al; and ch, 2; lea rdx, [rip + 0x1936]; lea rax, [rip + 0x18df]; cmovne rax, rdx; ret; 
0x000000000040b64f: out dx, al; and ch, 2; lea rdx, [rip + 0x1a66]; lea rax, [rip + 0x19ef]; cmovne rax, rdx; ret; 
0x000000000042a0ef: out dx, al; and ch, 2; lea rdx, [rip - 0x1d03a]; lea rax, [rip - 0x1d0b1]; cmovne rax, rdx; ret; 
0x000000000040479f: out dx, al; call rax; 
0x000000000042a37e: out dx, al; jne 0x2a381; add byte ptr [rax - 0x518af71b], al; ret; 
0x000000000046f9e1: out dx, al; mov edi, r12d; call qword ptr [rax]; 
0x000000000046fb29: out dx, al; mov edi, r12d; call qword ptr [rcx]; 
0x000000000046f99a: out dx, al; mov edi, r12d; call rax; 
0x000000000044edd1: out dx, al; mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x4eeb9; leave; ret; 
0x000000000046230d: out dx, eax; add bl, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000453e45: out dx, eax; add byte ptr [rax], al; add byte ptr [rbx - 0xa34b], cl; dec dword ptr [rbp + 0x63480156]; ror byte ptr [rax + 0x39], cl; ret 0x9c0f; 
0x00000000004269cd: out dx, eax; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000043664a: out dx, eax; and ch, al; sti; xchg ebx, eax; ret 0xe2c4; 
0x0000000000454244: out dx, eax; call 0x66ae0; mov rdi, r13; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x00000000004541a5: out dx, eax; call 0x66ae0; mov rsi, qword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000426271: out dx, eax; call qword ptr [rax + 0x18]; 
0x00000000004046ed: out dx, eax; call rax; 
0x00000000004541b7: out dx, eax; call rbx; 
0x000000000042aff6: out dx, eax; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000410d76: out dx, eax; jg 0x10dc1; add eax, edi; vzeroupper; ret; 
0x00000000004356b6: out dx, eax; jg 0x35701; add eax, edi; vzeroupper; ret; 
0x00000000004604a6: out dx, eax; jg 0x604f1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000460ea6: out dx, eax; jg 0x60ef1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000042dd99: out dx, eax; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042710d: out dx, eax; mov dl, 0xfe; jmp qword ptr [rsi + 0x66]; 
0x000000000046c810: out dx, eax; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000045424c: out dx, eax; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x0000000000464f3e: out dx, eax; or byte ptr [rcx + 0x39], cl; ret 0xeb75; 
0x0000000000422bd2: out dx, eax; out 0xfd, al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000426a26: out dx, eax; pop rbx; pop r12; pop rbp; ret; 
0x00000000004604c6: out dx, eax; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105e6: out dx, eax; pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000436c53: out dx, eax; ret 0xf66; 
0x00000000004276df: out dx, eax; ror byte ptr [rdi], 0x11; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000410882: out dx, eax; ror byte ptr [rdi], 0xbc; leave; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000042e25e: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x00000000004607fe: outsb dx, byte ptr [rsi]; and byte ptr [rdi], ah; ret 0xb262; 
0x0000000000410ffe: outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xb262; 
0x000000000041086c: outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000043d0cf: outsb dx, byte ptr [rsi]; fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000042451d: outsb dx, byte ptr [rsi]; ret 0x149; 
0x0000000000405c20: outsb dx, byte ptr [rsi]; ret 0x4866; 
0x0000000000405ceb: outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000040896b: outsb dx, byte ptr [rsi]; ret 0x894d; 
0x000000000043c045: outsb dx, byte ptr [rsi]; ret 0xbc41; 
0x000000000046cd2d: outsb dx, byte ptr [rsi]; ret 0xc031; 
0x000000000042477e: outsb dx, byte ptr [rsi]; ret 0xe083; 
0x0000000000405e61: outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000427c73: outsb dx, byte ptr [rsi]; ret; 
0x000000000044078e: outsb dx, byte ptr [rsi]; sbb al, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x0000000000408dd5: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x00000000004185bc: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x94337; ret; 
0x0000000000408aa9: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000456dcb: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xf1e9; 
0x000000000043c814: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000043aa7f: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000043aa84: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000040e3b0: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000042923b: outsd dx, dword ptr [rsi]; add al, 1; je 0x292e9; xor eax, eax; ret; 
0x000000000042952d: outsd dx, dword ptr [rsi]; add al, 1; je 0x294de; mov eax, 0x83; ret; 
0x000000000045ff14: outsd dx, dword ptr [rsi]; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x00000000004189f3: outsd dx, dword ptr [rsi]; add dh, al; push 0x47110f01; pop rax; ret; 
0x0000000000476245: outsd dx, dword ptr [rsi]; add eax, dword ptr [rbx - 0x7cb6fe39]; ret; 
0x0000000000459cf7: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x59cfa; ret 0x41c4; 
0x000000000045a0a7: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x5a0aa; ret 0x41c4; 
0x000000000045a707: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x5a70a; ret 0x41c4; 
0x000000000045aac7: outsd dx, dword ptr [rsi]; and spl, r8b; jge 0x5aaca; ret 0x41c4; 
0x000000000040ce60: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000042f6a8: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000042f6ee: outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000042a3ad: outsd dx, dword ptr [rsi]; mov ecx, 0xd1890000; not ecx; and ecx, 0x128; je 0x2a3c0; ret; 
0x000000000040cfb8: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000436587: outsd dx, dword ptr [rsi]; pop rdi; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x0000000000459e46: outsd dx, dword ptr [rsi]; pop rsi; and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x000000000043656b: outsd dx, dword ptr [rsi]; push rdi; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000045fe96: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042d816: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe36: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000045fe76: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x5fe84; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000045309d: outsd dx, dword ptr [rsi]; ret 0x280f; 
0x00000000004507a5: outsd dx, dword ptr [rsi]; ret 0xe867; 
0x0000000000436bfc: outsd dx, dword ptr [rsi]; ret; 
0x0000000000453099: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x280f; 
0x000000000045f717: outsd dx, dword ptr [rsi]; test byte ptr [rsi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000045f731: outsd dx, dword ptr [rsi]; test byte ptr [rsi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x000000000043888d: outsd dx, dword ptr [rsi]; wait; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000471a1c: outsd dx, dword ptr [rsi]; xchg eax, edx; add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x290f; 
0x000000000041a6e3: paddb mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x000000000042c748: pcmpeqb mm1, mm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x2c754; ret; 
0x000000000042badd: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x2bb40; xor eax, eax; ret; 
0x0000000000460a8d: pcmpeqb mm2, qword ptr [rax]; ret; 
0x00000000004110cf: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x110de; bsf eax, edx; ret; 
0x000000000042c747: pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; sub eax, ecx; jne 0x2c754; ret; 
0x000000000042badc: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x2bb40; xor eax, eax; ret; 
0x00000000004110ce: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x110de; bsf eax, edx; ret; 
0x0000000000468a2d: pcmpeqd mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x68aa0; xor eax, eax; ret; 
0x0000000000468a2c: pcmpeqd xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x68aa0; xor eax, eax; ret; 
0x000000000045f09d: pcmpgtd mm2, qword ptr [rax + 0x1704c6]; ret; 
0x0000000000467a34: pcmpistri xmm0, xmmword ptr [rax], 0x12; jae 0x67a30; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000045ffb8: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000410c60: pextrw edi, mm5, 0xd7; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000045da0e: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; jns 0x5da1b; add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000410a60: pmovmskb eax, mm0; test eax, eax; je 0x10a70; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042ba4c: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042c74c: pmovmskb eax, mm1; sub eax, ecx; jne 0x2c754; ret; 
0x00000000004367e5: pmovmskb eax, mm1; test eax, eax; je 0x367d6; bsr eax, eax; add rax, r8; ret; 
0x000000000042bae2: pmovmskb eax, mm1; test eax, eax; jne 0x2bb40; xor eax, eax; ret; 
0x000000000042bab2: pmovmskb eax, mm1; test eax, eax; jne 0x2bb60; xor eax, eax; ret; 
0x0000000000468a32: pmovmskb eax, mm1; test eax, eax; jne 0x68aa0; xor eax, eax; ret; 
0x0000000000468a02: pmovmskb eax, mm1; test eax, eax; jne 0x68ae0; xor eax, eax; ret; 
0x0000000000436825: pmovmskb eax, mm2; test eax, eax; je 0x367e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000410a5f: pmovmskb eax, xmm0; test eax, eax; je 0x10a70; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042ba4b: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042c74b: pmovmskb eax, xmm1; sub eax, ecx; jne 0x2c754; ret; 
0x00000000004367e4: pmovmskb eax, xmm1; test eax, eax; je 0x367d6; bsr eax, eax; add rax, r8; ret; 
0x000000000042bae1: pmovmskb eax, xmm1; test eax, eax; jne 0x2bb40; xor eax, eax; ret; 
0x000000000042bab1: pmovmskb eax, xmm1; test eax, eax; jne 0x2bb60; xor eax, eax; ret; 
0x0000000000468a31: pmovmskb eax, xmm1; test eax, eax; jne 0x68aa0; xor eax, eax; ret; 
0x0000000000468a01: pmovmskb eax, xmm1; test eax, eax; jne 0x68ae0; xor eax, eax; ret; 
0x0000000000436824: pmovmskb eax, xmm2; test eax, eax; je 0x367e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042e1e1: pmovmskb edx, mm3; test eax, eax; jne 0x2e1f4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004110d3: pmovmskb edx, mm4; test edx, edx; je 0x110de; bsf eax, edx; ret; 
0x0000000000460b23: pmovmskb edx, mm4; test edx, edx; je 0x60b32; bsf eax, edx; shr rax, 2; ret; 
0x000000000042e1e0: pmovmskb edx, xmm3; test eax, eax; jne 0x2e1f4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004110d2: pmovmskb edx, xmm4; test edx, edx; je 0x110de; bsf eax, edx; ret; 
0x0000000000460b22: pmovmskb edx, xmm4; test edx, edx; je 0x60b32; bsf eax, edx; shr rax, 2; ret; 
0x0000000000437b05: pop qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000437b05: pop qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x37b14; ret; 
0x00000000004046e6: pop qword ptr [rbp + 0x44000001]; mov edi, ebp; call rax; 
0x000000000046e06d: pop qword ptr [rbx - 6]; jmp qword ptr [rsi + 0x2e]; 
0x000000000046ced6: pop qword ptr [rbx]; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000040449d: pop r12; add qword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x00000000004168aa: pop r12; cmove rcx, rax; pop r13; pop rbp; mov rax, rcx; ret; 
0x000000000046183f: pop r12; cmovne rax, rdx; pop rbp; ret; 
0x0000000000475b1c: pop r12; mov eax, edx; pop rbp; ret; 
0x0000000000416935: pop r12; mov rax, rcx; pop r13; pop rbp; ret; 
0x00000000004044f5: pop r12; mov rax, rdx; pop rbp; ret; 
0x0000000000440d73: pop r12; pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000402256: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000425127: pop r12; pop r13; pop r14; pop rbp; jmp rax; 
0x00000000004025a7: pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000438a99: pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000404598: pop r12; pop r13; pop rbp; ret; 
0x0000000000454696: pop r12; pop rbp; jmp 0x9e90; nop; ret; 
0x0000000000423ed5: pop r12; pop rbp; jmp rax; 
0x000000000046e66c: pop r12; pop rbp; jmp rdx; 
0x000000000046e66c: pop r12; pop rbp; jmp rdx; nop dword ptr [rax]; ret; 
0x0000000000401648: pop r12; pop rbp; ret; 
0x0000000000459e7b: pop r13; cld; ret 0x41c4; 
0x0000000000440d75: pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000402258: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000425129: pop r13; pop r14; pop rbp; jmp rax; 
0x00000000004025a9: pop r13; pop r14; pop rbp; ret; 
0x000000000044fb76: pop r13; pop r14; xor rax, rdx; pop r15; pop rbp; ret; 
0x0000000000438a9b: pop r13; pop rbp; jmp rax; 
0x00000000004168b0: pop r13; pop rbp; mov rax, rcx; ret; 
0x000000000040459a: pop r13; pop rbp; ret; 
0x0000000000440d77: pop r14; pop r15; pop rbp; jmp rax; 
0x000000000040225a: pop r14; pop r15; pop rbp; ret; 
0x000000000042512b: pop r14; pop rbp; jmp rax; 
0x00000000004025ab: pop r14; pop rbp; ret; 
0x000000000044fb78: pop r14; xor rax, rdx; pop r15; pop rbp; ret; 
0x0000000000440d79: pop r15; pop rbp; jmp rax; 
0x000000000040225c: pop r15; pop rbp; ret; 
0x0000000000425bdc: pop r8; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004189fb: pop r8; ret; 
0x00000000004267e1: pop r8; test rax, rax; je 0x267f7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x00000000004191cb: pop rax; jmp rdx; 
0x00000000004191cb: pop rax; jmp rdx; nop; ret; 
0x0000000000411d3c: pop rax; leave; ret; 
0x00000000004189db: pop rax; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x0000000000425bdd: pop rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000462042: pop rax; pop rdx; leave; ret; 
0x00000000004189fc: pop rax; ret; 
0x00000000004267e2: pop rax; test rax, rax; je 0x267f7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000426e4f: pop rbp; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000459af7: pop rbp; add byte ptr [rax], al; lea rdx, [rip + 0x5c8f]; cmove rax, rdx; ret; 
0x0000000000419be5: pop rbp; clc; leave; cmovbe rdx, rax; mov rax, rdx; ret; 
0x0000000000425d63: pop rbp; clc; leave; jmp rax; 
0x0000000000409063: pop rbp; clc; leave; ret; 
0x0000000000448789: pop rbp; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x00000000004571d2: pop rbp; clc; mov eax, 0xffffffff; leave; ret; 
0x000000000046226f: pop rbp; clc; mov eax, 1; leave; ret; 
0x0000000000455f05: pop rbp; clc; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x000000000046dde6: pop rbp; clc; mov qword ptr [rax], rdi; leave; ret; 
0x000000000046ddd2: pop rbp; clc; mov qword ptr [rax], rdx; leave; ret; 
0x000000000042342e: pop rbp; clc; mov qword ptr [rdx + 0xe0], rcx; leave; ret; 
0x000000000046de6a: pop rbp; clc; mov qword ptr [rdx], rax; leave; ret; 
0x00000000004571b7: pop rbp; clc; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; leave; jmp rax; 
0x0000000000419b8f: pop rbp; clc; mov rax, rdx; leave; ret; 
0x0000000000462040: pop rbp; clc; pop rax; pop rdx; leave; ret; 
0x000000000040b596: pop rbp; clc; xor eax, eax; leave; ret; 
0x0000000000459e7c: pop rbp; cld; ret 0x41c4; 
0x0000000000464101: pop rbp; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000043f68e: pop rbp; jmp 0x39610; nop dword ptr [rax]; pop rbp; ret; 
0x000000000043e301: pop rbp; jmp 0x4de0; nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000454698: pop rbp; jmp 0x9e90; nop; ret; 
0x0000000000423ed7: pop rbp; jmp rax; 
0x000000000046e66e: pop rbp; jmp rdx; 
0x000000000046e66e: pop rbp; jmp rdx; nop dword ptr [rax]; ret; 
0x000000000044596c: pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x00000000004251e1: pop rbp; mov dword ptr [rip + 0x87a8c], eax; ret; 
0x000000000043a30f: pop rbp; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000448a2b: pop rbp; mov qword ptr [rip + 0x64349], 0; ret; 
0x000000000041be50: pop rbp; mov qword ptr [rip + 0x90de4], 0; ret; 
0x0000000000419820: pop rbp; mov qword ptr [rip + 0x93074], 0; ret; 
0x0000000000405505: pop rbp; mov qword ptr [rip + 0xa0c3b], rax; ret; 
0x00000000004168b2: pop rbp; mov rax, rcx; ret; 
0x000000000046d9c7: pop rbp; neg eax; sbb eax, eax; ret; 
0x0000000000440d76: pop rbp; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000402259: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x000000000042512a: pop rbp; pop r14; pop rbp; jmp rax; 
0x00000000004025aa: pop rbp; pop r14; pop rbp; ret; 
0x000000000044fb77: pop rbp; pop r14; xor rax, rdx; pop r15; pop rbp; ret; 
0x0000000000438a9c: pop rbp; pop rbp; jmp rax; 
0x00000000004168b1: pop rbp; pop rbp; mov rax, rcx; ret; 
0x000000000040459b: pop rbp; pop rbp; ret; 
0x0000000000466678: pop rbp; pop rbx; ret; 
0x000000000040164a: pop rbp; ret; 
0x0000000000411983: pop rbp; test eax, eax; cmove eax, edx; ret; 
0x000000000045dc71: pop rbx; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000455ad0: pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x0000000000416778: pop rbx; mov eax, 1; pop r12; pop rbp; ret; 
0x00000000004561a7: pop rbx; mov eax, dword ptr [rdx]; pop r12; pop rbp; ret; 
0x00000000004506c0: pop rbx; mov eax, r12d; pop r12; pop rbp; ret; 
0x000000000042497e: pop rbx; mov rax, r12; pop r12; pop r13; pop rbp; ret; 
0x0000000000411cc0: pop rbx; mov rax, r12; pop r12; pop rbp; ret; 
0x0000000000449897: pop rbx; mov rax, r13; pop r12; pop r13; pop rbp; ret; 
0x000000000046e663: pop rbx; movzx edi, r12b; add rdx, qword ptr [rax + 8]; pop r12; pop rbp; jmp rdx; 
0x000000000045e671: pop rbx; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040449c: pop rbx; pop r12; add qword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x000000000046183e: pop rbx; pop r12; cmovne rax, rdx; pop rbp; ret; 
0x0000000000475b1b: pop rbx; pop r12; mov eax, edx; pop rbp; ret; 
0x0000000000416934: pop rbx; pop r12; mov rax, rcx; pop r13; pop rbp; ret; 
0x00000000004044f4: pop rbx; pop r12; mov rax, rdx; pop rbp; ret; 
0x0000000000425126: pop rbx; pop r12; pop r13; pop r14; pop rbp; jmp rax; 
0x00000000004025a6: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000438a98: pop rbx; pop r12; pop r13; pop rbp; jmp rax; 
0x0000000000404597: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000454695: pop rbx; pop r12; pop rbp; jmp 0x9e90; nop; ret; 
0x0000000000423ed4: pop rbx; pop r12; pop rbp; jmp rax; 
0x0000000000401647: pop rbx; pop r12; pop rbp; ret; 
0x0000000000448062: pop rbx; pop r13; pop rbp; ret; 
0x0000000000401bc2: pop rbx; pop rbp; ret; 
0x0000000000465827: pop rbx; ret; 
0x000000000040b5a1: pop rbx; test eax, 0xd6ebffff; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000416788: pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000459b14: pop rcx; add byte ptr [rax], al; test edx, 0x40000000; je 0x59ace; ret; 
0x000000000046ca0b: pop rcx; cli; jmp qword ptr [rsi - 0x70]; 
0x000000000040cfb9: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000040c98c: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x0000000000474522: pop rcx; jmp rcx; 
0x0000000000419853: pop rcx; xor ecx, dword ptr [rcx]; add byte ptr [rbx + 0x933573d], cl; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000436588: pop rdi; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000042626d: pop rdi; add dword ptr [rcx + rcx*4 - 0x11], ecx; call qword ptr [rax + 0x18]; 
0x00000000004604c7: pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105e7: pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000467e55: pop rdi; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042da8b: pop rdi; cmp sil, byte ptr [rdi + rax]; jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x0000000000440d7a: pop rdi; pop rbp; jmp rax; 
0x000000000040225d: pop rdi; pop rbp; ret; 
0x000000000042a41d: pop rdi; ret; 
0x0000000000405132: pop rdx; adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000044ffa8: pop rdx; add al, 0x49; mov dword ptr [rdx + 8], ecx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x0000000000423172: pop rdx; add byte ptr es:[rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000434f76: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x0000000000413f6f: pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x000000000042ae55: pop rdx; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000440d12: pop rdx; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000462043: pop rdx; leave; ret; 
0x0000000000475304: pop rdx; or al, 0x5b; pop r12; pop rbp; ret; 
0x0000000000455a52: pop rdx; std; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000046239e: pop rsi; add bl, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000470c51: pop rsi; add eax, 0xa3b5; pop rbp; ret; 
0x0000000000459e47: pop rsi; and ah, al; insd dword ptr [rdi], dx; cld; ret 0x41c4; 
0x000000000043e543: pop rsi; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000440d78: pop rsi; pop r15; pop rbp; jmp rax; 
0x000000000040225b: pop rsi; pop r15; pop rbp; ret; 
0x000000000042512c: pop rsi; pop rbp; jmp rax; 
0x00000000004025ac: pop rsi; pop rbp; ret; 
0x000000000044fb79: pop rsi; xor rax, rdx; pop r15; pop rbp; ret; 
0x0000000000435274: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000459afe: pop rsp; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000040449e: pop rsp; add qword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x00000000004168ab: pop rsp; cmove rcx, rax; pop r13; pop rbp; mov rax, rcx; ret; 
0x0000000000461840: pop rsp; cmovne rax, rdx; pop rbp; ret; 
0x0000000000475b1d: pop rsp; mov eax, edx; pop rbp; ret; 
0x0000000000416936: pop rsp; mov rax, rcx; pop r13; pop rbp; ret; 
0x00000000004044f6: pop rsp; mov rax, rdx; pop rbp; ret; 
0x00000000004310b0: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000440d74: pop rsp; pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x0000000000402257: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000425128: pop rsp; pop r13; pop r14; pop rbp; jmp rax; 
0x00000000004025a8: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000438a9a: pop rsp; pop r13; pop rbp; jmp rax; 
0x0000000000404599: pop rsp; pop r13; pop rbp; ret; 
0x0000000000454697: pop rsp; pop rbp; jmp 0x9e90; nop; ret; 
0x0000000000423ed6: pop rsp; pop rbp; jmp rax; 
0x000000000046e66d: pop rsp; pop rbp; jmp rdx; 
0x000000000046e66d: pop rsp; pop rbp; jmp rdx; nop dword ptr [rax]; ret; 
0x0000000000401649: pop rsp; pop rbp; ret; 
0x0000000000449838: pop rsp; ret; 
0x000000000046e6a0: pop rsp; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000421127: popfq; add al, 0; add byte ptr [rax - 0x75], cl; popfq; push -0x76000005; ret 0xc083; 
0x0000000000439cff: popfq; jae 0x39cfe; dec dword ptr [rax - 0x77]; ret; 
0x0000000000475067: popfq; mov eax, 0x44fffff7; mov ecx, ebx; call rax; 
0x0000000000420874: popfq; push -0x76000005; ret 0xc083; 
0x000000000044dbef: popfq; ret 0xfffb; 
0x00000000004549cf: popfq; stc; cli; jmp qword ptr [rsi + 0x2e]; 
0x00000000004586f2: popfq; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000044ffc8: pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x000000000044ff12: pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x000000000044ffc9: pshufw mm0, mm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x000000000044ff13: pshufw mm0, mm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x000000000042d6d6: psllq mm1, qword ptr [rdi]; jg 0x2d6e2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000042d757: psllq mm1, qword ptr [rdi]; jg 0x2d763; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000042d858: psllq mm1, qword ptr [rdi]; jg 0x2d864; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000045fd16: psllq mm1, qword ptr [rdi]; jg 0x5fd22; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000045fd77: psllq mm1, qword ptr [rdi]; jg 0x5fd83; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045fe78: psllq mm1, qword ptr [rdi]; jg 0x5fe84; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000042cb30: psrad mm1, qword ptr [rax - 0x73]; cmp dword ptr [rcx], r8d; vzeroupper; ret; 
0x000000000042cd8e: psrad mm1, qword ptr [rax - 0x73]; cmp dword ptr [rcx], r8d; xtest; jne 0x2cd9e; vzeroupper; ret; 
0x000000000045f46d: psrad mm1, qword ptr [rdi]; add esi, edx; jne 0x5f478; vzeroupper; ret; 
0x000000000044fe6d: psubd mm7, mm7; jmp qword ptr [rsi + 0x66]; 
0x0000000000454af3: punpcklqdq xmm0, xmm0; mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x28], rsi; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000418671: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x00000000004502c9: punpcklqdq xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004185be: punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x0000000000405c50: punpcklqdq xmm0, xmm0; movups xmmword ptr [rsi + 0x20], xmm0; pop rbp; ret; 
0x0000000000458acf: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x53e00], 0; ret; 
0x000000000042d0a4: punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000045f758: punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000432694: push -0x188a3e0b; xor eax, eax; ret; 
0x00000000004319c6: push -0x1a8a3e0b; xor eax, eax; vzeroupper; ret; 
0x00000000004100a9: push -0x43a360b; xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000041ff94: push -0x76000005; ret 0xc083; 
0x000000000041715e: push -0x76fffffe; ret 0xc083; 
0x000000000042e244: push -0x9ffffff; ret 0x7501; 
0x000000000043e304: push -4; jmp qword ptr [rsi + 0xf]; 
0x000000000043700f: push 0; call rax; 
0x00000000004377f8: push 0; call rbx; 
0x0000000000458294: push 0; lea r9, [rbp - 0x38]; call rax; 
0x0000000000447b1e: push 0; mov rax, qword ptr [rbp - 0x68]; push 0; call rax; 
0x00000000004465c1: push 0; mov rsi, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0x70], r9; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000442348: push 0; mov rsi, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0x78], r9; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000447c4b: push 0; push 0; call rax; 
0x000000000040e33d: push 0x30; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000415b28: push 0x3100065f; ror byte ptr [rax - 0x77], cl; fidiv word ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x00000000004189f7: push 0x47110f01; pop rax; ret; 
0x0000000000445125: push 0x48ffffff; mov dword ptr [rbp - 0x80], ecx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x0000000000442358: push 0x48ffffff; mov eax, dword ptr [rbp - 0x88]; call rax; 
0x0000000000440ac7: push 0x48ffffff; mov edi, dword ptr [rbp - 0x90]; mov rax, qword ptr [rbp - 0x80]; mov qword ptr [rbp - 0x58], r9; mov qword ptr [rbp - 0x78], rcx; call rax; 
0x00000000004428da: push 0x4cffffff; mov ecx, dword ptr [rbp - 0x68]; mov rsi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0xa0]; call rax; 
0x00000000004016ca: push 0x68408b48; test rax, rax; jne 0x16c0; ret; 
0x00000000004016ce: push 0x75c08548; in al, dx; ret; 
0x0000000000467d15: push 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000004377ee: push 1; lea rcx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x000000000043792e: push 1; mov rsi, qword ptr [rbp - 0x1a8]; push 0; call rbx; 
0x000000000043700d: push 1; push 0; call rax; 
0x0000000000436f82: push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x000000000040db88: push 3; vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000413b3c: push qword ptr [rax + rdx*2 + 0x41]; mov eax, 1; test rsi, rsi; je 0x13b50; mov eax, r8d; ret; 
0x000000000042833b: push qword ptr [rbp + 0xa]; jmp 0x27710; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000457807: push qword ptr [rbp + 7]; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xe8], rcx; mov rdi, r15; call rax; 
0x00000000004244e3: push qword ptr [rbp + 7]; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x00000000004395d6: push qword ptr [rbp + rax + 0x48]; test esi, esi; jne 0x395e0; ret; 
0x00000000004395f6: push qword ptr [rbp + rax + 0x48]; test esi, esi; jne 0x39600; ret; 
0x0000000000421c7b: push qword ptr [rbp + rax + 0x66]; test eax, eax; je 0x21c90; lea rdx, [rip + 0x60756]; add rax, rdx; ret; 
0x000000000044c978: push qword ptr [rbp + rax - 0x18]; shl byte ptr [rbx + 1], 1; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000455d5a: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000435e23: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000435db3: push qword ptr [rbp + rdi*2 + 0x48]; sar edx, cl; test rdx, rdx; je 0x35e60; bsf rax, rdx; ret; 
0x000000000042a119: push qword ptr [rbp - 0x53]; ret; 
0x0000000000455fea: push qword ptr [rbp - 0x75]; pop rbx; mov eax, 0xffffffff; pop r12; pop rbp; ret; 
0x0000000000411b20: push qword ptr [rbx + 1]; ret; 
0x00000000004563ea: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411b5c: push qword ptr [rcx + rax*2 + 0x45]; mov edx, esp; mov rdi, rbx; mov eax, 9; syscall; 
0x000000000046e702: push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000043f0aa: push qword ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x0000000000418fe9: push qword ptr [rcx]; leave; jmp 0x18bd9; ret; 
0x000000000046b7ec: push qword ptr [rcx]; rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x00000000004195c0: push qword ptr [rcx]; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x0000000000424216: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x00000000004113f7: push qword ptr [rdi + 0x36]; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11443; leave; ret; 
0x0000000000461dae: push qword ptr [rdi + 0x37]; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x61dfb; leave; ret; 
0x0000000000438837: push qword ptr [rdi + 0x3e]; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x3888b; leave; ret; 
0x00000000004112f6: push qword ptr [rdi + 0x4f]; ret; 
0x0000000000411d2b: push qword ptr [rdi + 0x52]; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11d95; leave; ret; 
0x0000000000438769: push qword ptr [rdi + 0x54]; ret; 
0x0000000000411b71: push qword ptr [rdi + 0x6c]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000438943: push qword ptr [rdi + 0xa]; ret; 
0x0000000000461cf2: push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x0000000000437a8c: push qword ptr [rdi + 1]; ret; 
0x00000000004389b9: push qword ptr [rdi + 4]; ret; 
0x0000000000411390: push qword ptr [rdi + 5]; ret; 
0x000000000041145d: push qword ptr [rdi + 8]; ret; 
0x0000000000448707: push qword ptr [rsi + rdx + 0x48]; mov esi, dword ptr [rip + 0x6465f]; jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000409599: push qword ptr [rsp + rax + 0x5d]; ret; 
0x0000000000426093: push qword ptr [rsp + rax - 0x58]; add dword ptr [rsi + riz - 0x77], esi; ret 0xc883; 
0x0000000000411e46: push r14; push rbx; mov eax, 0x9d; syscall; 
0x000000000046d580: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x00000000004275da: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000455f0a: push rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x0000000000403efa: push rax; add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x0000000000419af0: push rax; add byte ptr [rax], al; mov eax, edx; mov rbp, rsp; lea rsi, [rbp - 8]; syscall; 
0x0000000000419b49: push rax; add byte ptr [rax], al; mov eax, edx; syscall; 
0x0000000000404fd5: push rax; add dword ptr [rax - 0x77], ecx; adc eax, 0xa11aa; ret; 
0x000000000041fa0c: push rax; add dword ptr [rcx - 0x77], ecx; push rdi; or dh, al; add byte ptr [rip - 0x74917], ah; jmp qword ptr [rsi + 0xf]; 
0x0000000000422121: push rax; add eax, dword ptr [rax]; add byte ptr [rbp + 0xc8dd042], cl; mov dword ptr [rcx + 0x29c901fa], ecx; ret 0xd139; 
0x000000000042ef8f: push rax; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000413b3e: push rax; mov r8d, 1; test rsi, rsi; je 0x13b50; mov eax, r8d; ret; 
0x000000000041b7f1: push rax; mov rdx, 0xffffffffffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000044eb1c: push rax; movabs dword ptr [0x8b480c75c0850000], eax; pop rbp; clc; leave; ret; 
0x0000000000450901: push rax; or al, 0xf6; ret 0xf01; 
0x0000000000405082: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x00000000004557a7: push rax; or byte ptr [rax - 0x77], cl; jo 0x557bd; mov qword ptr [rax + 0x40], rcx; mov qword ptr [rax], rdx; ret; 
0x000000000046e66a: push rax; or byte ptr [rcx + 0x5c], al; pop rbp; jmp rdx; 
0x000000000046e66a: push rax; or byte ptr [rcx + 0x5c], al; pop rbp; jmp rdx; nop dword ptr [rax]; ret; 
0x0000000000414bd6: push rax; or byte ptr [rcx - 0x77], al; xchg ebp, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000419f85: push rax; or byte ptr [rcx - 0x77], al; xchg edx, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000430fbc: push rax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004016c9: push rax; push 0x68408b48; test rax, rax; jne 0x16c0; ret; 
0x000000000046e701: push rax; push qword ptr [rcx + rbx + 0x49]; lea ebx, [rbp + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000040ed1a: push rax; ret; 
0x0000000000455e5d: push rax; sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004275c9: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000455ea5: push rax; sbb byte ptr [rcx], dh; ror byte ptr [rcx + 0x5d8b480b], 0xf8; leave; ret; 
0x00000000004503f6: push rax; sub byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ret 0x673; 
0x0000000000478a08: push rax; xadd dword ptr [rdi], eax; shr eax, 2; cmp eax, 3; je 0x78a20; ret; 
0x000000000043e3ab: push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000040b984: push rbp; add byte ptr [rax], al; test edx, 0x40000000; je 0xb958; ret; 
0x00000000004742c3: push rbp; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x17]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000461914: push rbp; add rsp, 0xa0; pop rbx; pop r12; pop rbp; ret; 
0x00000000004778bd: push rbp; and byte ptr [rsi - 9], ah; ret 0x7f8; 
0x000000000041131a: push rbp; call 0xfffffffff0769e68; mov r8d, eax; mov edi, dword ptr [rbp - 8]; xor eax, eax; syscall; 
0x000000000043878a: push rbp; call 0xfffffffff07912d8; mov r8d, eax; mov edi, dword ptr [rbp - 8]; mov eax, 1; syscall; 
0x00000000004118fb: push rbp; clc; lea rdx, [rbp - 0x1010]; syscall; 
0x0000000000411918: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x1193d; leave; ret; 
0x000000000042977b: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x297fa; leave; ret; 
0x00000000004388d1: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x3891b; leave; ret; 
0x0000000000462091: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x620bc; leave; ret; 
0x00000000004622e3: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6230b; leave; ret; 
0x0000000000462382: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6239c; leave; ret; 
0x0000000000462412: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6242c; leave; ret; 
0x00000000004624ee: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x625b7; leave; ret; 
0x0000000000462609: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6263c; leave; ret; 
0x0000000000467c04: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x67c40; leave; ret; 
0x0000000000469367: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x69376; leave; ret; 
0x000000000046df0a: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6df19; leave; ret; 
0x000000000046dfec: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e05c: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6e06b; leave; ret; 
0x000000000046e154: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1b8: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e601: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6e619; leave; ret; 
0x00000000004705cc: push rbp; clc; sub rdx, qword ptr fs:[0x28]; jne 0x705e5; leave; ret; 
0x0000000000404dc2: push rbp; lea rdi, [rip + 0x78816]; mov rbp, rsp; call 0x4d00; nop word ptr [rax + rax]; ret; 
0x0000000000404d5d: push rbp; lea rdi, [rip + 0x7887b]; mov rbp, rsp; call 0x4d00; nop dword ptr [rax]; ret; 
0x0000000000407e46: push rbp; mov al, 0xe8; ret; 
0x0000000000445f80: push rbp; mov al, 0xf; mov dh, 0x42; dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x0000000000443bac: push rbp; mov al, 0xf; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4201; 
0x0000000000442e95: push rbp; mov al, 0xf; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x0000000000437007: push rbp; mov byte ptr [rax - 0x73], cl; jne 0x36f9d; push 1; push 0; call rax; 
0x000000000046350a: push rbp; mov byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000043bdd0: push rbp; mov rbp, rsp; call 0x18430; xor eax, eax; pop rbp; ret; 
0x0000000000458888: push rbp; mov rbp, rsp; call 0x4d80; xor eax, eax; pop rbp; ret; 
0x00000000004588c9: push rbp; mov rbp, rsp; call 0x4e00; xor eax, eax; pop rbp; ret; 
0x0000000000459080: push rbp; mov rbp, rsp; call 0x58f20; xor eax, eax; pop rbp; ret; 
0x0000000000466b60: push rbp; mov rbp, rsp; call 0x668f0; mov eax, 1; pop rbp; ret; 
0x0000000000411250: push rbp; mov rbp, rsp; call rax; 
0x000000000044595f: push rbp; movabs al, byte ptr [0xf6840ff08944]; add byte ptr [rax - 0x75], cl; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x0000000000461e33: push rbp; sar byte ptr [rsi + 0x5401], 1; syscall; 
0x0000000000416ab7: push rbp; shl byte ptr [rdi - 0x18], 0x31; cmp eax, 0x8948ffff; ret; 
0x000000000044baaa: push rbp; sti; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000438852: push rbp; test al, 0xbe; adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000041047a: push rbp; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044fe2e: push rbx; add al, dh; iretd; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000417180: push rbx; add dword ptr [rax + 0xaba78fa], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8d48; 
0x000000000041bf23: push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000422a39: push rbx; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000004173e8: push rbx; add dword ptr [rcx + 0x63], ecx; ret 0x8d48; 
0x0000000000401af8: push rbx; add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0xceeb; 
0x000000000040884d: push rbx; and byte ptr [rcx + 0x39], cl; ret 0x820f; 
0x000000000042b5b6: push rbx; bsf eax, eax; add rax, rdi; ret; 
0x0000000000410618: push rbx; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000004684cc: push rbx; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004604f9: push rbx; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000410da9: push rbx; bsf eax, eax; vzeroupper; ret; 
0x0000000000410f19: push rbx; bsf eax, eax; xtest; jne 0x10f27; vzeroupper; ret; 
0x000000000042411a: push rbx; cmp byte ptr [rbx + 0xf486603], cl; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000041b8c9: push rbx; fiadd word ptr [rax]; add byte ptr [rbp + 0x5d0775c0], al; ret; 
0x0000000000468aac: push rbx; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000411e48: push rbx; mov eax, 0x9d; syscall; 
0x0000000000458e9f: push rbx; mov rbx, rdi; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x00000000004501b1: push rbx; or byte ptr [rax + rcx*4 + 0x20], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000464422: push rbx; or byte ptr [rax - 0x77], cl; push rsp; ret; 
0x0000000000438f32: push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000454a11: push rbx; or byte ptr [rcx + rcx*4 + 0x20], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000418001: push rbx; sti; or byte ptr [rax], al; mov qword ptr [rsi], rax; ret; 
0x00000000004244e8: push rbx; sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x0000000000422362: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004080a3: push rcx; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], cl; test byte ptr [rbp - 0x9fffffc], bh; ret 0xf0f; 
0x000000000040b8fb: push rcx; add byte ptr [rax], al; lea rax, [rip + 0x4b3b]; cmovne rax, rdx; ret; 
0x0000000000417f32: push rcx; add dword ptr [rax + 0x39], ecx; ret 0xc75; 
0x000000000040ed0b: push rcx; and byte ptr [rdi + rcx + 0x11], al; xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000040cb93: push rcx; jl 0xcbde; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040cb9a: push rcx; jl 0xcbe5; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040cba1: push rcx; jl 0xcbec; adc dword ptr [rcx - 1], edi; ret; 
0x000000000040ccfa: push rcx; jl 0xcd45; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd01: push rcx; jl 0xcd4c; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd08: push rcx; jl 0xcd53; adc dword ptr [rcx + 7], edi; ret; 
0x000000000045655e: push rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000043865a: push rcx; mov eax, 0x101; syscall; 
0x0000000000439416: push rcx; or dh, dh; ret 0x7401; 
0x0000000000418986: push rcx; ret; 
0x0000000000457bfd: push rdi; adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x000000000042803a: push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x000000000042cee5: push rdi; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000042d58a: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x000000000040b96b: push rdi; add byte ptr [rax], al; lea rax, [rip + 0x52cb]; cmovne rax, rdx; ret; 
0x0000000000465cc7: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret 0x4808; 
0x0000000000466247: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000043656c: push rdi; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000040fba6: push rdi; add dword ptr [rdx - 0xf], esp; jl 0xfbf4; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000429bd9: push rdi; add eax, 0xa78fe800; std; jmp qword ptr [rdi - 0x18]; 
0x000000000042d63c: push rdi; add eax, 0xc478d48; ret; 
0x000000000042bbb4: push rdi; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000045f209: push rdi; bsf edx, r10d; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x0000000000411b2a: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000411276: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000411293: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000041134e: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000425be4: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000425c18: push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000047a150: push rdi; or byte ptr [rbx + 0x97421f8], al; pop rbp; ret; 
0x000000000046666a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000046d95a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000466671: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000447fff: push rdi; or cl, byte ptr [rax + 0x39]; ret 0x1a73; 
0x0000000000422b98: push rdi; or cl, ch; ret; 
0x000000000041fa10: push rdi; or dh, al; add byte ptr [rip - 0x74917], ah; jmp qword ptr [rsi + 0xf]; 
0x00000000004185b5: push rdi; or dword ptr [r8], eax; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x000000000042d820: push rdi; or eax, 0x1c478d48; ret; 
0x0000000000429075: push rdi; out 7, al; add byte ptr [rcx], bh; ret 0x4e0f; 
0x0000000000427a19: push rdi; push rdx; or byte ptr [rax], al; ret; 
0x0000000000428ad2: push rdi; ret 0; 
0x0000000000469278: push rdi; ret 0x67; 
0x0000000000457015: push rdi; sar edx, cl; jmp qword ptr [rdi - 0x18]; 
0x000000000045780c: push rdi; sub rdx, rsi; mov qword ptr [rbp - 0xe8], rcx; mov rdi, r15; call rax; 
0x0000000000410c68: push rdi; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004557e7: push rdi; xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x000000000042bae8: push rdi; xor eax, eax; ret; 
0x0000000000419859: push rdi; xor ecx, dword ptr [rcx]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000042a27e: push rdx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000040b972: push rdx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000042af82: push rdx; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000040688d: push rdx; lea rax, [rip + 0x9f92b]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411d2d: push rdx; mov rdx, qword ptr [rbp - 0x38]; sub rdx, qword ptr fs:[0x28]; jne 0x11d95; leave; ret; 
0x000000000045319a: push rdx; or al, 0xf6; ret 0xf01; 
0x0000000000427a05: push rdx; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004279be: push rdx; or byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000427995: push rdx; or byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000427a1a: push rdx; or byte ptr [rax], al; ret; 
0x0000000000450157: push rdx; ret 2; 
0x000000000042d877: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000045fe97: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000045fdf6: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x5fe06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000045fe16: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x5fe26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000040fced: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0xfd3b; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000453e50: push rsi; add dword ptr [rax + 0x63], ecx; ror byte ptr [rax + 0x39], cl; ret 0x9c0f; 
0x000000000040fce6: push rsi; add dword ptr [rdx - 0xf], esp; jl 0xfd34; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042d635: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x000000000045fca5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000040fd83: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000042d5a3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x000000000045fc43: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000040fb7e: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042a126: push rsi; cmp dh, bh; dec dword ptr [rax - 0x73]; add eax, 0xfffe37df; cmovne rax, rdx; ret; 
0x00000000004534c3: push rsi; or al, 0xf6; ret 0xf40; 
0x000000000042d817: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045fe37: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000045e276: push rsi; or eax, 0x83480000; ret 0xe910; 
0x000000000042d857: push rsi; psllq mm1, qword ptr [rdi]; jg 0x2d864; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000045fe77: push rsi; psllq mm1, qword ptr [rdi]; jg 0x5fe84; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000411e47: push rsi; push rbx; mov eax, 0x9d; syscall; 
0x00000000004473a1: push rsi; ret; 
0x0000000000452a16: push rsi; sbb ebx, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000040fb85: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004375a6: push rsi; xlatb; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004182fb: push rsp; adc dword ptr [rax], ebx; test rdx, rdx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x0000000000461e37: push rsp; add byte ptr [rax], al; syscall; 
0x000000000046a6a6: push rsp; add eax, dword ptr [rax]; add byte ptr [rbx - 0x67fdf1f], al; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x000000000043dadf: push rsp; add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x0000000000465ccb: push rsp; ret 0x4808; 
0x0000000000409259: push rsp; ret 0xfff0; 
0x000000000041b43b: push rsp; ret; 
0x00000000004298be: push rsp; test byte ptr [rbx + rax*4], al; cli; dec dword ptr [rdi]; test byte ptr [rsi - 0x7cfffffe], ch; ret 0x4101; 
0x00000000004386c5: pushfq; mov r8d, eax; mov rsi, qword ptr [rbp - 0x60]; mov edi, dword ptr [rbp - 0x58]; mov eax, 0x101; syscall; 
0x0000000000434734: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x0000000000453e59: pushfq; ret 0xb60f; 
0x00000000004276de: pxor mm0, mm0; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004276dd: pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041be4c: rcl bh, 1; add byte ptr [rbp + 0x48], bl; mov dword ptr [rip + 0x90de4], 0; ret; 
0x0000000000411090: rcl bl, 0xe8; je 0x10f87; bsf eax, eax; ret; 
0x000000000047879e: rcl cl, 1; call 0x314c9c19; rol byte ptr [rcx + rcx*4 - 0x18], cl; syscall; 
0x000000000046143e: rcl dword ptr [rax + 0x29d2bc0f], 0xc2; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x0000000000406aaa: rcl dword ptr [rip + 0x9f6ac], 0x83; ret 0x8b01; 
0x0000000000466677: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000041125b: rcr byte ptr [rbp - 0x3d], 0x66; nop; mov eax, 0xe4; syscall; 
0x00000000004025a5: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop r14; pop rbp; ret; 
0x0000000000418ae2: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x0000000000425c95: rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000448061: rcr byte ptr [rbx + 0x41], 1; pop rbp; pop rbp; ret; 
0x000000000040449b: rcr byte ptr [rbx + 0x41], 1; pop rsp; add qword ptr [rip + 0xa3f19], 1; pop rbp; ret; 
0x0000000000458763: rcr byte ptr [rbx + 0x41], 1; pop rsp; pop r13; pop rbp; ret; 
0x0000000000475a5e: rcr byte ptr [rbx + 0x41], 1; pop rsp; pop rbp; ret; 
0x00000000004044f3: rcr byte ptr [rbx + 0x41], cl; pop rsp; mov rax, rdx; pop rbp; ret; 
0x000000000045492c: rcr dl, 1; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000464d55: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000045ddd0: rcr dword ptr [rdx], 0xf; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045dafd: rcr dword ptr [rdx], 0xf; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e4fd: rcr dword ptr [rdx], 0xf; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e38d: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045ed9d: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045eabd: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x000000000045dcc2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045e6c2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045df92: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045e3e2: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045edf2: rcr dword ptr [rdx], 0xf; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000040d8ed: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000042d0d9: rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x000000000042cb97: rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; vzeroupper; ret; 
0x000000000040d8df: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040bce4: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040dc6d: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d3ff: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000045f27b: rep movsb byte ptr [rdi], byte ptr [rsi]; vzeroupper; ret; 
0x0000000000410003: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040f813: rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040ff18: rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x000000000040905e: rep stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000402134: ret 0; 
0x00000000004087a2: ret 0x110; 
0x0000000000408aae: ret 0x110f; 
0x000000000046c176: ret 0x111; 
0x000000000046664c: ret 0x114d; 
0x0000000000467d2b: ret 0x117e; 
0x000000000041176b: ret 0x1272; 
0x000000000042ae68: ret 0x127e; 
0x0000000000468005: ret 0x137e; 
0x0000000000468f27: ret 0x13e9; 
0x0000000000451aaa: ret 0x141; 
0x00000000004077fd: ret 0x148; 
0x000000000042451e: ret 0x149; 
0x0000000000413b7a: ret 0x14c; 
0x000000000040cf63: ret 0x14d; 
0x00000000004145a8: ret 0x15ff; 
0x000000000040aca7: ret 0x167d; 
0x000000000042b122: ret 0x167e; 
0x00000000004470a1: ret 0x1689; 
0x000000000040cea0: ret 0x180f; 
0x000000000046489c: ret 0x185; 
0x0000000000458501: ret 0x1874; 
0x000000000042bb55: ret 0x1876; 
0x0000000000448003: ret 0x1a73; 
0x0000000000411ffa: ret 0x1b8; 
0x0000000000417459: ret 0x1b9; 
0x0000000000411d5c: ret 0x1f0f; 
0x000000000044972b: ret 0x200; 
0x000000000041dff2: ret 0x2141; 
0x0000000000407aca: ret 0x2149; 
0x0000000000409efb: ret 0x214c; 
0x000000000042d1b8: ret 0x2288; 
0x0000000000432aac: ret 0x2376; 
0x000000000041268d: ret 0x24eb; 
0x0000000000412989: ret 0x2548; 
0x000000000041881a: ret 0x256; 
0x00000000004296e4: ret 0x25e9; 
0x000000000045336f: ret 0x2773; 
0x0000000000435e66: ret 0x2774; 
0x000000000043243b: ret 0x2776; 
0x000000000045309e: ret 0x280f; 
0x000000000042bb45: ret 0x2876; 
0x0000000000471a24: ret 0x290f; 
0x0000000000408ee8: ret 0x2948; 
0x00000000004554c4: ret 0x2949; 
0x0000000000407851: ret 0x294c; 
0x000000000040a203: ret 0x2a8; 
0x0000000000449635: ret 0x2aa0; 
0x00000000004494f0: ret 0x2b40; 
0x0000000000427eb8: ret 0x2b48; 
0x000000000046a00b: ret 0x2b49; 
0x000000000046b9ea: ret 0x2b73; 
0x0000000000401961: ret 0x2be; 
0x0000000000449519: ret 0x2c20; 
0x0000000000431db0: ret 0x2d76; 
0x0000000000451f8d: ret 0x2de8; 
0x00000000004496b0: ret 0x2f40; 
0x0000000000420a0a: ret 0x2f6; 
0x0000000000449687: ret 0x3000; 
0x00000000004495ba: ret 0x3060; 
0x0000000000420976: ret 0x30be; 
0x000000000044953f: ret 0x30c0; 
0x000000000043a811: ret 0x3144; 
0x000000000041525b: ret 0x3145; 
0x0000000000477a49: ret 0x31e8; 
0x0000000000478055: ret 0x31e9; 
0x00000000004328fb: ret 0x3276; 
0x000000000044960c: ret 0x3280; 
0x0000000000449568: ret 0x3300; 
0x000000000044d3a5: ret 0x3325; 
0x000000000043227a: ret 0x3376; 
0x00000000004495e3: ret 0x3380; 
0x000000000044965e: ret 0x33e0; 
0x0000000000449591: ret 0x3440; 
0x000000000044adfa: ret 0x364; 
0x0000000000444068: ret 0x381; 
0x000000000042bb35: ret 0x3876; 
0x00000000004260af: ret 0x389; 
0x000000000042415b: ret 0x38b; 
0x0000000000475bd5: ret 0x3910; 
0x000000000041422b: ret 0x3948; 
0x0000000000464047: ret 0x3949; 
0x000000000041736c: ret 0x394c; 
0x000000000041ce45: ret 0x394d; 
0x000000000046cd61: ret 0x39d; 
0x0000000000436b02: ret 0x3a01; 
0x0000000000463add: ret 0x3b48; 
0x000000000047124a: ret 0x3be; 
0x0000000000418d9e: ret 0x3c01; 
0x0000000000447fdf: ret 0x3e73; 
0x0000000000403afc: ret 0x3ee8; 
0x000000000046928b: ret 0x4000; 
0x0000000000437202: ret 0x4001; 
0x000000000043bc69: ret 0x403; 
0x0000000000466893: ret 0x40b9; 
0x00000000004298cb: ret 0x4101; 
0x0000000000475742: ret 0x4110; 
0x0000000000459c36: ret 0x41c4; 
0x0000000000443bb4: ret 0x4201; 
0x0000000000430afa: ret 0x4266; 
0x000000000040577f: ret 0x42e9; 
0x0000000000442e9d: ret 0x4301; 
0x0000000000455807: ret 0x4389; 
0x000000000046ae57: ret 0x440f; 
0x0000000000456cb1: ret 0x4475; 
0x0000000000460002: ret 0x4501; 
0x000000000047675a: ret 0x473; 
0x000000000045850a: ret 0x474; 
0x0000000000412169: ret 0x4801; 
0x000000000046afd0: ret 0x4802; 
0x0000000000442b29: ret 0x4804; 
0x0000000000414e6c: ret 0x4807; 
0x0000000000403de5: ret 0x4808; 
0x0000000000413f53: ret 0x4810; 
0x000000000040457e: ret 0x4811; 
0x00000000004679ac: ret 0x4812; 
0x0000000000412cf8: ret 0x4817; 
0x000000000046e8bb: ret 0x4818; 
0x000000000044ee4a: ret 0x4820; 
0x0000000000414409: ret 0x4838; 
0x0000000000430a06: ret 0x4840; 
0x00000000004024c9: ret 0x4853; 
0x0000000000437805: ret 0x485f; 
0x0000000000405c21: ret 0x4866; 
0x0000000000464efe: ret 0x4890; 
0x00000000004110dc: ret 0x48c3; 
0x0000000000435b78: ret 0x48d; 
0x00000000004319e8: ret 0x48e0; 
0x000000000040acab: ret 0x4901; 
0x0000000000430d62: ret 0x4910; 
0x0000000000412932: ret 0x4b72; 
0x0000000000431cba: ret 0x4b76; 
0x0000000000469822: ret 0x4c00; 
0x000000000041c556: ret 0x4c01; 
0x000000000044b6aa: ret 0x4c08; 
0x00000000004066ef: ret 0x4c10; 
0x000000000046bc4f: ret 0x4d01; 
0x0000000000457c7a: ret 0x4d3; 
0x0000000000458f78: ret 0x4d75; 
0x0000000000458055: ret 0x4d89; 
0x000000000042907a: ret 0x4e0f; 
0x000000000043bd8c: ret 0x5172; 
0x0000000000436807: ret 0x518d; 
0x000000000042af80: ret 0x5276; 
0x000000000042b240: ret 0x5376; 
0x0000000000401af6: ret 0x538d; 
0x000000000043a83d: ret 0x5441; 
0x0000000000447a21: ret 0x548d; 
0x000000000043a330: ret 0x5541; 
0x00000000004329b1: ret 0x5676; 
0x00000000004051b9: ret 0x588; 
0x0000000000447c52: ret 0x5958; 
0x0000000000445061: ret 0x5c72; 
0x0000000000467e53: ret 0x5f76; 
0x0000000000468123: ret 0x6076; 
0x000000000041b664: ret 0x607; 
0x0000000000479b3f: ret 0x61e9; 
0x000000000040de81: ret 0x6280; 
0x00000000004545a6: ret 0x6349; 
0x00000000004488d4: ret 0x6411; 
0x000000000047665b: ret 0x6574; 
0x0000000000468a11: ret 0x6608; 
0x000000000042bac1: ret 0x6620; 
0x00000000004444e7: ret 0x6666; 
0x000000000040af1c: ret 0x66c3; 
0x00000000004503fe: ret 0x673; 
0x0000000000416e66: ret 0x674; 
0x000000000046927a: ret 0x67; 
0x0000000000428b4e: ret 0x67e9; 
0x0000000000477111: ret 0x69e8; 
0x00000000004594b5: ret 0x7074; 
0x000000000043a23a: ret 0x726; 
0x0000000000424ce9: ret 0x7275; 
0x00000000004199f2: ret 0x7401; 
0x0000000000414be0: ret 0x7402; 
0x0000000000414bec: ret 0x7404; 
0x0000000000455d5e: ret 0x7408; 
0x000000000040b7ec: ret 0x7420; 
0x0000000000469c22: ret 0x7500; 
0x000000000041990d: ret 0x7501; 
0x000000000040984c: ret 0x7502; 
0x000000000042e263: ret 0x7504; 
0x000000000043dae4: ret 0x7508; 
0x000000000042e21b: ret 0x7510; 
0x000000000042e228: ret 0x7520; 
0x000000000042e235: ret 0x7540; 
0x000000000042803e: ret 0x773; 
0x000000000043f34c: ret 0x774; 
0x00000000004682b6: ret 0x776; 
0x000000000046fbf4: ret 0x7972; 
0x0000000000471c16: ret 0x7c80; 
0x00000000004689b1: ret 0x7e08; 
0x000000000042af6e: ret 0x7e20; 
0x0000000000475f7a: ret 0x7e8d; 
0x000000000042f6ac: ret 0x7f10; 
0x00000000004767af: ret 0x7f8; 
0x0000000000430889: ret 0x8000; 
0x000000000042e6e9: ret 0x8005; 
0x000000000046f245: ret 0x8008; 
0x000000000040295a: ret 0x800; 
0x00000000004398f9: ret 0x8148; 
0x0000000000408851: ret 0x820f; 
0x000000000042a007: ret 0x829; 
0x0000000000401aef: ret 0x8301; 
0x0000000000402452: ret 0x830f; 
0x000000000042e82b: ret 0x8320; 
0x000000000042c8c8: ret 0x8340; 
0x0000000000412eb7: ret 0x8341; 
0x0000000000404480: ret 0x8348; 
0x000000000043ce3a: ret 0x8349; 
0x00000000004183b2: ret 0x83f0; 
0x0000000000413dcf: ret 0x8401; 
0x0000000000408515: ret 0x840f; 
0x00000000004718f5: ret 0x8440; 
0x000000000044c154: ret 0x8501; 
0x00000000004089a4: ret 0x8504; 
0x00000000004022ac: ret 0x850f; 
0x0000000000411583: ret 0x8548; 
0x000000000044ec95: ret 0x854d; 
0x000000000043c84d: ret 0x8566; 
0x000000000041d4b3: ret 0x8589; 
0x0000000000451606: ret 0x85c7; 
0x000000000042b8ce: ret 0x860f; 
0x0000000000426796: ret 0x864; 
0x0000000000435d07: ret 0x870f; 
0x000000000042bb65: ret 0x876; 
0x000000000043728d: ret 0x8801; 
0x000000000041d034: ret 0x8844; 
0x00000000004637d2: ret 0x8901; 
0x0000000000420bb8: ret 0x890f; 
0x000000000041d0b8: ret 0x8941; 
0x00000000004202fc: ret 0x8944; 
0x0000000000403569: ret 0x8948; 
0x0000000000404b98: ret 0x8949; 
0x0000000000412565: ret 0x894c; 
0x000000000040896c: ret 0x894d; 
0x000000000046581b: ret 0x894e; 
0x0000000000414c1c: ret 0x8a8; 
0x0000000000406ab1: ret 0x8b01; 
0x0000000000429ac2: ret 0x8b41; 
0x0000000000414e88: ret 0x8b44; 
0x00000000004043af: ret 0x8b48; 
0x0000000000425393: ret 0x8b49; 
0x00000000004657a2: ret 0x8b4a; 
0x000000000043c2fe: ret 0x8b4c; 
0x000000000042f0c2: ret 0x8b74; 
0x00000000004668e7: ret 0x8beb; 
0x0000000000446507: ret 0x8d08; 
0x0000000000444583: ret 0x8d0f; 
0x0000000000402f54: ret 0x8d48; 
0x000000000040a294: ret 0x8d49; 
0x0000000000414dd6: ret 0x8d4a; 
0x000000000042a9aa: ret 0x8d4b; 
0x0000000000408527: ret 0x8d4c; 
0x0000000000473436: ret 0x8d4d; 
0x000000000041eaa5: ret 0x8d4e; 
0x000000000041e7f4: ret 0x8de9; 
0x0000000000404c10: ret 0x8feb; 
0x000000000040b63d: ret 0x90c3; 
0x0000000000417550: ret 0x90e9; 
0x0000000000429273: ret 0x9175; 
0x00000000004125a6: ret 0x920f; 
0x000000000041d95d: ret 0x940f; 
0x0000000000437eb4: ret 0x950a; 
0x000000000041dda4: ret 0x9522; 
0x0000000000402c10: ret 0x97; 
0x000000000043d682: ret 0x98e9; 
0x00000000004109a3: ret 0x9a74; 
0x000000000040d262: ret 0x9a8; 
0x0000000000453e57: ret 0x9c0f; 
0x000000000040789a: ret 0x9e8; 
0x0000000000469f86: ret 0x9eb; 
0x0000000000451f5f: ret 0x9f8; 
0x0000000000476fdb: ret 0x9fe8; 
0x000000000046f05d: ret 0xa180; 
0x0000000000424d33: ret 0xa2e9; 
0x00000000004042be: ret 0xa38; 
0x0000000000428490: ret 0xa3eb; 
0x000000000046fe27: ret 0xa6eb; 
0x000000000042afc8: ret 0xa76; 
0x0000000000406aba: ret 0xa7e; 
0x000000000044d966: ret 0xa801; 
0x0000000000403919: ret 0xa90; 
0x00000000004030c2: ret 0xa9a; 
0x0000000000411611: ret 0xabe; 
0x0000000000478e53: ret 0xad75; 
0x0000000000439867: ret 0xae73; 
0x0000000000411001: ret 0xb262; 
0x00000000004026ec: ret 0xb4e9; 
0x0000000000408c25: ret 0xb60f; 
0x000000000042b288: ret 0xb76; 
0x00000000004093c3: ret 0xb817; 
0x0000000000468d2e: ret 0xb8; 
0x00000000004637e8: ret 0xba01; 
0x0000000000475335: ret 0xbbeb; 
0x000000000043c046: ret 0xbc41; 
0x0000000000446524: ret 0xbd75; 
0x000000000046926e: ret 0xbf98; 
0x0000000000430749: ret 0xc000; 
0x00000000004022c4: ret 0xc031; 
0x0000000000404bee: ret 0xc083; 
0x0000000000410597: ret 0xc085; 
0x000000000042bbb9: ret 0xc0ff; 
0x000000000041933b: ret 0xc141; 
0x0000000000401ab2: ret 0xc148; 
0x0000000000478c18: ret 0xc189; 
0x00000000004593d9: ret 0xc231; 
0x0000000000461844: ret 0xc35d; 
0x0000000000418b1a: ret 0xc368; 
0x0000000000469f8f: ret 0xc374; 
0x00000000004549ad: ret 0xc3c3; 
0x000000000040bed9: ret 0xc580; 
0x0000000000401893: ret 0xc600; 
0x000000000044d93f: ret 0xc602; 
0x000000000042907d: ret 0xc689; 
0x0000000000416ca2: ret 0xc6; 
0x0000000000462cc2: ret 0xc701; 
0x0000000000446fc9: ret 0xc704; 
0x0000000000440f87: ret 0xc748; 
0x0000000000417f36: ret 0xc75; 
0x000000000044508d: ret 0xc875; 
0x000000000042609b: ret 0xc883; 
0x000000000046f322: ret 0xc931; 
0x00000000004594bd: ret 0xc983; 
0x0000000000423019: ret 0xc985; 
0x000000000042d105: ret 0xc9ff; 
0x0000000000459243: ret 0xca83; 
0x000000000046d768: ret 0xcab0; 
0x0000000000405f81: ret 0xcac1; 
0x000000000040b51e: ret 0xcb8; 
0x0000000000419bb8: ret 0xcd75; 
0x00000000004396db: ret 0xce80; 
0x0000000000401aff: ret 0xceeb; 
0x0000000000444565: ret 0xcf89; 
0x0000000000454d73: ret 0xd008; 
0x000000000044d3b5: ret 0xd089; 
0x0000000000462e28: ret 0xd108; 
0x0000000000422130: ret 0xd139; 
0x0000000000419342: ret 0xd141; 
0x0000000000466f7e: ret 0xd148; 
0x000000000047079e: ret 0xd173; 
0x000000000040bd9d: ret 0xd1f7; 
0x00000000004283d5: ret 0xd2eb; 
0x0000000000403694: ret 0xd2f7; 
0x000000000043a59c: ret 0xd348; 
0x000000000046bbda: ret 0xd375; 
0x0000000000444506: ret 0xd73; 
0x000000000043c855: ret 0xd74; 
0x0000000000462a7b: ret 0xd889; 
0x00000000004026db: ret 0xda89; 
0x0000000000429769: ret 0xdaf7; 
0x0000000000430609: ret 0xe000; 
0x000000000042e1dd: ret 0xe074; 
0x0000000000465c3d: ret 0xe075; 
0x0000000000409348: ret 0xe083; 
0x000000000042f2fc: ret 0xe162; 
0x0000000000478705: ret 0xe183; 
0x0000000000414c66: ret 0xe281; 
0x0000000000401a21: ret 0xe283; 
0x000000000043bf50: ret 0xe2c1; 
0x000000000043664f: ret 0xe2c4; 
0x000000000040e8bd: ret 0xe2ff; 
0x00000000004770d2: ret 0xe783; 
0x000000000044bf72: ret 0xe867; 
0x000000000042ad95: ret 0xe875; 
0x000000000046ba8b: ret 0xe883; 
0x0000000000454dfe: ret 0xe8c1; 
0x000000000042a83b: ret 0xe901; 
0x0000000000402e7e: ret 0xe907; 
0x000000000042d1a6: ret 0xe908; 
0x000000000045db5c: ret 0xe910; 
0x000000000041d0be: ret 0xe9c0; 
0x0000000000444515: ret 0xe9c1; 
0x0000000000401f8e: ret 0xeac1; 
0x0000000000447d1b: ret 0xeb01; 
0x0000000000430d86: ret 0xeb10; 
0x0000000000464f42: ret 0xeb75; 
0x0000000000459554: ret 0xec75; 
0x000000000043b57d: ret 0xed75; 
0x0000000000440dcb: ret 0xee75; 
0x0000000000475e57: ret 0xee83; 
0x00000000004304c9: ret 0xf000; 
0x00000000004026e5: ret 0xf01; 
0x0000000000409950: ret 0xf02; 
0x0000000000475ea4: ret 0xf039; 
0x0000000000413f74: ret 0xf03; 
0x000000000040a8ea: ret 0xf04; 
0x000000000045914b: ret 0xf089; 
0x0000000000443e0c: ret 0xf08; 
0x00000000004080af: ret 0xf0f; 
0x000000000042f662: ret 0xf10; 
0x00000000004684e2: ret 0xf176; 
0x0000000000456dd0: ret 0xf1e9; 
0x00000000004591af: ret 0xf283; 
0x000000000046c648: ret 0xf2; 
0x0000000000469148: ret 0xf2e9; 
0x000000000042af65: ret 0xf40; 
0x00000000004146b2: ret 0xf41; 
0x0000000000412c0f: ret 0xf48; 
0x000000000041c501: ret 0xf49; 
0x0000000000412856: ret 0xf4e8; 
0x0000000000450941: ret 0xf50; 
0x000000000042b5c8: ret 0xf576; 
0x0000000000405e62: ret 0xf66; 
0x00000000004230a3: ret 0xf685; 
0x0000000000416e57: ret 0xf72; 
0x0000000000469243: ret 0xf7e9; 
0x0000000000430389: ret 0xf800; 
0x000000000043c2d3: ret 0xf883; 
0x0000000000428047: ret 0xf8b; 
0x0000000000466342: ret 0xf8e8; 
0x000000000046a2aa: ret 0xf9a0; 
0x000000000042e97c: ret 0xf9c5; 
0x000000000042e91c: ret 0xfac5; 
0x0000000000474d4a: ret 0xfb49; 
0x000000000041086f: ret 0xfbc5; 
0x000000000044b2ca: ret 0xfbe4; 
0x00000000004456aa: ret 0xfbec; 
0x0000000000430249: ret 0xfc00; 
0x000000000040e527: ret 0xfc0; 
0x000000000040b60a: ret 0xfc3; 
0x00000000004360c3: ret 0xfdc5; 
0x0000000000430109: ret 0xfe00; 
0x00000000004153ba: ret 0xfebc; 
0x000000000042e833: ret 0xfec5; 
0x000000000040d5fc: ret 0xff00; 
0x000000000047a34a: ret 0xff0; 
0x0000000000453374: ret 0xff2; 
0x000000000042bf2e: ret 0xff2d; 
0x000000000042d411: ret 0xff3; 
0x000000000042fe89: ret 0xff80; 
0x000000000045345b: ret 0xff85; 
0x00000000004481bc: ret 0xffb8; 
0x00000000004785ca: ret 0xffb9; 
0x000000000042fd49: ret 0xffc0; 
0x0000000000411272: ret 0xffd8; 
0x000000000041f10a: ret 0xffd9; 
0x0000000000403a7a: ret 0xffe0; 
0x0000000000421198: ret 0xffe4; 
0x000000000043c7fa: ret 0xffe8; 
0x000000000043f68a: ret 0xffec; 
0x000000000040925a: ret 0xfff0; 
0x00000000004511fa: ret 0xfff3; 
0x0000000000414a6f: ret 0xfff6; 
0x000000000047191a: ret 0xfff7; 
0x00000000004208fa: ret 0xfff8; 
0x000000000041630c: ret 0xfffa; 
0x000000000040f13a: ret 0xfffb; 
0x000000000040abb1: ret 0xfffc; 
0x00000000004294f6: ret 0xfffd; 
0x000000000040ee3a: ret 0xfffe; 
0x0000000000409072: ret 0xffff; 
0x00000000004243e0: ret 1; 
0x00000000004245b5: ret 2; 
0x000000000043ffde: ret 3; 
0x000000000043500e: ret 4; 
0x000000000042012a: ret 5; 
0x0000000000421f97: ret 6; 
0x000000000041d81a: ret 7; 
0x0000000000409ed5: ret 9; 
0x000000000040101a: ret; 
0x0000000000478ae8: retf 0; add byte ptr [rax - 0x29767e0e], al; mov edx, 0x7fffffff; syscall; 
0x000000000042844d: retf 0; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x00000000004788e3: retf 0; add byte ptr [rcx + rax - 0x19], cl; syscall; 
0x00000000004054ee: retf 0; cmp eax, 1; je 0x5500; pop rbp; ret; 
0x000000000042b5ac: retf 0x1476; test eax, eax; je 0x2b3c0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042b82c: retf 0x1476; test eax, eax; je 0x2b640; tzcnt eax, eax; add rax, rdi; ret; 
0x00000000004684c2: retf 0x1476; test eax, eax; je 0x682c8; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000468743: retf 0x1476; test eax, eax; je 0x68548; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000457c01: retf 0x2948; ret 0x2948; 
0x00000000004207c3: retf 0x3145; ror byte ptr [rcx - 0x4cd1635], 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000474c13: retf 0x572; cmp rcx, rdx; sbb eax, eax; ret; 
0x000000000041368a: retf 0x6b1; add al, ch; fisttp qword ptr [rdi + rdi*8]; jmp qword ptr [rsi + 0x66]; 
0x0000000000428455: retf 0x80be; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; syscall; 
0x0000000000402c0d: retf 0x8102; ret 0x97; 
0x00000000004066ec: retf 0x8348; ret 0x4c10; 
0x000000000046a454: retf 0x8348; ret; 
0x0000000000430ed5: retf 0x8349; ret 0x7f10; 
0x000000000045dd82: retf 0x8349; ret 0xf10; 
0x000000000045c3db: retf 0x850f; ret; 
0x0000000000409592: retf 0x86; add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x0000000000412c9a: retf 0x933; add bl, ch; ret 0x66c3; 
0x000000000042f0de: retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000041b501: retf 0xb60f; add eax, 0x916a7; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x9169b], al; ret; 
0x000000000041b471: retf 0xb60f; add eax, 0x91737; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x9172b], al; ret; 
0x00000000004326da: retf 0xbc76; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; ret; 
0x0000000000431a0b: retf 0xbd76; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000431c4c: retf 0xd377; xor eax, eax; vzeroupper; ret; 
0x000000000043293c: retf 0xd877; xor eax, eax; ret; 
0x0000000000431deb: retf 0xd977; nop; xor eax, eax; vzeroupper; ret; 
0x0000000000434706: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004326ba: retf 0xdc76; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; ret; 
0x00000000004319ec: retf 0xdc76; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x0000000000432add: retf 0xe177; xor eax, eax; ret; 
0x000000000040499b: retf 0xe273; mov rax, rsi; ret; 
0x0000000000411230: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000460c80: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000435ed1: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000045309a: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x280f; 
0x00000000004368f0: retf 0xf66; xlatb; ret; 
0x000000000046d7a2: retf 0xf96b; jmp qword ptr [rsi + 0x2e]; 
0x00000000004440a2: retf 0xfc02; jmp qword ptr [rdi - 0x18]; 
0x00000000004175a2: retf 0xfecd; jmp qword ptr [rsi + 0x2e]; 
0x0000000000426182: retf 0xffff; jmp 0x2611c; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004319d6: retf 0xffff; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000041952f: retf 8; mov rdi, rax; call 0x2a2d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045db01: retf; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000408521: retf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x00000000004054d6: retf; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x000000000045e501: retf; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040b971: retf; push rdx; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000042b7e7: retf; shl rcx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004686f7: retf; shl rcx, 8; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x000000000044ffc0: retf; xor eax, eax; movups xmmword ptr [r10 + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x00000000004207c2: retfq 0x3145; ror byte ptr [rcx - 0x4cd1635], 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000045a0f8: rol ah, 0x41; jge 0x5a0f9; ret 0x41c4; 
0x000000000045ab18: rol ah, 0x41; jge 0x5ab19; ret 0x41c4; 
0x000000000045a445: rol ah, 1; jns 0x5a446; ret 0x41c4; 
0x000000000045a496: rol ah, 1; jns 0x5a497; ret 0x41c4; 
0x000000000045a4f6: rol ah, 1; jns 0x5a4f7; ret 0x41c4; 
0x000000000045a548: rol ah, 1; jns 0x5a549; ret 0x41c4; 
0x000000000045ae65: rol ah, 1; jns 0x5ae66; ret 0x41c4; 
0x000000000045aeb6: rol ah, 1; jns 0x5aeb7; ret 0x41c4; 
0x000000000045af16: rol ah, 1; jns 0x5af17; ret 0x41c4; 
0x000000000045af68: rol ah, 1; jns 0x5af69; ret 0x41c4; 
0x0000000000468a0e: rol bl, 0x83; ret 0x6608; 
0x000000000042babe: rol bl, 0x83; ret 0x6620; 
0x0000000000475181: rol byte ptr [r9 + r9*4 - 0x10], 0x49; lea edx, [rdi + rax*8]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x00000000004481b5: rol byte ptr [r9 - 0x77], 1; add r11b, r13b; ret 0xffb8; 
0x000000000042deec: rol byte ptr [rax + 0x3a], cl; je 0x2df08; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000430a02: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000435e62: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000004591db: rol byte ptr [rax + 0xf], 0x95; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000442a58: rol byte ptr [rax + rcx*2], 0x39; ret; 
0x000000000041a3bf: rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x000000000041a3e3: rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8b48; 
0x000000000041a39e: rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x0000000000472835: rol byte ptr [rax - 0x7c], 0xf6; js 0x72820; jmp 0x727bb; ret; 
0x0000000000473335: rol byte ptr [rax - 0x7c], 0xf6; js 0x73320; jmp 0x732bb; ret; 
0x000000000040100a: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000040172f: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401771: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000414be7: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x000000000042a474: rol byte ptr [rax], 0; test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000470e41: rol byte ptr [rax], 1; add byte ptr [rax], al; leave; ret; 
0x0000000000411255: rol byte ptr [rbp + 0x311675c0], 1; rcr byte ptr [rbp - 0x3d], 0x66; nop; mov eax, 0xe4; syscall; 
0x0000000000461d95: rol byte ptr [rbp + 0x31], 1; sal bh, cl; shr byte ptr [rcx + 0x410000], 1; je 0x61dc8; mov eax, 0x101; syscall; 
0x000000000042c4c5: rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x0000000000460824: rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000411024: rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000435c92: rol byte ptr [rbp + 0x623975d2], 1; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x0000000000461550: rol byte ptr [rbp + 0x623b75d2], 1; mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x0000000000410873: rol byte ptr [rbp + 0xf3874c0], 0xbc; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000044ffa5: rol byte ptr [rbp - 0x77], 0x5a; add al, 0x49; mov dword ptr [rdx + 8], ecx; mov dword ptr [r10 + 0x14], r8d; leave; ret; 
0x00000000004794d6: rol byte ptr [rbx + 0x394901e0], 1; ret 0x840f; 
0x0000000000478e4d: rol byte ptr [rbx + 0x394901e0], 1; ret 0xad75; 
0x000000000046b7ee: rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x0000000000464d57: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000478c32: rol byte ptr [rbx - 0x3d76fd38], cl; mov eax, r13d; syscall; 
0x0000000000412eb1: rol byte ptr [rbx - 0x6af0fe08], cl; ret 0x8341; 
0x000000000042211b: rol byte ptr [rbx - 0x78f0f608], 1; push rax; add eax, dword ptr [rax]; add byte ptr [rbp + 0xc8dd042], cl; mov dword ptr [rcx + 0x29c901fa], ecx; ret 0xd139; 
0x0000000000460f9f: rol byte ptr [rcx + 0x48], 1; clc; shr rax, 2; vzeroupper; ret; 
0x000000000043577f: rol byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x000000000043f5fa: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; pop r14; pop rbp; ret; 
0x000000000041678a: rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x000000000044fb7c: rol byte ptr [rcx + 0x5f], 1; pop rbp; ret; 
0x0000000000435563: rol byte ptr [rcx + 0x81e9], 0; add eax, ecx; vzeroupper; ret; 
0x0000000000475182: rol byte ptr [rcx + rcx*4 - 0x10], 0x49; lea edx, [rdi + rax*8]; mov rax, qword ptr [rbp - 0x858]; mov dword ptr [rbp - 0x860], r8d; mov ecx, r8d; call rax; 
0x00000000004787a5: rol byte ptr [rcx + rcx*4 - 0x18], cl; syscall; 
0x0000000000444e72: rol byte ptr [rcx - 0x43], cl; add eax, 0xe9000000; ret 0xfffb; 
0x0000000000458972: rol byte ptr [rcx - 0x77], 0xc4; mov rdi, qword ptr [rbp - 0x20]; mov r9d, 0xffffffff; mov edx, ebx; mov eax, 0xca; syscall; 
0x00000000004481b6: rol byte ptr [rcx - 0x77], 1; add r11b, r13b; ret 0xffb8; 
0x000000000046a184: rol byte ptr [rcx - 0x77], 1; ret; 
0x0000000000475fed: rol byte ptr [rcx - 0x77], cl; ret; 
0x0000000000441db9: rol byte ptr [rcx - 0xa], cl; ret 0x7504; 
0x0000000000412746: rol byte ptr [rcx], 0x48; mov edi, edx; jmp 0x126af; leave; xor eax, eax; ret; 
0x000000000042c66e: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042be43: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c65c: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042be23: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c832: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000401af2: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x538d; 
0x00000000004026d7: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000429091: rol byte ptr [rcx], 1; ret; 
0x0000000000458c72: rol byte ptr [rdi + 0x53c6705], 0; cmp eax, 1; jg 0x58cb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004547f9: rol byte ptr [rdi + 0x5877015], cl; add byte ptr [rbx + 0x337f01fa], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041bdda: rol byte ptr [rdi + 0x90e6705], 0; cmp eax, 1; jg 0x1be08; xor eax, eax; pop rbp; ret; 
0x0000000000418617: rol byte ptr [rdx], 1; add byte ptr [rax], al; mov eax, 0xda; syscall; 
0x000000000042ae63: rol ch, 0xf8; ja 0x2aea1; ret 0x127e; 
0x0000000000410593: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000436087: rol ch, cl; std; xlatb; ret; 
0x0000000000435ca0: rol ch, cl; sti; xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000046155e: rol ch, cl; sti; xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; or byte ptr [rax + 9], cl; ret 0xf48; 
0x0000000000411912: rol cl, 0xe0; cmovs ecx, dword ptr [rbx + 0x4864f855]; sub edx, dword ptr [0x28]; jne 0x1193d; leave; ret; 
0x0000000000467d23: rol cl, 0xe2; add al, ch; clc; ja 0x67d64; ret 0x117e; 
0x00000000004606fd: rol cl, 0xe8; add cl, byte ptr [rdi]; add esi, edx; jne 0x6070a; vzeroupper; ret; 
0x000000000040905a: rol cl, 0xe9; add esi, ebx; stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004591e2: rol cl, cl; out 7, al; xor sil, 0x81; syscall; 
0x000000000040fffb: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000403af6: rol dword ptr [rax], 0; add byte ptr [rcx - 0x77], cl; ret 0x3ee8; 
0x0000000000468a09: rol dword ptr [rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042bae4: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000468a34: rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000436549: rol dword ptr [rbp + 0x669574c0], 0x90; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004364ec: rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x0000000000468a04: rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042af93: rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000046081c: rol dword ptr [rbp - 0x3acf8a40], 0xfb; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x000000000041101c: rol dword ptr [rbp - 0x3ad08a40], 0xfb; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x000000000042bab4: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000410c64: rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x0000000000413f47: rol dword ptr [rbx - 0x7af0f81f], 0xba; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000004668bd: rol dword ptr [rcx + rbp - 0x40], 1; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x000000000045061f: rol dword ptr [rcx + rcx*4 - 0x20], 1; pop rbx; pop r12; pop rbp; ret; 
0x000000000046a17f: rol dword ptr [rcx + rdi - 0x31], 0x74; rol byte ptr [rcx - 0x77], 1; ret; 
0x0000000000472831: rol dword ptr [rdi], 0x49; or eax, eax; test sil, sil; js 0x72820; jmp 0x727bb; ret; 
0x0000000000473331: rol dword ptr [rdi], 0x49; or eax, eax; test sil, sil; js 0x73320; jmp 0x732bb; ret; 
0x0000000000478a0b: rol dword ptr [rdi], 0xc1; call 0x4000d15; je 0x78a20; ret; 
0x0000000000411d1b: rol dword ptr [rsi], 0x75; and dword ptr [rax + 0x19], edi; syscall; 
0x0000000000460fdc: rol ecx, 1; jmp 0xfffffffff13f57e5; jb 0x60d64; mov rax, r8; vzeroupper; ret; 
0x0000000000447c45: ror byte ptr [r13 + rcx*4 + 0x45], 0xc0; push 0; push 0; call rax; 
0x0000000000474cb5: ror byte ptr [r9 + rcx*4 + 0x55], 0xb8; call rax; 
0x000000000042b8cb: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2bb70; add rax, rdi; add rax, rcx; ret; 
0x000000000042bb32: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2bb70; add rax, rdi; ret; 
0x000000000042bb42: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2bb70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042bb52: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2bb70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042bb62: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2bb70; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000411052: ror byte ptr [rax + 0x29], 0xcf; add rax, rdi; ret; 
0x0000000000411062: ror byte ptr [rax + 0x29], 0xcf; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000411043: ror byte ptr [rax + 0x29], 0xcf; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000460853: ror byte ptr [rax + 0x29], 0xcf; sar rdi, 2; add rax, rdi; ret; 
0x0000000000460843: ror byte ptr [rax + 0x29], 0xcf; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460862: ror byte ptr [rax + 0x29], 0xcf; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000460f73: ror byte ptr [rax + 0x29], 0xd7; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000435753: ror byte ptr [rax + 0x29], 0xd7; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000460f53: ror byte ptr [rax + 0x29], 0xd7; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000435743: ror byte ptr [rax + 0x29], 0xd7; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000411237: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000460c87: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000435cb4: ror byte ptr [rax + 0x39], 0xc1; cmovb rax, rcx; ret; 
0x00000000004357c3: ror byte ptr [rax + 0x39], 0xc6; cmovb eax, esi; vzeroupper; ret; 
0x00000000004587e0: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000040ad41: ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000450094: ror byte ptr [rax + 0x39], 1; sal byte ptr [rbp + 0x21], 1; test ecx, ecx; jne 0x500a0; ret; 
0x0000000000466cc8: ror byte ptr [rax + 0x39], 1; sal byte ptr [rbp + 0x25], 1; test ecx, ecx; jne 0x66cd8; ret; 
0x0000000000453e54: ror byte ptr [rax + 0x39], cl; ret 0x9c0f; 
0x000000000041e7f0: ror byte ptr [rax + 0xf], 0x44; ret 0x8de9; 
0x00000000004383d0: ror byte ptr [rax + 0xf], 0x44; ret; 
0x0000000000401aae: ror byte ptr [rax + 0xf], 0xaf; ret 0xc148; 
0x0000000000466842: ror byte ptr [rax + 0xf], 1; mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x000000000042c756: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x10]; movzx eax, byte ptr [rdi + rax + 0x10]; sub eax, ecx; ret; 
0x000000000042c60f: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042be07: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000041061c: ror byte ptr [rax + 1], 0xd0; vzeroupper; ret; 
0x00000000004364f3: ror byte ptr [rax + 1], 0xf0; ret; 
0x000000000042df32: ror byte ptr [rax + 1], 0xf8; cmp sil, byte ptr [rax]; jne 0x2df3c; ret; 
0x000000000041087a: ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000460eec: ror byte ptr [rax + 1], 0xf8; shr rax, 2; vzeroupper; ret; 
0x000000000041047e: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000041067e: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x1068b; vzeroupper; ret; 
0x000000000042b0f8: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x2b105; vzeroupper; ret; 
0x0000000000436228: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x36235; vzeroupper; ret; 
0x0000000000467fd8: ror byte ptr [rax + 1], 0xf8; xtest; jne 0x67fe5; vzeroupper; ret; 
0x000000000040dcc2: ror byte ptr [rax + 1], 0xfe; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d44b: ror byte ptr [rax + 1], 0xfe; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000042d91f: ror byte ptr [rax + 1], 1; clc; vzeroupper; ret; 
0x000000000043608f: ror byte ptr [rax + 1], cl; ret 0x840f; 
0x0000000000411234: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000460c84: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000410b75: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000411176: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x11190; bsf rax, rdx; ret; 
0x0000000000411119: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x111a0; bsf rax, rdx; ret; 
0x0000000000460bc6: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x60be0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000460b6d: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x60bf0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000409ef0: ror byte ptr [rax - 0x39], cl; ret 0; 
0x0000000000470a0b: ror byte ptr [rax - 0x39], cl; ret; 
0x0000000000435ca4: ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xf48; 
0x0000000000461562: ror byte ptr [rax - 0x3f], 0xe2; or byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000040b821: ror byte ptr [rax - 0x73], 0x15; ja 0xb871; add byte ptr [rax], al; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x000000000046c5c5: ror byte ptr [rax - 0x73], 0x15; ret; 
0x000000000040b803: ror byte ptr [rax - 0x73], 0x15; xor eax, 0x4800003f; lea eax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000042baf2: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x000000000042bb22: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x000000000042bb12: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x0000000000403de1: ror byte ptr [rax - 0x73], 0x7c; ret 0x4808; 
0x000000000045828c: ror byte ptr [rax - 0x73], 1; jae 0x582d1; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000045835b: ror byte ptr [rax - 0x73], 1; jae 0x58368; xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x000000000042b585: ror byte ptr [rax - 0x73], cl; add al, 0x17; ret; 
0x00000000004622e0: ror byte ptr [rax - 0x75], 0x55; clc; sub rdx, qword ptr fs:[0x28]; jne 0x6230b; leave; ret; 
0x0000000000467c01: ror byte ptr [rax - 0x75], 0x55; clc; sub rdx, qword ptr fs:[0x28]; jne 0x67c40; leave; ret; 
0x000000000040a737: ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x0000000000455f02: ror byte ptr [rax - 0x75], 0x5d; clc; mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; leave; ret; 
0x00000000004386c8: ror byte ptr [rax - 0x75], 0x75; movabs al, byte ptr [0x101b8a87d8b]; syscall; 
0x000000000041f382: ror byte ptr [rax - 0x75], cl; add al, 0xc8; jmp rax; 
0x0000000000426588: ror byte ptr [rax - 0x75], cl; jne 0x2656d; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000426560: ror byte ptr [rax - 0x75], cl; pop rbp; clc; leave; jmp rax; 
0x00000000004458e3: ror byte ptr [rax - 0x77], 0x45; test al, 0x8b; test dword ptr [rdi + rdi*8 - 1], edi; call qword ptr [rax + 0x6a]; 
0x0000000000454af6: ror byte ptr [rax - 0x77], 0x47; adc byte ptr [rax - 0x77], cl; ja 0x54b27; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000419af4: ror byte ptr [rax - 0x77], 1; in eax, 0x48; lea esi, [rbp - 8]; syscall; 
0x000000000046258a: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000044ea0a: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000412853: ror byte ptr [rax - 0x77], 1; ret 0xf4e8; 
0x0000000000457eb4: ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000415b2d: ror byte ptr [rax - 0x77], cl; fidiv word ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x0000000000428910: ror byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 - 0x10]; not esi; and esi, 0x80; syscall; 
0x0000000000428d2b: ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x000000000046b0de: ror byte ptr [rax - 0x77], cl; ret; 
0x00000000004464e6: ror byte ptr [rax - 0x7d], 0xc0; add cl, byte ptr [rcx + 0x39]; ret 0x820f; 
0x00000000004099cd: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000406bbb: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000404592: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x000000000042da72: ror byte ptr [rax - 0x7d], 0xc7; add dword ptr [rax + 0x3a], 0x1c750734; add rax, rdi; vzeroupper; ret; 
0x00000000004104b2: ror byte ptr [rax - 0x7d], 0xc7; add rax, rdi; vzeroupper; ret; 
0x00000000004104a2: ror byte ptr [rax - 0x7d], 0xc7; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000042d929: ror byte ptr [rax - 0x7d], 0xc7; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x00000000004105d2: ror byte ptr [rax - 0x7d], 0xc7; or dword ptr [rax + 1], 0x77f8c5f8; ret; 
0x000000000042aff3: ror byte ptr [rax - 0x7d], 0xef; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000410d73: ror byte ptr [rax - 0x7d], 0xef; jg 0x10dc1; add eax, edi; vzeroupper; ret; 
0x00000000004356b3: ror byte ptr [rax - 0x7d], 0xef; jg 0x35701; add eax, edi; vzeroupper; ret; 
0x00000000004604a3: ror byte ptr [rax - 0x7d], 0xef; jg 0x604f1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000460ea3: ror byte ptr [rax - 0x7d], 0xef; jg 0x60ef1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x00000000004604c3: ror byte ptr [rax - 0x7d], 0xef; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105e3: ror byte ptr [rax - 0x7d], 0xef; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000040f759: ror byte ptr [rax - 0x7d], 0xfa; ja 0xf780; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000040f709: ror byte ptr [rax - 0x7d], 0xfa; ja 0xf789; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044df4a: ror byte ptr [rax - 0x7d], 1; ret 0x4001; 
0x000000000046bc4c: ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x000000000043c4da: ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000042b132: ror byte ptr [rax - 1], 0xc7; add rax, rdi; jmp 0x2b0fc; xor eax, eax; ret; 
0x0000000000468012: ror byte ptr [rax - 1], 0xc7; add rax, rdi; jmp 0x67fdc; xor eax, eax; ret; 
0x0000000000410492: ror byte ptr [rax - 1], 0xc7; add rax, rdi; vzeroupper; ret; 
0x000000000042d902: ror byte ptr [rax - 1], 0xc7; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x00000000004794d3: ror byte ptr [rax - 9], 1; rol byte ptr [rbx + 0x394901e0], 1; ret 0x840f; 
0x0000000000478e4a: ror byte ptr [rax - 9], 1; rol byte ptr [rbx + 0x394901e0], 1; ret 0xad75; 
0x0000000000474f2e: ror byte ptr [rax], 0x48; cmp edi, eax; jne 0x74f20; ret; 
0x0000000000474de5: ror byte ptr [rax], 0x49; mov dword ptr [rax], edx; ret; 
0x0000000000470ee4: ror byte ptr [rax], 0x49; mov dword ptr [rcx], edx; leave; ret; 
0x0000000000470d0c: ror byte ptr [rbp + rcx*4 + 0x15], 0xfc; ret; 
0x0000000000447c46: ror byte ptr [rbp + rcx*4 + 0x45], 0xc0; push 0; push 0; call rax; 
0x0000000000460d13: ror byte ptr [rbp - 0x80777c], 0xff; inc ecx; call 0x77fed223; ret; 
0x0000000000438792: ror byte ptr [rbx + 0x1b8f87d], 0; add byte ptr [rax], al; syscall; 
0x0000000000479ec4: ror byte ptr [rbx + rcx*4 + 0x65], 0xf8; leave; ret; 
0x000000000040b5fc: ror byte ptr [rbx], 0; add byte ptr [rax - 0x73], cl; add eax, 0xb49; cmovne rax, rdx; ret; 
0x00000000004389a8: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x00000000004344e3: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000468a82: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa2: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac2: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae2: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043b535: ror byte ptr [rcx + 0x39], cl; ror dword ptr [rdi], 0x84; adc eax, 0x8dfffffd; add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x000000000046b7f5: ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x0000000000455ea8: ror byte ptr [rcx + 0x5d8b480b], 0xf8; leave; ret; 
0x0000000000428453: ror byte ptr [rcx + 0x80beca], cl; add byte ptr [rax], al; mov eax, r8d; syscall; 
0x0000000000419b04: ror byte ptr [rcx + 0x930a905], 0; pop rbp; ret; 
0x000000000046687f: ror byte ptr [rcx + rcx*4 + 0x4e], 8; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x0000000000474cb6: ror byte ptr [rcx + rcx*4 + 0x55], 0xb8; call rax; 
0x000000000047a4a8: ror byte ptr [rcx + rcx*4 - 0x19], cl; or eax, 2; mov edx, eax; mov eax, ebx; syscall; 
0x0000000000478996: ror byte ptr [rcx + rcx*4 - 0x31], cl; or eax, 2; mov edx, eax; mov eax, r12d; syscall; 
0x00000000004295a8: ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000458d99: ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000407441: ror byte ptr [rcx - 0x3f], 1; call 0x3c8dbc55; ret; 
0x00000000004207c6: ror byte ptr [rcx - 0x4cd1635], 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000436552: ror byte ptr [rcx - 0x73], 0x44; add byte ptr [rax], ah; ret; 
0x000000000041b8b6: ror byte ptr [rcx - 0x74b7bf8d], 0x5d; clc; leave; ret; 
0x000000000043e3a8: ror byte ptr [rcx - 0x75], 1; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000438cb8: ror byte ptr [rcx - 0x77], 1; add bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x000000000046ca22: ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x000000000044eba2: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x00000000004185c1: ror byte ptr [rdi], 0x11; add eax, 0x94337; ret; 
0x00000000004185b1: ror byte ptr [rdi], 0x11; add eax, 0x94357; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x94337], xmm0; ret; 
0x00000000004276e0: ror byte ptr [rdi], 0x11; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004242cd: ror byte ptr [rdi], 0x11; or byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000418674: ror byte ptr [rdi], 0x11; sbb eax, 2; add byte ptr [rax], al; syscall; 
0x0000000000411985: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x0000000000448910: ror byte ptr [rdi], 0x48; ret 0xc083; 
0x0000000000410612: ror byte ptr [rdi], 0x84; mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000426e4c: ror byte ptr [rdi], 0x84; pop rbp; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000422a36: ror byte ptr [rdi], 0x84; push rbx; add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000041a8c6: ror byte ptr [rdi], 0x84; ret; 
0x000000000040851e: ror byte ptr [rdi], 0x84; retf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000413bcb: ror byte ptr [rdi], 0x84; wait; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000426afe: ror byte ptr [rdi], 0x84; xchg ebx, eax; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000429200: ror byte ptr [rdi], 0x85; leave; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x00000000004277d4: ror byte ptr [rdi], 0x85; ret 0; 
0x0000000000422db6: ror byte ptr [rdi], 0x85; ret; 
0x0000000000468a06: ror byte ptr [rdi], 0x85; rol dword ptr [rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000414e63: ror byte ptr [rdi], 0x87; lodsd eax, dword ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4807; 
0x0000000000411586: ror byte ptr [rdi], 0x88; ret; 
0x0000000000469b6e: ror byte ptr [rdi], 0x94; shl byte ptr [rax], 0x45; ret 0x67e9; 
0x000000000042c3b2: ror byte ptr [rdi], 0xb6; or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042bc63: ror byte ptr [rdi], 0xb6; or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000042346b: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x000000000042b471: ror byte ptr [rdi], 0xbc; leave; cmp al, cl; jb 0x2b461; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042b6f1: ror byte ptr [rdi], 0xbc; leave; cmp al, cl; jb 0x2b6e1; lea rax, [rdi + rcx + 0x60]; ret; 
0x000000000042dd8f: ror byte ptr [rdi], 0xbc; leave; cmp sil, byte ptr [rdi + rcx + 0x20]; jne 0x2dd89; lea rax, [rdi + rcx + 0x20]; ret; 
0x0000000000410883: ror byte ptr [rdi], 0xbc; leave; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000040e55e: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000040e2a9: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x000000000044ea1f: ror byte ptr [rdi], 1; mov dh, 0x17; test dl, dl; jne 0x4ea00; ret; 
0x00000000004112ee: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x11348; ret; 
0x0000000000411455: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x11468; ret; 
0x0000000000458a28: ror byte ptr [rdi], cl; int1; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000047051d: ror byte ptr [rdi], cl; test byte ptr [rax + rax - 0x49f10000], bh; ret 0xf41; 
0x00000000004080a7: ror byte ptr [rdi], cl; test byte ptr [rbp - 0x9fffffc], bh; ret 0xf0f; 
0x0000000000461690: ror byte ptr [rdi], cl; test byte ptr [rcx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000435dbb: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000004205f1: ror byte ptr [rdi], cl; test ebp, esp; or eax, 0x8d480000; mov r14d, 0xfffb4885; jmp qword ptr [rax]; 
0x0000000000419b93: ror cl, 1; ret; 
0x0000000000406bb1: ror dword ptr [rax + 0x21], cl; ret; 
0x0000000000460f36: ror dword ptr [rax + 0x29], 0xd7; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000414a2c: ror dword ptr [rax + 0x29], cl; ret; 
0x00000000004167e4: ror dword ptr [rax + 0x39], 0xd1; jne 0x167c0; mov eax, dword ptr [rcx]; ret; 
0x00000000004357ac: ror dword ptr [rax + 0x39], 1; int1; jb 0x355a4; mov rax, r8; vzeroupper; ret; 
0x00000000004328f8: ror dword ptr [rax + 0x39], 1; ret 0x3276; 
0x0000000000432277: ror dword ptr [rax + 0x39], 1; ret 0x3376; 
0x0000000000431c02: ror dword ptr [rax + 0x39], 1; ret 0x3876; 
0x0000000000435d04: ror dword ptr [rax + 0x39], 1; ret 0x870f; 
0x0000000000444580: ror dword ptr [rax + 0x39], cl; ret 0x8d0f; 
0x000000000041eab3: ror dword ptr [rax + 1], cl; fmul dword ptr [rcx + 0x39]; ret 0x830f; 
0x000000000042dee5: ror dword ptr [rax + 9], 0xca; bsf rdx, rdx; cmp sil, byte ptr [rdi + rdx + 0x40]; jne 0x2defa; lea rax, [rdi + rdx + 0x40]; ret; 
0x00000000004109d5: ror dword ptr [rax + 9], 0xca; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000411229: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004149f9: ror dword ptr [rax - 0x75], 0x42; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000041018f: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040f80f: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040ff14: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x000000000046632e: ror dword ptr [rax - 0x77], 1; ret 0x8349; 
0x000000000043a599: ror dword ptr [rax - 0x77], 1; ret 0xd348; 
0x00000000004398f6: ror dword ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000425bad: ror dword ptr [rax - 0x7b], 0xd2; jne 0x25ba0; ret; 
0x000000000045572d: ror dword ptr [rax - 0x7b], 0xd2; jne 0x55720; ret; 
0x0000000000411172: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x11190; bsf rax, rdx; ret; 
0x0000000000411115: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x111a0; bsf rax, rdx; ret; 
0x0000000000435b31: ror dword ptr [rax - 0x7d], 0xf8; and byte ptr [rdi + 8], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x00000000004613f1: ror dword ptr [rax - 0x7d], 0xf8; or byte ptr [rdi + 0xb], dh; cmp rsi, rax; cmovb eax, esi; ret; 
0x0000000000440c8b: ror dword ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000042908a: ror dword ptr [rbp - 0x37de00be], 1; rol byte ptr [rcx], 1; ret; 
0x0000000000465818: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042e1db: ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000043b538: ror dword ptr [rdi], 0x84; adc eax, 0x8dfffffd; add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x000000000042decf: ror dword ptr [rdi], 0x85; mov edx, 0x62fffffe; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x00000000004109bf: ror dword ptr [rdi], 0x85; mov esi, 0x62fffffe; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x00000000004026e9: ror dword ptr [rdi], 0xaf; ret 0xb4e9; 
0x0000000000401afc: ror dword ptr [rdi], 0xaf; ret 0xceeb; 
0x0000000000454d70: ror dword ptr [rdi], cl; xchg esp, eax; ret 0xd008; 
0x0000000000425bac: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x25ba0; ret; 
0x000000000045572c: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x55720; ret; 
0x0000000000404234: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x0000000000427a3e: sahf; sar ebp, cl; jmp qword ptr [rsi + 0x66]; 
0x000000000046a51e: sahf; stc; jmp qword ptr [rsi + 0x66]; 
0x000000000042346e: sal bh, 0xd8; ret; 
0x0000000000430887: sal bh, 1; ret 0x8000; 
0x0000000000430747: sal bh, 1; ret 0xc000; 
0x0000000000430607: sal bh, 1; ret 0xe000; 
0x00000000004304c7: sal bh, 1; ret 0xf000; 
0x0000000000430387: sal bh, 1; ret 0xf800; 
0x0000000000430247: sal bh, 1; ret 0xfc00; 
0x0000000000430107: sal bh, 1; ret 0xfe00; 
0x000000000042ffc7: sal bh, 1; ret 0xff00; 
0x000000000042fe87: sal bh, 1; ret 0xff80; 
0x000000000042fd47: sal bh, 1; ret 0xffc0; 
0x000000000042fc07: sal bh, 1; ret 0xffe0; 
0x000000000042fac7: sal bh, 1; ret 0xfff0; 
0x000000000042f987: sal bh, 1; ret 0xfff8; 
0x000000000042f847: sal bh, 1; ret 0xfffc; 
0x000000000042f707: sal bh, 1; ret 0xfffe; 
0x0000000000432275: sal bh, cl; ror dword ptr [rax + 0x39], 1; ret 0x3376; 
0x0000000000431c00: sal bh, cl; ror dword ptr [rax + 0x39], 1; ret 0x3876; 
0x0000000000461d98: sal bh, cl; shr byte ptr [rcx + 0x410000], 1; je 0x61dc8; mov eax, 0x101; syscall; 
0x0000000000444efb: sal bl, 0xff; jmp qword ptr [rdi - 0x18]; 
0x000000000045302a: sal bl, cl; sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000449561: sal byte ptr [rax + 0x48ffffff], 0xc7; ret 0x3300; 
0x000000000041133a: sal byte ptr [rax + 1], cl; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x000000000042b3b5: sal byte ptr [rax + rcx + 0x48], 0x8d; add al, 0x37; ret; 
0x0000000000410875: sal byte ptr [rax + rdi + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000041124d: sal byte ptr [rax + rdx + 0x55], 0x48; mov ebp, esp; call rax; 
0x000000000044082d: sal byte ptr [rax + rsi + 0x48], 0x83; ret; 
0x000000000043d418: sal byte ptr [rbp + 0x10], cl; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000043cb77: sal byte ptr [rbp + 0x10], cl; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x00000000004583db: sal byte ptr [rbp + 0x12], 0x8b; cmp qword ptr [rdx + 0x48], r9; cmove eax, ecx; ret; 
0x0000000000411257: sal byte ptr [rbp + 0x16], 0x31; rcr byte ptr [rbp - 0x3d], 0x66; nop; mov eax, 0xe4; syscall; 
0x000000000044feb8: sal byte ptr [rbp + 0x19], 0x48; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x0000000000450097: sal byte ptr [rbp + 0x21], 1; test ecx, ecx; jne 0x500a0; ret; 
0x00000000004666ca: sal byte ptr [rbp + 0x23], cl; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000466ccb: sal byte ptr [rbp + 0x25], 1; test ecx, ecx; jne 0x66cd8; ret; 
0x000000000042c4c7: sal byte ptr [rbp + 0x26], 0x62; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000041101e: sal byte ptr [rbp + 0x2f], 0xc5; sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x000000000046081e: sal byte ptr [rbp + 0x30], 0xc5; sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000460826: sal byte ptr [rbp + 0x37], 0x62; mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x0000000000411026: sal byte ptr [rbp + 0x37], 0x62; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000042af95: sal byte ptr [rbp + 0x48], 0xc5; std; xlatb; ret 0xc085; 
0x000000000042af9d: sal byte ptr [rbp + 0x50], 0xc5; std; xlatb; ret; 
0x00000000004109b1: sal byte ptr [rbp + 0x5c], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042af61: sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000046682b: sal byte ptr [rbp + 0x62], cl; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x0000000000467e34: sal byte ptr [rbp + 0x69], 0x83; ret 0xf40; 
0x000000000042dec1: sal byte ptr [rbp + 0x6c], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000439acd: sal byte ptr [rbp + 0x70], 0x48; mov edi, dword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x000000000044eb21: sal byte ptr [rbp + 0xc], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000043d2da: sal byte ptr [rbp + 2], cl; call rax; 
0x000000000043e01f: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043be12: sal byte ptr [rbp + 6], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000004588b7: sal byte ptr [rbp + 6], 0xf; add ebp, edx; xor eax, eax; ret; 
0x000000000041b8ce: sal byte ptr [rbp + 7], 0x5d; ret; 
0x0000000000423446: sal byte ptr [rbp + 7], cl; xor eax, eax; ret; 
0x0000000000421c80: sal byte ptr [rbp + rcx + 0x48], 0x8d; adc eax, 0x60756; add rax, rdx; ret; 
0x0000000000461710: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000419b00: sal byte ptr [rbp + rdx + 0x31], 0xc0; mov dword ptr [rip + 0x930a9], eax; pop rbp; ret; 
0x0000000000427578: sal byte ptr [rbp + rdx + 0x48], 0x39; clc; jne 0x27570; mov rax, qword ptr [rax]; mov qword ptr [rdx], rax; ret; 
0x0000000000410478: sal byte ptr [rbp + rdx*2 - 0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000043654b: sal byte ptr [rbp + rdx*4 + 0x66], 0x90; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x0000000000436d30: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x0000000000425bb0: sal byte ptr [rbp - 0x13], cl; ret; 
0x000000000046d584: sal byte ptr [rbp - 0x17], cl; ret; 
0x0000000000416775: sal byte ptr [rbp - 0x18], 0x5b; mov eax, 1; pop r12; pop rbp; ret; 
0x0000000000430bab: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x0000000000418300: sal byte ptr [rbp - 0x23], cl; mov qword ptr [rip + 0x8b686], rax; ret; 
0x000000000044ea24: sal byte ptr [rbp - 0x27], cl; ret; 
0x00000000004181a2: sal byte ptr [rbp - 0x28], 0x5b; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000046157f: sal byte ptr [rbp - 0x49], 1; mov rax, rsi; ret; 
0x0000000000435cc4: sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x000000000042bcd0: sal byte ptr [rbp - 0x53], 0xc5; std; xlatb; ret; 
0x000000000042b011: sal byte ptr [rbp - 0x54], 0x83; ret 0xf40; 
0x0000000000467ef4: sal byte ptr [rbp - 0x57], 0x83; ret 0xf40; 
0x00000000004614a3: sal byte ptr [rbp - 0x66], cl; mov eax, esi; ret; 
0x0000000000435bd8: sal byte ptr [rbp - 0x67], cl; mov eax, esi; ret; 
0x000000000042bcc8: sal byte ptr [rbp - 0x6b], 0xc5; std; xlatb; ret 0xc0ff; 
0x000000000042805c: sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000473c3f: sal byte ptr [rbx + rbp + 0x48], 0x8b; adc ecx, dword ptr [rbp - 0x77]; clc; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000046afa2: sal byte ptr [rbx + rbx*4 + 0x48], 0x8b; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000435534: sal byte ptr [rcx + rbp*2 - 0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000046d57b: sal byte ptr [rcx + rcx + 0x48], 0x8b; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x00000000004191c4: sal byte ptr [rcx + rcx + 0x49], cl; lea edi, [rcx + rcx + 0x58]; jmp rdx; 
0x00000000004191c4: sal byte ptr [rcx + rcx + 0x49], cl; lea edi, [rcx + rcx + 0x58]; jmp rdx; nop; ret; 
0x000000000042ce42: sal byte ptr [rcx + rcx + 0x62], cl; loope 0x2cec5; or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000045f511: sal byte ptr [rcx + rcx + 0x62], cl; loope 0x5f594; or byte ptr [rsi - 0x3a], bh; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004684da: sal byte ptr [rcx + rdi*8 - 0xd], 0xf; mov esp, 0x76c239c0; int1; lea rax, [rdi + rax*4]; ret; 
0x000000000041117c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x0000000000460bcc: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000044002c: sal byte ptr [rcx + rsi*2 + 0x48], 0x89; ret; 
0x000000000042dacc: sal byte ptr [rcx], 0xc9; cmp sil, byte ptr [rdx + rax]; jne 0x2da99; add rax, rdx; vzeroupper; ret; 
0x00000000004587de: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000004704ca: sal byte ptr [rcx], cl; div byte ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x0000000000461c84: sal byte ptr [rcx], cl; imul al; and al, 0x68; std; jmp qword ptr [rsi + 0xf]; 
0x000000000043be27: sal byte ptr [rcx], cl; jmp qword ptr [rdi - 0x18]; 
0x0000000000428d29: sal byte ptr [rcx], cl; ror byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 7]; mov eax, 0xca; syscall; 
0x00000000004295a6: sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000428af5: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x000000000042cbff: sal byte ptr [rdi + rax - 0x3b], cl; stc; jle 0x2cbc7; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000045f2de: sal byte ptr [rdi + rax - 0x3b], cl; stc; jle 0x5f2a6; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000401977: sal byte ptr [rdi + rax - 0x48], 1; add byte ptr [rax], al; add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x0000000000413266: sal byte ptr [rdi + rbx + 0x48], 0x89; ret; 
0x0000000000410c66: sal byte ptr [rdi + rdx*2 - 0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000042b404: sal byte ptr [rdx + 6], 1; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000468314: sal byte ptr [rdx + 6], 1; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x0000000000401011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000467d13: sal byte ptr [rdx + rbp*2 + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000447ea6: sal byte ptr [rdx + rbx + 0x48], cl; mov edi, ebx; call rdx; 
0x000000000042ae53: sal byte ptr [rdx + rbx*2 + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000045ffa3: sal byte ptr [rdx + rbx*8 - 0x77], cl; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000460b73: sal byte ptr [rdx + rdi*2 + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000042d1b3: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x00000000004251db: sal byte ptr [rdx + rdx - 0x7d], 0xe8; add dword ptr [rbp - 0x77], ebx; add eax, 0x87a8c; ret; 
0x0000000000435e2b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; ret; 
0x00000000004616fb: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000044e8eb: sal byte ptr [rdx + rsi*2 + 0x48], 0xc7; ret 0xfff0; 
0x00000000004364ee: sal byte ptr [rsi + rax + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x0000000000419b8a: sal byte ptr [rsi + rbp + 0x48], cl; mov ebx, dword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000041111f: sal byte ptr [rsi + rdi*2 + 0x48], cl; bsf eax, edx; ret; 
0x00000000004557eb: sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x0000000000435b71: sal byte ptr [rsp + rcx + 0xf], cl; mov esp, 0x8dc229d2; add al, 0x16; cmovae eax, esi; ret; 
0x000000000041c799: sal byte ptr [rsp + rdx + 0x48], 1; ret; 
0x000000000041dcd0: sal dh, 0xff; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x000000000042ef8d: sal dword ptr [rax + rdx*2 + 0xf], 0xbc; leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000042e827: sal dword ptr [rbp + 0x28], 0x83; ret 0x8320; 
0x000000000042f2f0: sal dword ptr [rbp + 0x2d], 0x83; ret 0x8320; 
0x000000000042f0d6: sal dword ptr [rbp + 0x47], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000045b35a: sal dword ptr [rbp + 0x53], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x000000000045a2d3: sal dword ptr [rbp + 0x54], 0x83; ret 0x8320; 
0x000000000045b715: sal dword ptr [rbp + 0x58], 0x83; ret 0x8320; 
0x0000000000432828: sal dword ptr [rbp + 0x59], 0x62; mov dl, 0x6d; and byte ptr [rsi], ah; retf 0xb262; and word ptr [rsi], sp; ret; 
0x00000000004291fc: sal dword ptr [rbp + 8], 1; test eax, eax; jne 0x294d0; mov eax, 1; ret; 
0x0000000000405153: sal dword ptr [rbp + rax + 0x5b], 0x41; pop rsp; pop rbp; ret; 
0x00000000004167e7: sal dword ptr [rbp - 0x2a], 1; mov eax, dword ptr [rcx]; ret; 
0x0000000000458a54: sal dword ptr [rbx + 0xf], 1; neg eax; ret; 
0x000000000046d603: sal dword ptr [rbx - 0x7f], 1; sub rax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000042b13a: sal dword ptr [rcx], 0xc0; ret; 
0x000000000040e3c9: sal dword ptr [rdx - 0x7c], 1; cmp rdx, qword ptr [rip + 0x99745]; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004344e6: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000432ad3: sal ebx, 0xf; mov esp, 0xc90144c9; cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x000000000040e3d7: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000410a02: sar bh, 0xc0; je 0x108b0; nop dword ptr [rax + rax]; bsf eax, eax; add rax, rdi; ret; 
0x00000000004667c5: sar bh, 0xff; pop rbp; ret; 
0x00000000004667a2: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x000000000045b340: sar bh, 1; ret 0x840f; 
0x000000000042f262: sar bh, 1; ret 0x850f; 
0x000000000042f0c0: sar bh, 1; ret 0x8b74; 
0x000000000040715f: sar bh, cl; jmp qword ptr [rdi - 0x18]; 
0x0000000000437a7e: sar byte ptr [r8 + 0xd9], 1; syscall; 
0x0000000000437a7e: sar byte ptr [r8 + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x37a90; ret; 
0x00000000004186ee: sar byte ptr [rax + 0x14e], cl; mov rdi, rbx; syscall; 
0x0000000000411c8f: sar byte ptr [rax + 0x27], 0x4c; mov eax, esp; pop rbx; pop r12; pop rbp; ret; 
0x00000000004786a7: sar byte ptr [rax + 0xca], cl; mov dword ptr [r8 + rdx*4 + 8], 0; mov esi, ebx; mov edx, 0x7fffffff; xor sil, 0x81; syscall; 
0x0000000000458a2d: sar byte ptr [rax + 0xca], cl; syscall; 
0x0000000000478ae6: sar byte ptr [rax + 0xca], cl; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x0000000000437a7f: sar byte ptr [rax + 0xd9], 1; syscall; 
0x0000000000437a7f: sar byte ptr [rax + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x37a90; ret; 
0x000000000042b402: sar byte ptr [rax], cl; sal byte ptr [rdx + 6], 1; lea rax, [rdi + rdx + 0x20]; ret; 
0x0000000000468312: sar byte ptr [rax], cl; sal byte ptr [rdx + 6], 1; lea rax, [rdi + rdx*4 + 0x20]; ret; 
0x000000000042af7e: sar byte ptr [rcx], 0xc2; jbe 0x2afd5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042b5c6: sar byte ptr [rcx], 0xc2; jbe 0x2b5c0; add rax, rdi; ret; 
0x000000000042b846: sar byte ptr [rcx], 0xc2; jbe 0x2b840; add rax, rdi; ret; 
0x0000000000467e51: sar byte ptr [rcx], 0xc2; jbe 0x67eb5; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000004682b4: sar byte ptr [rcx], 0xc2; jbe 0x682c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004684e0: sar byte ptr [rcx], 0xc2; jbe 0x684d6; lea rax, [rdi + rax*4]; ret; 
0x0000000000468534: sar byte ptr [rcx], 0xc2; jbe 0x68540; lea rax, [rdi + rax*4]; ret; 
0x0000000000468761: sar byte ptr [rcx], 0xc2; jbe 0x68757; lea rax, [rdi + rax*4]; ret; 
0x00000000004385b8: sar byte ptr [rdi - 0x64], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004788dc: sar byte ptr [rdx + 0x7fffffff], cl; mov eax, 0xca; add rdi, r12; syscall; 
0x0000000000478a26: sar byte ptr [rdx + 0x7fffffff], cl; mov eax, 0xca; syscall; 
0x0000000000459383: sar byte ptr [rdx + 0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000458edc: sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000045932a: sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045970e: sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000458841: sar byte ptr [rdx + 1], 0xf0; cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x0000000000404e0a: sar byte ptr [rdx + 1], cl; mov eax, 0xca; syscall; 
0x0000000000404e0a: sar byte ptr [rdx + 1], cl; mov eax, 0xca; syscall; ret; 
0x0000000000478cbb: sar byte ptr [rdx + 1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000404de6: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000404de6: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000429572: sar byte ptr [rdx + 1], cl; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000047a271: sar byte ptr [rdx + 1], cl; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004791cc: sar byte ptr [rdx + 1], cl; mov rdi, r11; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047a2ef: sar byte ptr [rdx + 1], cl; mov rdi, r12; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004593f8: sar byte ptr [rdx + 1], cl; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004788a0: sar byte ptr [rdx + 1], cl; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478e74: sar byte ptr [rdx + 1], cl; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000478a86: sar byte ptr [rdx + 1], cl; mov rdi, rcx; mov eax, 0xca; syscall; 
0x0000000000404d9f: sar byte ptr [rdx + 2], cl; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000404d39: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000043e1ec: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, ebx; syscall; 
0x000000000042df89: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000448781: sar byte ptr [rsi + 0x24], 0x83; call 0x5d8fcf8b; clc; mov dword ptr [rdx + 8], eax; leave; ret; 
0x0000000000461e34: sar byte ptr [rsi + 0x5401], 1; syscall; 
0x0000000000458f81: sar byte ptr [rsi + 0x80], cl; mov rdi, rbx; mov eax, 0xca; syscall; 
0x00000000004781ac: sar byte ptr [rsi - 0x166f0001], 0xbf; xchg ebx, eax; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000040b369: sar byte ptr [rsi], 1; jmp rax; 
0x000000000046e500: sar byte ptr [rsi], 1; jmp rax; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3e691]; ret; 
0x000000000040cf9b: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x00000000004741ab: sar dh, 0xff; call qword ptr [rbx + 0x48]; 
0x000000000044ec70: sar dh, 0xff; dec dword ptr [rdi]; adc dword ptr [rbp - 0xb8], eax; mov r10d, 8; mov eax, 0xd; syscall; 
0x0000000000450dcf: sar dh, 0xff; inc dword ptr [rax - 0x80]; jmp qword ptr [rbp + 0xf]; 
0x0000000000452339: sar dh, 0xff; jmp qword ptr [rdi + 0xf]; 
0x0000000000450ddf: sar dh, 0xff; jmp qword ptr [rsi - 0x75]; 
0x000000000040c959: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040c960: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0xc964; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040c967: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0xc96c; ret; 
0x00000000004251a7: sar dword ptr [rdx + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000044d2cb: sar dword ptr [rip + 0x2948fffb], 1; ret; 
0x000000000040bce7: sar dword ptr [rsi + 0x7f], 0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000423681: sar dword ptr [rsi], 1; jmp rcx; 
0x0000000000473ffc: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004285fb: sar eax, 1; and eax, 1; mov dword ptr [rdi + 0x10], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000045645c: sar eax, 2; sub eax, 1; ret; 
0x0000000000412ae3: sar ebp, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000427a3f: sar ebp, cl; jmp qword ptr [rsi + 0x66]; 
0x000000000042bdf3: sar edi, 0xc0; jne 0x2be40; vzeroupper; ret; 
0x0000000000460858: sar edi, 2; add rax, rdi; ret; 
0x0000000000460875: sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000460775: sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000460848: sar edi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460867: sar edi, 2; lea rax, [rdi + rax + 8]; ret; 
0x00000000004150c5: sar edi, cl; dec dword ptr [rax - 0x77]; ret; 
0x0000000000456506: sar edx, 2; sub eax, edx; ret; 
0x0000000000457016: sar edx, cl; jmp qword ptr [rdi - 0x18]; 
0x0000000000411178: sar edx, cl; test rdx, rdx; je 0x11190; bsf rax, rdx; ret; 
0x000000000041111b: sar edx, cl; test rdx, rdx; je 0x111a0; bsf rax, rdx; ret; 
0x0000000000435e27: sar edx, cl; test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000435db7: sar edx, cl; test rdx, rdx; je 0x35e60; bsf rax, rdx; ret; 
0x0000000000460bc8: sar edx, cl; test rdx, rdx; je 0x60be0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000460b6f: sar edx, cl; test rdx, rdx; je 0x60bf0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004616f7: sar edx, cl; test rdx, rdx; je 0x61720; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046168c: sar edx, cl; test rdx, rdx; je 0x61730; bsf rax, rdx; shr rax, 2; ret; 
0x000000000040dc70: sar esi, 0x28; jg 0xdc75; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040dccc: sar esi, 0x28; jg 0xdcd1; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d402: sar esi, 0x48; jg 0xd407; ret; 
0x000000000040d455: sar esi, 0x48; jg 0xd45a; ret; 
0x00000000004122f1: sar esi, 0xff; jmp qword ptr [rdi - 0x18]; 
0x0000000000424a8d: sar esi, 1; jmp qword ptr [rsi + 0xf]; 
0x000000000044a866: sar esi, cl; dec dword ptr [rax - 0x77]; ret; 
0x00000000004679ce: sar esi, cl; test esi, esi; je 0x67a50; mov eax, eax; ret; 
0x0000000000473ffb: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000045645b: sar rax, 2; sub eax, 1; ret; 
0x0000000000460857: sar rdi, 2; add rax, rdi; ret; 
0x0000000000460847: sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460866: sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000456505: sar rdx, 2; sub eax, edx; ret; 
0x0000000000411177: sar rdx, cl; test rdx, rdx; je 0x11190; bsf rax, rdx; ret; 
0x000000000041111a: sar rdx, cl; test rdx, rdx; je 0x111a0; bsf rax, rdx; ret; 
0x0000000000435e26: sar rdx, cl; test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000435db6: sar rdx, cl; test rdx, rdx; je 0x35e60; bsf rax, rdx; ret; 
0x0000000000460bc7: sar rdx, cl; test rdx, rdx; je 0x60be0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000460b6e: sar rdx, cl; test rdx, rdx; je 0x60bf0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004616f6: sar rdx, cl; test rdx, rdx; je 0x61720; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046168b: sar rdx, cl; test rdx, rdx; je 0x61730; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000410d9d: sarx eax, eax, edx; test eax, eax; je 0x10cc4; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004231b2: sbb ah, byte ptr [rsi]; add byte ptr [rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000411b15: sbb al, 0; add byte ptr [rax], al; syscall; 
0x0000000000411b15: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11b24; ret; 
0x000000000042da7c: sbb al, 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000461ea6: sbb al, 0xc9; mov eax, edx; ret; 
0x0000000000454b60: sbb al, 0xcc; add al, byte ptr [rax]; jae 0x54b71; lea rax, [rip + 0x4daf3]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000474c5d: sbb al, 0xcc; mov rdx, qword ptr [r14]; mov rdi, qword ptr [rbp - 0x38]; mov rsi, qword ptr [rbx]; mov rax, qword ptr [rbp - 0x40]; call rax; 
0x00000000004426ac: sbb al, 0xfc; jmp qword ptr [rdi - 0x18]; 
0x000000000044078f: sbb al, 0xfd; jmp qword ptr [rsi + 0x66]; 
0x000000000040d92d: sbb al, 1; add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000042043f: sbb al, 8; add byte ptr [rax - 0x75], cl; add al, 0xc8; jmp rax; 
0x00000000004205ba: sbb al, 8; add byte ptr [rax - 0x75], cl; add al, 0xf0; jmp rax; 
0x000000000042adf7: sbb al, 8; add byte ptr [rax], cl; lea rdx, [rip + 0xbc1e]; lea rax, [rip - 0x379]; cmovne rax, rdx; ret; 
0x000000000040b6f5: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0xa90; lea rax, [rip + 0xa39]; cmovne rax, rdx; ret; 
0x000000000040b5f5: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0xbc0; lea rax, [rip + 0xb49]; cmovne rax, rdx; ret; 
0x000000000042a095: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0xfffe2120; lea rax, [rip - 0x1df57]; cmovne rax, rdx; ret; 
0x000000000040b657: sbb al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x19ef; cmovne rax, rdx; ret; 
0x00000000004103ce: sbb al, byte ptr [rbx + 0x1c7f01fa]; jl 0x103d9; mov byte ptr [rdi], sil; ret; 
0x0000000000461cad: sbb bl, byte ptr [rbx + 0x41]; pop rsp; pop rbp; ret; 
0x000000000042d7fa: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045fe1a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d7bb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fddb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042d7f9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045fe19: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042d7ba: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045fdda: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000425d7e: sbb byte ptr [r11 - 0x74b71b8b], cl; jge 0x25d6f; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000042339d: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466b43: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000425d5f: sbb byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; jmp rax; 
0x000000000046de8e: sbb byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000425c14: sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000422ea3: sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x110f; 
0x000000000044ea1c: sbb byte ptr [rax + 0x31], cl; ror byte ptr [rdi], 1; mov dh, 0x17; test dl, dl; jne 0x4ea00; ret; 
0x000000000043c89a: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000409ead: sbb byte ptr [rax - 0x39], cl; ret; 
0x0000000000458503: sbb byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 0x39], r9b; ret 0x474; 
0x0000000000425d60: sbb byte ptr [rax - 0x75], cl; pop rbp; clc; leave; jmp rax; 
0x000000000046de8f: sbb byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000425c0d: sbb byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000425c15: sbb byte ptr [rax - 0x77], cl; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000412a3b: sbb byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000405e90: sbb byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000449f45: sbb byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000477430: sbb byte ptr [rax - 0x77], cl; ret; 
0x00000000004666c7: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x23], cl; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x00000000004182fd: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x23], cl; mov qword ptr [rip + 0x8b686], rax; ret; 
0x0000000000409adf: sbb byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000046b740: sbb byte ptr [rax - 0x7d], cl; ret; 
0x00000000004542c4: sbb byte ptr [rax - 1], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000429fb9: sbb byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xe5d; cmovne rax, rdx; ret; 
0x0000000000422ea4: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x110f; 
0x0000000000462254: sbb byte ptr [rax], al; je 0x62240; xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000455e5e: sbb byte ptr [rbx + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000411a5e: sbb byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000404596: sbb byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000004275ca: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000425d7f: sbb byte ptr [rbx - 0x74b71b8b], cl; jge 0x25d6f; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000405ea4: sbb byte ptr [rcx + 0x5c], al; pop r13; pop r14; pop rbp; ret; 
0x0000000000417e57: sbb byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x77], ecx; add eax, 0x8fd25; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x00000000004566b2: sbb byte ptr [rcx - 0x80], al; std; add dword ptr [rdi + rbp - 0x77], esi; ret 0xc085; 
0x000000000042ad4c: sbb byte ptr [rcx], cl; ret 0xb60f; 
0x0000000000455ea6: sbb byte ptr [rcx], dh; ror byte ptr [rcx + 0x5d8b480b], 0xf8; leave; ret; 
0x000000000042339e: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000466b44: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000410327: sbb byte ptr [rdi], cl; adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x0000000000468442: sbb byte ptr [rdi], cl; adc dword ptr [rip + 0x31ffffff], -0x40; ret; 
0x0000000000445f7d: sbb cl, byte ptr [rax - 0x77]; push rbp; mov al, 0xf; mov dh, 0x42; dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x0000000000443ba9: sbb cl, byte ptr [rax - 0x77]; push rbp; mov al, 0xf; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4201; 
0x0000000000442e92: sbb cl, byte ptr [rax - 0x77]; push rbp; mov al, 0xf; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4301; 
0x00000000004635aa: sbb cl, byte ptr [rax - 0x77]; ret 0x2548; 
0x0000000000462807: sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x000000000043172d: sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043131d: sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000430e29: sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045ddd1: sbb cl, byte ptr [rdi]; xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000431639: sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045dafe: sbb cl, byte ptr [rdi]; xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e4fe: sbb cl, byte ptr [rdi]; xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004310ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004313ed: sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000431709: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004317d9: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043158d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000430d7d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000045e38e: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045ed9e: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045eabe: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x000000000043117d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000043165d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000430e4d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000430eef: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043124d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000045dcc3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045e6c3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045df93: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004314bd: sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045e3e3: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430f13: sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045edf3: sbb cl, byte ptr [rdi]; xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000411924: sbb cl, cl; ret; 
0x000000000042a147: sbb dh, bh; dec dword ptr [rax - 0x73]; add eax, 0xfffe187f; cmovne rax, rdx; ret; 
0x000000000043b533: sbb dh, byte ptr [rcx]; ror byte ptr [rcx + 0x39], cl; ror dword ptr [rdi], 0x84; adc eax, 0x8dfffffd; add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x000000000042ade2: sbb dh, byte ptr [rsi - 2]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000448712: sbb dl, byte ptr [rbp + 0x2e66fffc]; nop dword ptr [rax + rax]; ret; 
0x000000000043d475: sbb dword ptr [rax + 0x39], ecx; ret 0x830f; 
0x0000000000448776: sbb dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x0000000000419146: sbb dword ptr [rax - 0x75], ecx; test rcx, rcx; je 0x19158; mov qword ptr [rsi], rax; ret; 
0x000000000040422e: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000474cf6: sbb dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x000000000040b757: sbb dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x18df; cmovne rax, rdx; ret; 
0x0000000000411d20: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004016fc: sbb dword ptr [rax], eax; call 0x3dc0; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000044feb6: sbb dword ptr [rbp + 0x481975c0], eax; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x0000000000461ae3: sbb dword ptr [rcx], ecx; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004561a2: sbb dword ptr [rdi - 1], -1; call ptr [rbx - 0x75]; add al, byte ptr [rcx + 0x5c]; pop rbp; ret; 
0x000000000040b756: sbb dword ptr ss:[rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x18df; cmovne rax, rdx; ret; 
0x0000000000410072: sbb eax, 0x40fa8348; ja 0x10109; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000042a1ea: sbb eax, 0x4804e183; lea eax, [rip + 0x3d4b]; lea rdx, [rip + 0x3f74]; cmovne rax, rdx; ret; 
0x0000000000435532: sbb eax, 0x6974c085; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000427993: sbb eax, 0x852e0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004383cb: sbb eax, 0x8548fffd; ror byte ptr [rax + 0xf], 0x44; ret; 
0x000000000046a92f: sbb eax, 0x89fffcf1; ret; 
0x00000000004186bb: sbb eax, 0x8c938; mov qword ptr fs:[0x698], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000423357: sbb eax, 0xe2ebdc74; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000418677: sbb eax, 2; add byte ptr [rax], al; syscall; 
0x000000000042a035: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2641; cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000452df1: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000464d56: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000042bef0: sbb eax, eax; or eax, 1; ret; 
0x000000000046d9ca: sbb eax, eax; ret; 
0x0000000000452a17: sbb ebx, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000046b7e9: sbb ecx, -6; push qword ptr [rcx]; rol byte ptr [rbx + 0xf01fc7d], 0x95; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x00000000004204b9: sbb ecx, dword ptr [r8]; add byte ptr [rax - 0x75], cl; add al, 0xf0; jmp rax; 
0x0000000000466754: sbb ecx, dword ptr [rax - 0x7b]; div byte ptr [rbp + 0x2e]; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x00000000004204ba: sbb ecx, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0xf0; jmp rax; 
0x0000000000420537: sbb ecx, dword ptr [rax]; add byte ptr [rbx + 1], bh; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004622ef: sbb ecx, ecx; ret; 
0x0000000000466535: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000046e543: sbb esi, esp; add eax, dword ptr [rax]; ret; 
0x0000000000436994: sbb esp, dword ptr [rsi + 0xf]; xlatb; retf 0xf66; xlatb; ret; 
0x0000000000466534: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000042a034: sbb rax, qword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2641; cmovne rdx, rax; mov rax, rdx; ret; 
0x0000000000435422: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a386: scasb al, byte ptr [rdi]; ret; 
0x0000000000476573: scasd eax, dword ptr [rdi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000044b63d: scasd eax, dword ptr [rdi]; int1; sti; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x00000000004189d7: scasd eax, dword ptr [rdi]; mov qword ptr [rax + 0x58], r8; mov qword ptr [rax + 0x38], rdi; mov qword ptr [rax + 0x40], rsi; mov byte ptr [rax + 0x68], 1; ret; 
0x00000000004024c8: scasd eax, dword ptr [rdi]; ret 0x4853; 
0x0000000000401af5: scasd eax, dword ptr [rdi]; ret 0x538d; 
0x000000000044f599: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x00000000004026eb: scasd eax, dword ptr [rdi]; ret 0xb4e9; 
0x0000000000401ab1: scasd eax, dword ptr [rdi]; ret 0xc148; 
0x00000000004549ac: scasd eax, dword ptr [rdi]; ret 0xc3c3; 
0x0000000000401afe: scasd eax, dword ptr [rdi]; ret 0xceeb; 
0x00000000004026da: scasd eax, dword ptr [rdi]; ret 0xda89; 
0x000000000042a1ce: scasd eax, dword ptr [rdi]; ret; 
0x00000000004026e8: scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0xb4e9; 
0x0000000000401afb: scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0xceeb; 
0x00000000004407dd: scasd eax, dword ptr [rdi]; xchg esi, eax; cld; call qword ptr [rax + 0x441f0f66]; add byte ptr [rax], al; ret; 
0x00000000004587e4: setae al; ret; 
0x0000000000412719: sete al; ret; 
0x000000000041b8b2: sete dh; xor eax, eax; mov dword ptr [rbx + 0x40], esi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041b8b1: sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004590c5: setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000046b7f3: setne al; mov dword ptr [rip + 0x41134], eax; leave; ret; 
0x0000000000423469: setne al; movzx eax, al; neg eax; ret; 
0x00000000004591dd: setne dh; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004591dc: setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000042c99e: seto dh; add byte ptr [rax], al; ret; 
0x000000000042d064: sgdt [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000045f724: sgdt [rax]; add byte ptr [rax], al; ret; 
0x0000000000445efd: sgdt [rax]; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000040147b: sgdt [rax]; call 0x10d2; cmp dword ptr [rbp - 0x50], 0; je 0x149f; mov rdi, qword ptr [rbp - 0x58]; call qword ptr [rbp - 0x60]; 
0x0000000000469b71: shl byte ptr [rax], 0x45; ret 0x67e9; 
0x000000000042e82e: shl byte ptr [rax], 0x7c; fisubr word ptr [rcx]; ret 0xfec5; 
0x000000000042f2f7: shl byte ptr [rax], 0x7c; fsubr qword ptr [rcx]; ret 0xe162; 
0x000000000045b71c: shl byte ptr [rax], 0x7c; mov al, 0x29; ret 0xe162; 
0x000000000045a2da: shl byte ptr [rax], 0x7c; mov dl, 0x29; ret 0xfec5; 
0x000000000044c97c: shl byte ptr [rbx + 1], 1; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000460f3b: shl byte ptr [rcx + 0x48], 1; clc; shr rax, 2; vzeroupper; ret; 
0x000000000043572b: shl byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000423351: shl byte ptr [rcx + rax*2 - 0x7d], 0x7d; add byte ptr [rip - 0x1d14238c], bl; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000460e91: shl byte ptr [rcx], 0x48; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x00000000004356a6: shl byte ptr [rcx], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000416ab8: shl byte ptr [rdi - 0x18], 0x31; cmp eax, 0x8948ffff; ret; 
0x000000000046b628: shl byte ptr [rdi - 0x18], 0x91; ret 0xfffa; 
0x0000000000458636: shl byte ptr [rdi - 0x18], 1; ret; 
0x0000000000410869: shl byte ptr [rdx - 0x4e], cl; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000436c4f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x0000000000408dd6: shl byte ptr [rsi + 0xf], 0x6c; ret; 
0x00000000004185bd: shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x94337; ret; 
0x000000000042e1d7: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000410c05: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x0000000000408aaa: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000456dcc: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xf1e9; 
0x0000000000436803: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0x518d; 
0x0000000000436823: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000043c815: shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000041103d: shl byte ptr [rsi - 0x70], 1; bsf rax, rax; sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000046083d: shl byte ptr [rsi - 0x70], 1; bsf rax, rax; sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004767ac: shl byte ptr [rsi - 9], cl; ret 0x7f8; 
0x00000000004421ab: shl dword ptr [rcx], 0xfc; jmp qword ptr [rdi - 0x18]; 
0x00000000004620bb: shl dword ptr [rdi - 0x18], cl; add edi, ebx; jmp qword ptr [rsi + 0x66]; 
0x000000000043d0cb: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000043c810: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000043aa80: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000042e1cf: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000436aaf: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x000000000042b91c: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000043aa85: shl dword ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000042af5d: shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000042cc05: shl dword ptr [rsi - 0x77], 0xf; mov byte ptr [rax], 0; ret; 
0x000000000045f2e4: shl dword ptr [rsi - 0x77], 0xf; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000042c99b: shl dword ptr [rsi - 0x77], 0xf; nop; mov byte ptr [rax], 0; ret; 
0x000000000045f09a: shl dword ptr [rsi - 0x77], 0xf; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000004368fd: shl eax, 0x10; or eax, ecx; bsr eax, eax; add rax, rsi; ret; 
0x000000000043609a: shl eax, 0x20; add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000436149: shl eax, 0x20; or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000411913: shl eax, 0xf; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x1193d; leave; ret; 
0x0000000000418b11: shl eax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x000000000041826e: shl eax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x182ba; ret; 
0x000000000041244c: shl eax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x00000000004124fc: shl eax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x000000000042b55e: shl ecx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000041122b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000042d0ce: shl ecx, 1; je 0x2ce16; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; lea rax, [rdi - 1]; ret; 
0x000000000045f77c: shl ecx, 1; je 0x5f4e6; mov rax, rdi; bsf ecx, ecx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004182b0: shl ecx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x1826d; xor eax, eax; ret; 
0x000000000040e84e: shl ecx, 6; add rcx, r9; jmp rcx; 
0x00000000004686f9: shl ecx, 8; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x00000000004652ac: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046522b: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004651fa: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004109d1: shl edx, 0x20; inc ecx; or rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000410b7a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000467d24: shl edx, 2; vzeroupper; cmp edx, eax; jle 0x67d3f; add rax, rdi; ret; 
0x00000000004182f6: shl edx, 4; mov rdx, qword ptr [rcx + rdx + 0x18]; test rdx, rdx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x000000000041246c: shl edx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000466703: shl edx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000460cf0: shl esi, 2; bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000047a31a: shl esi, 2; jmp 0x7a26a; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000004591e3: shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004652ab: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000046522a: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004651f9: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000436099: shl rax, 0x20; add rax, rdx; bsr rax, rax; lea rax, [rsi + rax + 1]; vzeroupper; ret; 
0x0000000000436148: shl rax, 0x20; or rax, rdx; bsr rax, rax; lea rax, [rsi + rax - 0x40]; vzeroupper; ret; 
0x0000000000418b10: shl rax, 4; add rax, rdi; movzx eax, byte ptr [rdx + rax*8 + 0x68]; ret; 
0x000000000041826d: shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x182ba; ret; 
0x000000000041244b: shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x12460; ret; 
0x00000000004124fb: shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x9a34e], rax; lea rax, [rip + 0x9a33f]; ret; 
0x000000000042b55d: shl rcx, 0x20; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x000000000041122a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004182af: shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x1826d; xor eax, eax; ret; 
0x00000000004686f8: shl rcx, 8; add rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx*4 + 0x40]; ret; 
0x00000000004109d0: shl rdx, 0x20; inc ecx; or rdx, rcx; bsf rdx, rdx; lea rax, [rdi + rdx + 0x40]; ret; 
0x0000000000410b79: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004182f5: shl rdx, 4; mov rdx, qword ptr [rcx + rdx + 0x18]; test rdx, rdx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x000000000041246b: shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000466702: shl rdx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000047a319: shl rsi, 2; jmp 0x7a26a; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000004652a4: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000465224: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004652a3: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000465223: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000414a68: shr al, 0x42; sub eax, dword ptr [rax]; add cl, ch; ret 0xfff6; 
0x000000000046b332: shr al, 0x78; ret 0xfffa; 
0x0000000000452dee: shr al, 1; in al, dx; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000043e071: shr bl, 0x94; nop dword ptr [rax]; call rax; 
0x0000000000466d71: shr bl, 0xcc; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000462399: shr bl, cl; frstor dword ptr [rdi - 0x18]; pop rsi; add bl, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000419b3b: shr byte ptr [rax + 0x4810740c], 1; mov esi, 0xffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x0000000000449512: shr byte ptr [rax + 0x48ffffff], 0xc7; ret 0x2c20; 
0x0000000000461d9a: shr byte ptr [rcx + 0x410000], 1; je 0x61dc8; mov eax, 0x101; syscall; 
0x000000000042c668: shr byte ptr [rcx], 0xc8; ret; 
0x000000000042be2f: shr byte ptr [rcx], 0xc8; vzeroupper; ret; 
0x0000000000411072: shr byte ptr [rcx], 0xcf; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000410f72: shr byte ptr [rcx], 0xcf; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000460872: shr byte ptr [rcx], 0xcf; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000460772: shr byte ptr [rcx], 0xcf; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000460383: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410c93: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000004603a3: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410ca3: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000004603c3: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410cb3: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000460363: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410c83: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; vzeroupper; ret; 
0x0000000000435b76: shr byte ptr [rcx], cl; ret 0x48d; 
0x0000000000436f81: shr byte ptr [rdx + 1], 0x31; leave; xor edx, edx; call rax; 
0x00000000004377ed: shr byte ptr [rdx + 1], 0x48; lea ecx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000401e2c: shr byte ptr [rdx + rcx + 0x40000], 0; ret; 
0x0000000000458293: shr byte ptr [rdx], 0x4c; lea ecx, [rbp - 0x38]; call rax; 
0x000000000046d977: shr cl, cl; ret; 
0x000000000042e21e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000042c74e: shr dword ptr [rcx], 0xc8; jne 0x2c754; ret; 
0x000000000042d1c3: shr eax, 0x10; jmp 0x2d1b0; mov rax, rdx; ret; 
0x000000000045f873: shr eax, 0x10; jmp 0x5f860; mov rax, rdi; ret; 
0x00000000004284f6: shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x802f2], eax; ret; 
0x000000000047879f: shr eax, 1; je 0x787b7; xor r10d, r10d; mov eax, r13d; syscall; 
0x000000000047a37f: shr eax, 1; je 0x7a392; xor r10d, r10d; mov eax, ebx; syscall; 
0x000000000042c710: shr eax, 1; mov cl, byte ptr [rsi + rdx]; movzx edi, byte ptr [rdi + rdx]; or eax, edi; sub eax, ecx; ret; 
0x0000000000478a0d: shr eax, 2; cmp eax, 3; je 0x78a20; ret; 
0x0000000000460ff4: shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000046105f: shr eax, 2; jmp 0x6136c; xor eax, eax; ret; 
0x0000000000460b2e: shr eax, 2; ret; 
0x0000000000460a84: shr eax, 2; test dl, dl; je 0x60a91; and edx, 0xf; je 0x60aa0; ret; 
0x0000000000460351: shr eax, 2; vzeroupper; ret; 
0x00000000004606fe: shr eax, 2; xtest; jne 0x6070a; vzeroupper; ret; 
0x000000000046e6fc: shr eax, 3; lea rdx, [rax - 1]; je 0x6e71e; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000404fd0: shr eax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x0000000000411091: shr eax, cl; je 0x10f87; bsf eax, eax; ret; 
0x0000000000401bb9: shr ebx, 0x16; lea edi, [rbx + 1]; mov rax, rdi; pop rbx; pop rbp; ret; 
0x0000000000460fdd: shr ecx, 2; cmp rcx, rsi; jb 0x60d64; mov rax, r8; vzeroupper; ret; 
0x000000000040905b: shr ecx, 3; rep stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004664cc: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000466455: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000466424: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000044ea1a: shr edx, 0x18; xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x4ea00; ret; 
0x00000000004687ee: shr esi, 2; sub rdx, rsi; jbe 0x68b00; add rax, rdi; add rax, rcx; ret; 
0x0000000000468a85: shr esi, 2; sub rdx, rsi; jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa5: shr esi, 2; sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac5: shr esi, 2; sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae5: shr esi, 2; sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004664cb: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000466454: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000466423: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000042d1c2: shr rax, 0x10; jmp 0x2d1b0; mov rax, rdx; ret; 
0x000000000045f872: shr rax, 0x10; jmp 0x5f860; mov rax, rdi; ret; 
0x0000000000460b2d: shr rax, 2; ret; 
0x0000000000460a83: shr rax, 2; test dl, dl; je 0x60a91; and edx, 0xf; je 0x60aa0; ret; 
0x0000000000460491: shr rax, 2; vzeroupper; ret; 
0x000000000046e6fb: shr rax, 3; lea rdx, [rax - 1]; je 0x6e71e; lea rbx, [r13 + rdx*8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000404fcf: shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x000000000044ea19: shr rdx, 0x18; xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x4ea00; ret; 
0x00000000004664c4: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000046644e: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004664c3: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000046644d: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000460899: shrx eax, eax, edx; test eax, eax; je 0x60787; bsf eax, eax; ret; 
0x000000000042cc08: shufps xmm0, xmmword ptr [rax], 0; ret; 
0x000000000045f2e7: shufps xmm0, xmmword ptr [rdi + rdx], 0; ret; 
0x000000000047710b: sldt word ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x69e8; 
0x0000000000460a94: sldt word ptr [rax]; je 0x60aa8; add rax, 2; ret; 
0x0000000000401ac9: sldt word ptr [rax]; lea rax, [rbx + 1]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000411446: sldt word ptr [rax]; nop dword ptr [rax]; endbr64; xor eax, eax; syscall; 
0x0000000000431cf8: sldt word ptr [rax]; sub rdx, 0x80; ja 0x31abe; xor eax, eax; vzeroupper; ret; 
0x00000000004329fa: sldt word ptr [rax]; sub rdx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x0000000000440533: stc; adc eax, 0x89480002; ret; 
0x0000000000445f6d: stc; add al, 0xf; xchg dword ptr [rdx], ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000004473ca: stc; add al, 0xf; xchg dword ptr [rdx], edx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000004019b3: stc; add byte ptr [rax], al; mov eax, 0; leave; ret; 
0x000000000046a6ae: stc; add dword ptr [rbx - 0x7cb7ff30], eax; ret 0x4808; 
0x00000000004047eb: stc; add dword ptr [rdi + 0x61], edi; call rax; 
0x00000000004046e3: stc; add dword ptr [rdi], ecx; pop qword ptr [rbp + 0x44000001]; mov edi, ebp; call rax; 
0x000000000043fa73: stc; cld; jmp qword ptr [rdi - 0x18]; 
0x0000000000439dcf: stc; cld; jmp qword ptr [rsi + 0x48]; 
0x00000000004549d0: stc; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000461a30: stc; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000046157d: stc; cwde; sal byte ptr [rbp - 0x49], 1; mov rax, rsi; ret; 
0x0000000000435cc2: stc; cwde; sal byte ptr [rbp - 0x4c], 1; mov rax, rsi; ret; 
0x000000000047532a: stc; dec dword ptr [rax - 0x39]; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xbbeb; 
0x000000000046dc2d: stc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004678d7: stc; dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000042c999: stc; jle 0x2c95d; mov word ptr [rdi], cx; nop; mov byte ptr [rax], 0; ret; 
0x000000000042c9b5: stc; jle 0x2c9bf; mov dword ptr [rax - 3], ecx; ret; 
0x000000000042cc03: stc; jle 0x2cbc7; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000042cc15: stc; jle 0x2cc1f; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f098: stc; jle 0x5f05c; mov word ptr [rdi], cx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f0b5: stc; jle 0x5f0bf; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000045f2e2: stc; jle 0x5f2a6; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f2f5: stc; jle 0x5f2ff; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000040f861: stc; jle 0xf86b; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000040faa1: stc; jle 0xfaab; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x0000000000418a3e: stc; jmp 0x189bc; nop dword ptr [rax]; ret; 
0x0000000000461fa0: stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000046d1e5: stc; jmp qword ptr [rsi + 0x49]; 
0x000000000046a51f: stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000466c98: stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000428403: stc; jnp 0x283c3; jmp qword ptr [rsi + 0xf]; 
0x000000000042a403: stc; mov dh, 0; add bh, dh; ret 0; 
0x000000000046d75b: stc; movabs dword ptr [0x3289089480003], eax; add byte ptr [rax - 0x39], cl; ret 0xcab0; 
0x0000000000406892: stc; or dword ptr [rax], eax; pop rbx; pop r12; pop rbp; ret; 
0x000000000040bd46: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040dcc8: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d451: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000042c9dc: stc; ret; 
0x00000000004684dc: stc; tzcnt eax, eax; cmp edx, eax; jbe 0x684d6; lea rax, [rdi + rax*4]; ret; 
0x000000000046875d: stc; tzcnt eax, eax; cmp edx, eax; jbe 0x68757; lea rax, [rdi + rax*4]; ret; 
0x000000000042c9d4: stc; vmovq qword ptr [rdi], xmm0; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f0d5: stc; vmovq qword ptr [rdi], xmm0; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000042ce68: stc; vmovq qword ptr [rdi], xmm16; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f539: stc; vmovq qword ptr [rdi], xmm16; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000040ce68: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000042bf2c: stc; xlatb; ret 0xff2d; 
0x00000000004566b5: std; add dword ptr [rdi + rbp - 0x77], esi; ret 0xc085; 
0x0000000000439bf3: std; call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000455a53: std; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004426b2: std; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000043a127: std; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000046263f: std; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000438e57: std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004383cc: std; dec dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x44; ret; 
0x000000000043a2fb: std; inc dword ptr [rbp + 0x5d0775c0]; ret; 
0x0000000000458dd9: std; inc dword ptr [rcx + rcx*4 - 0x16]; mov edi, eax; mov esi, ebx; mov eax, 0xea; syscall; 
0x0000000000458e0c: std; inc dword ptr [rcx + rcx*4 - 0x16]; mov esi, ebx; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000419802: std; jbe 0x19810; ret; 
0x0000000000448774: std; je 0x48790; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000429bdf: std; jmp qword ptr [rdi - 0x18]; 
0x00000000004229d4: std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000427a40: std; jmp qword ptr [rsi + 0x66]; 
0x0000000000423e68: std; jmp qword ptr [rsi + 0xf]; 
0x000000000043fffc: std; jmp qword ptr [rsi - 0x70]; 
0x0000000000417e60: std; or byte ptr [rax], al; mov qword ptr [rdi + 0x490], rax; pop rbp; ret; 
0x000000000042ce6b: std; or byte ptr [rsi + 7], bh; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f53c: std; or byte ptr [rsi + 7], bh; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000040d8ec: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000042c9ba: std; ret; 
0x000000000042c9b3: std; vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f0b3: std; vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042ce83: std; vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f553: std; vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000040ded9: std; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000040dac6: std; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000040d246: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000040d65e: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000040cb98: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c95e: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040fb86: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000410595: std; xlatb; ret 0xc085; 
0x000000000042bbb7: std; xlatb; ret 0xc0ff; 
0x0000000000410474: std; xlatb; ret; 
0x000000000042af91: std; xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000410c62: std; xlatb; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000043608d: std; xlatb; ror byte ptr [rax + 1], cl; ret 0x840f; 
0x000000000042bdf1: std; xlatb; sar edi, 0xc0; jne 0x2be40; vzeroupper; ret; 
0x000000000042af5b: std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x0000000000471944: sti; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000439c63: sti; cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000044d2cd: sti; dec dword ptr [rax + 0x29]; ret; 
0x000000000044d280: sti; dec dword ptr [rax + 1]; ret; 
0x000000000044d1ff: sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000044baab: sti; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000454845: sti; dec dword ptr [rbx - 0x74b713bb]; pop rbp; clc; leave; ret; 
0x000000000044b63f: sti; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x00000000004456ac: sti; jmp qword ptr [rdi - 0x18]; 
0x000000000044ca34: sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000450473: sti; jmp qword ptr [rsi + 0x66]; 
0x0000000000444ed8: sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004489ec: sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000417ff8: sti; or byte ptr [rax], al; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x8fb53]; mov qword ptr [rsi], rax; ret; 
0x0000000000418002: sti; or byte ptr [rax], al; mov qword ptr [rsi], rax; ret; 
0x0000000000450471: sti; sti; jmp qword ptr [rsi + 0x66]; 
0x0000000000458ea2: sti; sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000455d23: sti; sub rsp, 8; test byte ptr [rdi], 2; jne 0x55d98; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000040ce5a: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000042c5d3: sti; xchg ebx, eax; leave; test ecx, ecx; jne 0x2c4a4; ret; 
0x000000000042c49c: sti; xchg ebx, eax; leave; test ecx, ecx; jne 0x2c4aa; ret; 
0x000000000041108e: sti; xchg ebx, eax; rcl bl, 0xe8; je 0x10f87; bsf eax, eax; ret; 
0x000000000043664d: sti; xchg ebx, eax; ret 0xe2c4; 
0x0000000000436667: sti; xchg ebx, eax; ret; 
0x000000000042c4c3: sti; xchg ebx, eax; rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x0000000000460822: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000411022: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000435c90: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623975d2], 1; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000046154e: sti; xchg ebx, eax; rol byte ptr [rbp + 0x623b75d2], 1; mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x0000000000410871: sti; xchg ebx, eax; rol byte ptr [rbp + 0xf3874c0], 0xbc; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000436547: sti; xchg ebx, eax; rol dword ptr [rbp + 0x669574c0], 0x90; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004364ea: sti; xchg ebx, eax; rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x0000000000435ca2: sti; xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xf48; 
0x0000000000461560: sti; xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; or byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000045b33e: sti; xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000042f260: sti; xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042f0be: sti; xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x00000000004100ad: sti; xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000040fe30: sti; xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000476ae0: stosb byte ptr [rdi], al; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000410004: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000040f814: stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000448942: stosb byte ptr [rdi], al; or al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000401f5f: stosb byte ptr [rdi], al; or al, byte ptr [rax]; pop rbx; pop rbp; ret; 
0x000000000042a2b0: stosb byte ptr [rdi], al; ret; 
0x000000000040ff19: stosb byte ptr [rdi], al; xchg rdx, rax; ret; 
0x0000000000464b59: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add dh, dh; ret; 
0x0000000000476a30: stosd dword ptr [rdi], eax; clc; jmp qword ptr [rsi + 0x66]; 
0x00000000004678b0: stosd dword ptr [rdi], eax; cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000435ed4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004617a4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000409060: stosd dword ptr [rdi], eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000401f59: stosd dword ptr [rdi], eax; or al, byte ptr [rax]; mov dword ptr [rip + 0xaaafe], edx; pop rbx; pop rbp; ret; 
0x000000000045e221: stosd dword ptr [rdi], eax; or eax, 0x83480000; ret 0x4910; 
0x0000000000435e35: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000460cf5: stosd dword ptr [rdi], eax; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000435552: stosd dword ptr [rdi], eax; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004678af: stosq qword ptr [rdi], rax; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000040905f: stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004666b5: str word ptr [rax + 0x21]; ret 0xc148; 
0x0000000000441ab7: sub ah, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000042a1c4: sub al, 0; add bh, dh; ret 0; 
0x0000000000468441: sub al, 0x18; jae 0x6835e; xor eax, eax; ret; 
0x00000000004686cf: sub al, 0x18; jae 0x685de; xor eax, eax; ret; 
0x000000000042b53f: sub al, 0x60; jae 0x2b44e; xor eax, eax; ret; 
0x000000000042b7bf: sub al, 0x60; jae 0x2b6ce; xor eax, eax; ret; 
0x000000000040f833: sub al, 0x83; cli; add dword ptr [rdi + 0x37], edi; jl 0xf83e; mov byte ptr [rdi], sil; ret; 
0x000000000040fa73: sub al, 0x83; cli; add dword ptr [rdi + 0x37], edi; jl 0xfa7e; mov byte ptr [rdi], sil; ret; 
0x0000000000462e25: sub al, 0xf; xchg esp, eax; ret 0xd108; 
0x0000000000417a14: sub al, 3; add byte ptr [rax], al; mov qword ptr [rax + 0x340], rdx; ret; 
0x000000000040b730: sub al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x2a06; cmove rax, rdx; ret; 
0x00000000004637e5: sub al, byte ptr [rcx - 0x7d]; ret 0xba01; 
0x00000000004636f5: sub al, byte ptr [rcx - 0x7d]; ret; 
0x0000000000439c62: sub bh, bl; cld; dec dword ptr [rax - 0x77]; ret; 
0x00000000004019b2: sub bh, cl; add byte ptr [rax], al; mov eax, 0; leave; ret; 
0x000000000043e542: sub bl, byte ptr [rsi - 4]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004264da: sub byte ptr [r11 + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000466b47: sub byte ptr [r11 + 0x41], bl; pop rsp; pop rbp; ret; 
0x00000000004233a1: sub byte ptr [r8 - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000004503f2: sub byte ptr [r8 - 0x75], cl; push rax; sub byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ret 0x673; 
0x0000000000428036: sub byte ptr [r8 - 0x75], r9b; push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x00000000004582ce: sub byte ptr [rax - 0x73], cl; call 0x4161c432; pop rbp; pop rbp; ret; 
0x00000000004233a2: sub byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000004503f3: sub byte ptr [rax - 0x75], cl; push rax; sub byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ret 0x673; 
0x0000000000428037: sub byte ptr [rax - 0x75], cl; push rdi; adc byte ptr [rax + 0x39], cl; ret 0x773; 
0x00000000004503f7: sub byte ptr [rax - 0x75], cl; xor byte ptr [rax + 0x39], cl; ret 0x673; 
0x0000000000425fbb: sub byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x41]; pop rsp; pop rbp; jmp rax; 
0x0000000000455ea2: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx], dh; ror byte ptr [rcx + 0x5d8b480b], 0xf8; leave; ret; 
0x000000000044c19f: sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004268a6: sub byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000004619f2: sub byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000411403: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11443; leave; ret; 
0x000000000041191f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1193d; leave; ret; 
0x0000000000411d37: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11d95; leave; ret; 
0x00000000004123ef: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x123f7; leave; ret; 
0x00000000004285b4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x285c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000428736: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x28742; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000429782: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x297fa; leave; ret; 
0x000000000043712b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x37154; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000438677: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x38723; leave; ret; 
0x0000000000438843: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3888b; leave; ret; 
0x00000000004388d8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3891b; leave; ret; 
0x000000000044ed21: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4ed63; leave; mov eax, edx; ret; 
0x000000000044eddb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4eeb9; leave; ret; 
0x0000000000452f33: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52f7a; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004540e7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x54102; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000454922: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5492a; leave; ret; 
0x00000000004584be: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x584d8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458618: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58637; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004586d4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x586ef; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004601d9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x60208; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000461d50: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61d5b; leave; movzx eax, al; ret; 
0x0000000000461dba: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61dfb; leave; ret; 
0x0000000000461ea1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61ec3; leave; mov eax, edx; ret; 
0x0000000000461f7f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61f87; leave; ret; 
0x0000000000462098: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x620bc; leave; ret; 
0x0000000000462147: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62153; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004622ea: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6230b; leave; ret; 
0x0000000000462389: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6239c; leave; ret; 
0x0000000000462419: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6242c; leave; ret; 
0x00000000004624f5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x625b7; leave; ret; 
0x0000000000462610: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6263c; leave; ret; 
0x0000000000466351: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x663c7; leave; ret; 
0x0000000000467c0b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x67c40; leave; ret; 
0x000000000046936e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x69376; leave; ret; 
0x000000000046df11: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6df19; leave; ret; 
0x000000000046dff3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6dffb; leave; ret; 
0x000000000046e063: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6e06b; leave; ret; 
0x000000000046e15b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6e163; leave; ret; 
0x000000000046e1bf: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6e1c7; leave; ret; 
0x000000000046e608: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6e619; leave; ret; 
0x00000000004705d3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x705e5; leave; ret; 
0x00000000004706b8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x706c0; leave; ret; 
0x00000000004118f5: sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 8], rdx; lea rdx, [rbp - 0x1010]; syscall; 
0x000000000041fc78: sub byte ptr [rax], cl; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041fb97: sub byte ptr [rax], cl; add byte ptr [rax - 0x75], cl; add al, 0xc8; jmp rax; 
0x000000000042a167: sub byte ptr [rax], cl; add byte ptr [rbx + 0x829840d], cl; add dh, dh; ret 0x7420; 
0x0000000000478cb8: sub byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000047a26e: sub byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 1], cl; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004264db: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x00000000004073fe: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000466b48: sub byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000044595c: sub byte ptr [rbx + rcx*4 + 0x55], cl; movabs al, byte ptr [0xf6840ff08944]; add byte ptr [rax - 0x75], cl; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x000000000046c778: sub byte ptr [rbx - 0x1b], dh; mov eax, 1; ret; 
0x000000000046c777: sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x000000000044eaea: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000042a3b7: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x2a3c0; ret; 
0x000000000042a427: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0x2a430; ret; 
0x000000000040b8c7: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0xb8d0; ret; 
0x000000000040b937: sub byte ptr [rcx], al; add byte ptr [rax], al; je 0xb940; ret; 
0x0000000000454247: sub byte ptr [rcx], al; add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x0000000000418ae0: sub byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x000000000040ff4a: sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000040dc41: sub byte ptr [rdi + 0x44], bh; cmp bh, bh; ret; 
0x000000000042d044: sub byte ptr [rdi + 0x44], bh; ud0; ret; 
0x000000000042cec3: sub byte ptr [rdi + 0x4f], bh; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000042cee3: sub byte ptr [rdi + 0x57], bh; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000043656a: sub byte ptr [rdi + 0x57], ch; add dword ptr [rdx - 0x4e], esp; outsb dx, byte ptr [rsi]; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000436586: sub byte ptr [rdi + 0x5f], ch; add ah, byte ptr [rdx - 0x4e]; and byte ptr [rsi], ah; ret; 
0x000000000040dba1: sub byte ptr [rdi + 1], bh; ret; 
0x0000000000410167: sub byte ptr [rdi + 1], bh; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000040db9b: sub byte ptr [rdi + 2], bh; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000041022a: sub byte ptr [rdi + 2], bh; vmovdqu64 ymmword ptr [rdx + 0x20], ymm16; vmovdqu64 ymmword ptr [rdx + 0x40], ymm16; vmovdqu64 ymmword ptr [rdx + 0x60], ymm16; ret; 
0x000000000040d158: sub byte ptr [rdi + 6], ch; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000410088: sub byte ptr [rdi + 7], bh; ret; 
0x000000000040da24: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000040dc26: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x00000000004100dc: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x000000000040d166: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x00000000004096b4: sub byte ptr [rdi - 0x2f140001], dh; nop word ptr [rax + rax]; ret; 
0x000000000042d081: sub byte ptr [rdi - 0x7c], bh; mov rax, dr0; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000045f73b: sub byte ptr [rdi - 0x7c], bh; mov rax, dr0; add byte ptr [rax], al; ret; 
0x000000000042d0a1: sub byte ptr [rdi - 0x7c], bh; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000045f755: sub byte ptr [rdi - 0x7c], bh; punpcklwd mm0, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000042d061: sub byte ptr [rdi - 0x7c], bh; sgdt [rax]; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000045f721: sub byte ptr [rdi - 0x7c], bh; sgdt [rax]; add byte ptr [rax], al; ret; 
0x000000000040dc72: sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040ff44: sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000454afe: sub byte ptr [rdi], cl; adc dword ptr [rdi], eax; ret; 
0x000000000044a5e5: sub byte ptr [rsi], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000471db1: sub dh, bh; clc; jmp qword ptr [rsi + 0x66]; 
0x000000000045839d: sub dword ptr [rax - 0x73], ecx; call 0x4161c501; pop rbp; pop rbp; ret; 
0x00000000004601de: sub dword ptr [rax - 0x75], ecx; pop rbp; clc; leave; ret; 
0x000000000041fbf8: sub dword ptr [rax], ecx; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000042a16d: sub dword ptr [rax], ecx; add dh, dh; ret 0x7420; 
0x000000000042923a: sub dword ptr [rdi + 4], 1; je 0x292e9; xor eax, eax; ret; 
0x000000000042952c: sub dword ptr [rdi + 4], 1; je 0x294de; mov eax, 0x83; ret; 
0x000000000040b913: sub dword ptr [rdi], ecx; add bh, dh; ret 0; 
0x00000000004100b3: sub dword ptr [rdi], edi; ret; 
0x0000000000404fcc: sub eax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x000000000041f9e4: sub eax, 0x20; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041fb8a: sub eax, 0x20; cdqe; movzx ecx, byte ptr [rsi + rax]; lea rax, [rip + 0x82866]; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x00000000004204ad: sub eax, 0x20; cdqe; movzx esi, byte ptr [rdi + rax]; lea rax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205ad: sub eax, 0x20; cdqe; movzx esi, byte ptr [rsi + rax]; lea rax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000041fbf1: sub eax, 0x20; lea rdi, [rip + 0x82905]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041f4f1: sub eax, 0x20; lea rdi, [rip + 0x83005]; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000046d607: sub eax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x00000000004389e7: sub eax, 0x480006e1; test eax, eax; je 0x389f1; ret; 
0x00000000004101b2: sub eax, 0x888027c; ret; 
0x0000000000404341: sub eax, 0xbf000000; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x79212]; syscall; 
0x0000000000404311: sub eax, 0xbf000000; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 1; lea rsi, [rip + 0x79242]; syscall; 
0x000000000045674b: sub eax, 0xe8658d48; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000045313f: sub eax, 0xf6000001; ret 0xf50; 
0x000000000042bf52: sub eax, 0xffff; jne 0x2bc60; ret; 
0x000000000042c352: sub eax, 0xffff; jne 0x2c060; ret; 
0x000000000044fed4: sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x0000000000427a14: sub eax, 1; mov dword ptr [rip + 0x85257], eax; ret; 
0x0000000000448784: sub eax, 1; mov rbx, qword ptr [rbp - 8]; mov dword ptr [rdx + 8], eax; leave; ret; 
0x00000000004251de: sub eax, 1; pop rbp; mov dword ptr [rip + 0x87a8c], eax; ret; 
0x0000000000426a9b: sub eax, 1; ret; 
0x000000000043e32a: sub eax, dword ptr [0]; ret; 
0x000000000044edd8: sub eax, dword ptr [0x28]; jne 0x4eeb9; leave; ret; 
0x000000000046634e: sub eax, dword ptr [0x28]; jne 0x663c7; leave; ret; 
0x000000000040b630: sub eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x2b16; cmove rax, rdx; ret; 
0x0000000000414a6b: sub eax, dword ptr [rax]; add cl, ch; ret 0xfff6; 
0x00000000004101ad: sub eax, dword ptr [rbx + 0x2d7f01fa]; jl 0x101b7; mov byte ptr [rax], cl; ret; 
0x0000000000449a09: sub eax, dword ptr [rbx + 8]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000460018: sub eax, dword ptr [rcx + r8*4]; je 0x60000; ret; 
0x0000000000460019: sub eax, dword ptr [rcx + rax*4]; je 0x60000; ret; 
0x00000000004280a4: sub eax, dword ptr [rdi + 0x18]; ret; 
0x00000000004275a7: sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000046687e: sub eax, eax; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x000000000042e9e2: sub eax, eax; ret; 
0x000000000042e627: sub eax, eax; vzeroupper; ret; 
0x000000000042bed6: sub eax, ecx; jne 0x2bef0; ret; 
0x000000000042c2d6: sub eax, ecx; jne 0x2c2f0; ret; 
0x000000000042c74f: sub eax, ecx; jne 0x2c754; ret; 
0x000000000042c822: sub eax, ecx; jne 0x2c827; ret; 
0x00000000004667a5: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; pop rbp; ret; 
0x00000000004192e0: sub eax, ecx; ret; 
0x0000000000456459: sub eax, ecx; sar rax, 2; sub eax, 1; ret; 
0x000000000042c6f7: sub eax, ecx; sbb eax, eax; or eax, 1; ret; 
0x0000000000466700: sub eax, ecx; shl rdx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000426a99: sub eax, ecx; sub eax, 1; ret; 
0x000000000042bc6c: sub eax, ecx; vzeroupper; ret; 
0x000000000042f114: sub eax, ecx; xor eax, r8d; sub eax, r8d; ret; 
0x000000000042e621: sub eax, ecx; xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x000000000042c06c: sub eax, ecx; xtest; jne 0x2c077; vzeroupper; ret; 
0x000000000042ea2f: sub eax, ecx; xtest; jne 0x2ea3a; vzeroupper; ret; 
0x000000000043200f: sub eax, ecx; xtest; jne 0x3201a; vzeroupper; ret; 
0x000000000045a696: sub eax, ecx; xtest; jne 0x5a6a1; vzeroupper; ret; 
0x0000000000411239: sub eax, edi; ret; 
0x0000000000460c89: sub eax, edi; shr rax, 2; ret; 
0x0000000000404abe: sub eax, edx; ret; 
0x000000000046a9b3: sub eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000424f2d: sub eax, esi; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000455bab: sub eax, esp; cmp rax, 0x92f; ja 0x55cd0; mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x000000000046687d: sub eax, r8d; mov qword ptr [rsi + 8], r9; mov dword ptr [rdi], eax; mov eax, 2; pop rbp; ret; 
0x000000000042e9e1: sub eax, r8d; ret; 
0x000000000042e626: sub eax, r8d; vzeroupper; ret; 
0x0000000000420a70: sub ebp, ecx; idiv rdi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004344e5: sub ebx, edx; jbe 0x344f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004354c5: sub ebx, edx; jbe 0x354d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000435594: sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000435584: sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000435574: sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000435564: sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000046c772: sub ecx, dword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6c760; mov eax, 1; ret; 
0x0000000000473c41: sub ecx, dword ptr [rax - 0x75]; adc ecx, dword ptr [rbp - 0x77]; clc; mov rcx, rbx; mov edi, 1; call rax; 
0x000000000045390b: sub ecx, dword ptr [rcx - 0x75]; or r9b, r13b; ret 0xfffb; 
0x0000000000419d6d: sub ecx, dword ptr [rcx]; add cl, cl; ret; 
0x000000000040bd45: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040dcc7: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d450: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004357ab: sub ecx, edx; cmp rcx, rsi; jb 0x355a4; mov rax, r8; vzeroupper; ret; 
0x0000000000458cf9: sub ecx, edx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000040dc68: sub ecx, esi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d3fa: sub ecx, esi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000042aff5: sub edi, -0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000410881: sub edi, -0x40; bsf ecx, ecx; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000041088e: sub edi, -0x40; kord k0, k1, k0; kmovd eax, k0; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042afb1: sub edi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000046048b: sub edi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105bd: sub edi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000042da5d: sub edi, 0x3f; cmp sil, byte ptr [rdi + rax]; jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x00000000004604c5: sub edi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105e5: sub edi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000004604a5: sub edi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000410d75: sub edi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000411054: sub edi, ecx; add rax, rdi; ret; 
0x0000000000411073: sub edi, ecx; lea eax, [rdi + rax + 0x60]; ret; 
0x0000000000410f73: sub edi, ecx; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000411064: sub edi, ecx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000411045: sub edi, ecx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000406891: sub edi, ecx; or dword ptr [rax], eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000460873: sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000460773: sub edi, ecx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000460855: sub edi, ecx; sar rdi, 2; add rax, rdi; ret; 
0x0000000000460845: sub edi, ecx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460864: sub edi, ecx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000460e8e: sub edi, edx; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004356a3: sub edi, edx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000460f9c: sub edi, edx; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043577c: sub edi, edx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000460f38: sub edi, edx; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000435728: sub edi, edx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000460384: sub edi, edx; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410c94: sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000004603a4: sub edi, edx; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410ca4: sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000004603c4: sub edi, edx; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410cb4: sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000460ee9: sub edi, edx; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004356d9: sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000460364: sub edi, edx; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410c84: sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000043e49f: sub edi, esp; jmp qword ptr [rsi + 0xf]; 
0x0000000000431fac: sub edx, -0x80; jmp 0x31a93; xor eax, eax; ret; 
0x000000000043262c: sub edx, -0x80; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432c9a: sub edx, -0x80; jmp 0x32781; xor eax, eax; ret; 
0x0000000000431e77: sub edx, -0x80; lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x31a93; xor eax, eax; ret; 
0x00000000004324fa: sub edx, -0x80; lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432b66: sub edx, -0x80; lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x32781; xor eax, eax; ret; 
0x0000000000431cfc: sub edx, 0x80; ja 0x31abe; xor eax, eax; vzeroupper; ret; 
0x00000000004329fe: sub edx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x0000000000412c95: sub edx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x0000000000450028: sub edx, 1; mov dword ptr [rdi], edx; ret; 
0x0000000000450040: sub edx, 1; xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x000000000040af13: sub edx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000411400: sub edx, dword ptr [0x28]; jne 0x11443; leave; ret; 
0x000000000041191c: sub edx, dword ptr [0x28]; jne 0x1193d; leave; ret; 
0x0000000000411d34: sub edx, dword ptr [0x28]; jne 0x11d95; leave; ret; 
0x00000000004123ec: sub edx, dword ptr [0x28]; jne 0x123f7; leave; ret; 
0x000000000042977f: sub edx, dword ptr [0x28]; jne 0x297fa; leave; ret; 
0x0000000000438674: sub edx, dword ptr [0x28]; jne 0x38723; leave; ret; 
0x0000000000438840: sub edx, dword ptr [0x28]; jne 0x3888b; leave; ret; 
0x00000000004388d5: sub edx, dword ptr [0x28]; jne 0x3891b; leave; ret; 
0x000000000045491f: sub edx, dword ptr [0x28]; jne 0x5492a; leave; ret; 
0x0000000000461db7: sub edx, dword ptr [0x28]; jne 0x61dfb; leave; ret; 
0x0000000000461f7c: sub edx, dword ptr [0x28]; jne 0x61f87; leave; ret; 
0x0000000000462095: sub edx, dword ptr [0x28]; jne 0x620bc; leave; ret; 
0x00000000004622e7: sub edx, dword ptr [0x28]; jne 0x6230b; leave; ret; 
0x0000000000462386: sub edx, dword ptr [0x28]; jne 0x6239c; leave; ret; 
0x0000000000462416: sub edx, dword ptr [0x28]; jne 0x6242c; leave; ret; 
0x00000000004624f2: sub edx, dword ptr [0x28]; jne 0x625b7; leave; ret; 
0x000000000046260d: sub edx, dword ptr [0x28]; jne 0x6263c; leave; ret; 
0x0000000000467c08: sub edx, dword ptr [0x28]; jne 0x67c40; leave; ret; 
0x000000000046936b: sub edx, dword ptr [0x28]; jne 0x69376; leave; ret; 
0x000000000046df0e: sub edx, dword ptr [0x28]; jne 0x6df19; leave; ret; 
0x000000000046dff0: sub edx, dword ptr [0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e060: sub edx, dword ptr [0x28]; jne 0x6e06b; leave; ret; 
0x000000000046e158: sub edx, dword ptr [0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1bc: sub edx, dword ptr [0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e605: sub edx, dword ptr [0x28]; jne 0x6e619; leave; ret; 
0x00000000004705d0: sub edx, dword ptr [0x28]; jne 0x705e5; leave; ret; 
0x00000000004706b5: sub edx, dword ptr [0x28]; jne 0x706c0; leave; ret; 
0x00000000004275d9: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004275c8: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000456502: sub edx, dword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000456514: sub edx, dword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000041b481: sub edx, dword ptr [rdi]; or dword ptr [rax], eax; ret; 
0x000000000042b8cd: sub edx, eax; jbe 0x2bb70; add rax, rdi; add rax, rcx; ret; 
0x000000000042bb34: sub edx, eax; jbe 0x2bb70; add rax, rdi; ret; 
0x000000000042bb44: sub edx, eax; jbe 0x2bb70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042bb54: sub edx, eax; jbe 0x2bb70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042bb64: sub edx, eax; jbe 0x2bb70; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000435b77: sub edx, eax; lea eax, [rsi + rdx]; cmovae eax, esi; ret; 
0x0000000000456aa0: sub edx, ebp; cmp rdx, 0x92f; ja 0x56fc8; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000004549a9: sub edx, esi; imul eax, edx; ret; 
0x00000000004687f2: sub edx, esi; jbe 0x68b00; add rax, rdi; add rax, rcx; ret; 
0x0000000000468a89: sub edx, esi; jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa9: sub edx, esi; jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac9: sub edx, esi; jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae9: sub edx, esi; jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004244eb: sub edx, esi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x000000000045780f: sub edx, esi; mov qword ptr [rbp - 0xe8], rcx; mov rdi, r15; call rax; 
0x00000000004329f5: sub esi, -0x80; add eax, 0xf00; sub rdx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x00000000004366f6: sub esi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x00000000004614bb: sub esi, eax; lea eax, [rsi + rdx + 0x10]; ret; 
0x0000000000435bf6: sub esi, eax; lea eax, [rsi + rdx + 0x40]; ret; 
0x0000000000435be6: sub esi, eax; lea eax, [rsi + rdx]; ret; 
0x000000000045ff36: sub esi, edx; cmp ecx, esi; jae 0x5ff88; movsxd rax, ecx; ret; 
0x000000000046e523: sub esi, esp; add eax, dword ptr [rax]; ret; 
0x0000000000411a5c: sub esp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x000000000047a4f9: sub esp, 8; add rsp, 8; ret; 
0x0000000000458ea4: sub esp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000455d25: sub esp, 8; test byte ptr [rdi], 2; jne 0x55d98; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000043e73c: sub esp, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004344e4: sub r11, rdx; jbe 0x344f4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004354c4: sub r11, rdx; jbe 0x354d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000040b72f: sub r8b, byte ptr [r8]; add byte ptr [rax - 0x73], cl; adc eax, 0x2a06; cmove rax, rdx; ret; 
0x0000000000404fcb: sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa11aa], rdx; ret; 
0x000000000046d606: sub rax, 0x20; mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000436e83: sub rax, 1; ret; 
0x000000000043e329: sub rax, qword ptr [0]; ret; 
0x000000000044edd7: sub rax, qword ptr [0x28]; jne 0x4eeb9; leave; ret; 
0x000000000046634d: sub rax, qword ptr [0x28]; jne 0x663c7; leave; ret; 
0x00000000004280a3: sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000043e328: sub rax, qword ptr fs:[0]; ret; 
0x000000000044edd6: sub rax, qword ptr fs:[0x28]; jne 0x4eeb9; leave; ret; 
0x000000000046634c: sub rax, qword ptr fs:[0x28]; jne 0x663c7; leave; ret; 
0x0000000000455baa: sub rax, r12; cmp rax, 0x92f; ja 0x55cd0; mov esi, edx; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000424f2c: sub rax, r14; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000042bed5: sub rax, rcx; jne 0x2bef0; ret; 
0x000000000042c2d5: sub rax, rcx; jne 0x2c2f0; ret; 
0x0000000000456458: sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x000000000042c6f6: sub rax, rcx; sbb eax, eax; or eax, 1; ret; 
0x0000000000426a98: sub rax, rcx; sub eax, 1; ret; 
0x0000000000411238: sub rax, rdi; ret; 
0x0000000000460c88: sub rax, rdi; shr rax, 2; ret; 
0x0000000000404abd: sub rax, rdx; ret; 
0x000000000046c771: sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x6c760; mov eax, 1; ret; 
0x000000000040bd44: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040dcc6: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d44f: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004357aa: sub rcx, rdx; cmp rcx, rsi; jb 0x355a4; mov rax, r8; vzeroupper; ret; 
0x0000000000458cf8: sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x000000000040dc67: sub rcx, rsi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040d3f9: sub rcx, rsi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000042aff4: sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000410880: sub rdi, -0x40; bsf ecx, ecx; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000041088d: sub rdi, -0x40; kord k0, k1, k0; kmovd eax, k0; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042afb0: sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000046048a: sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105bc: sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000042da5c: sub rdi, 0x3f; cmp sil, byte ptr [rdi + rax]; jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x00000000004604c4: sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105e4: sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000004604a4: sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000410d74: sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000411053: sub rdi, rcx; add rax, rdi; ret; 
0x0000000000411063: sub rdi, rcx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000411044: sub rdi, rcx; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000460854: sub rdi, rcx; sar rdi, 2; add rax, rdi; ret; 
0x0000000000460844: sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000460863: sub rdi, rcx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000460e8d: sub rdi, rdx; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004356a2: sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000460f9b: sub rdi, rdx; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043577b: sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000460f37: sub rdi, rdx; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000435727: sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000460ee8: sub rdi, rdx; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004356d8: sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000431fab: sub rdx, -0x80; jmp 0x31a93; xor eax, eax; ret; 
0x000000000043262b: sub rdx, -0x80; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432c99: sub rdx, -0x80; jmp 0x32781; xor eax, eax; ret; 
0x0000000000431e76: sub rdx, -0x80; lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x31a93; xor eax, eax; ret; 
0x00000000004324f9: sub rdx, -0x80; lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x320f3; xor eax, eax; ret; 
0x0000000000432b65: sub rdx, -0x80; lea rdi, [rdi + r9 - 0x80]; lea rsi, [rsi + r9 - 0x80]; jmp 0x32781; xor eax, eax; ret; 
0x0000000000431cfb: sub rdx, 0x80; ja 0x31abe; xor eax, eax; vzeroupper; ret; 
0x00000000004329fd: sub rdx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x0000000000412c94: sub rdx, 1; call qword ptr [rip + 0x933ca]; jmp 0x12c62; ret; 
0x000000000040af12: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000004113ff: sub rdx, qword ptr [0x28]; jne 0x11443; leave; ret; 
0x000000000041191b: sub rdx, qword ptr [0x28]; jne 0x1193d; leave; ret; 
0x0000000000411d33: sub rdx, qword ptr [0x28]; jne 0x11d95; leave; ret; 
0x00000000004123eb: sub rdx, qword ptr [0x28]; jne 0x123f7; leave; ret; 
0x000000000042977e: sub rdx, qword ptr [0x28]; jne 0x297fa; leave; ret; 
0x0000000000438673: sub rdx, qword ptr [0x28]; jne 0x38723; leave; ret; 
0x000000000043883f: sub rdx, qword ptr [0x28]; jne 0x3888b; leave; ret; 
0x00000000004388d4: sub rdx, qword ptr [0x28]; jne 0x3891b; leave; ret; 
0x000000000045491e: sub rdx, qword ptr [0x28]; jne 0x5492a; leave; ret; 
0x0000000000461db6: sub rdx, qword ptr [0x28]; jne 0x61dfb; leave; ret; 
0x0000000000461f7b: sub rdx, qword ptr [0x28]; jne 0x61f87; leave; ret; 
0x0000000000462094: sub rdx, qword ptr [0x28]; jne 0x620bc; leave; ret; 
0x00000000004622e6: sub rdx, qword ptr [0x28]; jne 0x6230b; leave; ret; 
0x0000000000462385: sub rdx, qword ptr [0x28]; jne 0x6239c; leave; ret; 
0x0000000000462415: sub rdx, qword ptr [0x28]; jne 0x6242c; leave; ret; 
0x00000000004624f1: sub rdx, qword ptr [0x28]; jne 0x625b7; leave; ret; 
0x000000000046260c: sub rdx, qword ptr [0x28]; jne 0x6263c; leave; ret; 
0x0000000000467c07: sub rdx, qword ptr [0x28]; jne 0x67c40; leave; ret; 
0x000000000046936a: sub rdx, qword ptr [0x28]; jne 0x69376; leave; ret; 
0x000000000046df0d: sub rdx, qword ptr [0x28]; jne 0x6df19; leave; ret; 
0x000000000046dfef: sub rdx, qword ptr [0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e05f: sub rdx, qword ptr [0x28]; jne 0x6e06b; leave; ret; 
0x000000000046e157: sub rdx, qword ptr [0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1bb: sub rdx, qword ptr [0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e604: sub rdx, qword ptr [0x28]; jne 0x6e619; leave; ret; 
0x00000000004705cf: sub rdx, qword ptr [0x28]; jne 0x705e5; leave; ret; 
0x00000000004706b4: sub rdx, qword ptr [0x28]; jne 0x706c0; leave; ret; 
0x00000000004275d8: sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004275c7: sub rdx, qword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000456501: sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000456513: sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004113fe: sub rdx, qword ptr fs:[0x28]; jne 0x11443; leave; ret; 
0x000000000041191a: sub rdx, qword ptr fs:[0x28]; jne 0x1193d; leave; ret; 
0x0000000000411d32: sub rdx, qword ptr fs:[0x28]; jne 0x11d95; leave; ret; 
0x00000000004123ea: sub rdx, qword ptr fs:[0x28]; jne 0x123f7; leave; ret; 
0x000000000042977d: sub rdx, qword ptr fs:[0x28]; jne 0x297fa; leave; ret; 
0x0000000000438672: sub rdx, qword ptr fs:[0x28]; jne 0x38723; leave; ret; 
0x000000000043883e: sub rdx, qword ptr fs:[0x28]; jne 0x3888b; leave; ret; 
0x00000000004388d3: sub rdx, qword ptr fs:[0x28]; jne 0x3891b; leave; ret; 
0x000000000045491d: sub rdx, qword ptr fs:[0x28]; jne 0x5492a; leave; ret; 
0x0000000000461db5: sub rdx, qword ptr fs:[0x28]; jne 0x61dfb; leave; ret; 
0x0000000000461f7a: sub rdx, qword ptr fs:[0x28]; jne 0x61f87; leave; ret; 
0x0000000000462093: sub rdx, qword ptr fs:[0x28]; jne 0x620bc; leave; ret; 
0x00000000004622e5: sub rdx, qword ptr fs:[0x28]; jne 0x6230b; leave; ret; 
0x0000000000462384: sub rdx, qword ptr fs:[0x28]; jne 0x6239c; leave; ret; 
0x0000000000462414: sub rdx, qword ptr fs:[0x28]; jne 0x6242c; leave; ret; 
0x00000000004624f0: sub rdx, qword ptr fs:[0x28]; jne 0x625b7; leave; ret; 
0x000000000046260b: sub rdx, qword ptr fs:[0x28]; jne 0x6263c; leave; ret; 
0x0000000000467c06: sub rdx, qword ptr fs:[0x28]; jne 0x67c40; leave; ret; 
0x0000000000469369: sub rdx, qword ptr fs:[0x28]; jne 0x69376; leave; ret; 
0x000000000046df0c: sub rdx, qword ptr fs:[0x28]; jne 0x6df19; leave; ret; 
0x000000000046dfee: sub rdx, qword ptr fs:[0x28]; jne 0x6dffb; leave; ret; 
0x000000000046e05e: sub rdx, qword ptr fs:[0x28]; jne 0x6e06b; leave; ret; 
0x000000000046e156: sub rdx, qword ptr fs:[0x28]; jne 0x6e163; leave; ret; 
0x000000000046e1ba: sub rdx, qword ptr fs:[0x28]; jne 0x6e1c7; leave; ret; 
0x000000000046e603: sub rdx, qword ptr fs:[0x28]; jne 0x6e619; leave; ret; 
0x00000000004705ce: sub rdx, qword ptr fs:[0x28]; jne 0x705e5; leave; ret; 
0x00000000004706b3: sub rdx, qword ptr fs:[0x28]; jne 0x706c0; leave; ret; 
0x0000000000456a9f: sub rdx, r13; cmp rdx, 0x92f; ja 0x56fc8; mov esi, 0xffffffff; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000042b8cc: sub rdx, rax; jbe 0x2bb70; add rax, rdi; add rax, rcx; ret; 
0x000000000042bb33: sub rdx, rax; jbe 0x2bb70; add rax, rdi; ret; 
0x000000000042bb43: sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042bb53: sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042bb63: sub rdx, rax; jbe 0x2bb70; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004549a8: sub rdx, rsi; imul eax, edx; ret; 
0x00000000004687f1: sub rdx, rsi; jbe 0x68b00; add rax, rdi; add rax, rcx; ret; 
0x0000000000468a88: sub rdx, rsi; jbe 0x68b00; add rax, rdi; ret; 
0x0000000000468aa8: sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000468ac8: sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000468ae8: sub rdx, rsi; jbe 0x68b00; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004244ea: sub rdx, rsi; mov qword ptr [rbp - 0xd8], rcx; mov rdi, rbx; call rax; 
0x000000000045780e: sub rdx, rsi; mov qword ptr [rbp - 0xe8], rcx; mov rdi, r15; call rax; 
0x00000000004329f4: sub rsi, -0x80; add eax, 0xf00; sub rdx, 0x80; ja 0x327ae; xor eax, eax; ret; 
0x00000000004366f5: sub rsi, 0x20; lea rax, [rsi + rcx + 0x60]; ret; 
0x0000000000411a5b: sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x000000000047a4f8: sub rsp, 8; add rsp, 8; ret; 
0x0000000000458ea3: sub rsp, 8; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000455d24: sub rsp, 8; test byte ptr [rdi], 2; jne 0x55d98; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000401167: syscall; 
0x0000000000461cec: syscall; cmp eax, 0xfffff000; ja 0x61d00; xor eax, eax; ret; 
0x00000000004112ef: syscall; cmp rax, -0x1000; ja 0x11348; ret; 
0x0000000000411389: syscall; cmp rax, -0x1000; ja 0x11398; ret; 
0x0000000000411456: syscall; cmp rax, -0x1000; ja 0x11468; ret; 
0x0000000000437a85: syscall; cmp rax, -0x1000; ja 0x37a90; ret; 
0x0000000000437bf9: syscall; cmp rax, -0x1000; ja 0x37c08; ret; 
0x00000000004384b9: syscall; cmp rax, -0x1000; ja 0x384c8; ret; 
0x0000000000438762: syscall; cmp rax, -0x1000; ja 0x387c0; ret; 
0x000000000043893c: syscall; cmp rax, -0x1000; ja 0x38950; ret; 
0x0000000000438979: syscall; cmp rax, -0x1000; ja 0x38988; ret; 
0x00000000004389b2: syscall; cmp rax, -0x1000; ja 0x389c0; ret; 
0x0000000000458eec: syscall; cmp rax, -0x1000; ja 0x58f00; ret; 
0x0000000000411b19: syscall; cmp rax, -0xfff; jae 0x11b24; ret; 
0x0000000000411c09: syscall; cmp rax, -0xfff; jae 0x11c14; ret; 
0x0000000000411c39: syscall; cmp rax, -0xfff; jae 0x11c44; ret; 
0x0000000000411dac: syscall; cmp rax, -0xfff; jae 0x11db7; ret; 
0x0000000000411e79: syscall; cmp rax, -0xfff; jae 0x11e84; ret; 
0x0000000000437b09: syscall; cmp rax, -0xfff; jae 0x37b14; ret; 
0x0000000000437b39: syscall; cmp rax, -0xfff; jae 0x37b44; ret; 
0x0000000000437b69: syscall; cmp rax, -0xfff; jae 0x37b74; ret; 
0x0000000000437b99: syscall; cmp rax, -0xfff; jae 0x37ba4; ret; 
0x0000000000437bc9: syscall; cmp rax, -0xfff; jae 0x37bd4; ret; 
0x0000000000404df6: syscall; ret; 
0x0000000000411265: syscall; test eax, eax; jne 0x11288; xor eax, eax; ret; 
0x0000000000465706: test ah, -6; jmp qword ptr [rsi + 0xf]; 
0x000000000042e38d: test ah, 0x20; jne 0x2e470; test ah, 0x40; jne 0x2e480; lea rax, [rdi + 0xf]; ret; 
0x000000000042e396: test ah, 0x40; jne 0x2e480; lea rax, [rdi + 0xf]; ret; 
0x000000000042e2ae: test ah, 0x40; jne 0x2e480; test dh, 0x40; jne 0x2e1f0; lea rax, [rdi + 0xf]; ret; 
0x000000000043755a: test ah, ah; jne 0x3759e; pop rbx; pop r12; pop rbp; ret; 
0x0000000000404ccf: test ah, ch; ret; 
0x00000000004268a7: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000458514: test al, 0; add byte ptr [rax], al; mov qword ptr [rdi + 0x10], rax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000474087: test al, 0; add byte ptr [rax], al; ret; 
0x000000000042e33c: test al, 0x20; jne 0x2e400; test al, 0x40; jne 0x2e410; lea rax, [rdi + 7]; ret; 
0x000000000042e344: test al, 0x40; jne 0x2e410; lea rax, [rdi + 7]; ret; 
0x000000000042e22c: test al, 0x40; jne 0x2e410; test dl, 0x40; jne 0x2e1f0; lea rax, [rdi + 7]; ret; 
0x0000000000440ad9: test al, 0x48; mov dword ptr [rbp - 0x78], ecx; call rax; 
0x00000000004458e7: test al, 0x8b; test dword ptr [rdi + rdi*8 - 1], edi; call qword ptr [rax + 0x6a]; 
0x00000000004428c6: test al, 0x8b; test dword ptr [rdi + rdi*8 - 1], esi; call qword ptr [rax + 0x6a]; 
0x00000000004124c4: test al, 0xa3; or dword ptr [rax], eax; cmp qword ptr [rip + 0x9a388], 0; je 0x124f0; lea rax, [rip + 0x9a377]; ret; 
0x0000000000401e94: test al, 0xa9; or al, byte ptr [rax]; mov rsi, qword ptr [rbp - 0x88]; mov edi, dword ptr [rbp - 0x7c]; mov rax, qword ptr [rbp - 0x78]; call rax; 
0x00000000004020d7: test al, 0xa; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004386cf: test al, 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000438853: test al, 0xbe; adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x0000000000419b3c: test al, 0xc; je 0x19b50; mov rsi, 0xffffffffffffffff; mov edi, 0x5003; mov eax, edx; syscall; 
0x0000000000416507: test al, 0xe8; ret; 
0x000000000043ff29: test al, 0xfc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000459076: test al, 2; je 0x59080; xor eax, eax; ret; 
0x000000000047526e: test al, 2; jne 0x75278; ret; 
0x0000000000414007: test al, 3; je 0x13ff3; ret; 
0x0000000000413fef: test al, 3; jne 0x1400b; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rdi + 0x35a], al; ret; 
0x0000000000418fe2: test al, al; je 0x18b89; xor ecx, ecx; jmp 0x18bd9; ret; 
0x0000000000419238: test al, al; jne 0x1920b; movsx eax, byte ptr [rsi]; neg eax; ret; 
0x0000000000430baa: test al, al; jne 0x30b90; xor eax, eax; sub eax, ecx; ret; 
0x0000000000421c7e: test ax, ax; je 0x21c90; lea rdx, [rip + 0x60756]; add rax, rdx; ret; 
0x000000000041981d: test bh, bh; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x93074], 0; ret; 
0x0000000000474dcc: test bh, bh; js 0x74df0; mov qword ptr [r8], rdx; ret; 
0x000000000047820c: test bh, bh; js 0x78230; mov qword ptr [r8], rdx; ret; 
0x0000000000439eed: test bh, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042a84c: test bl, ch; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000408520: test bl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000040e3cb: test byte ptr [rax + 0x3b], cl; adc eax, 0x99745; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004275c1: test byte ptr [rax + 1], 1; jne 0x275d8; sub rdx, qword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000437c99: test byte ptr [rax + 4], al; add byte ptr [rax], al; mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x000000000047051f: test byte ptr [rax + rax - 0x49f10000], bh; ret 0xf41; 
0x000000000041d44e: test byte ptr [rax + rdx - 0x7cb80000], dl; ret; 
0x000000000042f474: test byte ptr [rax - 0x73], cl; je 0x2f48f; test cl, ch; ret 0xfffb; 
0x0000000000458cf0: test byte ptr [rax - 0x75], 5; and dh, bl; add al, 0; sub rcx, rdx; lea rax, [rcx + rax + 0x4000]; ret; 
0x0000000000428af7: test byte ptr [rax - 0x77], -0x21; mov eax, 0xca; syscall; 
0x0000000000460d15: test byte ptr [rax - 0x81], cl; shr eax, 2; vzeroupper; ret; 
0x0000000000445966: test byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x000000000042bb0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000047039a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000411e6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0x63; syscall; 
0x0000000000411bfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xa; syscall; 
0x000000000042618a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x00000000004384aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 8; syscall; 
0x00000000004278aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000043e30a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x000000000042792a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000473fda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047406a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000042790a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x7f7e5]; ret; 
0x000000000045984a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000047416a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; nop; ret; 
0x000000000040170a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x00000000004268ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000042e43a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000042e44a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000042e45a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000042e46a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000042e47a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x000000000042e3ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x000000000042e3da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000042e3ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000042e3fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000042e40a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000042e41a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000042e42a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000042d52a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045fbda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000040b5aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x16; ret; 
0x0000000000458dfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xba; syscall; 
0x00000000004583ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000046e5ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000046e5aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5e1]; ret; 
0x000000000046e59a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5e9]; ret; 
0x000000000046e58a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5f1]; ret; 
0x000000000046e57a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e5f9]; ret; 
0x000000000046e56a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e601]; ret; 
0x000000000046e55a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e609]; ret; 
0x000000000046e54a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e611]; ret; 
0x000000000046e53a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e619]; ret; 
0x000000000046e52a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e621]; ret; 
0x000000000046e51a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3e629]; ret; 
0x000000000044eb96: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000436ea7: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000412418: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; ret; 
0x000000000042e3b9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x000000000042e3a9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x0000000000468af8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000042758a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046c6da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042e1ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000445a6d: test byte ptr [rax], dh; add eax, 0x8b480000; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x000000000042a834: test byte ptr [rax], dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000047963f: test byte ptr [rbp + 0x31], 0xd2; mov edx, 1; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045ffa1: test byte ptr [rbp - 0x76258b2e], 0xc9; add rax, rcx; sub rax, rdi; ret; 
0x000000000041dd96: test byte ptr [rbp - 0x7c000002], bh; mov ebp, 0xfffff6f0; or byte ptr [rdi], cl; xchg esp, eax; ret 0x9522; 
0x00000000004080a9: test byte ptr [rbp - 0x9fffffc], bh; ret 0xf0f; 
0x0000000000435816: test byte ptr [rbp - 0xd000000], al; bsf eax, eax; jmp 0x35ab9; xor eax, eax; ret; 
0x0000000000460cd6: test byte ptr [rbp - 0xd000000], al; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000476936: test byte ptr [rbx + 0x20], 1; jne 0x76970; mov rax, rbx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004298bf: test byte ptr [rbx + rax*4], al; cli; dec dword ptr [rdi]; test byte ptr [rsi - 0x7cfffffe], ch; ret 0x4101; 
0x0000000000419988: test byte ptr [rbx - 0x42000000], cl; add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 0x5002; mov eax, 0x9e; syscall; 
0x0000000000410614: test byte ptr [rbx - 0xc000002], bh; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000426937: test byte ptr [rbx], 0x80; jne 0x26960; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004400f7: test byte ptr [rbx], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000461692: test byte ptr [rcx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000422357: test byte ptr [rcx + 0x48fffffa], dl; lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000459335: test byte ptr [rcx + 0xcab8], 0; syscall; 
0x0000000000436512: test byte ptr [rcx + 1], cl; add byte ptr [rax], al; bsr eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004541a2: test byte ptr [rcx + rcx*4 - 0x11], -0x18; xor eax, 0x48000129; mov esi, dword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x0000000000404e06: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000404e06: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000478a82: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; iretd; mov eax, 0xca; syscall; 
0x0000000000430f16: test byte ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004295a2: test byte ptr [rdi + 0x31d23145], 0xd2; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000418fe5: test byte ptr [rdi + 0x31fffffb], bl; leave; jmp 0x18bd9; ret; 
0x000000000046837d: test byte ptr [rdi + 0x80], cl; ret; 
0x00000000004022c1: test byte ptr [rdi], -0x6b; ret 0xc031; 
0x0000000000417ac4: test byte ptr [rdi], -0x6c; ret; 
0x00000000004071d7: test byte ptr [rdi], -0x7b; ret 0; 
0x000000000041d817: test byte ptr [rdi], -0x7b; ret 7; 
0x0000000000441018: test byte ptr [rdi], -0x7c; ret 2; 
0x0000000000466b54: test byte ptr [rdi], 0x20; je 0x66b60; xor eax, eax; ret; 
0x00000000004257b4: test byte ptr [rdi], 0x80; jne 0x257c0; ret; 
0x0000000000455d28: test byte ptr [rdi], 2; jne 0x55d98; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000042d063: test byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000045f723: test byte ptr [rdi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000042d083: test byte ptr [rdi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000045f73d: test byte ptr [rdi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000460225: test byte ptr [rip + 0x4c7a2], 8; lea rax, [rip + 0x8bd]; lea rdx, [rip + 0x676]; cmove rax, rdx; ret; 
0x0000000000459b24: test byte ptr [rip + 0x52ea3], 0x10; lea rdx, [rip + 0x650e]; lea rax, [rip + 0x6387]; cmove rax, rdx; ret; 
0x0000000000459a55: test byte ptr [rip + 0x53099], 1; lea rdx, [rip + 0x3dad]; cmove rax, rdx; ret; 
0x000000000042a345: test byte ptr [rip + 0x827a9], 1; lea rdx, [rip + 0xa1bd]; cmove rax, rdx; ret; 
0x000000000043b53a: test byte ptr [rip - 0x72000003], dl; add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x0000000000435dbd: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x0000000000430b7a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004298c5: test byte ptr [rsi - 0x7cfffffe], ch; ret 0x4101; 
0x000000000042d058: test byte ptr [rsi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000045f718: test byte ptr [rsi], cl; add dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000042d078: test byte ptr [rsi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000045f732: test byte ptr [rsi], cl; and dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x0000000000403eee: test ch, 2; je 0x3f04; mov esi, 1; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x000000000042a224: test ch, 8; jne 0x2a1eb; ret; 
0x0000000000411d1a: test cl, 6; jne 0x11d40; mov eax, 0x19; syscall; 
0x0000000000453de1: test cl, ch; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000042f479: test cl, ch; ret 0xfffb; 
0x000000000041a958: test cl, cl; jne 0x1a8b0; ret; 
0x0000000000436b0f: test cl, cl; jne 0x36b00; ret; 
0x0000000000436bbf: test cl, cl; jne 0x36bb0; ret; 
0x0000000000436e7f: test cl, cl; jne 0x36e70; sub rax, 1; ret; 
0x000000000042e2b7: test dh, 0x40; jne 0x2e1f0; lea rax, [rdi + 0xf]; ret; 
0x000000000042e2fd: test dh, 4; jne 0x2e1f0; lea rax, [rdi + 0xb]; ret; 
0x000000000042a2ac: test dh, 8; jne 0x2a25b; ret; 
0x0000000000445965: test dh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x0000000000472837: test dh, dh; js 0x72820; jmp 0x727bb; ret; 
0x0000000000473337: test dh, dh; js 0x73320; jmp 0x732bb; ret; 
0x0000000000440909: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000474dcb: test dil, dil; js 0x74df0; mov qword ptr [r8], rdx; ret; 
0x000000000047820b: test dil, dil; js 0x78230; mov qword ptr [r8], rdx; ret; 
0x000000000042e234: test dl, 0x40; jne 0x2e1f0; lea rax, [rdi + 7]; ret; 
0x000000000042e262: test dl, 4; jne 0x2e1f0; lea rax, [rdi + 3]; ret; 
0x000000000045905e: test dl, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000460a87: test dl, dl; je 0x60a91; and edx, 0xf; je 0x60aa0; ret; 
0x0000000000436d2f: test dl, dl; jne 0x36d20; lea rax, [rcx - 1]; ret; 
0x000000000044ea23: test dl, dl; jne 0x4ea00; ret; 
0x0000000000475060: test dword ptr [rax + 0x44fffff7], ebp; mov dword ptr [rbp - 0x848], ebx; mov ecx, r11d; call rax; 
0x000000000047518c: test dword ptr [rax + 0x44fffff7], ebp; mov dword ptr [rbp - 0x860], eax; mov ecx, r8d; call rax; 
0x0000000000475193: test dword ptr [rax + 0x44fffff7], esp; mov ecx, eax; call rax; 
0x000000000042e33f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x2e410; lea rax, [rdi + 7]; ret; 
0x00000000004162fd: test dword ptr [rax + rax - 0x17d0000], eax; dec dword ptr [rdi]; test dword ptr [rsi - 0x16000009], esp; ret 0xfffa; 
0x00000000004624fa: test dword ptr [rax - 0x37000000], edi; ret; 
0x0000000000478b43: test dword ptr [rax - 0x77000000], esp; ret 0xca83; 
0x000000000041cd72: test dword ptr [rax - 0x77], 0xfff72085; dec dword ptr [rbx - 0x1f7cc7bb]; add cl, byte ptr [rcx - 0x437a763a]; idiv bh; call rcx; 
0x0000000000435817: test dword ptr [rax], eax; add byte ptr [rax], al; tzcnt eax, eax; jmp 0x35ab9; xor eax, eax; ret; 
0x0000000000460cd7: test dword ptr [rax], eax; add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000041fc77: test dword ptr [rax], ebp; or byte ptr [rax], al; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000041d6e7: test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x000000000041cd75: test dword ptr [rax], esp; idiv edi; dec dword ptr [rbx - 0x1f7cc7bb]; add cl, byte ptr [rcx - 0x437a763a]; idiv bh; call rcx; 
0x000000000041dce2: test dword ptr [rax], esp; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000040988a: test dword ptr [rbp + 0x48000001], edi; add esp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000042bab8: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x0000000000457100: test dword ptr [rbx + 0x48000000], eax; lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000042e2f8: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x2e1f0; lea rax, [rdi + 0xb]; ret; 
0x0000000000420367: test dword ptr [rbx + rdi*8 - 1], edx; dec dword ptr [rdi]; test esi, edi; or al, byte ptr [rax]; add byte ptr [rax - 0x4b743], al; jmp qword ptr [rax]; 
0x000000000044d938: test dword ptr [rbx], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x0000000000447363: test dword ptr [rbx], ecx; add dword ptr [rax], eax; add dh, dh; ret; 
0x000000000043856d: test dword ptr [rcx + 0x48000000], esp; add esp, 0x60; pop rbx; pop r12; pop rbp; ret; 
0x0000000000473f73: test dword ptr [rcx + 0x48fff8d5], edx; mov eax, dword ptr [rax]; ret; 
0x0000000000444df7: test dword ptr [rcx + rdi*8 - 0x7cb70001], esp; ret 0x4801; 
0x00000000004591a9: test dword ptr [rcx - 0x77000000], ecx; ret 0xf283; 
0x000000000044d4a2: test dword ptr [rcx - 0x7d], 0xf4e801c4; cmp edi, ebx; dec dword ptr [rax + 0x29]; ret; 
0x00000000004046e7: test dword ptr [rcx], eax; add byte ptr [rax], al; mov edi, r13d; call rax; 
0x000000000041744e: test dword ptr [rdi + rcx - 0x4a], 0xfff6b485; dec dword ptr [rax - 0x77]; ret 0x1b9; 
0x000000000041090f: test dword ptr [rdi + rdi*8 - 1], ebp; jmp qword ptr [rdx - 0x1f]; 
0x0000000000453cb1: test dword ptr [rdi + rdi*8 - 1], ebx; dec dword ptr [rbp + 0x63]; in al, 0xe9; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000440abc: test dword ptr [rdi + rdi*8 - 1], edi; call qword ptr [rax + 0x6a]; 
0x000000000045b167: test dword ptr [rdi + rdi*8 - 1], edx; jmp qword ptr [rdx - 0x1f]; 
0x00000000004428c8: test dword ptr [rdi + rdi*8 - 1], esi; call qword ptr [rax + 0x6a]; 
0x0000000000450e51: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000451684: test dword ptr [rdi - 0x9fffffd], edi; ret 0xf10; 
0x000000000043193a: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004326a1: test dword ptr [rdi], 0xffc8b887; dec dword ptr [rdi]; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000432031: test dword ptr [rdi], 0xffc9b887; dec dword ptr [rdi]; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000429554: test dword ptr [rdi], 0xfffde684; call qword ptr [rbp + 0x48]; 
0x000000000041f577: test dword ptr [rdi], ebp; or byte ptr [rax], al; cdqe; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000445efc: test dword ptr [rdi], ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000042ded1: test dword ptr [rdx + 0x62fffffe], edi; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x0000000000408846: test dword ptr [rdx + rdi*8 - 0x72b30001], ebp; push rbx; and byte ptr [rcx + 0x39], cl; ret 0x820f; 
0x000000000043867c: test dword ptr [rdx - 0x37000000], esp; ret; 
0x0000000000453f68: test dword ptr [rdx], eax; add al, ch; add byte ptr [rbx + rdi*8], al; jmp qword ptr [rdi - 0x18]; 
0x000000000041e290: test dword ptr [rdx], ecx; add dword ptr [rax], eax; add byte ptr [rax - 0x8e743], al; jmp qword ptr [rax]; 
0x000000000041dc28: test dword ptr [rip - 0x39fffff3], edx; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x0000000000412a8f: test dword ptr [rip - 0x76b3fff7], esi; dec dword ptr [rax - 0x77]; ret; 
0x000000000045313e: test dword ptr [rip - 0x9ffffff], ebp; ret 0xf50; 
0x00000000004109c1: test dword ptr [rsi + 0x62fffffe], edi; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000042e25d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x2e1f0; lea rax, [rdi + 3]; ret; 
0x00000000004644bf: test dword ptr [rsi + rdi*8 - 1], ebp; dec dword ptr [rax - 0x75]; or byte ptr [r11 + 0x54891114], cl; ret; 
0x0000000000417452: test dword ptr [rsi + rsi*8 - 0x76b70001], esi; ret 0x1b9; 
0x0000000000416306: test dword ptr [rsi - 0x16000009], esp; ret 0xfffa; 
0x00000000004414e7: test dword ptr [rsi], ebp; cld; jmp qword ptr [rdi - 0x18]; 
0x00000000004170c5: test dword ptr [rsp + rax + 0x63480000], ecx; ret; 
0x000000000042a347: test eax, 0x1000827; lea rdx, [rip + 0xa1bd]; cmove rax, rdx; ret; 
0x0000000000461d9b: test eax, 0x410000; je 0x61dc8; mov eax, 0x101; syscall; 
0x000000000042a0a3: test eax, 0x48fffe20; cmovne eax, edx; ret; 
0x0000000000419b07: test eax, 0x5d000930; ret; 
0x000000000041060f: test eax, 0x840fc085; mov ebx, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000040b5a2: test eax, 0xd6ebffff; nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000042a393: test eax, 0xf7000082; ret 0; 
0x0000000000436e98: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x0000000000414be6: test eax, eax; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x0000000000411984: test eax, eax; cmove eax, edx; ret; 
0x000000000041dccf: test eax, eax; idiv bh; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x0000000000401010: test eax, eax; je 0x1016; call rax; 
0x0000000000401010: test eax, eax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000410477: test eax, eax; je 0x104d0; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000410611: test eax, eax; je 0x104d4; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000410874: test eax, eax; je 0x108b0; bsf eax, eax; add rax, rdi; ret; 
0x0000000000410a63: test eax, eax; je 0x10a70; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000410c65: test eax, eax; je 0x10cc0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000410da2: test eax, eax; je 0x10cc4; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000410f66: test eax, eax; je 0x10f80; bsf eax, eax; ret; 
0x000000000041124c: test eax, eax; je 0x11260; push rbp; mov rbp, rsp; call rax; 
0x0000000000411964: test eax, eax; je 0x11970; pop rbp; ret; 
0x00000000004119a4: test eax, eax; je 0x119b0; pop rbp; ret; 
0x0000000000401735: test eax, eax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401735: test eax, eax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; ret; 
0x0000000000401777: test eax, eax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401777: test eax, eax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; nop word ptr [rax + rax]; ret; 
0x0000000000419aff: test eax, eax; je 0x19b18; xor eax, eax; mov dword ptr [rip + 0x930a9], eax; pop rbp; ret; 
0x0000000000421c7f: test eax, eax; je 0x21c90; lea rdx, [rip + 0x60756]; add rax, rdx; ret; 
0x00000000004251da: test eax, eax; je 0x251f0; sub eax, 1; pop rbp; mov dword ptr [rip + 0x87a8c], eax; ret; 
0x00000000004267e4: test eax, eax; je 0x267f7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000427a10: test eax, eax; je 0x27a20; sub eax, 1; mov dword ptr [rip + 0x85257], eax; ret; 
0x000000000042ae52: test eax, eax; je 0x2aeb0; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042b3b4: test eax, eax; je 0x2b3c0; lea rax, [rdi + rsi]; ret; 
0x000000000042b5af: test eax, eax; je 0x2b3c0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042b634: test eax, eax; je 0x2b640; lea rax, [rdi + rsi]; ret; 
0x000000000042b82f: test eax, eax; je 0x2b640; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000431923: test eax, eax; je 0x31928; xchg edx, eax; sub eax, edx; ret; 
0x00000000004354a8: test eax, eax; je 0x354ad; xchg edx, eax; sub eax, edx; ret; 
0x0000000000435533: test eax, eax; je 0x355a0; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000435fa9: test eax, eax; je 0x35fb3; bsr eax, eax; add rax, r8; vzeroupper; ret; 
0x000000000043654a: test eax, eax; je 0x364e3; nop; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004364ed: test eax, eax; je 0x364f7; bsr eax, eax; add rax, rsi; ret; 
0x000000000043666a: test eax, eax; je 0x36540; bsr eax, eax; lea rax, [r8 + rax + 0x40]; ret; 
0x0000000000436612: test eax, eax; je 0x36660; bsr eax, eax; lea rax, [r8 + rax + 0x60]; ret; 
0x00000000004367e8: test eax, eax; je 0x367d6; bsr eax, eax; add rax, r8; ret; 
0x0000000000436828: test eax, eax; je 0x367e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000004389ec: test eax, eax; je 0x389f1; ret; 
0x000000000043e3a3: test eax, eax; je 0x3e3ad; call rax; 
0x000000000043e500: test eax, eax; je 0x3e50c; mov rdi, rbx; call rax; 
0x000000000043e69d: test eax, eax; je 0x3e6aa; mov rdi, rbx; call rax; 
0x000000000043ee22: test eax, eax; je 0x3ee37; mov rdi, rbx; call rax; 
0x000000000043f588: test eax, eax; je 0x3f594; mov rdi, rbx; call rax; 
0x0000000000448cbf: test eax, eax; je 0x48cc5; call rax; 
0x0000000000448ea9: test eax, eax; je 0x48eaf; call rax; 
0x000000000044fed0: test eax, eax; je 0x4fee0; sub eax, 1; mov dword ptr [rdi + 4], eax; ret; 
0x00000000004604f2: test eax, eax; je 0x603e4; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000460766: test eax, eax; je 0x60780; bsf eax, eax; ret; 
0x000000000046089e: test eax, eax; je 0x60787; bsf eax, eax; ret; 
0x00000000004063e4: test eax, eax; je 0x63b4; leave; ret; 
0x0000000000467d12: test eax, eax; je 0x67d80; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004684c5: test eax, eax; je 0x682c8; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000468746: test eax, eax; je 0x68548; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000046d57a: test eax, eax; je 0x6d587; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d570; ret; 
0x000000000047405b: test eax, eax; je 0x74063; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000474acc: test eax, eax; je 0x74ae0; mov edi, 1; jmp rax; 
0x0000000000474acc: test eax, eax; je 0x74ae0; mov edi, 1; jmp rax; nop word ptr [rax + rax]; ret; 
0x000000000047749b: test eax, eax; je 0x774a8; jmp 0x76900; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004774bb: test eax, eax; je 0x774c8; jmp 0x76900; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000411256: test eax, eax; jne 0x11270; xor eax, eax; pop rbp; ret; 
0x0000000000411267: test eax, eax; jne 0x11288; xor eax, eax; ret; 
0x00000000004016d0: test eax, eax; jne 0x16c0; ret; 
0x000000000041b8cd: test eax, eax; jne 0x1b8d8; pop rbp; ret; 
0x000000000042677c: test eax, eax; jne 0x26770; ret; 
0x0000000000427561: test eax, eax; jne 0x2757b; ret; 
0x00000000004291ff: test eax, eax; jne 0x294d0; mov eax, 1; ret; 
0x000000000042ba43: test eax, eax; jne 0x2bb20; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042bae5: test eax, eax; jne 0x2bb40; xor eax, eax; ret; 
0x000000000042bab5: test eax, eax; jne 0x2bb60; xor eax, eax; ret; 
0x000000000042c3a9: test eax, eax; jne 0x2c3b0; ret; 
0x000000000042c604: test eax, eax; jne 0x2c60d; ret; 
0x000000000042c655: test eax, eax; jne 0x2c66c; ret; 
0x000000000042e1e4: test eax, eax; jne 0x2e1f4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000439acc: test eax, eax; jne 0x39b40; mov rdi, qword ptr [rbp - 0x118]; mov rbx, qword ptr [rbp - 0x110]; call rbx; 
0x000000000043a2fd: test eax, eax; jne 0x3a308; pop rbp; ret; 
0x000000000043be11: test eax, eax; jne 0x3be1b; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044eb20: test eax, eax; jne 0x4eb30; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044feb7: test eax, eax; jne 0x4fed4; mov qword ptr [rdi + 8], 0; mov dword ptr [rdi], 0; ret; 
0x0000000000405266: test eax, eax; jne 0x5270; ret; 
0x00000000004583da: test eax, eax; jne 0x583f0; mov ecx, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], ecx; cmove eax, ecx; ret; 
0x00000000004588b6: test eax, eax; jne 0x588c0; xend; xor eax, eax; ret; 
0x0000000000468993: test eax, eax; jne 0x68a70; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000468a35: test eax, eax; jne 0x68aa0; xor eax, eax; ret; 
0x0000000000468a05: test eax, eax; jne 0x68ae0; xor eax, eax; ret; 
0x000000000046d561: test eax, eax; jne 0x6d57e; ret; 
0x000000000046d628: test eax, eax; jne 0x6d60a; ret; 
0x000000000046d7ba: test eax, eax; jne 0x6d7c8; jmp 0x1b900; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000047718b: test eax, eax; jne 0x77190; ret; 
0x000000000047720b: test eax, eax; jne 0x77210; ret; 
0x0000000000477286: test eax, eax; jne 0x77290; ret; 
0x00000000004774d6: test eax, eax; jne 0x774e0; ret; 
0x00000000004090d3: test eax, eax; jne 0x902d; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004292c1: test eax, eax; js 0x29570; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000040b802: test eax, eax; lea rdx, [rip + 0x3f35]; lea rax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x000000000040b870: test eax, eax; lea rdx, [rip + 0x4107]; lea rax, [rip + 0x40b0]; cmovne rax, rdx; ret; 
0x000000000040b898: test eax, eax; lea rdx, [rip + 0x481f]; lea rax, [rip + 0x47b8]; cmovne rax, rdx; ret; 
0x000000000040b820: test eax, eax; lea rdx, [rip + 0x4a77]; lea rax, [rip + 0x4ad0]; cmove rax, rdx; ret; 
0x0000000000437c8f: test eax, eax; mov qword ptr [rbp - 0xf0], rax; je 0x380de; mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x0000000000412717: test eax, eax; sete al; ret; 
0x00000000004591da: test eax, eax; setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000426253: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000414185: test eax, esi; add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x000000000041d7f9: test eax, esi; idiv bh; call qword ptr [rax]; 
0x000000000041da88: test eax, esi; idiv bh; dec dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041d94d: test eax, esi; idiv bh; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x00000000004534bb: test eax, esp; add eax, dword ptr [rax]; add byte ptr [rcx + 0xf], al; mov dh, 0x56; or al, 0xf6; ret 0xf40; 
0x0000000000441daf: test ebp, ecx; add eax, dword ptr [rax]; add byte ptr [rcx - 0x75], cl; add ecx, dword ptr [rax + 0x63]; rol byte ptr [rcx - 0xa], cl; ret 0x7504; 
0x00000000004205f3: test ebp, esp; or eax, 0x8d480000; mov r14d, 0xfffb4885; jmp qword ptr [rax]; 
0x000000000042ba20: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000401643: test ebx, ebx; jne 0x1630; pop rbx; pop r12; pop rbp; ret; 
0x000000000042715c: test ebx, ebx; jne 0x27140; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043c4d5: test ebx, ebx; jne 0x3c4db; call rax; 
0x000000000043e45c: test ebx, ebx; jne 0x3e445; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044ae94: test ebx, ebx; jne 0x4ae80; pop rbx; pop r12; pop rbp; ret; 
0x0000000000468a08: test ebx, edx; add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000042a2bf: test ecx, 0x40000000; je 0x2a299; ret; 
0x000000000042e222: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000429202: test ecx, ecx; add al, byte ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x000000000041914b: test ecx, ecx; je 0x19158; mov qword ptr [rsi], rax; ret; 
0x0000000000404eca: test ecx, ecx; je 0x4ea0; call rcx; 
0x000000000042b537: test ecx, ecx; jne 0x2b470; sub al, 0x60; jae 0x2b44e; xor eax, eax; ret; 
0x000000000042b7b7: test ecx, ecx; jne 0x2b6f0; sub al, 0x60; jae 0x2b6ce; xor eax, eax; ret; 
0x000000000042c5d6: test ecx, ecx; jne 0x2c4a4; ret; 
0x000000000042c49f: test ecx, ecx; jne 0x2c4aa; ret; 
0x000000000045009a: test ecx, ecx; jne 0x500a0; ret; 
0x0000000000466cce: test ecx, ecx; jne 0x66cd8; ret; 
0x0000000000468439: test ecx, ecx; jne 0x68384; sub al, 0x18; jae 0x6835e; xor eax, eax; ret; 
0x00000000004686c7: test ecx, ecx; jne 0x68604; sub al, 0x18; jae 0x685de; xor eax, eax; ret; 
0x0000000000453e44: test edi, ebp; add byte ptr [rax], al; add byte ptr [rbx - 0xa34b], cl; dec dword ptr [rbp + 0x63480156]; ror byte ptr [rax + 0x39], cl; ret 0x9c0f; 
0x0000000000442e41: test edi, ebx; add byte ptr [rax], al; add dh, dh; ret; 
0x0000000000411b5b: test edi, edi; je 0x11ba0; mov r10d, r12d; mov rdi, rbx; mov eax, 9; syscall; 
0x00000000004395d5: test edi, edi; je 0x395de; test rsi, rsi; jne 0x395e0; ret; 
0x00000000004395f5: test edi, edi; je 0x395fe; test rsi, rsi; jne 0x39600; ret; 
0x0000000000439615: test edi, edi; je 0x39620; jmp 0x38b80; nop; ret; 
0x0000000000448706: test edi, edi; je 0x48720; mov rsi, qword ptr [rip + 0x6465f]; jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000477185: test edi, edi; je 0x7718f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77190; ret; 
0x0000000000477205: test edi, edi; je 0x7720f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77210; ret; 
0x000000000042a1c7: test edx, 0x40000000; je 0x2a17e; ret; 
0x000000000042a237: test edx, 0x40000000; je 0x2a211; ret; 
0x000000000042a397: test edx, 0x40000000; je 0x2a36f; ret; 
0x000000000042a407: test edx, 0x40000000; je 0x2a3d8; ret; 
0x000000000042a477: test edx, 0x40000000; je 0x2a448; ret; 
0x0000000000459aa7: test edx, 0x40000000; je 0x59a7f; ret; 
0x0000000000459b17: test edx, 0x40000000; je 0x59ace; ret; 
0x0000000000460277: test edx, 0x40000000; je 0x6024f; ret; 
0x00000000004602e7: test edx, 0x40000000; je 0x602bf; ret; 
0x000000000040b917: test edx, 0x40000000; je 0xb8e8; ret; 
0x000000000040b987: test edx, 0x40000000; je 0xb958; ret; 
0x00000000004778b5: test edx, edx; add al, byte ptr [rax]; add byte ptr [rcx + 0xf], al; mov bh, 0x55; and byte ptr [rsi - 9], ah; ret 0x7f8; 
0x0000000000458a27: test edx, edx; cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x00000000004110d6: test edx, edx; je 0x110de; bsf eax, edx; ret; 
0x000000000041117b: test edx, edx; je 0x11190; bsf rax, rdx; ret; 
0x000000000041111e: test edx, edx; je 0x111a0; bsf rax, rdx; ret; 
0x00000000004191c3: test edx, edx; je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004191c3: test edx, edx; je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; nop; ret; 
0x0000000000419b89: test edx, edx; je 0x19bbb; mov rbx, qword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x000000000042cbfe: test edx, edx; je 0x2cc09; vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000042ce41: test edx, edx; je 0x2ce4e; vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x0000000000435e2a: test edx, edx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000435dba: test edx, edx; je 0x35e60; bsf rax, rdx; ret; 
0x0000000000447ea5: test edx, edx; je 0x47ec3; mov rdi, rbx; call rdx; 
0x000000000044915f: test edx, edx; je 0x49165; call rdx; 
0x0000000000458548: test edx, edx; je 0x5854f; mov byte ptr [rsi], 0; ret; 
0x000000000045f2dd: test edx, edx; je 0x5f2e8; vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045f510: test edx, edx; je 0x5f51d; vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000045ffa2: test edx, edx; je 0x5ff80; mov ecx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000460b26: test edx, edx; je 0x60b32; bsf eax, edx; shr rax, 2; ret; 
0x0000000000460bcb: test edx, edx; je 0x60be0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000460b72: test edx, edx; je 0x60bf0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004616fa: test edx, edx; je 0x61720; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046168f: test edx, edx; je 0x61730; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004182ff: test edx, edx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x0000000000423445: test edx, edx; jne 0x23450; xor eax, eax; ret; 
0x0000000000425baf: test edx, edx; jne 0x25ba0; ret; 
0x0000000000435bd7: test edx, edx; jne 0x35b74; mov eax, esi; ret; 
0x000000000043cb76: test edx, edx; jne 0x3cb8a; mov qword ptr [rbp - 0xb0], r11; call rax; 
0x000000000043d2d9: test edx, edx; jne 0x3d2df; call rax; 
0x000000000043d417: test edx, edx; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000043e01e: test edx, edx; jne 0x3e025; mov qword ptr [rbx], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000045572f: test edx, edx; jne 0x55720; ret; 
0x00000000004614a2: test edx, edx; jne 0x61440; mov eax, esi; ret; 
0x00000000004666c9: test edx, edx; jne 0x666f0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000046682a: test edx, edx; jne 0x66890; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x000000000046d583: test edx, edx; jne 0x6d570; ret; 
0x00000000004590c3: test edx, edx; setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000046c905: test esi, edi; add byte ptr [rax], al; add cl, cl; mov rax, r10; ret; 
0x000000000042036d: test esi, edi; or al, byte ptr [rax]; add byte ptr [rax - 0x4b743], al; jmp qword ptr [rax]; 
0x000000000042e215: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000413b46: test esi, esi; je 0x13b50; mov eax, r8d; ret; 
0x0000000000448744: test esi, esi; je 0x48750; cmp esi, 3; je 0x48750; ret; 
0x00000000004671a1: test esi, esi; je 0x671b8; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000004679d0: test esi, esi; je 0x67a50; mov eax, eax; ret; 
0x0000000000435d25: test esi, esi; jne 0x35d2d; xor rax, rax; ret; 
0x00000000004395da: test esi, esi; jne 0x395e0; ret; 
0x00000000004395fa: test esi, esi; jne 0x39600; ret; 
0x000000000043ca4b: test esi, esi; jne 0x3ca51; call rax; 
0x000000000045655b: test esi, esi; jne 0x565b0; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004615e5: test esi, esi; jne 0x615ed; xor rax, rax; ret; 
0x0000000000466756: test esi, esi; jne 0x66788; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x0000000000429fd8: test esi, esi; lea rdx, [rip + 0x161f]; lea rax, [rip + 0x1398]; cmovne rax, rdx; ret; 
0x0000000000467cb8: test esi, esi; lea rdx, [rip + 0x83f]; lea rax, [rip + 0x5b8]; cmovne rax, rdx; ret; 
0x000000000042e22f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000044ede0: test esp, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000044b158: test esp, esp; jne 0x4b130; pop rbx; pop r12; pop rbp; ret; 
0x000000000043d416: test r10d, r10d; jne 0x3d42b; mov qword ptr [rbp - 0xa0], r11; call rax; 
0x000000000043c4d4: test r11d, r11d; jne 0x3c4db; call rax; 
0x000000000044b157: test r12, r12; jne 0x4b130; pop rbx; pop r12; pop rbp; ret; 
0x0000000000437559: test r12b, r12b; jne 0x3759e; pop rbx; pop r12; pop rbp; ret; 
0x0000000000403eed: test r13b, 2; je 0x3f04; mov esi, 1; mov edi, 0x5001; mov eax, 0x9e; syscall; 
0x0000000000431922: test r8d, r8d; je 0x31928; xchg edx, eax; sub eax, edx; ret; 
0x00000000004354a7: test r8d, r8d; je 0x354ad; xchg edx, eax; sub eax, edx; ret; 
0x00000000004591d9: test r8d, r8d; setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000041a957: test r9b, r9b; jne 0x1a8b0; ret; 
0x000000000040100f: test rax, rax; je 0x1016; call rax; 
0x000000000040100f: test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x000000000041124b: test rax, rax; je 0x11260; push rbp; mov rbp, rsp; call rax; 
0x0000000000401734: test rax, rax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401734: test rax, rax; je 0x1740; mov edi, 0x4a7aa8; jmp rax; ret; 
0x0000000000401776: test rax, rax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; 
0x0000000000401776: test rax, rax; je 0x1788; mov edi, 0x4a7aa8; jmp rax; nop word ptr [rax + rax]; ret; 
0x0000000000419afe: test rax, rax; je 0x19b18; xor eax, eax; mov dword ptr [rip + 0x930a9], eax; pop rbp; ret; 
0x00000000004267e3: test rax, rax; je 0x267f7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x00000000004389eb: test rax, rax; je 0x389f1; ret; 
0x000000000043e3a2: test rax, rax; je 0x3e3ad; call rax; 
0x000000000043e4ff: test rax, rax; je 0x3e50c; mov rdi, rbx; call rax; 
0x000000000043e69c: test rax, rax; je 0x3e6aa; mov rdi, rbx; call rax; 
0x000000000043ee21: test rax, rax; je 0x3ee37; mov rdi, rbx; call rax; 
0x000000000043f587: test rax, rax; je 0x3f594; mov rdi, rbx; call rax; 
0x0000000000448cbe: test rax, rax; je 0x48cc5; call rax; 
0x0000000000448ea8: test rax, rax; je 0x48eaf; call rax; 
0x00000000004063e3: test rax, rax; je 0x63b4; leave; ret; 
0x000000000046d579: test rax, rax; je 0x6d587; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x6d570; ret; 
0x000000000047405a: test rax, rax; je 0x74063; mov rax, qword ptr [rbp - 0x10]; leave; ret; 
0x0000000000474acb: test rax, rax; je 0x74ae0; mov edi, 1; jmp rax; 
0x0000000000474acb: test rax, rax; je 0x74ae0; mov edi, 1; jmp rax; nop word ptr [rax + rax]; ret; 
0x00000000004016cf: test rax, rax; jne 0x16c0; ret; 
0x000000000042677b: test rax, rax; jne 0x26770; ret; 
0x0000000000427560: test rax, rax; jne 0x2757b; ret; 
0x000000000046d560: test rax, rax; jne 0x6d57e; ret; 
0x000000000046d627: test rax, rax; jne 0x6d60a; ret; 
0x00000000004090d2: test rax, rax; jne 0x902d; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000437c8e: test rax, rax; mov qword ptr [rbp - 0xf0], rax; je 0x380de; mov rdi, qword ptr [rbp - 0xf0]; mov eax, 0x4f; syscall; 
0x0000000000401642: test rbx, rbx; jne 0x1630; pop rbx; pop r12; pop rbp; ret; 
0x000000000042715b: test rbx, rbx; jne 0x27140; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000043e45b: test rbx, rbx; jne 0x3e445; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044ae93: test rbx, rbx; jne 0x4ae80; pop rbx; pop r12; pop rbp; ret; 
0x000000000041914a: test rcx, rcx; je 0x19158; mov qword ptr [rsi], rax; ret; 
0x0000000000404ec9: test rcx, rcx; je 0x4ea0; call rcx; 
0x0000000000411b5a: test rdi, rdi; je 0x11ba0; mov r10d, r12d; mov rdi, rbx; mov eax, 9; syscall; 
0x00000000004395d4: test rdi, rdi; je 0x395de; test rsi, rsi; jne 0x395e0; ret; 
0x00000000004395f4: test rdi, rdi; je 0x395fe; test rsi, rsi; jne 0x39600; ret; 
0x0000000000439614: test rdi, rdi; je 0x39620; jmp 0x38b80; nop; ret; 
0x0000000000448705: test rdi, rdi; je 0x48720; mov rsi, qword ptr [rip + 0x6465f]; jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000477184: test rdi, rdi; je 0x7718f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77190; ret; 
0x0000000000477204: test rdi, rdi; je 0x7720f; mov eax, dword ptr [rdi]; test eax, eax; jne 0x77210; ret; 
0x0000000000458a26: test rdx, rdx; cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000041117a: test rdx, rdx; je 0x11190; bsf rax, rdx; ret; 
0x000000000041111d: test rdx, rdx; je 0x111a0; bsf rax, rdx; ret; 
0x00000000004191c2: test rdx, rdx; je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; 
0x00000000004191c2: test rdx, rdx; je 0x191d0; lea rdi, [r9 + rcx + 0x58]; jmp rdx; nop; ret; 
0x0000000000419b88: test rdx, rdx; je 0x19bbb; mov rbx, qword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x0000000000435e29: test rdx, rdx; je 0x35e50; bsf rax, rdx; ret; 
0x0000000000435db9: test rdx, rdx; je 0x35e60; bsf rax, rdx; ret; 
0x0000000000447ea4: test rdx, rdx; je 0x47ec3; mov rdi, rbx; call rdx; 
0x000000000044915e: test rdx, rdx; je 0x49165; call rdx; 
0x0000000000458547: test rdx, rdx; je 0x5854f; mov byte ptr [rsi], 0; ret; 
0x0000000000460bca: test rdx, rdx; je 0x60be0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000460b71: test rdx, rdx; je 0x60bf0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004616f9: test rdx, rdx; je 0x61720; bsf rax, rdx; shr rax, 2; ret; 
0x000000000046168e: test rdx, rdx; je 0x61730; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004182fe: test rdx, rdx; jne 0x182e0; mov qword ptr [rip + 0x8b686], rax; ret; 
0x0000000000423444: test rdx, rdx; jne 0x23450; xor eax, eax; ret; 
0x0000000000425bae: test rdx, rdx; jne 0x25ba0; ret; 
0x000000000045572e: test rdx, rdx; jne 0x55720; ret; 
0x00000000004666c8: test rdx, rdx; jne 0x666f0; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000466829: test rdx, rdx; jne 0x66890; mov dword ptr [rdi], 0; mov eax, 2; pop rbp; ret; 
0x000000000046d582: test rdx, rdx; jne 0x6d570; ret; 
0x0000000000413b45: test rsi, rsi; je 0x13b50; mov eax, r8d; ret; 
0x0000000000435d24: test rsi, rsi; jne 0x35d2d; xor rax, rax; ret; 
0x00000000004395d9: test rsi, rsi; jne 0x395e0; ret; 
0x00000000004395f9: test rsi, rsi; jne 0x39600; ret; 
0x00000000004615e4: test rsi, rsi; jne 0x615ed; xor rax, rax; ret; 
0x0000000000466755: test rsi, rsi; jne 0x66788; mov dword ptr [rdx], 0; mov eax, 1; pop rbp; ret; 
0x0000000000472836: test sil, sil; js 0x72820; jmp 0x727bb; ret; 
0x0000000000473336: test sil, sil; js 0x73320; jmp 0x732bb; ret; 
0x0000000000440908: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000042b5b7: tzcnt eax, eax; add rax, rdi; ret; 
0x000000000041047b: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000041067b: tzcnt eax, eax; add rax, rdi; xtest; jne 0x1068b; vzeroupper; ret; 
0x0000000000410619: tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000042ae80: tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ae90: tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042aea0: tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042b5c3: tzcnt eax, eax; cmp edx, eax; jbe 0x2b5c0; add rax, rdi; ret; 
0x000000000042b843: tzcnt eax, eax; cmp edx, eax; jbe 0x2b840; add rax, rdi; ret; 
0x00000000004682b1: tzcnt eax, eax; cmp edx, eax; jbe 0x682c0; lea rax, [rdi + rax*4]; ret; 
0x00000000004684dd: tzcnt eax, eax; cmp edx, eax; jbe 0x684d6; lea rax, [rdi + rax*4]; ret; 
0x0000000000468531: tzcnt eax, eax; cmp edx, eax; jbe 0x68540; lea rax, [rdi + rax*4]; ret; 
0x000000000046875e: tzcnt eax, eax; cmp edx, eax; jbe 0x68757; lea rax, [rdi + rax*4]; ret; 
0x00000000004357c0: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000042d8df: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000042afe0: tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000043581b: tzcnt eax, eax; jmp 0x35ab9; xor eax, eax; ret; 
0x0000000000460d50: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d40: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d30: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x0000000000460d10: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x00000000004684cd: tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000042bc80: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042bca0: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042bc60: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000460ff0: tzcnt eax, eax; shr eax, 2; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000046105b: tzcnt eax, eax; shr eax, 2; jmp 0x6136c; xor eax, eax; ret; 
0x000000000046034d: tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x00000000004606fa: tzcnt eax, eax; shr eax, 2; xtest; jne 0x6070a; vzeroupper; ret; 
0x0000000000435590: tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x0000000000435580: tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x0000000000435570: tzcnt eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x0000000000435560: tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x0000000000410c90: tzcnt eax, eax; sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000410ca0: tzcnt eax, eax; sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000410cb0: tzcnt eax, eax; sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000410c80: tzcnt eax, eax; sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000042aff0: tzcnt eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042b070: tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x00000000004604c0: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105e0: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x00000000004604a0: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000410d70: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000435750: tzcnt eax, eax; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000435740: tzcnt eax, eax; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000042ae60: tzcnt eax, eax; vzeroupper; cmp edx, eax; jle 0x2ae7d; add rax, rdi; ret; 
0x0000000000410c69: tzcnt eax, eax; vzeroupper; ret; 
0x0000000000410f1a: tzcnt eax, eax; xtest; jne 0x10f27; vzeroupper; ret; 
0x0000000000432ad4: tzcnt ecx, ecx; add ecx, r9d; cmp rdx, rcx; ja 0x32ac1; xor eax, eax; ret; 
0x000000000042b459: tzcnt ecx, ecx; cmp al, cl; jae 0x2b467; xor eax, eax; ret; 
0x000000000042b6d9: tzcnt ecx, ecx; cmp al, cl; jae 0x2b6e7; xor eax, eax; ret; 
0x000000000046836d: tzcnt ecx, ecx; cmp al, cl; jae 0x6837b; xor eax, eax; ret; 
0x00000000004685ed: tzcnt ecx, ecx; cmp al, cl; jae 0x685fb; xor eax, eax; ret; 
0x000000000042b3f0: tzcnt ecx, ecx; cmp al, cl; jbe 0x2b3bd; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000042b670: tzcnt ecx, ecx; cmp al, cl; jbe 0x2b63d; lea rax, [rdi + rcx + 0x40]; ret; 
0x0000000000468302: tzcnt ecx, ecx; cmp al, cl; jbe 0x682c0; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000468582: tzcnt ecx, ecx; cmp al, cl; jbe 0x68540; lea rax, [rdi + rcx*4 + 0x40]; ret; 
0x0000000000432933: tzcnt ecx, ecx; lea ecx, [rax + rcx - 0x20]; cmp edx, ecx; ja 0x32917; xor eax, eax; ret; 
0x000000000042e4d5: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx ecx, byte ptr [rsi + rcx + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042e4f0: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx ecx, byte ptr [rsi + rcx + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042bcdb: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042e4c3: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; vzeroupper; ret; 
0x000000000042afab: tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000460485: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004105b7: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000040d8e5: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000042d047: ud0; ret; 
0x000000000040f864: vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000042c9b4: vmovd dword ptr [rdi], xmm0; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f0b4: vmovd dword ptr [rdi], xmm0; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000040f860: vmovd dword ptr [rdi], xmm0; vmovd dword ptr [rdi + rdx - 4], xmm0; ret; 
0x000000000042ce84: vmovd dword ptr [rdi], xmm16; mov dword ptr [rax - 3], ecx; ret; 
0x000000000045f554: vmovd dword ptr [rdi], xmm16; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000042cc02: vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rax], 0; ret; 
0x000000000045f2e1: vmovd ecx, xmm0; mov word ptr [rdi], cx; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000042c998: vmovd ecx, xmm0; mov word ptr [rdi], cx; nop; mov byte ptr [rax], 0; ret; 
0x000000000045f097: vmovd ecx, xmm0; mov word ptr [rdi], cx; nop; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000042ce45: vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rax], 0; ret; 
0x000000000045f514: vmovd esi, xmm16; mov word ptr [rdi], si; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000040c9f1: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000040baa2: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000040c9f5: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000040baa6: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000042c9c0: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000045f0c0: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000042ce52: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000045f522: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0xf]; vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000040c9fe: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000042c9ca: vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000040f844: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040bab0: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000045f0ca: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000040c9fa: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000042c9c6: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000040f840: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; ret; 
0x000000000040baac: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000045f0c6: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000040fbd9: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000040fbdd: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000040c9dd: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000040c9e1: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000042cb63: vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000045f249: vmovdqu ymm1, ymmword ptr [rsi + rcx + 0x22]; vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; vzeroupper; ret; 
0x000000000042cb43: vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x000000000045f236: vmovdqu ymm1, ymmword ptr [rsi + rcx + 2]; vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; vzeroupper; ret; 
0x000000000042cb26: vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x000000000045f223: vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x000000000045f463: vmovdqu ymm1, ymmword ptr [rsi + rcx - 0x1e]; vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; xtest; jne 0x5f478; vzeroupper; ret; 
0x000000000042cb0e: vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x000000000045f20e: vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000040b9ef: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000040c9bd: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000040bceb: vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040bce6: vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040c9ea: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000040c9d1: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000040c9cb: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000040bc26: vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000040f7e4: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x000000000040c9c6: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000040bae1: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000040bc97: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000040f7e9: vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x000000000040fa29: vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; xtest; jne 0xfa3c; vzeroupper; ret; 
0x000000000040bc9c: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000045f206: vmovdqu ymmword ptr [rdi + 0x41], ymm2; bsf edx, edx; vmovdqu ymm1, ymmword ptr [rsi + rdx + 0x42]; vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000040f7ee: vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x000000000040fa2e: vmovdqu ymmword ptr [rdi + 0x60], ymm0; xtest; jne 0xfa3c; vzeroupper; ret; 
0x000000000040bca1: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000042cb69: vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; lea rax, [rcx + rdi + 0x41]; vzeroupper; ret; 
0x000000000045f24f: vmovdqu ymmword ptr [rdi + rcx + 0x22], ymm1; vzeroupper; ret; 
0x000000000042cb49: vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; lea rax, [rcx + rdi + 0x21]; vzeroupper; ret; 
0x000000000045f23c: vmovdqu ymmword ptr [rdi + rcx + 2], ymm1; vzeroupper; ret; 
0x000000000042cb2c: vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; lea rax, [rcx + rdi + 1]; vzeroupper; ret; 
0x000000000045f229: vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; vzeroupper; ret; 
0x000000000045f469: vmovdqu ymmword ptr [rdi + rcx - 0x1e], ymm1; xtest; jne 0x5f478; vzeroupper; ret; 
0x000000000042cb14: vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; lea rax, [rdx + rdi + 0x61]; vzeroupper; ret; 
0x000000000045f214: vmovdqu ymmword ptr [rdi + rdx + 0x42], ymm1; vzeroupper; ret; 
0x000000000040f710: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000040f764: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000040b9f9: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000040c1e5: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0xc1f4; vzeroupper; ret; 
0x000000000040bae6: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000040bf24: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000040bb59: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000040bf1e: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000040baec: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000040bb5f: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000040bf18: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000040bb65: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000040bf12: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x000000000040bb6b: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000040f775: vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x000000000040f770: vmovdqu ymmword ptr [rdi - 0x40], ymm0; vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x000000000040c9e6: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000040f7e0: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x000000000040c9c2: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000040badd: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000040f760: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vzeroupper; ret; 
0x000000000040b9f5: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000040c1e1: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; jne 0xc1f4; vzeroupper; ret; 
0x000000000040f716: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000040fbcf: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000040f8b3: vmovdqu ymmword ptr [rdx + 0x20], ymm0; vmovdqu ymmword ptr [rdx + 0x40], ymm0; vmovdqu ymmword ptr [rdx + 0x60], ymm0; vzeroupper; ret; 
0x000000000040bc1d: vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000040f8b8: vmovdqu ymmword ptr [rdx + 0x40], ymm0; vmovdqu ymmword ptr [rdx + 0x60], ymm0; vzeroupper; ret; 
0x000000000040bc18: vmovdqu ymmword ptr [rdx + 0x40], ymm6; vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000040f8bd: vmovdqu ymmword ptr [rdx + 0x60], ymm0; vzeroupper; ret; 
0x000000000040bca6: vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000040f8af: vmovdqu ymmword ptr [rdx], ymm0; vmovdqu ymmword ptr [rdx + 0x20], ymm0; vmovdqu ymmword ptr [rdx + 0x40], ymm0; vmovdqu ymmword ptr [rdx + 0x60], ymm0; vzeroupper; ret; 
0x000000000040bc22: vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000040fbd3: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000040ff56: vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000040ff50: vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000042ce58: vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rax - 0xf], xmm1; ret; 
0x000000000045f528: vmovdqu64 xmmword ptr [rdi], xmm16; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm1; ret; 
0x000000000045f72d: vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 0x21]; vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x000000000045f713: vmovdqu64 ymm16, ymmword ptr [rsi + rcx + 1]; vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000042d039: vmovdqu64 ymm16, ymmword ptr [rsi + rcx - 0x20]; vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x000000000040d155: vmovdqu64 ymm16, ymmword ptr [rsi]; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000042c5f0: vmovdqu64 ymm17, ymmword ptr [rsi + rdx + 0x60]; vpcmpnequb k1, ymm17, ymmword ptr [rdx + 0x60]; kmovd eax, k1; test eax, eax; jne 0x2c60d; ret; 
0x000000000040d15b: vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040dec2: vmovdqu64 ymm19, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000040da19: vmovdqu64 ymm19, ymmword ptr [rsi + rdx - 0x40]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000040dc75: vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040dc6f: vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000040ff47: vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000040ff41: vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000041016a: vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000410171: vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000410178: vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000040db9e: vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000410164: vmovdqu64 ymmword ptr [rcx], ymm16; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000040da27: vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000040dc29: vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000040dc30: vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000040daa8: vmovdqu64 ymmword ptr [rdi + 0x60], ymm19; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm20; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000040dc37: vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000042d07e: vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; lea rax, [rdi + rcx + 0x40]; ret; 
0x000000000045f738: vmovdqu64 ymmword ptr [rdi + rcx + 0x21], ymm16; ret; 
0x000000000042d09e: vmovdqu64 ymmword ptr [rdi + rcx + 0x61], ymm16; lea rax, [rdi + rcx + 0x80]; ret; 
0x000000000045f752: vmovdqu64 ymmword ptr [rdi + rcx + 0x61], ymm16; ret; 
0x000000000042d05e: vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; lea rax, [rdi + rcx + 0x20]; ret; 
0x000000000045f71e: vmovdqu64 ymmword ptr [rdi + rcx + 1], ymm16; ret; 
0x000000000042d041: vmovdqu64 ymmword ptr [rdi + rcx - 0x20], ymm16; ret; 
0x00000000004100df: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x000000000041007d: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000040d169: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000040da2e: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000040dee2: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000040daaf: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm20; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x00000000004100e8: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x000000000040deda: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000040da36: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000040dab7: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000040ded2: vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000040dabf: vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000040deca: vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000040dac7: vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000410085: vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000040da21: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x00000000004100d9: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; ret; 
0x000000000040d163: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000041022d: vmovdqu64 ymmword ptr [rdx + 0x20], ymm16; vmovdqu64 ymmword ptr [rdx + 0x40], ymm16; vmovdqu64 ymmword ptr [rdx + 0x60], ymm16; ret; 
0x000000000040db91: vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000410234: vmovdqu64 ymmword ptr [rdx + 0x40], ymm16; vmovdqu64 ymmword ptr [rdx + 0x60], ymm16; ret; 
0x000000000040db8a: vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000041023b: vmovdqu64 ymmword ptr [rdx + 0x60], ymm16; ret; 
0x000000000040db83: vmovdqu64 ymmword ptr [rdx + 0x60], ymm21; vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000040dc3e: vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000410227: vmovdqu64 ymmword ptr [rdx], ymm16; vmovdqu64 ymmword ptr [rdx + 0x20], ymm16; vmovdqu64 ymmword ptr [rdx + 0x40], ymm16; vmovdqu64 ymmword ptr [rdx + 0x60], ymm16; ret; 
0x000000000040db98: vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000040d074: vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d647: vmovdqu64 zmm19, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000040d18b: vmovdqu64 zmm19, zmmword ptr [rsi + rdx - 0x80]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000040d401: vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000040fee8: vmovdqu64 zmmword ptr [rcx + 0x100], zmm16; vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x000000000040feef: vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x000000000040fef6: vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x000000000040fefd: vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x000000000040d324: vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000040d199: vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000040d228: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm19; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm20; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000040d3c1: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000040d64f: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000040d247: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000040fe62: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040fe00: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000040d082: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d1a0: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000040d667: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000040d22f: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm20; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000040fe6b: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040d65f: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000040d1a8: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000040d237: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000040d657: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000040d23f: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000040fe08: vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000040d193: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000040fe5c: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; ret; 
0x000000000040d07c: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040ffc5: vmovdqu64 zmmword ptr [rdx + 0x40], zmm16; vmovdqu64 zmmword ptr [rdx + 0x80], zmm16; vmovdqu64 zmmword ptr [rdx + 0xc0], zmm16; ret; 
0x000000000040d317: vmovdqu64 zmmword ptr [rdx + 0x40], zmm23; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000040ffcc: vmovdqu64 zmmword ptr [rdx + 0x80], zmm16; vmovdqu64 zmmword ptr [rdx + 0xc0], zmm16; ret; 
0x000000000040ffd3: vmovdqu64 zmmword ptr [rdx + 0xc0], zmm16; ret; 
0x000000000040d3c8: vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000040ffbf: vmovdqu64 zmmword ptr [rdx], zmm16; vmovdqu64 zmmword ptr [rdx + 0x40], zmm16; vmovdqu64 zmmword ptr [rdx + 0x80], zmm16; vmovdqu64 zmmword ptr [rdx + 0xc0], zmm16; ret; 
0x000000000040d31e: vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000042c398: vmovdqu8 ymm18 {k2} {z}, ymmword ptr [rsi]; vpcmpnequb k1 {k2}, ymm18, ymmword ptr [rdi]; kmovd eax, k1; test eax, eax; jne 0x2c3b0; ret; 
0x00000000004100b0: vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000040fe33: vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000040f854: vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x000000000042c9d5: vmovq qword ptr [rdi], xmm0; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f0d6: vmovq qword ptr [rdi], xmm0; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000040f850: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rdi + rdx - 8], xmm0; ret; 
0x000000000040fbe8: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000042ce69: vmovq qword ptr [rdi], xmm16; mov qword ptr [rax - 7], rcx; ret; 
0x000000000045f53a: vmovq qword ptr [rdi], xmm16; mov qword ptr [rdi + rdx - 7], rcx; ret; 
0x000000000040fbec: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000040ccf9: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd00: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040cd07: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000040c951: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040cba0: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c9a2: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040c966: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040cb99: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c99b: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040c95f: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040cb92: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000040c958: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000040c994: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000040fba1: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040ce54: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce5b: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce62: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040ce69: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000040fbbc: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fd7e: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd85: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fd8c: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000040fce1: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fce8: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fcef: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000040fb8e: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb87: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000040fb80: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000435bcc: vpcmpeqb k0, ymm16, ymmword ptr [rdi + 0x80]; kmovd edx, k0; test edx, edx; jne 0x35b74; mov eax, esi; ret; 
0x000000000042bf4a: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bc60; ret; 
0x000000000042c34a: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c060; ret; 
0x000000000042bdea: vpcmpeqb ymm1, ymm1, ymmword ptr [rdi + rdx - 0x20]; vpmovmskb eax, ymm1; inc eax; jne 0x2be40; vzeroupper; ret; 
0x000000000042bdb6: vpcmpeqb ymm4, ymm4, ymmword ptr [rdx + 0x60]; vpmovmskb eax, ymm4; inc eax; jne 0x2be04; vzeroupper; ret; 
0x0000000000461497: vpcmpeqd k0, ymm16, ymmword ptr [rdi + 0x80]; kmovd edx, k0; test edx, edx; jne 0x61440; mov eax, esi; ret; 
0x000000000042c39e: vpcmpnequb k1 {k2}, ymm18, ymmword ptr [rdi]; kmovd eax, k1; test eax, eax; jne 0x2c3b0; ret; 
0x000000000042c5f8: vpcmpnequb k1, ymm17, ymmword ptr [rdx + 0x60]; kmovd eax, k1; test eax, eax; jne 0x2c60d; ret; 
0x000000000042bf4e: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bc60; ret; 
0x000000000042c34e: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2c060; ret; 
0x000000000042bdf0: vpmovmskb eax, ymm1; inc eax; jne 0x2be40; vzeroupper; ret; 
0x0000000000410c61: vpmovmskb eax, ymm1; test eax, eax; je 0x10cc0; tzcnt eax, eax; vzeroupper; ret; 
0x000000000042bdbb: vpmovmskb eax, ymm4; inc eax; jne 0x2be04; vzeroupper; ret; 
0x000000000042c5c5: vpternlogd ymm20, ymm19, ymm18, 0xfe; vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x2c4a4; ret; 
0x000000000042c48e: vpternlogd ymm20, ymm19, ymm18, 0xfe; vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x2c4aa; ret; 
0x000000000042c5cc: vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x2c4a4; ret; 
0x000000000042c495: vptestmb k1, ymm20, ymm20; kmovd ecx, k1; test ecx, ecx; jne 0x2c4aa; ret; 
0x000000000040c1f4: vzeroall; ret; 
0x0000000000468490: vzeroupper; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000042b570: vzeroupper; bsf edx, edx; lea rax, [rdi + rdx + 0x20]; ret; 
0x000000000042b580: vzeroupper; bsf edx, edx; lea rax, [rdi + rdx]; ret; 
0x000000000042ae64: vzeroupper; cmp edx, eax; jle 0x2ae7d; add rax, rdi; ret; 
0x000000000042b11e: vzeroupper; cmp edx, eax; jle 0x2b13b; add rax, rdi; ret; 
0x0000000000467d27: vzeroupper; cmp edx, eax; jle 0x67d3f; add rax, rdi; ret; 
0x0000000000468001: vzeroupper; cmp edx, eax; jle 0x6801b; add rax, rdi; ret; 
0x000000000040b9ff: vzeroupper; ret; 
0x000000000042b8d1: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000413bce: wait; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045ec31: wait; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000405501: wait; leave; add byte ptr [rax], al; pop rbp; mov qword ptr [rip + 0xa0c3b], rax; ret; 
0x000000000041ddf6: wait; or byte ptr [rax], al; add byte ptr [rax - 0x8e743], al; jmp qword ptr [rax]; 
0x000000000043888e: wait; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000464c61: wait; xlatb; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000478acd: xadd dword ptr [rdi], eax; cmp eax, 3; je 0x78ae0; ret; 
0x0000000000478a0a: xadd dword ptr [rdi], eax; shr eax, 2; cmp eax, 3; je 0x78a20; ret; 
0x000000000043172f: xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434af3: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043131f: xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000434be3: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434a03: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000430e2b: xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045ddd3: xchg al, bh; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043163b: xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045db00: xchg bl, cl; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e500: xchg bl, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043544b: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x00000000004310af: xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000412add: xchg byte ptr [rax - 0x16000003], bh; sar ebp, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004313ef: xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000434fa3: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000046c347: xchg byte ptr [rax], ah; add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0x840f; 
0x000000000043170b: xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000409593: xchg byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rax + 0x5d]; ret; 
0x00000000004317db: xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434733: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000459af6: xchg byte ptr [rbp], bl; add byte ptr [rax - 0x73], cl; adc eax, 0x5c8f; cmove rax, rdx; ret; 
0x000000000042b8d0: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000043158f: xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000435183: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434913: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000430d7f: xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000045e390: xchg byte ptr [rbx], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045eda0: xchg byte ptr [rbx], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045eac0: xchg byte ptr [rbx], cl; add eax, 0x83480000; ret 0x4910; 
0x0000000000435363: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043117f: xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x00000000004398ae: xchg byte ptr [rdi - 4], dh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004051da: xchg byte ptr [rdi], cl; or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0xa0f78], eax; ret; 
0x000000000043165f: xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000435273: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000430e4f: xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000430ef1: xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434bb5: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434ca5: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434ac5: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043124f: xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000045dcc5: xchg byte ptr [rsi], al; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000041331c: xchg byte ptr [rsi], al; add al, ch; adc dil, r15b; jmp qword ptr [rsi + 0x66]; 
0x00000000004687f5: xchg byte ptr [rsi], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000045e6c5: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045df95: xchg byte ptr [rsi], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004314bf: xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000434823: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000046bd4f: xchg cl, bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000045e3e5: xchg dh, ah; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000430f15: xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045edf5: xchg dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000440026: xchg di, ax; cld; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rsi*2 + 0x48], 0x89; ret; 
0x00000000004349d5: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004347f5: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004348e5: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000434705: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x0000000000458513: xchg dword ptr [rax + 0x48000000], ebp; mov dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000455d06: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x55d18; ret; 
0x0000000000417e65: xchg dword ptr [rax + 0x5d000004], edx; ret; 
0x00000000004326a3: xchg dword ptr [rax + 0xfffffc8], edi; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000432033: xchg dword ptr [rax + 0xfffffc9], edi; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000041f3b3: xchg dword ptr [rax - 0x77000000], edi; ret 0xc083; 
0x0000000000473dc2: xchg dword ptr [rax], ebx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004295a3: xchg dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000432a05: xchg dword ptr [rbp + rdi*8 - 0x3fce0001], esp; ret; 
0x00000000004102c7: xchg dword ptr [rbp], edi; add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000447642: xchg dword ptr [rbx], eax; add al, ch; int 0xfb; jmp qword ptr [rdi - 0x18]; 
0x000000000040d06f: xchg dword ptr [rcx + 1], ebx; add byte ptr [rax], al; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000040d92c: xchg dword ptr [rcx + rax], ebx; add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000439fc2: xchg dword ptr [rcx - 0x77000000], edx; ret 0xc083; 
0x0000000000422a92: xchg dword ptr [rcx], ecx; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r15; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000004319d4: xchg dword ptr [rdi + 0xfffffca], esi; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000047526c: xchg dword ptr [rdi], eax; test al, 2; jne 0x75278; ret; 
0x0000000000455bb4: xchg dword ptr [rdi], edx; add dword ptr [rax], eax; add byte ptr [rcx - 0x76b32a], cl; call qword ptr [rbx + 0x18]; 
0x0000000000413ffa: xchg dword ptr [rdx + 3], ebx; add byte ptr [rax], al; ret; 
0x0000000000414002: xchg dword ptr [rdx + 3], ebx; add byte ptr [rax], al; test al, 3; je 0x13ff3; ret; 
0x0000000000445f70: xchg dword ptr [rdx], ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000004473cd: xchg dword ptr [rdx], edx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000004547fd: xchg dword ptr [rip + 0x1fa8300], eax; jg 0x54838; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458c73: xchg dword ptr [rip + 0x53c67], eax; cmp eax, 1; jg 0x58cb0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004547fa: xchg dword ptr [rip + 0x58770], edx; cmp edx, 1; jg 0x54838; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000041bddb: xchg dword ptr [rip + 0x90e67], eax; cmp eax, 1; jg 0x1be08; xor eax, eax; pop rbp; ret; 
0x00000000004047e4: xchg dword ptr [rip + 0xa3bde], ecx; cmp ecx, 1; jg 0x4850; call rax; 
0x00000000004046dc: xchg dword ptr [rip + 0xa3ce6], ecx; cmp ecx, 1; jg 0x4870; mov edi, r13d; call rax; 
0x000000000045483c: xchg dword ptr [rip - 0x13ba7700], eax; call 0x4de0; mov eax, dword ptr [rbp - 0x14]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004577dd: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000471a1d: xchg eax, edx; add byte ptr [rax], al; add byte ptr [rax + 0x21], cl; ret 0x290f; 
0x00000000004707b3: xchg ebp, eax; add byte ptr [rax], al; add cl, cl; mov eax, 1; ret; 
0x0000000000414bda: xchg ebp, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x0000000000448713: xchg ebp, eax; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000448713: xchg ebp, eax; cld; jmp qword ptr [rsi + 0x2e]; nop dword ptr [rax + rax]; ret; 
0x00000000004704d2: xchg ebp, eax; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000041dee3: xchg ebp, eax; idiv edi; inc esi; test dword ptr [rax], ebx; idiv edi; jmp qword ptr [rax]; 
0x00000000004591de: xchg ebp, eax; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000426186: xchg ebp, eax; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000043654d: xchg ebp, eax; nop; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x000000000041dff1: xchg ebp, eax; ret 0x2141; 
0x0000000000408ee7: xchg ebp, eax; ret 0x2948; 
0x0000000000407850: xchg ebp, eax; ret 0x294c; 
0x0000000000447a20: xchg ebp, eax; ret 0x548d; 
0x0000000000412eb6: xchg ebp, eax; ret 0x8341; 
0x000000000041c89c: xchg ebp, eax; ret 0x8348; 
0x000000000046980f: xchg ebp, eax; ret 0x894c; 
0x000000000041a3c4: xchg ebp, eax; ret 0x8d48; 
0x0000000000408c24: xchg ebp, eax; ret 0xb60f; 
0x00000000004022c3: xchg ebp, eax; ret 0xc031; 
0x00000000004593d8: xchg ebp, eax; ret 0xc231; 
0x000000000046f321: xchg ebp, eax; ret 0xc931; 
0x0000000000409347: xchg ebp, eax; ret 0xe083; 
0x000000000041a867: xchg ebp, eax; ret; 
0x000000000046b7f4: xchg ebp, eax; ror byte ptr [rcx + 0x4113405], 0; leave; ret; 
0x000000000042346a: xchg ebp, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x0000000000426b01: xchg ebx, eax; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041897e: xchg ebx, eax; add byte ptr [rax], al; add byte ptr [rcx + rdi - 0x3a], cl; jae 0x189d8; ret; 
0x0000000000423a6f: xchg ebx, eax; add eax, 0x3d8d4800; in al, dx; add dword ptr [rip + 0x8f2e800], -2; jmp qword ptr [rsi - 0x70]; 
0x00000000004043a9: xchg ebx, eax; add eax, 0x89480000; ret 0x8b48; 
0x0000000000423099: xchg ebx, eax; and ecx, dword ptr [rax]; add byte ptr [rcx + rcx*4 + 0x63], cl; adc byte ptr [rax - 0x77], cl; ret 0xf685; 
0x00000000004781b3: xchg ebx, eax; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045fbcf: xchg ebx, eax; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000042ddae: xchg ebx, eax; leave; bzhi ecx, ecx, eax; jne 0x2dd89; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000042c5d4: xchg ebx, eax; leave; test ecx, ecx; jne 0x2c4a4; ret; 
0x000000000042c49d: xchg ebx, eax; leave; test ecx, ecx; jne 0x2c4aa; ret; 
0x000000000041108f: xchg ebx, eax; rcl bl, 0xe8; je 0x10f87; bsf eax, eax; ret; 
0x000000000043664e: xchg ebx, eax; ret 0xe2c4; 
0x0000000000436668: xchg ebx, eax; ret; 
0x000000000042c4c4: xchg ebx, eax; rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x0000000000460823: xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000411023: xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000435c91: xchg ebx, eax; rol byte ptr [rbp + 0x623975d2], 1; mov dl, 0x66; and byte ptr [rsi], ah; ret; 
0x000000000046154f: xchg ebx, eax; rol byte ptr [rbp + 0x623b75d2], 1; mov dl, 0x66; and byte ptr [rdi], ah; ret; 
0x0000000000410872: xchg ebx, eax; rol byte ptr [rbp + 0xf3874c0], 0xbc; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000436548: xchg ebx, eax; rol dword ptr [rbp + 0x669574c0], 0x90; bsr eax, eax; lea rax, [r8 + rax + 0x20]; ret; 
0x00000000004364eb: xchg ebx, eax; rol dword ptr [rbp + 0xf0674c0], 0xbd; ror byte ptr [rax + 1], 0xf0; ret; 
0x000000000046081b: xchg ebx, eax; rol dword ptr [rbp - 0x3acf8a40], 0xfb; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x000000000041101b: xchg ebx, eax; rol dword ptr [rbp - 0x3ad08a40], 0xfb; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rsi], ah; ret; 
0x0000000000435ca3: xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xf48; 
0x0000000000461561: xchg ebx, eax; ror byte ptr [rax - 0x3f], 0xe2; or byte ptr [rax + 9], cl; ret 0xf48; 
0x000000000045b33f: xchg ebx, eax; sar bh, 1; ret 0x840f; 
0x000000000042f261: xchg ebx, eax; sar bh, 1; ret 0x850f; 
0x000000000042f0bf: xchg ebx, eax; sar bh, 1; ret 0x8b74; 
0x000000000042433b: xchg ecx, eax; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0x820f; 
0x0000000000473f6b: xchg ecx, eax; add eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x000000000045eff1: xchg ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043dade: xchg ecx, eax; push rsp; add eax, dword ptr [rax]; add dh, dh; ret 0x7508; 
0x000000000046b62b: xchg ecx, eax; ret 0xfffa; 
0x000000000040cf9a: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000045da1f: xchg ecx, eax; sub eax, edx; ret; 
0x0000000000402c07: xchg edi, eax; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; retf 0x8102; ret 0x97; 
0x0000000000411e60: xchg edi, eax; call 0x12400; nop word ptr [rax + rax]; endbr64; mov eax, 0x63; syscall; 
0x0000000000440027: xchg edi, eax; cld; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rsi*2 + 0x48], 0x89; ret; 
0x000000000044ed65: xchg edi, eax; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000468cae: xchg edi, eax; cli; jmp qword ptr [rsi + 0x66]; 
0x000000000046de49: xchg edi, eax; nop; add al, 0; add byte ptr [rax - 0x77], cl; adc cl, cl; ret; 
0x000000000040e3d0: xchg edi, eax; or dword ptr [rax], eax; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000413f6e: xchg edi, eax; pop rdx; add eax, dword ptr [rax]; add dh, dh; ret 0xf03; 
0x00000000004678d6: xchg edi, eax; stc; dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000044ca2e: xchg edx, eax; add eax, 0x4632e900; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000419f89: xchg edx, eax; and byte ptr [rax + rax], al; add dh, dh; ret 0x7402; 
0x000000000045efe7: xchg edx, eax; lea rcx, [rip + 0x26391]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004100ae: xchg edx, eax; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x000000000040fe31: xchg edx, eax; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x00000000004654ba: xchg edx, eax; ret 0x8949; 
0x000000000045ff9c: xchg edx, eax; ret 0xf40; 
0x000000000040ff1b: xchg edx, eax; ret; 
0x0000000000431927: xchg edx, eax; sub eax, edx; ret; 
0x000000000046bfc1: xchg esi, eax; adc eax, dword ptr [rcx]; add byte ptr [rax - 0x77], cl; fidiv word ptr [rcx]; jmp qword ptr [rdi - 0x18]; 
0x000000000042a276: xchg esi, eax; add byte ptr [rax], al; lea rdx, [rip + 0x523f]; cmove rax, rdx; ret; 
0x0000000000467445: xchg esi, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000040b6a6: xchg esi, eax; add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x31f; cmovne rax, rdx; ret; 
0x00000000004407de: xchg esi, eax; cld; call qword ptr [rax + 0x441f0f66]; add byte ptr [rax], al; ret; 
0x0000000000444ed6: xchg esi, eax; hlt; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000419536: xchg esi, eax; or eax, 0x8b480001; pop rbp; clc; leave; ret; 
0x0000000000401a4c: xchg esi, eax; ret; 
0x0000000000454246: xchg esi, eax; sub byte ptr [rcx], al; add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rbp - 0x148]; lea rdx, [rbp - 0x140]; call rbx; 
0x0000000000459345: xchg esi, ecx; add byte ptr [rax], al; add byte ptr [rbx + 0x31], bl; rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x000000000041d44f: xchg esp, eax; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047814b: xchg esp, eax; clc; jmp qword ptr [rdi - 0x18]; 
0x00000000004704aa: xchg esp, eax; cld; jmp qword ptr [rdi - 0x18]; 
0x000000000043e073: xchg esp, eax; nop dword ptr [rax]; call rax; 
0x0000000000427eb7: xchg esp, eax; ret 0x2b48; 
0x00000000004709b0: xchg esp, eax; ret 0x3949; 
0x000000000043c84c: xchg esp, eax; ret 0x8566; 
0x000000000041a3e8: xchg esp, eax; ret 0x8b48; 
0x000000000041a3a3: xchg esp, eax; ret 0x8d48; 
0x0000000000437eb3: xchg esp, eax; ret 0x950a; 
0x000000000041dda3: xchg esp, eax; ret 0x9522; 
0x0000000000416844: xchg esp, eax; ret 0xb60f; 
0x0000000000478c17: xchg esp, eax; ret 0xc189; 
0x0000000000454d72: xchg esp, eax; ret 0xd008; 
0x0000000000462e27: xchg esp, eax; ret 0xd108; 
0x0000000000417ac6: xchg esp, eax; ret; 
0x0000000000429fb8: xchg esp, eax; sbb byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xe5d; cmovne rax, rdx; ret; 
0x0000000000469b70: xchg esp, eax; shl byte ptr [rax], 0x45; ret 0x67e9; 
0x000000000047526b: xchg qword ptr [rdi], rax; test al, 2; jne 0x75278; ret; 
0x0000000000468cad: xchg r15, rax; cli; jmp qword ptr [rsi + 0x66]; 
0x00000000004678d5: xchg r15, rax; stc; dec dword ptr [rbp + rcx*4 + 0x68]; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000040e3cf: xchg r15d, eax; or dword ptr [rax], eax; jae 0xe3e0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446d50: xchg r8, rax; mov qword ptr [rbp - 0xa0], rcx; mov rsi, qword ptr [rbp - 0xc0]; mov rdi, qword ptr [rbp - 0xb8]; mov rax, qword ptr [rbp - 0xa8]; call rax; 
0x0000000000445120: xchg r8, rax; mov rdi, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x80], rcx; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004465cc: xchg r8, rax; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004416b1: xchg r8, rax; mov rsi, qword ptr [rbp - 0x90]; mov rdi, qword ptr [rbp - 0x88]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000044423b: xchg r8, rax; mov rsi, qword ptr [rbp - 0xa0]; mov rdi, qword ptr [rbp - 0x98]; mov rax, qword ptr [rbp - 0x88]; call rax; 
0x00000000004410ac: xchg r8, rax; mov rsi, qword ptr [rbp - 0xb0]; mov qword ptr [rbp - 0x90], rcx; mov rdi, qword ptr [rbp - 0xa8]; mov rax, qword ptr [rbp - 0x98]; call rax; 
0x000000000040ff1a: xchg rdx, rax; ret; 
0x00000000004588ba: xend; xor eax, eax; ret; 
0x00000000004043a6: xlatb; add al, ch; xchg ebx, eax; add eax, 0x89480000; ret 0x8b48; 
0x000000000041be4d: xlatb; add dword ptr [rax], eax; pop rbp; mov qword ptr [rip + 0x90de4], 0; ret; 
0x0000000000460e8f: xlatb; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004356a4: xlatb; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000460f9d: xlatb; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043577d: xlatb; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x0000000000460f39: xlatb; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000435729: xlatb; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000460385: xlatb; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410c95: xlatb; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x00000000004603a5: xlatb; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410ca5: xlatb; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x00000000004603c5: xlatb; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410cb5: xlatb; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000439b28: xlatb; call rsi; 
0x00000000004375a7: xlatb; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000464c62: xlatb; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000404a67: xlatb; cmp rax, 9; ja 0x4a40; mov rax, rsi; ret; 
0x0000000000460eea: xlatb; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004356da: xlatb; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000042bd90: xlatb; inc ecx; jne 0x2bcc0; vzeroupper; ret; 
0x0000000000460365: xlatb; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x0000000000410c85: xlatb; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000042bc49: xlatb; iretd; inc ecx; jne 0x2bcc3; vzeroupper; ret; 
0x000000000040d8dc: xlatb; jb 0xd8e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041274a: xlatb; jmp 0x126af; leave; xor eax, eax; ret; 
0x00000000004671ae: xlatb; jmp rax; 
0x00000000004671ae: xlatb; jmp rax; nop dword ptr [rax]; ret; 
0x0000000000436806: xlatb; ret 0x518d; 
0x0000000000410596: xlatb; ret 0xc085; 
0x000000000042bbb8: xlatb; ret 0xc0ff; 
0x0000000000410b60: xlatb; ret 0xc148; 
0x00000000004110f8: xlatb; ret 0xf66; 
0x00000000004360c2: xlatb; ret 0xfdc5; 
0x000000000042bf2d: xlatb; ret 0xff2d; 
0x0000000000410475: xlatb; ret; 
0x00000000004368ef: xlatb; retf 0xf66; xlatb; ret; 
0x000000000042bae3: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000468a33: xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000468a03: xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042af92: xlatb; rol dword ptr [rbp - 0x3ab78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042bab3: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000410c63: xlatb; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000043608e: xlatb; ror byte ptr [rax + 1], cl; ret 0x840f; 
0x000000000042e1da: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000430886: xlatb; sal bh, 1; ret 0x8000; 
0x0000000000430746: xlatb; sal bh, 1; ret 0xc000; 
0x0000000000430606: xlatb; sal bh, 1; ret 0xe000; 
0x00000000004304c6: xlatb; sal bh, 1; ret 0xf000; 
0x0000000000430386: xlatb; sal bh, 1; ret 0xf800; 
0x0000000000430246: xlatb; sal bh, 1; ret 0xfc00; 
0x0000000000430106: xlatb; sal bh, 1; ret 0xfe00; 
0x000000000042ffc6: xlatb; sal bh, 1; ret 0xff00; 
0x000000000042fe86: xlatb; sal bh, 1; ret 0xff80; 
0x000000000042fd46: xlatb; sal bh, 1; ret 0xffc0; 
0x000000000042fc06: xlatb; sal bh, 1; ret 0xffe0; 
0x000000000042fac6: xlatb; sal bh, 1; ret 0xfff0; 
0x000000000042f986: xlatb; sal bh, 1; ret 0xfff8; 
0x000000000042f846: xlatb; sal bh, 1; ret 0xfffc; 
0x000000000042f706: xlatb; sal bh, 1; ret 0xfffe; 
0x000000000042bdf2: xlatb; sar edi, 0xc0; jne 0x2be40; vzeroupper; ret; 
0x000000000042e1d6: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000042af5c: xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000042c74d: xlatb; shr dword ptr [rcx], 0xc8; jne 0x2c754; ret; 
0x000000000046b7f8: xor al, 0x11; add al, 0; leave; ret; 
0x000000000040d0fa: xor al, 0x16; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x000000000040d0ff: xor al, 0x17; ret; 
0x000000000040422d: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000047693b: xor al, 0x48; mov eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004666e4: xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x0000000000422363: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000440ebb: xor al, 0xfc; jmp qword ptr [rsi - 0x70]; 
0x000000000042dad1: xor al, 2; jne 0x2da99; add rax, rdx; vzeroupper; ret; 
0x0000000000420531: xor al, 3; lea rax, [rip + 0x81bc6]; mov ebx, 1; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x00000000004205b4: xor al, 6; lea rax, [rip + 0x81c43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000042d8e5: xor al, 7; jne 0x2d8f0; add rax, rdi; vzeroupper; ret; 
0x000000000042da62: xor al, 7; jne 0x2da99; add rax, rdi; vzeroupper; ret; 
0x000000000042dd81: xor al, 7; jne 0x2dd89; add rax, rdi; ret; 
0x00000000004204b4: xor al, 7; lea rax, [rip + 0x81b43]; mov rax, qword ptr [rax + rsi*8]; jmp rax; 
0x000000000040ff36: xor al, byte ptr [rbx + 0x347f01fa]; jl 0xff40; mov byte ptr [rax], cl; ret; 
0x000000000044ca32: xor al, byte ptr [rsi - 5]; jmp qword ptr [rsi + 0x2e]; 
0x000000000042a3ea: xor bh, byte ptr [rcx - 0x72b80000]; add eax, 0xb10b; cmovne rax, rdx; ret; 
0x000000000043f182: xor bh, ch; jmp qword ptr [rsi + 0x66]; 
0x00000000004383ca: xor bl, byte ptr [rip - 0x7ab70003]; ror byte ptr [rax + 0xf], 0x44; ret; 
0x0000000000466919: xor byte ptr [r13 + 0x25], r14b; mov qword ptr [rax + 8], rdx; pop rbp; ret; 
0x000000000042ba3d: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x00000000004689ff: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042baaf: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000040ed10: xor byte ptr [r15 + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000042689e: xor byte ptr [r15], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000425c8e: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9], sil; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x00000000004503fb: xor byte ptr [rax + 0x39], cl; ret 0x673; 
0x0000000000462dac: xor byte ptr [rax - 0x14408bff], ch; ret; 
0x000000000046ddcf: xor byte ptr [rax - 0x75], cl; pop rbp; clc; mov qword ptr [rax], rdx; leave; ret; 
0x000000000042d17f: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x00000000004506bc: xor byte ptr [rax - 0x77], cl; add ebx, dword ptr [rbx + 0x44]; mov eax, esp; pop r12; pop rbp; ret; 
0x0000000000425c8f: xor byte ptr [rax - 0x77], cl; and byte ptr [r9], sil; rcr byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000466847: xor byte ptr [rax - 0x77], cl; or byte ptr [rax + 2], r15b; pop rbp; ret; 
0x0000000000463a33: xor byte ptr [rax - 0x77], cl; ret; 
0x00000000004557e8: xor byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x58], cl; or byte ptr [rsi + riz - 0x77], dh; ret 0xc883; 
0x000000000044082f: xor byte ptr [rax - 0x7d], cl; ret; 
0x000000000042a1a7: xor byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x2f2f; cmove rax, rdx; ret; 
0x000000000041763d: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0xb8], rax; call 0x16ee0; leave; ret; 
0x000000000043e39e: xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3e3ad; call rax; 
0x000000000043e4fb: xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3e50c; mov rdi, rbx; call rax; 
0x000000000043f583: xor byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x3f594; mov rdi, rbx; call rax; 
0x0000000000447ea0: xor byte ptr [rax], al; add byte ptr [rax], al; test rdx, rdx; je 0x47ec3; mov rdi, rbx; call rdx; 
0x00000000004047e0: xor byte ptr [rax], al; add byte ptr [rax], al; xchg dword ptr [rip + 0xa3bde], ecx; cmp ecx, 1; jg 0x4850; call rax; 
0x0000000000455d0e: xor byte ptr [rax], al; je 0x55d18; ret; 
0x000000000047a26d: xor byte ptr [rax], ch; xor r10d, r10d; mov edx, 1; mov esi, r9d; mov eax, 0xca; syscall; 
0x000000000041f4f8: xor byte ptr [rax], cl; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000426939: xor byte ptr [rbp + 0x24], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000046691a: xor byte ptr [rbp + 0x25], dh; mov qword ptr [rax + 8], rdx; pop rbp; ret; 
0x000000000042df38: xor byte ptr [rbp + 1], dh; ret; 
0x00000000004205ee: xor byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], cl; test ebp, esp; or eax, 0x8d480000; mov r14d, 0xfffb4885; jmp qword ptr [rax]; 
0x000000000041989d: xor byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x00000000004580d7: xor byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000405150: xor byte ptr [rcx + 0x39], cl; sal dword ptr [rbp + rax + 0x5b], 0x41; pop rsp; pop rbp; ret; 
0x000000000046e26e: xor byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; pop rbp; ret; 
0x0000000000414585: xor byte ptr [rcx - 0xa], al; ret 0xf02; 
0x000000000043bdc3: xor byte ptr [rcx], 0xc0; ret; 
0x000000000042252e: xor byte ptr [rcx], al; ret 0x8d49; 
0x000000000040e3b9: xor byte ptr [rdi + rcx + 0x11], al; cmp r14b, al; ret; 
0x000000000040ed11: xor byte ptr [rdi + rcx + 0x11], al; movups xmmword ptr [rcx + 0x50], xmm7; ret; 
0x000000000042689f: xor byte ptr [rdi], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000040e29a: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000040e33e: xor byte ptr [rdi], cl; adc dword ptr [rdx + 0x20], esi; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000428e62: xor byte ptr [rip - 0x4af91800], al; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000428e61: xor byte ptr [rip - 0x4af91800], r8b; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000459a58: xor byte ptr [rip - 0x72b7ff00], al; adc eax, 0x3dad; cmove rax, rdx; ret; 
0x0000000000445a6e: xor byte ptr [rip - 0x74b80000], al; pop rbp; mov byte ptr [rcx - 0x77], al; ret; 
0x000000000042ba3e: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000468a00: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042bab0: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042a1a6: xor byte ptr es:[rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x2f2f; cmove rax, rdx; ret; 
0x0000000000460820: xor ch, al; sti; xchg ebx, eax; rol byte ptr [rbp + 0x623775c0], 0xb2; and byte ptr [rdi], ah; ret; 
0x0000000000458c7d: xor cl, byte ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000040447d: xor cl, byte ptr [rax - 0x77]; ret 0x8348; 
0x0000000000471f02: xor cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000043c0fa: xor cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000473f70: xor cl, byte ptr [rax]; jne 0x1509; mov rax, qword ptr [rax]; ret; 
0x00000000004095b7: xor cl, byte ptr [rdx]; add byte ptr [rax], al; jne 0x95c0; ret; 
0x00000000004095b6: xor cl, byte ptr gs:[rdx]; add byte ptr [rax], al; jne 0x95c0; ret; 
0x0000000000404dab: xor dh, 0x80; syscall; 
0x0000000000459334: xor dh, 0x81; mov eax, 0xca; syscall; 
0x0000000000429330: xor dh, 0x81; syscall; 
0x0000000000478a21: xor dh, 0x81; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000000404e05: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000404e05: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000478a81: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov rdi, rcx; mov eax, 0xca; syscall; 
0x00000000004295a1: xor dh, 0x87; xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000478aec: xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x000000000040b96a: xor dl, byte ptr [rdi]; add byte ptr [rax - 0x73], cl; add eax, 0x52cb; cmovne rax, rdx; ret; 
0x000000000040b677: xor dword ptr [rax], eax; add byte ptr [rbp - 0x53], dh; ret; 
0x00000000004182b6: xor dword ptr [rax], edx; jae 0x1826d; xor eax, eax; ret; 
0x00000000004182b5: xor dword ptr [rax], r10d; jae 0x1826d; xor eax, eax; ret; 
0x000000000042865a: xor dword ptr [rbp - 0xb], esi; and eax, 0x39; cmp eax, 8; je 0x28666; ret; 
0x0000000000456d0b: xor dword ptr [rdx - 0x5c150000], 0x801f0f; add byte ptr [rax], al; add al, ch; ret; 
0x0000000000416abb: xor dword ptr [rip - 0x76b70001], edi; ret; 
0x000000000046bc44: xor eax, 0x1ba; add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4d01; 
0x0000000000458d52: xor eax, 0x28a31; mov eax, 0xe; syscall; 
0x000000000043f0a7: xor eax, 0x31fffffc; jmp qword ptr [rdi - 0x18]; 
0x000000000040b807: xor eax, 0x4800003f; lea eax, [rip + 0x3ede]; cmovne rax, rdx; ret; 
0x00000000004541a7: xor eax, 0x48000129; mov esi, dword ptr [rbp - 0x148]; mov rdx, r12; mov rdi, r13; call rbx; 
0x000000000043e457: xor eax, 0x48fffcba; test ebx, ebx; jne 0x3e445; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000044870c: xor eax, 0x6465f; jmp 0x11c30; nop word ptr cs:[rax + rax]; ret; 
0x0000000000469317: xor eax, 0x64ba0004; add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000416daf: xor eax, 0x64cfc; lea rbx, [rbp - 0x1020]; mov rdx, rbx; syscall; 
0x000000000040450a: xor eax, 0x76f8c; lea rdi, [rip + 0x76f92]; call 0x4370; xor eax, eax; ret; 
0x0000000000404351: xor eax, 0x79212; syscall; 
0x0000000000404321: xor eax, 0x79242; syscall; 
0x0000000000412a90: xor eax, 0x894c0009; dec dword ptr [rax - 0x77]; ret; 
0x00000000004640b7: xor eax, 0xe80001c3; mov al, 2; cli; jmp qword ptr [rdi - 0x18]; 
0x000000000043f689: xor eax, 0xffffecc2; pop rbp; jmp 0x39610; nop dword ptr [rax]; pop rbp; ret; 
0x0000000000448a1e: xor eax, 0xfffffdad; mov rbp, rsp; call 0x39610; pop rbp; mov qword ptr [rip + 0x64349], 0; ret; 
0x000000000043e39b: xor eax, dword ptr [0x30]; test rax, rax; je 0x3e3ad; call rax; 
0x000000000044d3a8: xor eax, dword ptr [rax]; add cl, al; cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000453f67: xor eax, dword ptr [rbp + 0xe80002]; add al, 0xfb; jmp qword ptr [rdi - 0x18]; 
0x00000000004387a4: xor eax, dword ptr [rcx + rcx*4 - 0x39]; mov qword ptr [rbp - 8], rax; call 0x28410; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000004099cc: xor eax, eax; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000046b7ed: xor eax, eax; cmp dword ptr [rbp - 4], 1; setne al; mov dword ptr [rip + 0x41134], eax; leave; ret; 
0x00000000004388b9: xor eax, eax; cmp esi, 9; je 0x388e0; mov eax, 0x48; syscall; 
0x00000000004587df: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000043e070: xor eax, eax; jmp 0x3e008; nop dword ptr [rax]; call rax; 
0x0000000000466d70: xor eax, eax; jmp 0x66d40; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000040b598: xor eax, eax; leave; ret; 
0x0000000000405f29: xor eax, eax; mov byte ptr [rip + 0xa68ee], 1; mov eax, 0x13e; syscall; 
0x000000000041b8b5: xor eax, eax; mov dword ptr [rbx + 0x40], esi; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000455ea7: xor eax, eax; mov dword ptr [rbx], ecx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000450043: xor eax, eax; mov dword ptr [rdi], edx; ret; 
0x0000000000419b03: xor eax, eax; mov dword ptr [rip + 0x930a9], eax; pop rbp; ret; 
0x0000000000413b90: xor eax, eax; mov eax, r8d; ret; 
0x0000000000458840: xor eax, eax; mov edx, 1; lock cmpxchg dword ptr [rdi], edx; jne 0x58888; xor eax, eax; ret; 
0x0000000000458920: xor eax, eax; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000479ec3: xor eax, eax; mov r12, qword ptr [rbp - 8]; leave; ret; 
0x000000000040a736: xor eax, eax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000004622df: xor eax, eax; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x6230b; leave; ret; 
0x0000000000467c00: xor eax, eax; mov rdx, qword ptr [rbp - 8]; sub rdx, qword ptr fs:[0x28]; jne 0x67c40; leave; ret; 
0x000000000044ffc1: xor eax, eax; movups xmmword ptr [r10 + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [r10], xmm0; ret; 
0x000000000044ff0c: xor eax, eax; movups xmmword ptr [rdi + 8], xmm0; pshufd xmm0, xmm1, 0xe0; movq qword ptr [rdi], xmm0; ret; 
0x000000000043f5f9: xor eax, eax; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000416789: xor eax, eax; pop r12; pop rbp; ret; 
0x00000000004095a0: xor eax, eax; pop rbp; ret; 
0x0000000000418ae1: xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000425c94: xor eax, eax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000458292: xor eax, eax; push 0; lea r9, [rbp - 0x38]; call rax; 
0x00000000004377ec: xor eax, eax; push 1; lea rcx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000436f80: xor eax, eax; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x00000000004025b6: xor eax, eax; ret; 
0x0000000000409059: xor eax, eax; shr ecx, 3; rep stosq qword ptr [rdi], rax; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000430bae: xor eax, eax; sub eax, ecx; ret; 
0x000000000042e9df: xor eax, eax; sub eax, r8d; ret; 
0x000000000042e624: xor eax, eax; sub eax, r8d; vzeroupper; ret; 
0x00000000004112ed: xor eax, eax; syscall; 
0x00000000004112ed: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x11348; ret; 
0x0000000000411454: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x11468; ret; 
0x0000000000411d18: xor eax, eax; test cl, 6; jne 0x11d40; mov eax, 0x19; syscall; 
0x00000000004590c1: xor eax, eax; test edx, edx; setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000042afd5: xor eax, eax; vzeroupper; ret; 
0x000000000044ea1e: xor eax, edx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x4ea00; ret; 
0x000000000044fb7b: xor eax, edx; pop r15; pop rbp; ret; 
0x000000000042e9de: xor eax, r8d; sub eax, r8d; ret; 
0x000000000042e623: xor eax, r8d; sub eax, r8d; vzeroupper; ret; 
0x00000000004544f3: xor ebx, dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000041f179: xor ebx, ebx; mov dword ptr [rbp - 0x4a4], 0; mov dword ptr [rbp - 0x4a8], 0; mov dword ptr [rbp - 0x4cc], 0; jmp rax; 
0x000000000046a843: xor ebx, ebx; mov rax, rbx; pop rbx; pop r12; pop rbp; ret; 
0x000000000044db3f: xor ecx, dword ptr [rax + 0x39]; ret; 
0x000000000042da65: xor ecx, dword ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000454804: xor ecx, dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000419b87: xor ecx, dword ptr [rax - 0x7b]; sal byte ptr [rsi + rbp + 0x48], cl; mov ebx, dword ptr [rbp - 8]; mov rax, rdx; leave; ret; 
0x0000000000422be8: xor ecx, dword ptr [rax]; add byte ptr [rax], al; je 0x22bef; ret; 
0x000000000044f16f: xor ecx, dword ptr [rcx - 0x75]; cmp al, 0x24; mov rdx, qword ptr [rbp - 0x40]; mov rax, qword ptr [rbp - 0x38]; call rax; 
0x0000000000412c9b: xor ecx, dword ptr [rcx]; add bl, ch; ret 0x66c3; 
0x0000000000419854: xor ecx, dword ptr [rcx]; add byte ptr [rbx + 0x933573d], cl; add byte ptr [rcx - 0x77], al; ret; 
0x000000000041985a: xor ecx, dword ptr [rcx]; add byte ptr [rcx - 0x77], al; ret; 
0x00000000004398c9: xor ecx, dword ptr [rdx - 0x59160003]; ja 0x398cd; jmp qword ptr [rsi + 0x2e]; 
0x000000000042dacd: xor ecx, ecx; cmp sil, byte ptr [rdx + rax]; jne 0x2da99; add rax, rdx; vzeroupper; ret; 
0x0000000000418fea: xor ecx, ecx; jmp 0x18bd9; ret; 
0x0000000000447c41: xor ecx, ecx; mov qword ptr [rbp - 0x40], r8; lea r8, [rbp - 0x40]; push 0; push 0; call rax; 
0x0000000000436f84: xor ecx, ecx; xor edx, edx; call rax; 
0x00000000004367ca: xor ecx, edx; and eax, ecx; je 0x367d6; bsr eax, eax; add rax, rdi; ret; 
0x000000000043680b: xor ecx, edx; and eax, ecx; je 0x367e0; bsr eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043684b: xor ecx, edx; and eax, ecx; je 0x36820; bsr eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000436933: xor ecx, edx; and eax, ecx; je 0x368e5; bsr eax, eax; add rax, rdi; ret; 
0x00000000004369d3: xor ecx, edx; and eax, ecx; je 0x36995; bsr eax, eax; add rax, rdi; ret; 
0x0000000000436a10: xor ecx, edx; and eax, ecx; je 0x36a1c; bsr eax, eax; add rax, rdi; ret; 
0x0000000000411bbb: xor edi, edi; mov eax, 9; or r10d, 0x40; syscall; 
0x0000000000437afa: xor edi, edi; mov eax, edi; ret; 
0x0000000000401ed0: xor edi, edi; mov eax, edx; syscall; 
0x0000000000419ba5: xor edi, edi; mov eax, esi; syscall; 
0x0000000000419bc9: xor edi, edi; mov r10d, 0x22; mov rsi, rbx; mov eax, 9; syscall; 
0x00000000004389b0: xor edi, edi; syscall; 
0x00000000004389b0: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x389c0; ret; 
0x0000000000427a39: xor edx, dword ptr [rdx + 8]; add cl, ch; sahf; sar ebp, cl; jmp qword ptr [rsi + 0x66]; 
0x0000000000461cd1: xor edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000436f86: xor edx, edx; call rax; 
0x00000000004186ed: xor edx, edx; mov eax, 0x14e; mov rdi, rbx; syscall; 
0x0000000000458a2c: xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000478ae5: xor edx, edx; mov eax, 0xca; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x000000000047a384: xor edx, edx; mov eax, ebx; syscall; 
0x00000000004787a4: xor edx, edx; mov eax, r13d; syscall; 
0x00000000004788db: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; add rdi, r12; syscall; 
0x0000000000478a25: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000000459382: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000458edb: xor edx, edx; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000459329: xor edx, edx; mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045970d: xor edx, edx; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000404e09: xor edx, edx; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000404e09: xor edx, edx; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000478cba: xor edx, edx; mov edx, 1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000404de5: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000404de5: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000429571: xor edx, edx; mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000047a270: xor edx, edx; mov edx, 1; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004791cb: xor edx, edx; mov edx, 1; mov rdi, r11; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047a2ee: xor edx, edx; mov edx, 1; mov rdi, r12; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004593f7: xor edx, edx; mov edx, 1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047889f: xor edx, edx; mov edx, 1; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478e73: xor edx, edx; mov edx, 1; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000478a85: xor edx, edx; mov edx, 1; mov rdi, rcx; mov eax, 0xca; syscall; 
0x0000000000404d9e: xor edx, edx; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000404d38: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000043e1eb: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, ebx; syscall; 
0x0000000000428452: xor edx, edx; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000458f80: xor edx, edx; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x00000000004389a7: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000041f381: xor edx, edx; mov rax, qword ptr [rax + rcx*8]; jmp rax; 
0x000000000042655f: xor edx, edx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x000000000047a4a7: xor edx, edx; mov rdi, r12; or eax, 2; mov edx, eax; mov eax, ebx; syscall; 
0x00000000004295a7: xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000478995: xor edx, edx; mov rdi, r9; or eax, 2; mov edx, eax; mov eax, r12d; syscall; 
0x000000000042890f: xor edx, edx; mov rdi, rbx; mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x0000000000428d2a: xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000426587: xor edx, edx; mov rsi, qword ptr [rbp - 0x20]; mov rdi, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000458d98: xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000461d97: xor edx, edx; not eax; test eax, 0x410000; je 0x61dc8; mov eax, 0x101; syscall; 
0x0000000000478c31: xor edx, edx; or eax, 2; mov edx, eax; mov eax, r13d; syscall; 
0x00000000004044f2: xor edx, edx; pop rbx; pop r12; mov rax, rdx; pop rbp; ret; 
0x00000000004591e1: xor edx, edx; shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004295a5: xor edx, edx; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000428d28: xor edx, edx; xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000428af4: xor edx, edx; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000411e42: xor esi, esi; mov edi, 0x53564d41; mov eax, 0x9d; syscall; 
0x0000000000428af6: xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000046e513: xor esi, esp; add eax, dword ptr [rax]; ret; 
0x0000000000478ae4: xor r10d, r10d; mov eax, 0xca; xor dl, 0x81; mov esi, edx; mov edx, 0x7fffffff; syscall; 
0x000000000047a383: xor r10d, r10d; mov eax, ebx; syscall; 
0x00000000004787a3: xor r10d, r10d; mov eax, r13d; syscall; 
0x00000000004788da: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; add rdi, r12; syscall; 
0x0000000000478a24: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000000459381: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000458eda: xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000459328: xor r10d, r10d; mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000045970c: xor r10d, r10d; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000404e08: xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000404e08: xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000478cb9: xor r10d, r10d; mov edx, 1; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000404de4: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000404de4: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000429570: xor r10d, r10d; mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000047a26f: xor r10d, r10d; mov edx, 1; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004791ca: xor r10d, r10d; mov edx, 1; mov rdi, r11; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047a2ed: xor r10d, r10d; mov edx, 1; mov rdi, r12; mov esi, r9d; mov eax, 0xca; syscall; 
0x00000000004593f6: xor r10d, r10d; mov edx, 1; mov rdi, r12; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000047889e: xor r10d, r10d; mov edx, 1; mov rdi, r9; mov esi, ebx; mov eax, 0xca; syscall; 
0x0000000000478e72: xor r10d, r10d; mov edx, 1; mov rdi, r9; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000478a84: xor r10d, r10d; mov edx, 1; mov rdi, rcx; mov eax, 0xca; syscall; 
0x0000000000404d9d: xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x0000000000404d37: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000043e1ea: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, ebx; syscall; 
0x0000000000428451: xor r10d, r10d; mov edx, ecx; mov esi, 0x80; mov eax, r8d; syscall; 
0x0000000000458f7f: xor r10d, r10d; mov esi, 0x80; mov rdi, rbx; mov eax, 0xca; syscall; 
0x000000000047a4a6: xor r10d, r10d; mov rdi, r12; or eax, 2; mov edx, eax; mov eax, ebx; syscall; 
0x0000000000478994: xor r10d, r10d; mov rdi, r9; or eax, 2; mov edx, eax; mov eax, r12d; syscall; 
0x000000000042890e: xor r10d, r10d; mov rdi, rbx; mov eax, r14d; not esi; and esi, 0x80; syscall; 
0x0000000000461d96: xor r10d, r10d; not eax; test eax, 0x410000; je 0x61dc8; mov eax, 0x101; syscall; 
0x0000000000478c30: xor r10d, r10d; or eax, 2; mov edx, eax; mov eax, r13d; syscall; 
0x00000000004591e0: xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004295a4: xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000428d27: xor r10d, r10d; xor edx, edx; mov rdi, rbx; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000428af3: xor r10d, r10d; xor esi, esi; mov rdi, rbx; mov eax, 0xca; syscall; 
0x0000000000413b8f: xor r8d, r8d; mov eax, r8d; ret; 
0x000000000045891f: xor r8d, r8d; mov edx, ebx; mov eax, 0xca; syscall; 
0x0000000000458291: xor r8d, r8d; push 0; lea r9, [rbp - 0x38]; call rax; 
0x00000000004377eb: xor r8d, r8d; push 1; lea rcx, [rdx + rax*4 + 4]; mov rdx, r12; push 0; call rbx; 
0x0000000000436f7f: xor r8d, r8d; push 1; xor ecx, ecx; xor edx, edx; call rax; 
0x0000000000411d17: xor r8d, r8d; test cl, 6; jne 0x11d40; mov eax, 0x19; syscall; 
0x0000000000447c40: xor r9d, r9d; mov qword ptr [rbp - 0x40], r8; lea r8, [rbp - 0x40]; push 0; push 0; call rax; 
0x000000000043e39a: xor rax, qword ptr [0x30]; test rax, rax; je 0x3e3ad; call rax; 
0x000000000043e399: xor rax, qword ptr fs:[0x30]; test rax, rax; je 0x3e3ad; call rax; 
0x000000000042e1f0: xor rax, rax; ret; 
0x000000000044ea1d: xor rax, rdx; movzx edx, byte ptr [rdi]; test dl, dl; jne 0x4ea00; ret; 
0x000000000044fb7a: xor rax, rdx; pop r15; pop rbp; ret; 
0x000000000042655e: xor rdx, rdx; mov rbx, qword ptr [rbp - 8]; leave; jmp rax; 
0x0000000000404daa: xor sil, 0x80; syscall; 
0x0000000000459333: xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000042932f: xor sil, 0x81; syscall; 
0x0000000000478a20: xor sil, 0x81; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; syscall; 
0x0000000000404e04: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000404e04: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x0000000000478a80: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov rdi, rcx; mov eax, 0xca; syscall; 
0x00000000004295a0: xor sil, 0x87; xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000410682: xtest; jne 0x1068b; vzeroupper; ret; 
0x0000000000410f1e: xtest; jne 0x10f27; vzeroupper; ret; 
0x000000000042b0fc: xtest; jne 0x2b105; vzeroupper; ret; 
0x000000000042c06e: xtest; jne 0x2c077; vzeroupper; ret; 
0x000000000042cd95: xtest; jne 0x2cd9e; vzeroupper; ret; 
0x000000000042db28: xtest; jne 0x2db31; vzeroupper; ret; 
0x000000000042ea31: xtest; jne 0x2ea3a; vzeroupper; ret; 
0x0000000000432011: xtest; jne 0x3201a; vzeroupper; ret; 
0x0000000000435ab9: xtest; jne 0x35ac2; vzeroupper; ret; 
0x000000000043622c: xtest; jne 0x36235; vzeroupper; ret; 
0x000000000045a698: xtest; jne 0x5a6a1; vzeroupper; ret; 
0x000000000045f46f: xtest; jne 0x5f478; vzeroupper; ret; 
0x0000000000460701: xtest; jne 0x6070a; vzeroupper; ret; 
0x000000000046136c: xtest; jne 0x61375; vzeroupper; ret; 
0x0000000000467fdc: xtest; jne 0x67fe5; vzeroupper; ret; 
0x000000000040c1eb: xtest; jne 0xc1f4; vzeroupper; ret; 
0x000000000040fa33: xtest; jne 0xfa3c; vzeroupper; ret; 

17140 gadgets found
